; ModuleID = 'CHOLESKY.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BMatrix = type { i32, i32*, i32*, i32, i32, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32, i32*, i32, i32, double**, %union.Entry* }
%union.Entry = type { %struct.Block* }
%struct.Block = type { i32, i32, i32, i32, i32, i32, i32, double, i32, i32*, i32*, double*, %struct.Pair* }
%struct.Pair = type { i32, %struct.Pair* }
%struct.BlockList = type { i32, i32, i32, i32, i32*, double*, %struct.BlockList* }
%struct.taskQ = type { %union.pthread_mutex_t, %struct.Task*, %struct.Task*, %struct.Task*, %struct.Task* }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.Task = type { i32, i32, i32, i32, %struct.Update*, %struct.Task* }
%struct.Update = type { i32, i32, i32, i32, i32, i32, i32*, i32*, double*, %struct.Update* }
%struct.hLock = type { %union.pthread_mutex_t }
%struct.Chunk = type { i32, i32, i32, %struct.Chunk* }
%struct.gpid = type { i32, i32, i32 }
%struct.GlobalMemory = type { %struct.barrier_t, %union.pthread_mutex_t, %union.pthread_mutex_t, [128 x i32] }
%struct.barrier_t = type { i32, i64 }
%struct.SMatrix = type { i32, i32, i32*, i32*, i32*, double* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.MemPool = type { %union.pthread_mutex_t, i32**, i32, i32, i32 }
%struct.LocalCopies = type { double*, i32, i32*, i32*, double*, double*, i32*, %struct.Update*, %struct.Task*, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }

@tree_firstchild = internal global i32* null, align 8
@tree_sibling = internal global i32* null, align 8
@tree_original_firstchild = internal global i32* null, align 8
@tree_original_sibling = internal global i32* null, align 8
@next_in_super = internal global i32* null, align 8
@member_of = internal global i32* null, align 8
@super_parent = internal global i32* null, align 8
@ops_added = internal global i32 0, align 4
@crit = internal global double* null, align 8
@.str = private unnamed_addr constant [27 x i8] c"%d/%d supers before/after\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"%.0f/%.0f (%.2f) ops before/after amalgamation\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"Model says %d ops added, really %.0f\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"Not a valid permutation\0A\00", align 1
@opStats = internal global double* null, align 8
@seq_time = internal global double 0.000000e+00, align 8
@seq_ops = internal global double 0.000000e+00, align 8
@seq_misses = internal global double 0.000000e+00, align 8
@vMiss = internal global i32 0, align 4
@wMiss = internal global i32 0, align 4
@xMiss = internal global i32 0, align 4
@yMiss = internal global i32 0, align 4
@block_start = internal global i32* null, align 8
@all_blocks = internal global i32* null, align 8
@LB = internal global %struct.BMatrix zeroinitializer, align 8
@P_dimi = internal global i32 0, align 4
@P_dimj = internal global i32 0, align 4
@.str.11 = private unnamed_addr constant [19 x i8] c"No redistribution\0A\00", align 1
@.str.1.12 = private unnamed_addr constant [9 x i8] c"Supers: \00", align 1
@.str.2.13 = private unnamed_addr constant [9 x i8] c"Blocks: \00", align 1
@.str.3.14 = private unnamed_addr constant [15 x i8] c"%d partitions\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"%d partitions, %d blocks\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"Block %d has bad structure\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Parent not found\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"Overflow\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"Overflow!!\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"Col %d: %d vs %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"%d,%d: %d\0A\00", align 1
@.str.11.15 = private unnamed_addr constant [9 x i8] c"%d: %d  \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [29 x i8] c"Processor array is %d by %d\0A\00", align 1
@AllBlocks = internal global %struct.BlockList*** null, align 8
@DiagBlock = internal global %struct.BlockList*** null, align 8
@ToReceive = internal global i32** null, align 8
@NReceived = internal global i32** null, align 8
@.str.16 = private unnamed_addr constant [28 x i8] c"**** Termination error ***\0A\00", align 1
@.str.2.17 = private unnamed_addr constant [21 x i8] c"Couldn't find %d,%d\0A\00", align 1
@.str.3.18 = private unnamed_addr constant [18 x i8] c"Sent to wrong PE\0A\00", align 1
@.str.1.19 = private unnamed_addr constant [19 x i8] c"*** Error rem ***\0A\00", align 1
@.str.4.20 = private unnamed_addr constant [15 x i8] c"Bad remaining\0A\00", align 1
@.str.5.21 = private unnamed_addr constant [14 x i8] c"Bad received\0A\00", align 1
@uMiss = internal global i32 0, align 4
@tasks = internal global %struct.taskQ* null, align 8
@updateHash = internal global %struct.Update** null, align 8
@hashLock = internal global %struct.hLock* null, align 8
@.str.32 = private unnamed_addr constant [28 x i8] c"Negative pivot, d[%d] = %f\0A\00", align 1
@chunks_head = internal global %struct.Chunk* null, align 8
@chunks_tail = internal global %struct.Chunk* null, align 8
@tolerance = internal global i32 20, align 4
@divide_lo = internal global double* null, align 8
@domain_ops = internal global double 0.000000e+00, align 8
@divide_hi = internal global double* null, align 8
@.str.33 = private unnamed_addr constant [30 x i8] c"Divide for %d P, %d domains, \00", align 1
@.str.1.34 = private unnamed_addr constant [22 x i8] c"%.2f of work static, \00", align 1
@.str.2.35 = private unnamed_addr constant [26 x i8] c"%.2f eff, (%.2f overall)\0A\00", align 1
@max_block_size = internal global double 0.000000e+00, align 8
@partition = internal global i32* null, align 8
@boundary = internal global i32* null, align 8
@next_in_segment = internal global i32* null, align 8
@next_segment = internal global i32* null, align 8
@sets_affected = internal global i32* null, align 8
@n_affected = internal global i32 0, align 4
@segment_perm = internal global i32* null, align 8
@.str.36 = private unnamed_addr constant [54 x i8] c"%d max height, %.0f ops, %.2f conc, %.2f bl for %d P\0A\00", align 1
@CacheSize = internal global double 1.638400e+04, align 8
@BS = internal global i32 45, align 4
@solution_method = internal global i32 20, align 4
@distribute = internal global i32 -1, align 4
@target_partition_size = internal global i32 0, align 4
@postpass_partition_size = internal global i32 32, align 4
@permutation_method = internal global i32 1, align 4
@join = internal global i32 1, align 4
@scatter_decomposition = internal global i32 0, align 4
@P = internal global i32 1, align 4
@iters = internal global i32 1, align 4
@do_test = internal global i32 0, align 4
@do_stats = internal global i32 0, align 4
@optarg = external global i8*, align 8
@CS = internal global double 0.000000e+00, align 8
@gp = internal global %struct.gpid* null, align 8
@Global = internal global %struct.GlobalMemory* null, align 8
@M = internal global %struct.SMatrix zeroinitializer, align 8
@probname = internal global [80 x i8] zeroinitializer, align 16
@PERM = internal global i32* null, align 8
@INVP = internal global i32* null, align 8
@T = internal global i32* null, align 8
@nz = internal global i32* null, align 8
@node = internal global i32* null, align 8
@domain = internal global i32* null, align 8
@domains = internal global i32* null, align 8
@proc_domains = internal global i32* null, align 8
@stdout = external global %struct._IO_FILE*, align 8
@.str.61 = private unnamed_addr constant [12 x i8] c"B:C:p:D:sth\00", align 1
@.str.1.62 = private unnamed_addr constant [30 x i8] c"Usage: SCHOL <options> file\0A\0A\00", align 1
@.str.2.63 = private unnamed_addr constant [10 x i8] c"options:\0A\00", align 1
@.str.3.64 = private unnamed_addr constant [45 x i8] c"  -Bb : Use a postpass partition size of b.\0A\00", align 1
@.str.4.65 = private unnamed_addr constant [30 x i8] c"  -Cc : Cache size in bytes.\0A\00", align 1
@.str.5.66 = private unnamed_addr constant [35 x i8] c"  -pP : P = number of processors.\0A\00", align 1
@.str.6.67 = private unnamed_addr constant [55 x i8] c"  -s  : Print individual processor timing statistics.\0A\00", align 1
@.str.7.68 = private unnamed_addr constant [22 x i8] c"  -t  : Test output.\0A\00", align 1
@.str.8.69 = private unnamed_addr constant [42 x i8] c"  -h  : Print out command line options.\0A\0A\00", align 1
@.str.9.70 = private unnamed_addr constant [34 x i8] c"Default: SCHOL -p%1d -B%1d -C%1d\0A\00", align 1
@.str.10.71 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11.72 = private unnamed_addr constant [31 x i8] c"Sparse Cholesky Factorization\0A\00", align 1
@.str.12.73 = private unnamed_addr constant [18 x i8] c"     Problem: %s\0A\00", align 1
@.str.13.74 = private unnamed_addr constant [20 x i8] c"     %d Processors\0A\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"     Postpass partition size: %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"     %0.0f byte cache\0A\00", align 1
@.str.16.75 = private unnamed_addr constant [17 x i8] c"true partitions\0A\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"Fan-out, \00", align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"no block copy-across\0A\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"LB domain, \00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"embedded \00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"distribution\0A\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"No ordering\0A\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"before partition\0A\00", align 1
@.str.24 = private unnamed_addr constant [25 x i8] c"%d total domain updates\0A\00", align 1
@.str.25 = private unnamed_addr constant [44 x i8] c"Target partition size %d, postpass size %d\0A\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"%.0f operations for factorization\0A\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"                            PROCESS STATISTICS\0A\00", align 1
@.str.28 = private unnamed_addr constant [21 x i8] c"              Total\0A\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c" Proc         Time \0A\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"    0    %10.0d\0A\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"  %3d    %10d\0A\00", align 1
@.str.32.76 = private unnamed_addr constant [17 x i8] c"  Avg    %10.0f\0A\00", align 1
@.str.33.77 = private unnamed_addr constant [17 x i8] c"  Min    %10.0f\0A\00", align 1
@.str.34 = private unnamed_addr constant [17 x i8] c"  Max    %10.0f\0A\00", align 1
@.str.35 = private unnamed_addr constant [48 x i8] c"                            TIMING INFORMATION\0A\00", align 1
@.str.36.78 = private unnamed_addr constant [42 x i8] c"Start time                        : %16d\0A\00", align 1
@.str.37 = private unnamed_addr constant [42 x i8] c"Initialization finish time        : %16d\0A\00", align 1
@.str.38 = private unnamed_addr constant [42 x i8] c"Overall finish time               : %16d\0A\00", align 1
@.str.39 = private unnamed_addr constant [42 x i8] c"Total time with initialization    : %16d\0A\00", align 1
@.str.40 = private unnamed_addr constant [42 x i8] c"Total time without initialization : %16d\0A\00", align 1
@.str.41 = private unnamed_addr constant [46 x i8] c"                             TESTING RESULTS\0A\00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"Max error is %10.9f\0A\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"PASSED\0A\00", align 1
@firstchild = internal global i32* null, align 8
@child = internal global i32* null, align 8
@work_tree = internal global double* null, align 8
@.str.95 = private unnamed_addr constant [44 x i8] c"%d supers, %4.2f nodes/super, %d max super\0A\00", align 1
@maxm = internal global i32 0, align 4
@stdin = external global %struct._IO_FILE*, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.104 = private unnamed_addr constant [32 x i8] c"NewMatrix %d %d: Out of memory\0A\00", align 1
@.str.1.105 = private unnamed_addr constant [30 x i8] c"Out of memory: NewVector(%d)\0A\00", align 1
@.str.2.106 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3.107 = private unnamed_addr constant [20 x i8] c"Error opening file\0A\00", align 1
@.str.4.108 = private unnamed_addr constant [5 x i8] c"%72c\00", align 1
@.str.5.109 = private unnamed_addr constant [4 x i8] c"%8c\00", align 1
@.str.6.110 = private unnamed_addr constant [5 x i8] c"%14c\00", align 1
@.str.7.111 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.8.112 = private unnamed_addr constant [4 x i8] c"%3c\00", align 1
@.str.9.113 = private unnamed_addr constant [16 x i8] c"Wrong type: %s\0A\00", align 1
@.str.10.114 = private unnamed_addr constant [5 x i8] c"%11c\00", align 1
@.str.11.115 = private unnamed_addr constant [34 x i8] c"This is not an assembled matrix!\0A\00", align 1
@.str.12.116 = private unnamed_addr constant [25 x i8] c"Matrix is not symmetric\0A\00", align 1
@.str.13.117 = private unnamed_addr constant [5 x i8] c"%16c\00", align 1
@.str.14.118 = private unnamed_addr constant [5 x i8] c"%20c\00", align 1
@.str.15.119 = private unnamed_addr constant [23 x i8] c"Missing diagonal: %d: \00", align 1
@.str.16.120 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.17.121 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.18.122 = private unnamed_addr constant [11 x i8] c"Lost some\0A\00", align 1
@mallocP = internal global i32 1, align 4
@machineP = internal global i32 1, align 4
@mem_pool = internal global %struct.MemPool* null, align 8
@.str.131 = private unnamed_addr constant [13 x i8] c"Malloc max: \00", align 1
@.str.1.132 = private unnamed_addr constant [5 x i8] c"%d* \00", align 1
@.str.2.133 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3.134 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.135 = private unnamed_addr constant [33 x i8] c"*** Bad size from malloc %d, %d\0A\00", align 1
@.str.5.136 = private unnamed_addr constant [13 x i8] c"Bad size %d\0A\00", align 1
@.str.6.137 = private unnamed_addr constant [13 x i8] c"Bad home %d\0A\00", align 1
@index_out = internal global i32 0, align 4
@gSyncVar_0 = internal global i32 0, align 4
@gSyncVar_1 = internal global i32 0, align 4
@gSyncVar_2 = internal global i32 0, align 4
@gSyncVarsTotalNum = internal global i32 0, align 4
@counter0 = internal global i32 0, align 4
@counter1 = internal global i32 0, align 4
@firstSync = internal global i8 1, align 1
@mystring = internal global [200 x i8] zeroinitializer, align 16
@switches = internal global [3 x i8] zeroinitializer, align 1
@syncID = internal global [3 x i32] zeroinitializer, align 4

; Function Attrs: nounwind uwtable
define internal i32 @OpsFromSuper(i32 %size, i32 %nz) {
entry:
  %size.addr = alloca i32, align 4
  %nz.addr = alloca i32, align 4
  %ops = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 %nz, i32* %nz.addr, align 4
  store i32 0, i32* %ops, align 4
  %0 = load i32* %size.addr, align 4
  %1 = load i32* %size.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %2 = load i32* %size.addr, align 4
  %mul1 = mul nsw i32 2, %2
  %add2 = add nsw i32 %mul1, 1
  %mul3 = mul nsw i32 %mul, %add2
  %div = sdiv i32 %mul3, 6
  %3 = load i32* %ops, align 4
  %add4 = add nsw i32 %3, %div
  store i32 %add4, i32* %ops, align 4
  %4 = load i32* %size.addr, align 4
  %5 = load i32* %size.addr, align 4
  %mul5 = mul nsw i32 %4, %5
  %6 = load i32* %nz.addr, align 4
  %7 = load i32* %size.addr, align 4
  %sub = sub nsw i32 %6, %7
  %mul6 = mul nsw i32 %mul5, %sub
  %8 = load i32* %ops, align 4
  %add7 = add nsw i32 %8, %mul6
  store i32 %add7, i32* %ops, align 4
  %9 = load i32* %size.addr, align 4
  %mul8 = mul nsw i32 2, %9
  %10 = load i32* %nz.addr, align 4
  %11 = load i32* %size.addr, align 4
  %sub9 = sub nsw i32 %10, %11
  %mul10 = mul nsw i32 %mul8, %sub9
  %12 = load i32* %nz.addr, align 4
  %13 = load i32* %size.addr, align 4
  %sub11 = sub nsw i32 %12, %13
  %add12 = add nsw i32 %sub11, 1
  %mul13 = mul nsw i32 %mul10, %add12
  %div14 = sdiv i32 %mul13, 2
  %14 = load i32* %ops, align 4
  %add15 = add nsw i32 %14, %div14
  store i32 %add15, i32* %ops, align 4
  %15 = load i32* %ops, align 4
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @CountSupers(i32 %cols, i32* %node) {
entry:
  %cols.addr = alloca i32, align 4
  %node.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %supers = alloca i32, align 4
  store i32 %cols, i32* %cols.addr, align 4
  store i32* %node, i32** %node.addr, align 8
  store i32 0, i32* %supers, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %cols.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %supers, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %supers, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** %node.addr, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %6 = load i32* %i, align 4
  %add = add nsw i32 %6, %5
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %supers, align 4
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @Amalgamate2(i32 %join, %struct.SMatrix* byval align 8 %M, i32* %T, i32* %nz, i32* %node, i32* %domain, i32 %target_size) {
entry:
  %retval = alloca i32, align 4
  %join.addr = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %node.addr = alloca i32*, align 8
  %domain.addr = alloca i32*, align 8
  %target_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %counter = alloca i32, align 4
  %supers_before = alloca i32, align 4
  %supers_after = alloca i32, align 4
  %g_ops_before = alloca double, align 8
  store i32 %join, i32* %join.addr, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %node, i32** %node.addr, align 8
  store i32* %domain, i32** %domain.addr, align 8
  store i32 %target_size, i32* %target_size.addr, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** @tree_firstchild, align 8
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %2 = load i32* %n1, align 4
  %add2 = add nsw i32 %2, 1
  %conv3 = sext i32 %add2 to i64
  %mul4 = mul i64 %conv3, 4
  %call5 = call i8* @malloc(i64 %mul4)
  %3 = bitcast i8* %call5 to i32*
  store i32* %3, i32** @tree_sibling, align 8
  %n6 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %4 = load i32* %n6, align 4
  %add7 = add nsw i32 %4, 1
  %conv8 = sext i32 %add7 to i64
  %mul9 = mul i64 %conv8, 4
  %call10 = call i8* @malloc(i64 %mul9)
  %5 = bitcast i8* %call10 to i32*
  store i32* %5, i32** @tree_original_firstchild, align 8
  %n11 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %6 = load i32* %n11, align 4
  %add12 = add nsw i32 %6, 1
  %conv13 = sext i32 %add12 to i64
  %mul14 = mul i64 %conv13, 4
  %call15 = call i8* @malloc(i64 %mul14)
  %7 = bitcast i8* %call15 to i32*
  store i32* %7, i32** @tree_original_sibling, align 8
  %n16 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %8 = load i32* %n16, align 4
  %add17 = add nsw i32 %8, 1
  %conv18 = sext i32 %add17 to i64
  %mul19 = mul i64 %conv18, 4
  %call20 = call i8* @malloc(i64 %mul19)
  %9 = bitcast i8* %call20 to i32*
  store i32* %9, i32** @next_in_super, align 8
  %n21 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %10 = load i32* %n21, align 4
  %add22 = add nsw i32 %10, 1
  %conv23 = sext i32 %add22 to i64
  %mul24 = mul i64 %conv23, 4
  %call25 = call i8* @malloc(i64 %mul24)
  %11 = bitcast i8* %call25 to i32*
  store i32* %11, i32** @member_of, align 8
  %n26 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %12 = load i32* %n26, align 4
  %add27 = add nsw i32 %12, 1
  %conv28 = sext i32 %add27 to i64
  %mul29 = mul i64 %conv28, 4
  %call30 = call i8* @malloc(i64 %mul29)
  %13 = bitcast i8* %call30 to i32*
  store i32* %13, i32** @super_parent, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32* %i, align 4
  %n31 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %15 = load i32* %n31, align 4
  %cmp = icmp sle i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load i32** @tree_firstchild, align 8
  %arrayidx = getelementptr inbounds i32* %17, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc.55, %for.end
  %19 = load i32* %i, align 4
  %n34 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %20 = load i32* %n34, align 4
  %cmp35 = icmp slt i32 %19, %20
  br i1 %cmp35, label %for.body.37, label %for.end.59

for.body.37:                                      ; preds = %for.cond.33
  %21 = load i32* %i, align 4
  %22 = load i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %23 = load i32** %node.addr, align 8
  %arrayidx39 = getelementptr inbounds i32* %23, i64 %idxprom38
  %24 = load i32* %arrayidx39, align 4
  %add40 = add nsw i32 %21, %24
  %sub = sub nsw i32 %add40, 1
  %idxprom41 = sext i32 %sub to i64
  %25 = load i32** %T.addr, align 8
  %arrayidx42 = getelementptr inbounds i32* %25, i64 %idxprom41
  %26 = load i32* %arrayidx42, align 4
  %27 = load i32* %i, align 4
  %idxprom43 = sext i32 %27 to i64
  %28 = load i32** @super_parent, align 8
  %arrayidx44 = getelementptr inbounds i32* %28, i64 %idxprom43
  store i32 %26, i32* %arrayidx44, align 4
  %29 = load i32* %i, align 4
  %idxprom45 = sext i32 %29 to i64
  %30 = load i32** @super_parent, align 8
  %arrayidx46 = getelementptr inbounds i32* %30, i64 %idxprom45
  %31 = load i32* %arrayidx46, align 4
  %idxprom47 = sext i32 %31 to i64
  %32 = load i32** @tree_firstchild, align 8
  %arrayidx48 = getelementptr inbounds i32* %32, i64 %idxprom47
  %33 = load i32* %arrayidx48, align 4
  %34 = load i32* %i, align 4
  %idxprom49 = sext i32 %34 to i64
  %35 = load i32** @tree_sibling, align 8
  %arrayidx50 = getelementptr inbounds i32* %35, i64 %idxprom49
  store i32 %33, i32* %arrayidx50, align 4
  %36 = load i32* %i, align 4
  %37 = load i32* %i, align 4
  %idxprom51 = sext i32 %37 to i64
  %38 = load i32** @super_parent, align 8
  %arrayidx52 = getelementptr inbounds i32* %38, i64 %idxprom51
  %39 = load i32* %arrayidx52, align 4
  %idxprom53 = sext i32 %39 to i64
  %40 = load i32** @tree_firstchild, align 8
  %arrayidx54 = getelementptr inbounds i32* %40, i64 %idxprom53
  store i32 %36, i32* %arrayidx54, align 4
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.body.37
  %41 = load i32* %i, align 4
  %idxprom56 = sext i32 %41 to i64
  %42 = load i32** %node.addr, align 8
  %arrayidx57 = getelementptr inbounds i32* %42, i64 %idxprom56
  %43 = load i32* %arrayidx57, align 4
  %44 = load i32* %i, align 4
  %add58 = add nsw i32 %44, %43
  store i32 %add58, i32* %i, align 4
  br label %for.cond.33

for.end.59:                                       ; preds = %for.cond.33
  %n60 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %45 = load i32* %n60, align 4
  %n61 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %46 = load i32* %n61, align 4
  %idxprom62 = sext i32 %46 to i64
  %47 = load i32** @super_parent, align 8
  %arrayidx63 = getelementptr inbounds i32* %47, i64 %idxprom62
  store i32 %45, i32* %arrayidx63, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc.77, %for.end.59
  %48 = load i32* %i, align 4
  %n65 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %49 = load i32* %n65, align 4
  %cmp66 = icmp sle i32 %48, %49
  br i1 %cmp66, label %for.body.68, label %for.end.79

for.body.68:                                      ; preds = %for.cond.64
  %50 = load i32* %i, align 4
  %idxprom69 = sext i32 %50 to i64
  %51 = load i32** @tree_firstchild, align 8
  %arrayidx70 = getelementptr inbounds i32* %51, i64 %idxprom69
  %52 = load i32* %arrayidx70, align 4
  %53 = load i32* %i, align 4
  %idxprom71 = sext i32 %53 to i64
  %54 = load i32** @tree_original_firstchild, align 8
  %arrayidx72 = getelementptr inbounds i32* %54, i64 %idxprom71
  store i32 %52, i32* %arrayidx72, align 4
  %55 = load i32* %i, align 4
  %idxprom73 = sext i32 %55 to i64
  %56 = load i32** @tree_sibling, align 8
  %arrayidx74 = getelementptr inbounds i32* %56, i64 %idxprom73
  %57 = load i32* %arrayidx74, align 4
  %58 = load i32* %i, align 4
  %idxprom75 = sext i32 %58 to i64
  %59 = load i32** @tree_original_sibling, align 8
  %arrayidx76 = getelementptr inbounds i32* %59, i64 %idxprom75
  store i32 %57, i32* %arrayidx76, align 4
  br label %for.inc.77

for.inc.77:                                       ; preds = %for.body.68
  %60 = load i32* %i, align 4
  %inc78 = add nsw i32 %60, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond.64

for.end.79:                                       ; preds = %for.cond.64
  store i32 0, i32* %i, align 4
  br label %for.cond.80

for.cond.80:                                      ; preds = %for.inc.106, %for.end.79
  %61 = load i32* %i, align 4
  %n81 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %62 = load i32* %n81, align 4
  %cmp82 = icmp slt i32 %61, %62
  br i1 %cmp82, label %for.body.84, label %for.end.110

for.body.84:                                      ; preds = %for.cond.80
  %63 = load i32* %i, align 4
  store i32 %63, i32* %j, align 4
  br label %for.cond.85

for.cond.85:                                      ; preds = %for.inc.97, %for.body.84
  %64 = load i32* %j, align 4
  %65 = load i32* %i, align 4
  %66 = load i32* %i, align 4
  %idxprom86 = sext i32 %66 to i64
  %67 = load i32** %node.addr, align 8
  %arrayidx87 = getelementptr inbounds i32* %67, i64 %idxprom86
  %68 = load i32* %arrayidx87, align 4
  %add88 = add nsw i32 %65, %68
  %cmp89 = icmp slt i32 %64, %add88
  br i1 %cmp89, label %for.body.91, label %for.end.99

for.body.91:                                      ; preds = %for.cond.85
  %69 = load i32* %j, align 4
  %add92 = add nsw i32 %69, 1
  %70 = load i32* %j, align 4
  %idxprom93 = sext i32 %70 to i64
  %71 = load i32** @next_in_super, align 8
  %arrayidx94 = getelementptr inbounds i32* %71, i64 %idxprom93
  store i32 %add92, i32* %arrayidx94, align 4
  %72 = load i32* %i, align 4
  %73 = load i32* %j, align 4
  %idxprom95 = sext i32 %73 to i64
  %74 = load i32** @member_of, align 8
  %arrayidx96 = getelementptr inbounds i32* %74, i64 %idxprom95
  store i32 %72, i32* %arrayidx96, align 4
  br label %for.inc.97

for.inc.97:                                       ; preds = %for.body.91
  %75 = load i32* %j, align 4
  %inc98 = add nsw i32 %75, 1
  store i32 %inc98, i32* %j, align 4
  br label %for.cond.85

for.end.99:                                       ; preds = %for.cond.85
  %76 = load i32* %i, align 4
  %77 = load i32* %i, align 4
  %idxprom100 = sext i32 %77 to i64
  %78 = load i32** %node.addr, align 8
  %arrayidx101 = getelementptr inbounds i32* %78, i64 %idxprom100
  %79 = load i32* %arrayidx101, align 4
  %add102 = add nsw i32 %76, %79
  %sub103 = sub nsw i32 %add102, 1
  %idxprom104 = sext i32 %sub103 to i64
  %80 = load i32** @next_in_super, align 8
  %arrayidx105 = getelementptr inbounds i32* %80, i64 %idxprom104
  store i32 -1, i32* %arrayidx105, align 4
  br label %for.inc.106

for.inc.106:                                      ; preds = %for.end.99
  %81 = load i32* %i, align 4
  %idxprom107 = sext i32 %81 to i64
  %82 = load i32** %node.addr, align 8
  %arrayidx108 = getelementptr inbounds i32* %82, i64 %idxprom107
  %83 = load i32* %arrayidx108, align 4
  %84 = load i32* %i, align 4
  %add109 = add nsw i32 %84, %83
  store i32 %add109, i32* %i, align 4
  br label %for.cond.80

for.end.110:                                      ; preds = %for.cond.80
  %n111 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %85 = load i32* %n111, align 4
  %n112 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %86 = load i32* %n112, align 4
  %idxprom113 = sext i32 %86 to i64
  %87 = load i32** @member_of, align 8
  %arrayidx114 = getelementptr inbounds i32* %87, i64 %idxprom113
  store i32 %85, i32* %arrayidx114, align 4
  %n115 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %88 = load i32* %n115, align 4
  %89 = load i32** %node.addr, align 8
  %call116 = call i32 @CountSupers(i32 %88, i32* %89)
  store i32 %call116, i32* %supers_before, align 4
  store i32 0, i32* @ops_added, align 4
  %n117 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %90 = load i32* %n117, align 4
  %idxprom118 = sext i32 %90 to i64
  %91 = load double** @work_tree, align 8
  %arrayidx119 = getelementptr inbounds double* %91, i64 %idxprom118
  %92 = load double* %arrayidx119, align 8
  store double %92, double* %g_ops_before, align 8
  %n120 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %93 = load i32* %n120, align 4
  %idxprom121 = sext i32 %93 to i64
  %94 = load i32** @tree_original_firstchild, align 8
  %arrayidx122 = getelementptr inbounds i32* %94, i64 %idxprom121
  %95 = load i32* %arrayidx122, align 4
  store i32 %95, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end.110
  %96 = load i32* %i, align 4
  %cmp123 = icmp ne i32 %96, -1
  br i1 %cmp123, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %97 = load i32* %join.addr, align 4
  %98 = load i32* %i, align 4
  %99 = load i32** %nz.addr, align 8
  %100 = load i32** %node.addr, align 8
  %101 = load i32** %domain.addr, align 8
  %102 = load i32* %target_size.addr, align 4
  %call125 = call i32 @ConsiderMerge(i32 %97, i32 %98, %struct.SMatrix* byval align 8 %M, i32* %99, i32* %100, i32* %101, i32 %102, i32 1)
  %103 = load i32* %i, align 4
  %idxprom126 = sext i32 %103 to i64
  %104 = load i32** @tree_original_sibling, align 8
  %arrayidx127 = getelementptr inbounds i32* %104, i64 %idxprom126
  %105 = load i32* %arrayidx127, align 4
  store i32 %105, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %n128 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %106 = load i32* %n128, align 4
  store i32 %106, i32* %counter, align 4
  %n129 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %107 = load i32* %n129, align 4
  %108 = load i32** %node.addr, align 8
  %109 = load i32** @PERM, align 8
  %call130 = call i32 @ReorderMatrix(%struct.SMatrix* byval align 8 %M, i32 %107, i32* %108, i32* %counter, i32* %109)
  %n131 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %110 = load i32* %n131, align 4
  %111 = load i32** @PERM, align 8
  %112 = load i32** @INVP, align 8
  %call132 = call i32 @InvertPerm(i32 %110, i32* %111, i32* %112)
  %113 = load i32** @PERM, align 8
  %114 = load i32** %node.addr, align 8
  %115 = load i32** %nz.addr, align 8
  %116 = load i32** %T.addr, align 8
  %call133 = call i32 @FixNodeNZAndT(%struct.SMatrix* byval align 8 %M, i32* %113, i32* %114, i32* %115, i32* %116)
  %117 = load i32** @tree_firstchild, align 8
  %call134 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %117)
  %118 = load i32** @tree_sibling, align 8
  %call135 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %118)
  %119 = load i32** @tree_original_firstchild, align 8
  %call136 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %119)
  %120 = load i32** @tree_original_sibling, align 8
  %call137 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %120)
  %121 = load i32** @next_in_super, align 8
  %call138 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %121)
  %122 = load i32** @member_of, align 8
  %call139 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %122)
  %123 = load i32** @super_parent, align 8
  %call140 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %123)
  %124 = load i32** %T.addr, align 8
  %n141 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %125 = load i32* %n141, align 4
  %126 = load i32** @firstchild, align 8
  %127 = load i32** @child, align 8
  %call142 = call i32 (i32*, i32, i32*, i32*, ...) *bitcast (i32 (i32*, i32, i32*, i32*)* @ParentToChild to i32 (i32*, i32, i32*, i32*, ...)*)(i32* %124, i32 %125, i32* %126, i32* %127)
  %128 = load i32** %nz.addr, align 8
  %129 = load double** @work_tree, align 8
  %call143 = call i32 (%struct.SMatrix*, i32*, double*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, double*)* @ComputeWorkTree to i32 (%struct.SMatrix*, i32*, double*, ...)*)(%struct.SMatrix* byval align 8 %M, i32* %128, double* %129)
  %n144 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %130 = load i32* %n144, align 4
  %131 = load i32** %node.addr, align 8
  %call145 = call i32 @CountSupers(i32 %130, i32* %131)
  store i32 %call145, i32* %supers_after, align 4
  %132 = load i32* %supers_before, align 4
  %133 = load i32* %supers_after, align 4
  %call146 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([27 x i8]* @.str, i32 0, i32 0), i32 %132, i32 %133)
  %134 = load double* %g_ops_before, align 8
  %n147 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %135 = load i32* %n147, align 4
  %idxprom148 = sext i32 %135 to i64
  %136 = load double** @work_tree, align 8
  %arrayidx149 = getelementptr inbounds double* %136, i64 %idxprom148
  %137 = load double* %arrayidx149, align 8
  %n150 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %138 = load i32* %n150, align 4
  %idxprom151 = sext i32 %138 to i64
  %139 = load double** @work_tree, align 8
  %arrayidx152 = getelementptr inbounds double* %139, i64 %idxprom151
  %140 = load double* %arrayidx152, align 8
  %141 = load double* %g_ops_before, align 8
  %div = fdiv double %140, %141
  %call153 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.1, i32 0, i32 0), double %134, double %137, double %div)
  %142 = load i32* @ops_added, align 4
  %conv154 = sitofp i32 %142 to double
  %n155 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %143 = load i32* %n155, align 4
  %idxprom156 = sext i32 %143 to i64
  %144 = load double** @work_tree, align 8
  %arrayidx157 = getelementptr inbounds double* %144, i64 %idxprom156
  %145 = load double* %arrayidx157, align 8
  %146 = load double* %g_ops_before, align 8
  %sub158 = fsub double %145, %146
  %cmp159 = fcmp une double %conv154, %sub158
  br i1 %cmp159, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %147 = load i32* @ops_added, align 4
  %n161 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %148 = load i32* %n161, align 4
  %idxprom162 = sext i32 %148 to i64
  %149 = load double** @work_tree, align 8
  %arrayidx163 = getelementptr inbounds double* %149, i64 %idxprom162
  %150 = load double* %arrayidx163, align 8
  %151 = load double* %g_ops_before, align 8
  %sub164 = fsub double %150, %151
  %call165 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([38 x i8]* @.str.2, i32 0, i32 0), i32 %147, double %sub164)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %152 = load i32* %retval
  ret i32 %152
}

declare i8* @malloc(i64)

declare i32 @free(...)

declare i32 @printf(i8*, ...)

; Function Attrs: nounwind uwtable
define internal i32 @ConsiderMerge(i32 %join, i32 %super, %struct.SMatrix* byval align 8 %M, i32* %nz, i32* %node, i32* %domain, i32 %target_size, i32 %traversal_order) {
entry:
  %retval = alloca i32, align 4
  %join.addr = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %nz.addr = alloca i32*, align 8
  %node.addr = alloca i32*, align 8
  %domain.addr = alloca i32*, align 8
  %target_size.addr = alloca i32, align 4
  %traversal_order.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %parent = alloca i32, align 4
  %ops_before = alloca i32, align 4
  %ops_after = alloca i32, align 4
  %do_merge = alloca i32, align 4
  %do_merge_simple = alloca i32, align 4
  %possible = alloca i32, align 4
  %allow_critical_to_grow = alloca i32, align 4
  %time_before = alloca double, align 8
  %time_after = alloca double, align 8
  %dummy = alloca double, align 8
  %simple_diff = alloca double, align 8
  %path_grows = alloca double, align 8
  store i32 %join, i32* %join.addr, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %node, i32** %node.addr, align 8
  store i32* %domain, i32** %domain.addr, align 8
  store i32 %target_size, i32* %target_size.addr, align 4
  store i32 %traversal_order, i32* %traversal_order.addr, align 4
  %0 = load i32* %super.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** @member_of, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %super.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end.166, %entry
  %3 = load i32* %super.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i32** @super_parent, align 8
  %arrayidx2 = getelementptr inbounds i32* %4, i64 %idxprom1
  %5 = load i32* %arrayidx2, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %6 = load i32* %n, align 4
  %cmp = icmp eq i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %7 = load i32* %super.addr, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32** @super_parent, align 8
  %arrayidx4 = getelementptr inbounds i32* %8, i64 %idxprom3
  %9 = load i32* %arrayidx4, align 4
  store i32 %9, i32* %parent, align 4
  %10 = load i32* %super.addr, align 4
  %idxprom5 = sext i32 %10 to i64
  %11 = load i32** %node.addr, align 8
  %arrayidx6 = getelementptr inbounds i32* %11, i64 %idxprom5
  %12 = load i32* %arrayidx6, align 4
  %13 = load i32* %super.addr, align 4
  %idxprom7 = sext i32 %13 to i64
  %14 = load i32** %nz.addr, align 8
  %arrayidx8 = getelementptr inbounds i32* %14, i64 %idxprom7
  %15 = load i32* %arrayidx8, align 4
  %call = call i32 @OpsFromSuper(i32 %12, i32 %15)
  store i32 %call, i32* %ops_before, align 4
  %16 = load i32* %super.addr, align 4
  %idxprom9 = sext i32 %16 to i64
  %17 = load i32** %node.addr, align 8
  %arrayidx10 = getelementptr inbounds i32* %17, i64 %idxprom9
  %18 = load i32* %arrayidx10, align 4
  %19 = load i32* %parent, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load i32** %nz.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %20, i64 %idxprom11
  %21 = load i32* %arrayidx12, align 4
  %22 = load i32* %super.addr, align 4
  %idxprom13 = sext i32 %22 to i64
  %23 = load i32** %node.addr, align 8
  %arrayidx14 = getelementptr inbounds i32* %23, i64 %idxprom13
  %24 = load i32* %arrayidx14, align 4
  %add = add nsw i32 %21, %24
  %call15 = call i32 @OpsFromSuper(i32 %18, i32 %add)
  store i32 %call15, i32* %ops_after, align 4
  store double 0.000000e+00, double* %time_before, align 8
  %25 = load i32* %super.addr, align 4
  %idxprom16 = sext i32 %25 to i64
  %26 = load i32** %node.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %26, i64 %idxprom16
  %27 = load i32* %arrayidx17, align 4
  %28 = load i32* %super.addr, align 4
  %idxprom18 = sext i32 %28 to i64
  %29 = load i32** %nz.addr, align 8
  %arrayidx19 = getelementptr inbounds i32* %29, i64 %idxprom18
  %30 = load i32* %arrayidx19, align 4
  %call20 = call i32 (i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*, double*)* @PDIV to i32 (i32, i32, double*, double*, double*, ...)*)(i32 %27, i32 %30, double* %dummy, double* %dummy, double* %time_before)
  %31 = load i32* %super.addr, align 4
  %idxprom21 = sext i32 %31 to i64
  %32 = load i32** %node.addr, align 8
  %arrayidx22 = getelementptr inbounds i32* %32, i64 %idxprom21
  %33 = load i32* %arrayidx22, align 4
  %34 = load i32* %super.addr, align 4
  %idxprom23 = sext i32 %34 to i64
  %35 = load i32** %nz.addr, align 8
  %arrayidx24 = getelementptr inbounds i32* %35, i64 %idxprom23
  %36 = load i32* %arrayidx24, align 4
  %37 = load i32* %super.addr, align 4
  %idxprom25 = sext i32 %37 to i64
  %38 = load i32** %node.addr, align 8
  %arrayidx26 = getelementptr inbounds i32* %38, i64 %idxprom25
  %39 = load i32* %arrayidx26, align 4
  %sub = sub nsw i32 %36, %39
  %40 = load i32* %super.addr, align 4
  %idxprom27 = sext i32 %40 to i64
  %41 = load i32** %nz.addr, align 8
  %arrayidx28 = getelementptr inbounds i32* %41, i64 %idxprom27
  %42 = load i32* %arrayidx28, align 4
  %43 = load i32* %super.addr, align 4
  %idxprom29 = sext i32 %43 to i64
  %44 = load i32** %node.addr, align 8
  %arrayidx30 = getelementptr inbounds i32* %44, i64 %idxprom29
  %45 = load i32* %arrayidx30, align 4
  %sub31 = sub nsw i32 %42, %45
  %call32 = call i32 (i32, i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, i32, double*, double*, double*)* @PMOD to i32 (i32, i32, i32, double*, double*, double*, ...)*)(i32 %33, i32 %sub, i32 %sub31, double* %dummy, double* %dummy, double* %time_before)
  %46 = load i32* %super.addr, align 4
  %idxprom33 = sext i32 %46 to i64
  %47 = load i32** %nz.addr, align 8
  %arrayidx34 = getelementptr inbounds i32* %47, i64 %idxprom33
  %48 = load i32* %arrayidx34, align 4
  %49 = load i32* %super.addr, align 4
  %idxprom35 = sext i32 %49 to i64
  %50 = load i32** %node.addr, align 8
  %arrayidx36 = getelementptr inbounds i32* %50, i64 %idxprom35
  %51 = load i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %48, %51
  %52 = load i32* %super.addr, align 4
  %idxprom38 = sext i32 %52 to i64
  %53 = load i32** %nz.addr, align 8
  %arrayidx39 = getelementptr inbounds i32* %53, i64 %idxprom38
  %54 = load i32* %arrayidx39, align 4
  %55 = load i32* %super.addr, align 4
  %idxprom40 = sext i32 %55 to i64
  %56 = load i32** %node.addr, align 8
  %arrayidx41 = getelementptr inbounds i32* %56, i64 %idxprom40
  %57 = load i32* %arrayidx41, align 4
  %sub42 = sub nsw i32 %54, %57
  %call43 = call i32 (i32, i32, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*)* @PADD to i32 (i32, i32, double*, double*, ...)*)(i32 %sub37, i32 %sub42, double* %dummy, double* %time_before)
  %58 = load i32* %parent, align 4
  %idxprom44 = sext i32 %58 to i64
  %59 = load i32** %node.addr, align 8
  %arrayidx45 = getelementptr inbounds i32* %59, i64 %idxprom44
  %60 = load i32* %arrayidx45, align 4
  %61 = load i32* %parent, align 4
  %idxprom46 = sext i32 %61 to i64
  %62 = load i32** %nz.addr, align 8
  %arrayidx47 = getelementptr inbounds i32* %62, i64 %idxprom46
  %63 = load i32* %arrayidx47, align 4
  %call48 = call i32 (i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*, double*)* @PDIV to i32 (i32, i32, double*, double*, double*, ...)*)(i32 %60, i32 %63, double* %dummy, double* %dummy, double* %time_before)
  %64 = load i32* %parent, align 4
  %idxprom49 = sext i32 %64 to i64
  %65 = load i32** %node.addr, align 8
  %arrayidx50 = getelementptr inbounds i32* %65, i64 %idxprom49
  %66 = load i32* %arrayidx50, align 4
  %67 = load i32* %parent, align 4
  %idxprom51 = sext i32 %67 to i64
  %68 = load i32** %nz.addr, align 8
  %arrayidx52 = getelementptr inbounds i32* %68, i64 %idxprom51
  %69 = load i32* %arrayidx52, align 4
  %70 = load i32* %parent, align 4
  %idxprom53 = sext i32 %70 to i64
  %71 = load i32** %node.addr, align 8
  %arrayidx54 = getelementptr inbounds i32* %71, i64 %idxprom53
  %72 = load i32* %arrayidx54, align 4
  %sub55 = sub nsw i32 %69, %72
  %73 = load i32* %parent, align 4
  %idxprom56 = sext i32 %73 to i64
  %74 = load i32** %nz.addr, align 8
  %arrayidx57 = getelementptr inbounds i32* %74, i64 %idxprom56
  %75 = load i32* %arrayidx57, align 4
  %76 = load i32* %parent, align 4
  %idxprom58 = sext i32 %76 to i64
  %77 = load i32** %node.addr, align 8
  %arrayidx59 = getelementptr inbounds i32* %77, i64 %idxprom58
  %78 = load i32* %arrayidx59, align 4
  %sub60 = sub nsw i32 %75, %78
  %call61 = call i32 (i32, i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, i32, double*, double*, double*)* @PMOD to i32 (i32, i32, i32, double*, double*, double*, ...)*)(i32 %66, i32 %sub55, i32 %sub60, double* %dummy, double* %dummy, double* %time_before)
  %79 = load i32* %parent, align 4
  %idxprom62 = sext i32 %79 to i64
  %80 = load i32** %nz.addr, align 8
  %arrayidx63 = getelementptr inbounds i32* %80, i64 %idxprom62
  %81 = load i32* %arrayidx63, align 4
  %82 = load i32* %parent, align 4
  %idxprom64 = sext i32 %82 to i64
  %83 = load i32** %node.addr, align 8
  %arrayidx65 = getelementptr inbounds i32* %83, i64 %idxprom64
  %84 = load i32* %arrayidx65, align 4
  %sub66 = sub nsw i32 %81, %84
  %85 = load i32* %parent, align 4
  %idxprom67 = sext i32 %85 to i64
  %86 = load i32** %nz.addr, align 8
  %arrayidx68 = getelementptr inbounds i32* %86, i64 %idxprom67
  %87 = load i32* %arrayidx68, align 4
  %88 = load i32* %parent, align 4
  %idxprom69 = sext i32 %88 to i64
  %89 = load i32** %node.addr, align 8
  %arrayidx70 = getelementptr inbounds i32* %89, i64 %idxprom69
  %90 = load i32* %arrayidx70, align 4
  %sub71 = sub nsw i32 %87, %90
  %call72 = call i32 (i32, i32, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*)* @PADD to i32 (i32, i32, double*, double*, ...)*)(i32 %sub66, i32 %sub71, double* %dummy, double* %time_before)
  store double 0.000000e+00, double* %time_after, align 8
  %91 = load i32* %super.addr, align 4
  %idxprom73 = sext i32 %91 to i64
  %92 = load i32** %node.addr, align 8
  %arrayidx74 = getelementptr inbounds i32* %92, i64 %idxprom73
  %93 = load i32* %arrayidx74, align 4
  %94 = load i32* %parent, align 4
  %idxprom75 = sext i32 %94 to i64
  %95 = load i32** %node.addr, align 8
  %arrayidx76 = getelementptr inbounds i32* %95, i64 %idxprom75
  %96 = load i32* %arrayidx76, align 4
  %add77 = add nsw i32 %93, %96
  %97 = load i32* %super.addr, align 4
  %idxprom78 = sext i32 %97 to i64
  %98 = load i32** %node.addr, align 8
  %arrayidx79 = getelementptr inbounds i32* %98, i64 %idxprom78
  %99 = load i32* %arrayidx79, align 4
  %100 = load i32* %parent, align 4
  %idxprom80 = sext i32 %100 to i64
  %101 = load i32** %nz.addr, align 8
  %arrayidx81 = getelementptr inbounds i32* %101, i64 %idxprom80
  %102 = load i32* %arrayidx81, align 4
  %add82 = add nsw i32 %99, %102
  %call83 = call i32 (i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*, double*)* @PDIV to i32 (i32, i32, double*, double*, double*, ...)*)(i32 %add77, i32 %add82, double* %dummy, double* %dummy, double* %time_after)
  %103 = load i32* %super.addr, align 4
  %idxprom84 = sext i32 %103 to i64
  %104 = load i32** %node.addr, align 8
  %arrayidx85 = getelementptr inbounds i32* %104, i64 %idxprom84
  %105 = load i32* %arrayidx85, align 4
  %106 = load i32* %parent, align 4
  %idxprom86 = sext i32 %106 to i64
  %107 = load i32** %node.addr, align 8
  %arrayidx87 = getelementptr inbounds i32* %107, i64 %idxprom86
  %108 = load i32* %arrayidx87, align 4
  %add88 = add nsw i32 %105, %108
  %109 = load i32* %parent, align 4
  %idxprom89 = sext i32 %109 to i64
  %110 = load i32** %nz.addr, align 8
  %arrayidx90 = getelementptr inbounds i32* %110, i64 %idxprom89
  %111 = load i32* %arrayidx90, align 4
  %112 = load i32* %parent, align 4
  %idxprom91 = sext i32 %112 to i64
  %113 = load i32** %node.addr, align 8
  %arrayidx92 = getelementptr inbounds i32* %113, i64 %idxprom91
  %114 = load i32* %arrayidx92, align 4
  %sub93 = sub nsw i32 %111, %114
  %115 = load i32* %parent, align 4
  %idxprom94 = sext i32 %115 to i64
  %116 = load i32** %nz.addr, align 8
  %arrayidx95 = getelementptr inbounds i32* %116, i64 %idxprom94
  %117 = load i32* %arrayidx95, align 4
  %118 = load i32* %parent, align 4
  %idxprom96 = sext i32 %118 to i64
  %119 = load i32** %node.addr, align 8
  %arrayidx97 = getelementptr inbounds i32* %119, i64 %idxprom96
  %120 = load i32* %arrayidx97, align 4
  %sub98 = sub nsw i32 %117, %120
  %call99 = call i32 (i32, i32, i32, double*, double*, double*, ...) *bitcast (i32 (i32, i32, i32, double*, double*, double*)* @PMOD to i32 (i32, i32, i32, double*, double*, double*, ...)*)(i32 %add88, i32 %sub93, i32 %sub98, double* %dummy, double* %dummy, double* %time_after)
  %121 = load i32* %parent, align 4
  %idxprom100 = sext i32 %121 to i64
  %122 = load i32** %nz.addr, align 8
  %arrayidx101 = getelementptr inbounds i32* %122, i64 %idxprom100
  %123 = load i32* %arrayidx101, align 4
  %124 = load i32* %parent, align 4
  %idxprom102 = sext i32 %124 to i64
  %125 = load i32** %node.addr, align 8
  %arrayidx103 = getelementptr inbounds i32* %125, i64 %idxprom102
  %126 = load i32* %arrayidx103, align 4
  %sub104 = sub nsw i32 %123, %126
  %127 = load i32* %parent, align 4
  %idxprom105 = sext i32 %127 to i64
  %128 = load i32** %nz.addr, align 8
  %arrayidx106 = getelementptr inbounds i32* %128, i64 %idxprom105
  %129 = load i32* %arrayidx106, align 4
  %130 = load i32* %parent, align 4
  %idxprom107 = sext i32 %130 to i64
  %131 = load i32** %node.addr, align 8
  %arrayidx108 = getelementptr inbounds i32* %131, i64 %idxprom107
  %132 = load i32* %arrayidx108, align 4
  %sub109 = sub nsw i32 %129, %132
  %call110 = call i32 (i32, i32, double*, double*, ...) *bitcast (i32 (i32, i32, double*, double*)* @PADD to i32 (i32, i32, double*, double*, ...)*)(i32 %sub104, i32 %sub109, double* %dummy, double* %time_after)
  %133 = load i32* %ops_after, align 4
  %134 = load i32* %ops_before, align 4
  %sub111 = sub nsw i32 %133, %134
  %conv = sitofp i32 %sub111 to double
  %135 = load i32* %super.addr, align 4
  %idxprom112 = sext i32 %135 to i64
  %136 = load i32** %nz.addr, align 8
  %arrayidx113 = getelementptr inbounds i32* %136, i64 %idxprom112
  %137 = load i32* %arrayidx113, align 4
  %138 = load i32* %super.addr, align 4
  %idxprom114 = sext i32 %138 to i64
  %139 = load i32** %node.addr, align 8
  %arrayidx115 = getelementptr inbounds i32* %139, i64 %idxprom114
  %140 = load i32* %arrayidx115, align 4
  %sub116 = sub nsw i32 %137, %140
  %conv117 = sitofp i32 %sub116 to double
  %mul = fmul double 1.500000e+01, %conv117
  %141 = load i32* %super.addr, align 4
  %idxprom118 = sext i32 %141 to i64
  %142 = load i32** %nz.addr, align 8
  %arrayidx119 = getelementptr inbounds i32* %142, i64 %idxprom118
  %143 = load i32* %arrayidx119, align 4
  %144 = load i32* %super.addr, align 4
  %idxprom120 = sext i32 %144 to i64
  %145 = load i32** %node.addr, align 8
  %arrayidx121 = getelementptr inbounds i32* %145, i64 %idxprom120
  %146 = load i32* %arrayidx121, align 4
  %sub122 = sub nsw i32 %143, %146
  %add123 = add nsw i32 %sub122, 1
  %conv124 = sitofp i32 %add123 to double
  %mul125 = fmul double %mul, %conv124
  %div = fdiv double %mul125, 2.000000e+00
  %sub126 = fsub double %conv, %div
  store double %sub126, double* %simple_diff, align 8
  %147 = load i32** %domain.addr, align 8
  %tobool = icmp ne i32* %147, null
  br i1 %tobool, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %if.end
  %148 = load i32* %super.addr, align 4
  %idxprom127 = sext i32 %148 to i64
  %149 = load i32** %domain.addr, align 8
  %arrayidx128 = getelementptr inbounds i32* %149, i64 %idxprom127
  %150 = load i32* %arrayidx128, align 4
  %cmp129 = icmp eq i32 %150, 0
  br i1 %cmp129, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %151 = load i32* %parent, align 4
  %idxprom131 = sext i32 %151 to i64
  %152 = load i32** %domain.addr, align 8
  %arrayidx132 = getelementptr inbounds i32* %152, i64 %idxprom131
  %153 = load i32* %arrayidx132, align 4
  %cmp133 = icmp ne i32 %153, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.end
  %154 = phi i1 [ true, %lor.lhs.false ], [ true, %if.end ], [ %cmp133, %lor.rhs ]
  %lor.ext = zext i1 %154 to i32
  store i32 %lor.ext, i32* %possible, align 4
  store i32 1, i32* %allow_critical_to_grow, align 4
  %155 = load i32** %domain.addr, align 8
  %tobool135 = icmp ne i32* %155, null
  br i1 %tobool135, label %lor.lhs.false.136, label %land.lhs.true

lor.lhs.false.136:                                ; preds = %lor.end
  %156 = load i32* %super.addr, align 4
  %idxprom137 = sext i32 %156 to i64
  %157 = load i32** %domain.addr, align 8
  %arrayidx138 = getelementptr inbounds i32* %157, i64 %idxprom137
  %158 = load i32* %arrayidx138, align 4
  %cmp139 = icmp eq i32 %158, 0
  br i1 %cmp139, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.136, %lor.end
  %159 = load double* %time_before, align 8
  %160 = load double* %time_after, align 8
  %cmp141 = fcmp ogt double %159, %160
  br i1 %cmp141, label %if.then.143, label %if.else

if.then.143:                                      ; preds = %land.lhs.true
  %161 = load i32* %allow_critical_to_grow, align 4
  %tobool144 = icmp ne i32 %161, 0
  br i1 %tobool144, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %if.then.143
  store double 0.000000e+00, double* %path_grows, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.145, %if.then.143
  br label %if.end.147

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false.136
  store double 0.000000e+00, double* %path_grows, align 8
  br label %if.end.147

if.end.147:                                       ; preds = %if.else, %if.end.146
  %162 = load i32* %possible, align 4
  %tobool148 = icmp ne i32 %162, 0
  br i1 %tobool148, label %land.lhs.true.149, label %land.end

land.lhs.true.149:                                ; preds = %if.end.147
  %163 = load double* %time_before, align 8
  %164 = load double* %time_after, align 8
  %cmp150 = fcmp ogt double %163, %164
  br i1 %cmp150, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.149
  %165 = load double* %path_grows, align 8
  %cmp152 = fcmp oeq double %165, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.149, %if.end.147
  %166 = phi i1 [ false, %land.lhs.true.149 ], [ false, %if.end.147 ], [ %cmp152, %land.rhs ]
  %land.ext = zext i1 %166 to i32
  store i32 %land.ext, i32* %do_merge, align 4
  %167 = load i32* %possible, align 4
  %tobool154 = icmp ne i32 %167, 0
  br i1 %tobool154, label %land.rhs.155, label %land.end.158

land.rhs.155:                                     ; preds = %land.end
  %168 = load double* %simple_diff, align 8
  %cmp156 = fcmp olt double %168, 0.000000e+00
  br label %land.end.158

land.end.158:                                     ; preds = %land.rhs.155, %land.end
  %169 = phi i1 [ false, %land.end ], [ %cmp156, %land.rhs.155 ]
  %land.ext159 = zext i1 %169 to i32
  store i32 %land.ext159, i32* %do_merge_simple, align 4
  %170 = load i32* %do_merge, align 4
  %tobool160 = icmp ne i32 %170, 0
  br i1 %tobool160, label %if.then.161, label %if.else.165

if.then.161:                                      ; preds = %land.end.158
  %171 = load i32** %nz.addr, align 8
  %172 = load i32** %node.addr, align 8
  %173 = load i32** %domain.addr, align 8
  %174 = load i32* %super.addr, align 4
  %175 = load i32* %parent, align 4
  %176 = load i32* %target_size.addr, align 4
  %call162 = call i32 @JoinTwoSupers2(i32* %171, i32* %172, i32* %173, i32 %174, i32 %175, i32 %176)
  %177 = load i32* %ops_after, align 4
  %178 = load i32* %ops_before, align 4
  %sub163 = sub nsw i32 %177, %178
  %179 = load i32* @ops_added, align 4
  %add164 = add nsw i32 %179, %sub163
  store i32 %add164, i32* @ops_added, align 4
  br label %if.end.166

if.else.165:                                      ; preds = %land.end.158
  br label %for.end

if.end.166:                                       ; preds = %if.then.161
  br label %for.cond

for.end:                                          ; preds = %if.else.165, %if.then
  %180 = load i32* %super.addr, align 4
  %idxprom167 = sext i32 %180 to i64
  %181 = load i32** @tree_original_firstchild, align 8
  %arrayidx168 = getelementptr inbounds i32* %181, i64 %idxprom167
  %182 = load i32* %arrayidx168, align 4
  store i32 %182, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %183 = load i32* %i, align 4
  %cmp169 = icmp ne i32 %183, -1
  br i1 %cmp169, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %184 = load i32* %join.addr, align 4
  %185 = load i32* %i, align 4
  %186 = load i32** %nz.addr, align 8
  %187 = load i32** %node.addr, align 8
  %188 = load i32** %domain.addr, align 8
  %189 = load i32* %target_size.addr, align 4
  %190 = load i32* %traversal_order.addr, align 4
  %call171 = call i32 @ConsiderMerge(i32 %184, i32 %185, %struct.SMatrix* byval align 8 %M, i32* %186, i32* %187, i32* %188, i32 %189, i32 %190)
  %191 = load i32* %i, align 4
  %idxprom172 = sext i32 %191 to i64
  %192 = load i32** @tree_original_sibling, align 8
  %arrayidx173 = getelementptr inbounds i32* %192, i64 %idxprom172
  %193 = load i32* %arrayidx173, align 4
  store i32 %193, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %194 = load i32* %retval
  ret i32 %194
}

; Function Attrs: nounwind uwtable
define internal i32 @JoinTwoSupers2(i32* %nz, i32* %node, i32* %domain, i32 %child, i32 %parent, i32 %target_size) {
entry:
  %retval = alloca i32, align 4
  %nz.addr = alloca i32*, align 8
  %node.addr = alloca i32*, align 8
  %domain.addr = alloca i32*, align 8
  %child.addr = alloca i32, align 4
  %parent.addr = alloca i32, align 4
  %target_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %child_last = alloca i32, align 4
  %member = alloca i32, align 4
  %grandparent = alloca i32, align 4
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %node, i32** %node.addr, align 8
  store i32* %domain, i32** %domain.addr, align 8
  store i32 %child, i32* %child.addr, align 4
  store i32 %parent, i32* %parent.addr, align 4
  store i32 %target_size, i32* %target_size.addr, align 4
  %0 = load i32* %parent.addr, align 4
  store i32 %0, i32* %member, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32* %member, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %child.addr, align 4
  %3 = load i32* %member, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @member_of, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  store i32 %2, i32* %arrayidx, align 4
  %5 = load i32* %member, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** @next_in_super, align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %member, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i32* %child.addr, align 4
  store i32 %8, i32* %child_last, align 4
  br label %while.cond.3

while.cond.3:                                     ; preds = %while.body.7, %while.end
  %9 = load i32* %child_last, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load i32** @next_in_super, align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %11, -1
  br i1 %cmp6, label %while.body.7, label %while.end.10

while.body.7:                                     ; preds = %while.cond.3
  %12 = load i32* %child_last, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i32** @next_in_super, align 8
  %arrayidx9 = getelementptr inbounds i32* %13, i64 %idxprom8
  %14 = load i32* %arrayidx9, align 4
  store i32 %14, i32* %child_last, align 4
  br label %while.cond.3

while.end.10:                                     ; preds = %while.cond.3
  %15 = load i32* %parent.addr, align 4
  %16 = load i32* %child_last, align 4
  %idxprom11 = sext i32 %16 to i64
  %17 = load i32** @next_in_super, align 8
  %arrayidx12 = getelementptr inbounds i32* %17, i64 %idxprom11
  store i32 %15, i32* %arrayidx12, align 4
  %18 = load i32* %parent.addr, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load i32** %nz.addr, align 8
  %arrayidx14 = getelementptr inbounds i32* %19, i64 %idxprom13
  %20 = load i32* %arrayidx14, align 4
  %21 = load i32* %child.addr, align 4
  %idxprom15 = sext i32 %21 to i64
  %22 = load i32** %node.addr, align 8
  %arrayidx16 = getelementptr inbounds i32* %22, i64 %idxprom15
  %23 = load i32* %arrayidx16, align 4
  %add = add nsw i32 %20, %23
  %24 = load i32* %child.addr, align 4
  %idxprom17 = sext i32 %24 to i64
  %25 = load i32** %nz.addr, align 8
  %arrayidx18 = getelementptr inbounds i32* %25, i64 %idxprom17
  store i32 %add, i32* %arrayidx18, align 4
  %26 = load i32* %parent.addr, align 4
  %idxprom19 = sext i32 %26 to i64
  %27 = load i32** %node.addr, align 8
  %arrayidx20 = getelementptr inbounds i32* %27, i64 %idxprom19
  %28 = load i32* %arrayidx20, align 4
  %29 = load i32* %child.addr, align 4
  %idxprom21 = sext i32 %29 to i64
  %30 = load i32** %node.addr, align 8
  %arrayidx22 = getelementptr inbounds i32* %30, i64 %idxprom21
  %31 = load i32* %arrayidx22, align 4
  %add23 = add nsw i32 %31, %28
  store i32 %add23, i32* %arrayidx22, align 4
  %32 = load i32* %parent.addr, align 4
  %idxprom24 = sext i32 %32 to i64
  %33 = load i32** @super_parent, align 8
  %arrayidx25 = getelementptr inbounds i32* %33, i64 %idxprom24
  %34 = load i32* %arrayidx25, align 4
  %35 = load i32* %child.addr, align 4
  %idxprom26 = sext i32 %35 to i64
  %36 = load i32** @super_parent, align 8
  %arrayidx27 = getelementptr inbounds i32* %36, i64 %idxprom26
  store i32 %34, i32* %arrayidx27, align 4
  br label %while.cond.28

while.cond.28:                                    ; preds = %if.end, %while.end.10
  %37 = load i32* %parent.addr, align 4
  %idxprom29 = sext i32 %37 to i64
  %38 = load i32** @tree_firstchild, align 8
  %arrayidx30 = getelementptr inbounds i32* %38, i64 %idxprom29
  %39 = load i32* %arrayidx30, align 4
  %cmp31 = icmp ne i32 %39, -1
  br i1 %cmp31, label %while.body.32, label %while.end.52

while.body.32:                                    ; preds = %while.cond.28
  %40 = load i32* %parent.addr, align 4
  %idxprom33 = sext i32 %40 to i64
  %41 = load i32** @tree_firstchild, align 8
  %arrayidx34 = getelementptr inbounds i32* %41, i64 %idxprom33
  %42 = load i32* %arrayidx34, align 4
  store i32 %42, i32* %i, align 4
  %43 = load i32* %i, align 4
  %idxprom35 = sext i32 %43 to i64
  %44 = load i32** @tree_sibling, align 8
  %arrayidx36 = getelementptr inbounds i32* %44, i64 %idxprom35
  %45 = load i32* %arrayidx36, align 4
  %46 = load i32* %parent.addr, align 4
  %idxprom37 = sext i32 %46 to i64
  %47 = load i32** @tree_firstchild, align 8
  %arrayidx38 = getelementptr inbounds i32* %47, i64 %idxprom37
  store i32 %45, i32* %arrayidx38, align 4
  %48 = load i32* %i, align 4
  %idxprom39 = sext i32 %48 to i64
  %49 = load i32** @member_of, align 8
  %arrayidx40 = getelementptr inbounds i32* %49, i64 %idxprom39
  %50 = load i32* %arrayidx40, align 4
  %51 = load i32* %child.addr, align 4
  %cmp41 = icmp ne i32 %50, %51
  br i1 %cmp41, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.32
  %52 = load i32* %child.addr, align 4
  %53 = load i32* %i, align 4
  %idxprom42 = sext i32 %53 to i64
  %54 = load i32** @member_of, align 8
  %arrayidx43 = getelementptr inbounds i32* %54, i64 %idxprom42
  %55 = load i32* %arrayidx43, align 4
  %idxprom44 = sext i32 %55 to i64
  %56 = load i32** @super_parent, align 8
  %arrayidx45 = getelementptr inbounds i32* %56, i64 %idxprom44
  store i32 %52, i32* %arrayidx45, align 4
  %57 = load i32* %child.addr, align 4
  %idxprom46 = sext i32 %57 to i64
  %58 = load i32** @tree_firstchild, align 8
  %arrayidx47 = getelementptr inbounds i32* %58, i64 %idxprom46
  %59 = load i32* %arrayidx47, align 4
  %60 = load i32* %i, align 4
  %idxprom48 = sext i32 %60 to i64
  %61 = load i32** @tree_sibling, align 8
  %arrayidx49 = getelementptr inbounds i32* %61, i64 %idxprom48
  store i32 %59, i32* %arrayidx49, align 4
  %62 = load i32* %i, align 4
  %63 = load i32* %child.addr, align 4
  %idxprom50 = sext i32 %63 to i64
  %64 = load i32** @tree_firstchild, align 8
  %arrayidx51 = getelementptr inbounds i32* %64, i64 %idxprom50
  store i32 %62, i32* %arrayidx51, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.32
  br label %while.cond.28

while.end.52:                                     ; preds = %while.cond.28
  %65 = load i32* %parent.addr, align 4
  %idxprom53 = sext i32 %65 to i64
  %66 = load i32** @super_parent, align 8
  %arrayidx54 = getelementptr inbounds i32* %66, i64 %idxprom53
  %67 = load i32* %arrayidx54, align 4
  store i32 %67, i32* %grandparent, align 4
  %68 = load i32* %parent.addr, align 4
  %idxprom55 = sext i32 %68 to i64
  %69 = load i32** @tree_sibling, align 8
  %arrayidx56 = getelementptr inbounds i32* %69, i64 %idxprom55
  %70 = load i32* %arrayidx56, align 4
  %71 = load i32* %child.addr, align 4
  %idxprom57 = sext i32 %71 to i64
  %72 = load i32** @tree_sibling, align 8
  %arrayidx58 = getelementptr inbounds i32* %72, i64 %idxprom57
  store i32 %70, i32* %arrayidx58, align 4
  %73 = load i32* %grandparent, align 4
  %idxprom59 = sext i32 %73 to i64
  %74 = load i32** @tree_firstchild, align 8
  %arrayidx60 = getelementptr inbounds i32* %74, i64 %idxprom59
  %75 = load i32* %arrayidx60, align 4
  store i32 %75, i32* %i, align 4
  %76 = load i32* %i, align 4
  %77 = load i32* %parent.addr, align 4
  %cmp61 = icmp eq i32 %76, %77
  br i1 %cmp61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %while.end.52
  %78 = load i32* %child.addr, align 4
  %79 = load i32* %grandparent, align 4
  %idxprom63 = sext i32 %79 to i64
  %80 = load i32** @tree_firstchild, align 8
  %arrayidx64 = getelementptr inbounds i32* %80, i64 %idxprom63
  store i32 %78, i32* %arrayidx64, align 4
  br label %if.end.75

if.else:                                          ; preds = %while.end.52
  br label %while.cond.65

while.cond.65:                                    ; preds = %while.body.69, %if.else
  %81 = load i32* %i, align 4
  %idxprom66 = sext i32 %81 to i64
  %82 = load i32** @tree_sibling, align 8
  %arrayidx67 = getelementptr inbounds i32* %82, i64 %idxprom66
  %83 = load i32* %arrayidx67, align 4
  %84 = load i32* %parent.addr, align 4
  %cmp68 = icmp ne i32 %83, %84
  br i1 %cmp68, label %while.body.69, label %while.end.72

while.body.69:                                    ; preds = %while.cond.65
  %85 = load i32* %i, align 4
  %idxprom70 = sext i32 %85 to i64
  %86 = load i32** @tree_sibling, align 8
  %arrayidx71 = getelementptr inbounds i32* %86, i64 %idxprom70
  %87 = load i32* %arrayidx71, align 4
  store i32 %87, i32* %i, align 4
  br label %while.cond.65

while.end.72:                                     ; preds = %while.cond.65
  %88 = load i32* %child.addr, align 4
  %89 = load i32* %i, align 4
  %idxprom73 = sext i32 %89 to i64
  %90 = load i32** @tree_sibling, align 8
  %arrayidx74 = getelementptr inbounds i32* %90, i64 %idxprom73
  store i32 %88, i32* %arrayidx74, align 4
  br label %if.end.75

if.end.75:                                        ; preds = %while.end.72, %if.then.62
  %91 = load i32* %retval
  ret i32 %91
}

; Function Attrs: nounwind uwtable
define internal i32 @ReorderMatrix(%struct.SMatrix* byval align 8 %M, i32 %super, i32* %node, i32* %counter, i32* %PERM) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %node.addr = alloca i32*, align 8
  %counter.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %child = alloca i32, align 4
  %member = alloca i32, align 4
  %which_member = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32* %node, i32** %node.addr, align 8
  store i32* %counter, i32** %counter.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  %0 = load i32* %super.addr, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %1 = load i32* %n, align 4
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32* %super.addr, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** @member_of, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  store i32 %4, i32* %super.addr, align 4
  %5 = load i32* %super.addr, align 4
  store i32 %5, i32* %member, align 4
  store i32 0, i32* %which_member, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32* %member, align 4
  %cmp1 = icmp ne i32 %6, -1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32* %member, align 4
  %8 = load i32** %counter.addr, align 8
  %9 = load i32* %8, align 4
  %10 = load i32* %super.addr, align 4
  %idxprom2 = sext i32 %10 to i64
  %11 = load i32** %node.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %11, i64 %idxprom2
  %12 = load i32* %arrayidx3, align 4
  %sub = sub nsw i32 %9, %12
  %13 = load i32* %which_member, align 4
  %add = add nsw i32 %sub, %13
  %idxprom4 = sext i32 %add to i64
  %14 = load i32** %PERM.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %14, i64 %idxprom4
  store i32 %7, i32* %arrayidx5, align 4
  %15 = load i32* %member, align 4
  %idxprom6 = sext i32 %15 to i64
  %16 = load i32** @next_in_super, align 8
  %arrayidx7 = getelementptr inbounds i32* %16, i64 %idxprom6
  %17 = load i32* %arrayidx7, align 4
  store i32 %17, i32* %member, align 4
  %18 = load i32* %which_member, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %which_member, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load i32* %super.addr, align 4
  %idxprom8 = sext i32 %19 to i64
  %20 = load i32** %node.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %20, i64 %idxprom8
  %21 = load i32* %arrayidx9, align 4
  %22 = load i32** %counter.addr, align 8
  %23 = load i32* %22, align 4
  %sub10 = sub nsw i32 %23, %21
  store i32 %sub10, i32* %22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  %24 = load i32* %super.addr, align 4
  %idxprom11 = sext i32 %24 to i64
  %25 = load i32** @tree_firstchild, align 8
  %arrayidx12 = getelementptr inbounds i32* %25, i64 %idxprom11
  %26 = load i32* %arrayidx12, align 4
  store i32 %26, i32* %child, align 4
  br label %while.cond.13

while.cond.13:                                    ; preds = %while.body.15, %if.end
  %27 = load i32* %child, align 4
  %cmp14 = icmp ne i32 %27, -1
  br i1 %cmp14, label %while.body.15, label %while.end.18

while.body.15:                                    ; preds = %while.cond.13
  %28 = load i32* %child, align 4
  %29 = load i32** %node.addr, align 8
  %30 = load i32** %counter.addr, align 8
  %31 = load i32** %PERM.addr, align 8
  %call = call i32 @ReorderMatrix(%struct.SMatrix* byval align 8 %M, i32 %28, i32* %29, i32* %30, i32* %31)
  %32 = load i32* %child, align 4
  %idxprom16 = sext i32 %32 to i64
  %33 = load i32** @tree_sibling, align 8
  %arrayidx17 = getelementptr inbounds i32* %33, i64 %idxprom16
  %34 = load i32* %arrayidx17, align 4
  store i32 %34, i32* %child, align 4
  br label %while.cond.13

while.end.18:                                     ; preds = %while.cond.13
  %35 = load i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @FixNodeNZAndT(%struct.SMatrix* byval align 8 %M, i32* %PERM, i32* %node, i32* %nz, i32* %T) {
entry:
  %retval = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %node.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %T.addr = alloca i32*, align 8
  %super = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32*, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %node, i32** %node.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %T, i32** %T.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %tmp, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %j, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %j, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %node.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  %7 = load i32* %j, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32** %tmp, align 8
  %arrayidx4 = getelementptr inbounds i32* %8, i64 %idxprom3
  store i32 %6, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %j, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.16, %for.end
  %10 = load i32* %j, align 4
  %n6 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %11 = load i32* %n6, align 4
  %cmp7 = icmp slt i32 %10, %11
  br i1 %cmp7, label %for.body.9, label %for.end.18

for.body.9:                                       ; preds = %for.cond.5
  %12 = load i32* %j, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i32** %PERM.addr, align 8
  %arrayidx11 = getelementptr inbounds i32* %13, i64 %idxprom10
  %14 = load i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load i32** %tmp, align 8
  %arrayidx13 = getelementptr inbounds i32* %15, i64 %idxprom12
  %16 = load i32* %arrayidx13, align 4
  %17 = load i32* %j, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load i32** %node.addr, align 8
  %arrayidx15 = getelementptr inbounds i32* %18, i64 %idxprom14
  store i32 %16, i32* %arrayidx15, align 4
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.body.9
  %19 = load i32* %j, align 4
  %inc17 = add nsw i32 %19, 1
  store i32 %inc17, i32* %j, align 4
  br label %for.cond.5

for.end.18:                                       ; preds = %for.cond.5
  store i32 0, i32* %super, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.36, %for.end.18
  %20 = load i32* %super, align 4
  %n20 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %21 = load i32* %n20, align 4
  %cmp21 = icmp slt i32 %20, %21
  br i1 %cmp21, label %for.body.23, label %for.end.40

for.body.23:                                      ; preds = %for.cond.19
  %22 = load i32* %super, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.33, %for.body.23
  %23 = load i32* %j, align 4
  %24 = load i32* %super, align 4
  %25 = load i32* %super, align 4
  %idxprom25 = sext i32 %25 to i64
  %26 = load i32** %node.addr, align 8
  %arrayidx26 = getelementptr inbounds i32* %26, i64 %idxprom25
  %27 = load i32* %arrayidx26, align 4
  %add27 = add nsw i32 %24, %27
  %cmp28 = icmp slt i32 %23, %add27
  br i1 %cmp28, label %for.body.30, label %for.end.35

for.body.30:                                      ; preds = %for.cond.24
  %28 = load i32* %super, align 4
  %29 = load i32* %j, align 4
  %sub = sub nsw i32 %28, %29
  %30 = load i32* %j, align 4
  %idxprom31 = sext i32 %30 to i64
  %31 = load i32** %node.addr, align 8
  %arrayidx32 = getelementptr inbounds i32* %31, i64 %idxprom31
  store i32 %sub, i32* %arrayidx32, align 4
  br label %for.inc.33

for.inc.33:                                       ; preds = %for.body.30
  %32 = load i32* %j, align 4
  %inc34 = add nsw i32 %32, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond.24

for.end.35:                                       ; preds = %for.cond.24
  br label %for.inc.36

for.inc.36:                                       ; preds = %for.end.35
  %33 = load i32* %super, align 4
  %idxprom37 = sext i32 %33 to i64
  %34 = load i32** %node.addr, align 8
  %arrayidx38 = getelementptr inbounds i32* %34, i64 %idxprom37
  %35 = load i32* %arrayidx38, align 4
  %36 = load i32* %super, align 4
  %add39 = add nsw i32 %36, %35
  store i32 %add39, i32* %super, align 4
  br label %for.cond.19

for.end.40:                                       ; preds = %for.cond.19
  store i32 0, i32* %j, align 4
  br label %for.cond.41

for.cond.41:                                      ; preds = %for.inc.50, %for.end.40
  %37 = load i32* %j, align 4
  %n42 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %38 = load i32* %n42, align 4
  %cmp43 = icmp slt i32 %37, %38
  br i1 %cmp43, label %for.body.45, label %for.end.52

for.body.45:                                      ; preds = %for.cond.41
  %39 = load i32* %j, align 4
  %idxprom46 = sext i32 %39 to i64
  %40 = load i32** %nz.addr, align 8
  %arrayidx47 = getelementptr inbounds i32* %40, i64 %idxprom46
  %41 = load i32* %arrayidx47, align 4
  %42 = load i32* %j, align 4
  %idxprom48 = sext i32 %42 to i64
  %43 = load i32** %tmp, align 8
  %arrayidx49 = getelementptr inbounds i32* %43, i64 %idxprom48
  store i32 %41, i32* %arrayidx49, align 4
  br label %for.inc.50

for.inc.50:                                       ; preds = %for.body.45
  %44 = load i32* %j, align 4
  %inc51 = add nsw i32 %44, 1
  store i32 %inc51, i32* %j, align 4
  br label %for.cond.41

for.end.52:                                       ; preds = %for.cond.41
  store i32 0, i32* %super, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.81, %for.end.52
  %45 = load i32* %super, align 4
  %n54 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %46 = load i32* %n54, align 4
  %cmp55 = icmp slt i32 %45, %46
  br i1 %cmp55, label %for.body.57, label %for.end.85

for.body.57:                                      ; preds = %for.cond.53
  %47 = load i32* %super, align 4
  %idxprom58 = sext i32 %47 to i64
  %48 = load i32** %PERM.addr, align 8
  %arrayidx59 = getelementptr inbounds i32* %48, i64 %idxprom58
  %49 = load i32* %arrayidx59, align 4
  %idxprom60 = sext i32 %49 to i64
  %50 = load i32** %tmp, align 8
  %arrayidx61 = getelementptr inbounds i32* %50, i64 %idxprom60
  %51 = load i32* %arrayidx61, align 4
  %52 = load i32* %super, align 4
  %idxprom62 = sext i32 %52 to i64
  %53 = load i32** %nz.addr, align 8
  %arrayidx63 = getelementptr inbounds i32* %53, i64 %idxprom62
  store i32 %51, i32* %arrayidx63, align 4
  %54 = load i32* %super, align 4
  %add64 = add nsw i32 %54, 1
  store i32 %add64, i32* %j, align 4
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.78, %for.body.57
  %55 = load i32* %j, align 4
  %56 = load i32* %super, align 4
  %57 = load i32* %super, align 4
  %idxprom66 = sext i32 %57 to i64
  %58 = load i32** %node.addr, align 8
  %arrayidx67 = getelementptr inbounds i32* %58, i64 %idxprom66
  %59 = load i32* %arrayidx67, align 4
  %add68 = add nsw i32 %56, %59
  %cmp69 = icmp slt i32 %55, %add68
  br i1 %cmp69, label %for.body.71, label %for.end.80

for.body.71:                                      ; preds = %for.cond.65
  %60 = load i32* %super, align 4
  %idxprom72 = sext i32 %60 to i64
  %61 = load i32** %nz.addr, align 8
  %arrayidx73 = getelementptr inbounds i32* %61, i64 %idxprom72
  %62 = load i32* %arrayidx73, align 4
  %63 = load i32* %super, align 4
  %add74 = add nsw i32 %62, %63
  %64 = load i32* %j, align 4
  %sub75 = sub nsw i32 %add74, %64
  %65 = load i32* %j, align 4
  %idxprom76 = sext i32 %65 to i64
  %66 = load i32** %nz.addr, align 8
  %arrayidx77 = getelementptr inbounds i32* %66, i64 %idxprom76
  store i32 %sub75, i32* %arrayidx77, align 4
  br label %for.inc.78

for.inc.78:                                       ; preds = %for.body.71
  %67 = load i32* %j, align 4
  %inc79 = add nsw i32 %67, 1
  store i32 %inc79, i32* %j, align 4
  br label %for.cond.65

for.end.80:                                       ; preds = %for.cond.65
  br label %for.inc.81

for.inc.81:                                       ; preds = %for.end.80
  %68 = load i32* %super, align 4
  %idxprom82 = sext i32 %68 to i64
  %69 = load i32** %node.addr, align 8
  %arrayidx83 = getelementptr inbounds i32* %69, i64 %idxprom82
  %70 = load i32* %arrayidx83, align 4
  %71 = load i32* %super, align 4
  %add84 = add nsw i32 %71, %70
  store i32 %add84, i32* %super, align 4
  br label %for.cond.53

for.end.85:                                       ; preds = %for.cond.53
  store i32 0, i32* %super, align 4
  br label %for.cond.86

for.cond.86:                                      ; preds = %for.inc.116, %for.end.85
  %72 = load i32* %super, align 4
  %n87 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %73 = load i32* %n87, align 4
  %cmp88 = icmp slt i32 %72, %73
  br i1 %cmp88, label %for.body.90, label %for.end.120

for.body.90:                                      ; preds = %for.cond.86
  %74 = load i32* %super, align 4
  store i32 %74, i32* %j, align 4
  br label %for.cond.91

for.cond.91:                                      ; preds = %for.inc.101, %for.body.90
  %75 = load i32* %j, align 4
  %76 = load i32* %super, align 4
  %77 = load i32* %super, align 4
  %idxprom92 = sext i32 %77 to i64
  %78 = load i32** %node.addr, align 8
  %arrayidx93 = getelementptr inbounds i32* %78, i64 %idxprom92
  %79 = load i32* %arrayidx93, align 4
  %add94 = add nsw i32 %76, %79
  %cmp95 = icmp slt i32 %75, %add94
  br i1 %cmp95, label %for.body.97, label %for.end.103

for.body.97:                                      ; preds = %for.cond.91
  %80 = load i32* %j, align 4
  %add98 = add nsw i32 %80, 1
  %81 = load i32* %j, align 4
  %idxprom99 = sext i32 %81 to i64
  %82 = load i32** %T.addr, align 8
  %arrayidx100 = getelementptr inbounds i32* %82, i64 %idxprom99
  store i32 %add98, i32* %arrayidx100, align 4
  br label %for.inc.101

for.inc.101:                                      ; preds = %for.body.97
  %83 = load i32* %j, align 4
  %inc102 = add nsw i32 %83, 1
  store i32 %inc102, i32* %j, align 4
  br label %for.cond.91

for.end.103:                                      ; preds = %for.cond.91
  %84 = load i32* %super, align 4
  %idxprom104 = sext i32 %84 to i64
  %85 = load i32** %PERM.addr, align 8
  %arrayidx105 = getelementptr inbounds i32* %85, i64 %idxprom104
  %86 = load i32* %arrayidx105, align 4
  %idxprom106 = sext i32 %86 to i64
  %87 = load i32** @super_parent, align 8
  %arrayidx107 = getelementptr inbounds i32* %87, i64 %idxprom106
  %88 = load i32* %arrayidx107, align 4
  %idxprom108 = sext i32 %88 to i64
  %89 = load i32** @INVP, align 8
  %arrayidx109 = getelementptr inbounds i32* %89, i64 %idxprom108
  %90 = load i32* %arrayidx109, align 4
  %91 = load i32* %super, align 4
  %92 = load i32* %super, align 4
  %idxprom110 = sext i32 %92 to i64
  %93 = load i32** %node.addr, align 8
  %arrayidx111 = getelementptr inbounds i32* %93, i64 %idxprom110
  %94 = load i32* %arrayidx111, align 4
  %add112 = add nsw i32 %91, %94
  %sub113 = sub nsw i32 %add112, 1
  %idxprom114 = sext i32 %sub113 to i64
  %95 = load i32** %T.addr, align 8
  %arrayidx115 = getelementptr inbounds i32* %95, i64 %idxprom114
  store i32 %90, i32* %arrayidx115, align 4
  br label %for.inc.116

for.inc.116:                                      ; preds = %for.end.103
  %96 = load i32* %super, align 4
  %idxprom117 = sext i32 %96 to i64
  %97 = load i32** %node.addr, align 8
  %arrayidx118 = getelementptr inbounds i32* %97, i64 %idxprom117
  %98 = load i32* %arrayidx118, align 4
  %99 = load i32* %super, align 4
  %add119 = add nsw i32 %99, %98
  store i32 %add119, i32* %super, align 4
  br label %for.cond.86

for.end.120:                                      ; preds = %for.cond.86
  %100 = load i32** %tmp, align 8
  %call121 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %100)
  %101 = load i32* %retval
  ret i32 %101
}

; Function Attrs: nounwind uwtable
define internal i32 @InvertPerm(i32 %n, i32* %PERM, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %INVP.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.8, %for.end
  %5 = load i32* %i, align 4
  %6 = load i32* %n.addr, align 4
  %cmp2 = icmp sle i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.10

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32* %i, align 4
  %8 = load i32* %i, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i32** %PERM.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %9, i64 %idxprom4
  %10 = load i32* %arrayidx5, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i32** %INVP.addr, align 8
  %arrayidx7 = getelementptr inbounds i32* %11, i64 %idxprom6
  store i32 %7, i32* %arrayidx7, align 4
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.body.3
  %12 = load i32* %i, align 4
  %inc9 = add nsw i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond.1

for.end.10:                                       ; preds = %for.cond.1
  store i32 0, i32* %i, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.17, %for.end.10
  %13 = load i32* %i, align 4
  %14 = load i32* %n.addr, align 4
  %cmp12 = icmp sle i32 %13, %14
  br i1 %cmp12, label %for.body.13, label %for.end.19

for.body.13:                                      ; preds = %for.cond.11
  %15 = load i32* %i, align 4
  %idxprom14 = sext i32 %15 to i64
  %16 = load i32** %INVP.addr, align 8
  %arrayidx15 = getelementptr inbounds i32* %16, i64 %idxprom14
  %17 = load i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %17, -1
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.13
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.13
  br label %for.inc.17

for.inc.17:                                       ; preds = %if.end
  %18 = load i32* %i, align 4
  %inc18 = add nsw i32 %18, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond.11

for.end.19:                                       ; preds = %for.cond.11
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal double @PathLength(i32 %cols, i32 %rows, i32 %target_panel_size) {
entry:
  %cols.addr = alloca i32, align 4
  %rows.addr = alloca i32, align 4
  %target_panel_size.addr = alloca i32, align 4
  %path_length = alloca double, align 8
  store i32 %cols, i32* %cols.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %target_panel_size, i32* %target_panel_size.addr, align 4
  %0 = load i32* %cols.addr, align 4
  %1 = load i32* %rows.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32* %cols.addr, align 4
  %3 = load i32* %cols.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul1 = mul nsw i32 %2, %sub
  %div = sdiv i32 %mul1, 2
  %sub2 = sub nsw i32 %mul, %div
  %mul3 = mul nsw i32 3, %sub2
  %conv = sitofp i32 %mul3 to double
  store double %conv, double* %path_length, align 8
  %4 = load i32* %target_panel_size.addr, align 4
  %conv4 = sitofp i32 %4 to double
  %5 = load double* %path_length, align 8
  %mul5 = fmul double %5, %conv4
  store double %mul5, double* %path_length, align 8
  %6 = load double* %path_length, align 8
  ret double %6
}

; Function Attrs: nounwind uwtable
define internal i32 @PDIV(i32 %src_col, i32 %src_nz, double* %ops, double* %misses, double* %runtime) {
entry:
  %retval = alloca i32, align 4
  %src_col.addr = alloca i32, align 4
  %src_nz.addr = alloca i32, align 4
  %ops.addr = alloca double*, align 8
  %misses.addr = alloca double*, align 8
  %runtime.addr = alloca double*, align 8
  %super_size = alloca i32, align 4
  %passes = alloca i32, align 4
  %this_ops = alloca double, align 8
  %this_misses = alloca double, align 8
  store i32 %src_col, i32* %src_col.addr, align 4
  store i32 %src_nz, i32* %src_nz.addr, align 4
  store double* %ops, double** %ops.addr, align 8
  store double* %misses, double** %misses.addr, align 8
  store double* %runtime, double** %runtime.addr, align 8
  %0 = load i32* %src_col.addr, align 4
  %1 = load i32* %src_nz.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32* %src_col.addr, align 4
  %3 = load i32* %src_col.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul1 = mul nsw i32 %2, %sub
  %div = sdiv i32 %mul1, 2
  %sub2 = sub nsw i32 %mul, %div
  store i32 %sub2, i32* %super_size, align 4
  %4 = load i32* %src_col.addr, align 4
  %conv = sitofp i32 %4 to double
  %mul3 = fmul double 1.000000e+00, %conv
  %5 = load i32* %src_col.addr, align 4
  %add = add nsw i32 %5, 1
  %conv4 = sitofp i32 %add to double
  %mul5 = fmul double %mul3, %conv4
  %6 = load i32* %src_col.addr, align 4
  %mul6 = mul nsw i32 2, %6
  %add7 = add nsw i32 %mul6, 1
  %conv8 = sitofp i32 %add7 to double
  %mul9 = fmul double %mul5, %conv8
  %div10 = fdiv double %mul9, 6.000000e+00
  store double %div10, double* %this_ops, align 8
  %7 = load i32* %src_col.addr, align 4
  %conv11 = sitofp i32 %7 to double
  %mul12 = fmul double 1.000000e+00, %conv11
  %8 = load i32* %src_col.addr, align 4
  %conv13 = sitofp i32 %8 to double
  %mul14 = fmul double %mul12, %conv13
  %9 = load i32* %src_nz.addr, align 4
  %10 = load i32* %src_col.addr, align 4
  %sub15 = sub nsw i32 %9, %10
  %conv16 = sitofp i32 %sub15 to double
  %mul17 = fmul double %mul14, %conv16
  %11 = load double* %this_ops, align 8
  %add18 = fadd double %11, %mul17
  store double %add18, double* %this_ops, align 8
  %12 = load double* %this_ops, align 8
  %13 = load double** %ops.addr, align 8
  %14 = load double* %13, align 8
  %add19 = fadd double %14, %12
  store double %add19, double* %13, align 8
  %15 = load i32* %src_col.addr, align 4
  %16 = load i32* @BS, align 4
  %add20 = add nsw i32 %15, %16
  %sub21 = sub nsw i32 %add20, 1
  %17 = load i32* @BS, align 4
  %div22 = sdiv i32 %sub21, %17
  store i32 %div22, i32* %passes, align 4
  %18 = load i32* %passes, align 4
  %conv23 = sitofp i32 %18 to double
  %mul24 = fmul double 2.000000e+00, %conv23
  %div25 = fdiv double %mul24, 3.000000e+00
  %19 = load i32* %super_size, align 4
  %conv26 = sitofp i32 %19 to double
  %mul27 = fmul double %div25, %conv26
  store double %mul27, double* %this_misses, align 8
  %20 = load double* %this_misses, align 8
  %21 = load double** %misses.addr, align 8
  %22 = load double* %21, align 8
  %add28 = fadd double %22, %20
  store double %add28, double* %21, align 8
  %23 = load double* %this_ops, align 8
  %24 = load double* %this_misses, align 8
  %mul29 = fmul double %24, 4.740000e+00
  %add30 = fadd double %23, %mul29
  %25 = load i32* @BS, align 4
  %conv31 = sitofp i32 %25 to double
  %div32 = fdiv double 4.740000e+00, %conv31
  %add33 = fadd double 1.000000e+00, %div32
  %div34 = fdiv double %add30, %add33
  %26 = load double** %runtime.addr, align 8
  %27 = load double* %26, align 8
  %add35 = fadd double %27, %div34
  store double %add35, double* %26, align 8
  %28 = load i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @PMOD(i32 %src_col, i32 %dest_col, i32 %dest_nz, double* %ops, double* %misses, double* %runtime) {
entry:
  %retval = alloca i32, align 4
  %src_col.addr = alloca i32, align 4
  %dest_col.addr = alloca i32, align 4
  %dest_nz.addr = alloca i32, align 4
  %ops.addr = alloca double*, align 8
  %misses.addr = alloca double*, align 8
  %runtime.addr = alloca double*, align 8
  %update_size = alloca i32, align 4
  %passes_src = alloca i32, align 4
  %passes_dest = alloca i32, align 4
  %this_ops = alloca double, align 8
  %this_misses = alloca double, align 8
  store i32 %src_col, i32* %src_col.addr, align 4
  store i32 %dest_col, i32* %dest_col.addr, align 4
  store i32 %dest_nz, i32* %dest_nz.addr, align 4
  store double* %ops, double** %ops.addr, align 8
  store double* %misses, double** %misses.addr, align 8
  store double* %runtime, double** %runtime.addr, align 8
  %0 = load i32* %dest_col.addr, align 4
  %1 = load i32* %dest_nz.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32* %dest_col.addr, align 4
  %3 = load i32* %dest_col.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul1 = mul nsw i32 %2, %sub
  %div = sdiv i32 %mul1, 2
  %sub2 = sub nsw i32 %mul, %div
  store i32 %sub2, i32* %update_size, align 4
  %4 = load i32* %src_col.addr, align 4
  %conv = sitofp i32 %4 to double
  %mul3 = fmul double 2.000000e+00, %conv
  %5 = load i32* %update_size, align 4
  %conv4 = sitofp i32 %5 to double
  %mul5 = fmul double %mul3, %conv4
  store double %mul5, double* %this_ops, align 8
  %6 = load double* %this_ops, align 8
  %7 = load double** %ops.addr, align 8
  %8 = load double* %7, align 8
  %add = fadd double %8, %6
  store double %add, double* %7, align 8
  %9 = load i32* %src_col.addr, align 4
  %10 = load i32* @BS, align 4
  %add6 = add nsw i32 %9, %10
  %sub7 = sub nsw i32 %add6, 1
  %11 = load i32* @BS, align 4
  %div8 = sdiv i32 %sub7, %11
  store i32 %div8, i32* %passes_src, align 4
  %12 = load i32* %dest_col.addr, align 4
  %13 = load i32* @BS, align 4
  %add9 = add nsw i32 %12, %13
  %sub10 = sub nsw i32 %add9, 1
  %14 = load i32* @BS, align 4
  %div11 = sdiv i32 %sub10, %14
  store i32 %div11, i32* %passes_dest, align 4
  %15 = load i32* %passes_src, align 4
  %cmp = icmp eq i32 %15, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %16 = load i32* %passes_dest, align 4
  %cmp13 = icmp eq i32 %16, 1
  br i1 %cmp13, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %17 = load i32* %src_col.addr, align 4
  %conv15 = sitofp i32 %17 to double
  %mul16 = fmul double 1.000000e+00, %conv15
  %18 = load i32* %dest_nz.addr, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double %mul16, %conv17
  %19 = load i32* %update_size, align 4
  %conv19 = sitofp i32 %19 to double
  %mul20 = fmul double 1.000000e+00, %conv19
  %add21 = fadd double %mul18, %mul20
  store double %add21, double* %this_misses, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %20 = load i32* %passes_dest, align 4
  %conv22 = sitofp i32 %20 to double
  %mul23 = fmul double 1.000000e+00, %conv22
  %21 = load i32* %src_col.addr, align 4
  %conv24 = sitofp i32 %21 to double
  %mul25 = fmul double %mul23, %conv24
  %22 = load i32* %dest_nz.addr, align 4
  %conv26 = sitofp i32 %22 to double
  %mul27 = fmul double %mul25, %conv26
  %23 = load i32* %passes_src, align 4
  %conv28 = sitofp i32 %23 to double
  %mul29 = fmul double 1.000000e+00, %conv28
  %24 = load i32* %update_size, align 4
  %conv30 = sitofp i32 %24 to double
  %mul31 = fmul double %mul29, %conv30
  %add32 = fadd double %mul27, %mul31
  store double %add32, double* %this_misses, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load double* %this_misses, align 8
  %26 = load double** %misses.addr, align 8
  %27 = load double* %26, align 8
  %add33 = fadd double %27, %25
  store double %add33, double* %26, align 8
  %28 = load double* %this_ops, align 8
  %29 = load double* %this_misses, align 8
  %mul34 = fmul double %29, 4.740000e+00
  %add35 = fadd double %28, %mul34
  %30 = load i32* @BS, align 4
  %conv36 = sitofp i32 %30 to double
  %div37 = fdiv double 4.740000e+00, %conv36
  %add38 = fadd double 1.000000e+00, %div37
  %div39 = fdiv double %add35, %add38
  %31 = load double** %runtime.addr, align 8
  %32 = load double* %31, align 8
  %add40 = fadd double %32, %div39
  store double %add40, double* %31, align 8
  %33 = load i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @PADD(i32 %cols, i32 %rows, double* %misses, double* %runtime) {
entry:
  %retval = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %rows.addr = alloca i32, align 4
  %misses.addr = alloca double*, align 8
  %runtime.addr = alloca double*, align 8
  %this_misses = alloca double, align 8
  store i32 %cols, i32* %cols.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store double* %misses, double** %misses.addr, align 8
  store double* %runtime, double** %runtime.addr, align 8
  %0 = load i32* %rows.addr, align 4
  %1 = load i32* %cols.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32* %cols.addr, align 4
  %3 = load i32* %cols.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul1 = mul nsw i32 %2, %sub
  %div = sdiv i32 %mul1, 2
  %sub2 = sub nsw i32 %mul, %div
  %mul3 = mul nsw i32 2, %sub2
  %conv = sitofp i32 %mul3 to double
  store double %conv, double* %this_misses, align 8
  %4 = load double* %this_misses, align 8
  %5 = load double** %misses.addr, align 8
  %6 = load double* %5, align 8
  %add = fadd double %6, %4
  store double %add, double* %5, align 8
  %7 = load double* %this_misses, align 8
  %mul4 = fmul double %7, 4.740000e+00
  %add5 = fadd double 0.000000e+00, %mul4
  %8 = load i32* @BS, align 4
  %conv6 = sitofp i32 %8 to double
  %div7 = fdiv double 4.740000e+00, %conv6
  %add8 = fadd double 1.000000e+00, %div7
  %div9 = fdiv double %add5, %add8
  %9 = load double** %runtime.addr, align 8
  %10 = load double* %9, align 8
  %add10 = fadd double %10, %div9
  store double %add10, double* %9, align 8
  %11 = load i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @AssignBlocksNow(i32 %distribute) {
entry:
  %retval = alloca i32, align 4
  %distribute.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %which = alloca i32, align 4
  store i32 %distribute, i32* %distribute.addr, align 4
  %0 = load i32* @P, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.12, %if.then
  %1 = load i32* %j, align 4
  %2 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end.16

for.body:                                         ; preds = %for.cond
  %3 = load i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %for.body
  %6 = load i32* %j, align 4
  %idxprom3 = sext i32 %6 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %7, i64 %idxprom3
  %8 = load i32* %arrayidx4, align 4
  store i32 %8, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %if.then.2
  %9 = load i32* %i, align 4
  %10 = load i32* %j, align 4
  %add = add nsw i32 %10, 1
  %idxprom6 = sext i32 %add to i64
  %11 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %11, i64 %idxprom6
  %12 = load i32* %arrayidx7, align 4
  %cmp8 = icmp slt i32 %9, %12
  br i1 %cmp8, label %for.body.9, label %for.end

for.body.9:                                       ; preds = %for.cond.5
  %13 = load i32* %i, align 4
  %idxprom10 = sext i32 %13 to i64
  %14 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx11 = getelementptr inbounds %union.Entry* %14, i64 %idxprom10
  %block = bitcast %union.Entry* %arrayidx11 to %struct.Block**
  %15 = load %struct.Block** %block, align 8
  %owner = getelementptr inbounds %struct.Block* %15, i32 0, i32 2
  store i32 0, i32* %owner, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.9
  %16 = load i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %if.end

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc.12

for.inc.12:                                       ; preds = %if.end
  %17 = load i32* %j, align 4
  %idxprom13 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx14 = getelementptr inbounds i32* %18, i64 %idxprom13
  %19 = load i32* %arrayidx14, align 4
  %20 = load i32* %j, align 4
  %add15 = add nsw i32 %20, %19
  store i32 %add15, i32* %j, align 4
  br label %for.cond

for.end.16:                                       ; preds = %for.cond
  br label %if.end.17

if.else:                                          ; preds = %entry
  %21 = load i32* @P, align 4
  %call = call i32 @EmbedBlocks(i32 %21)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %for.end.16
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @EmbedBlocks(i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %block = alloca i32, align 4
  store i32 %P, i32* %P.addr, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.11, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.15

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %j, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %block, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %8 = load i32* %block, align 4
  %9 = load i32* %j, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %block, align 4
  %call = call i32 (i32, ...) *bitcast (i32 (i32)* @EmbeddedOwner to i32 (i32, ...)*)(i32 %12)
  %13 = load i32* %block, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx9 = getelementptr inbounds %union.Entry* %14, i64 %idxprom8
  %block10 = bitcast %union.Entry* %arrayidx9 to %struct.Block**
  %15 = load %struct.Block** %block10, align 8
  %owner = getelementptr inbounds %struct.Block* %15, i32 0, i32 2
  store i32 %call, i32* %owner, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.7
  %16 = load i32* %block, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %block, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %if.end

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc.11

for.inc.11:                                       ; preds = %if.end
  %17 = load i32* %j, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx13 = getelementptr inbounds i32* %18, i64 %idxprom12
  %19 = load i32* %arrayidx13, align 4
  %20 = load i32* %j, align 4
  %add14 = add nsw i32 %20, %19
  store i32 %add14, i32* %j, align 4
  br label %for.cond

for.end.15:                                       ; preds = %for.cond
  store i32 1, i32* @scatter_decomposition, align 4
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @BFac(i32 %diag, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %diag.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %n = alloca i32, align 4
  %is = alloca i32, align 4
  %il = alloca i32, align 4
  %js = alloca i32, align 4
  %jl = alloca i32, align 4
  %ks = alloca i32, align 4
  %kl = alloca i32, align 4
  %A = alloca double*, align 8
  store i32 %diag, i32* %diag.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %diag.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %2, i32 0, i32 5
  %3 = load i32* %length, align 4
  store i32 %3, i32* %n, align 4
  %4 = load i32* %diag.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %5 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %5, i64 %idxprom1
  %block3 = bitcast %union.Entry* %arrayidx2 to %struct.Block**
  %6 = load %struct.Block** %block3, align 8
  %nz = getelementptr inbounds %struct.Block* %6, i32 0, i32 11
  %7 = load double** %nz, align 8
  store double* %7, double** %A, align 8
  store i32 0, i32* %js, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.58, %entry
  %8 = load i32* %js, align 4
  %9 = load i32* %n, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end.60

for.body:                                         ; preds = %for.cond
  %10 = load i32* %js, align 4
  %11 = load i32* @BS, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* %jl, align 4
  %12 = load i32* %jl, align 4
  %13 = load i32* %n, align 4
  %cmp4 = icmp sgt i32 %12, %13
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %14 = load i32* %n, align 4
  store i32 %14, i32* %jl, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %15 = load i32* %js, align 4
  %16 = load i32* %n, align 4
  %17 = load i32* %js, align 4
  %mul = mul nsw i32 %16, %17
  %add5 = add nsw i32 %15, %mul
  %idxprom6 = sext i32 %add5 to i64
  %18 = load double** %A, align 8
  %arrayidx7 = getelementptr inbounds double* %18, i64 %idxprom6
  %19 = load i32* %jl, align 4
  %20 = load i32* %js, align 4
  %sub = sub nsw i32 %19, %20
  %21 = load i32* %n, align 4
  %call = call i32 @OneFac(double* %arrayidx7, i32 %sub, i32 %21)
  %22 = load i32* %jl, align 4
  store i32 %22, i32* %is, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.55, %if.end
  %23 = load i32* %is, align 4
  %24 = load i32* %n, align 4
  %cmp9 = icmp slt i32 %23, %24
  br i1 %cmp9, label %for.body.10, label %for.end.57

for.body.10:                                      ; preds = %for.cond.8
  %25 = load i32* %is, align 4
  %26 = load i32* @BS, align 4
  %add11 = add nsw i32 %25, %26
  store i32 %add11, i32* %il, align 4
  %27 = load i32* %il, align 4
  %28 = load i32* %n, align 4
  %cmp12 = icmp sgt i32 %27, %28
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %for.body.10
  %29 = load i32* %n, align 4
  store i32 %29, i32* %il, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %for.body.10
  %30 = load double** %A, align 8
  %31 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp = getelementptr inbounds %struct.LocalCopies* %31, i32 0, i32 0
  %32 = load double** %blktmp, align 8
  %33 = load i32* %n, align 4
  %34 = load i32* %is, align 4
  %35 = load i32* %js, align 4
  %36 = load i32* %il, align 4
  %37 = load i32* %jl, align 4
  %38 = load i32* %MyNum.addr, align 4
  %39 = load %struct.LocalCopies** %lc.addr, align 8
  %call15 = call i32 @CopyBlock(double* %30, double* %32, i32 %33, i32 %34, i32 %35, i32 %36, i32 %37, i32 %38, %struct.LocalCopies* %39)
  %40 = load i32* %js, align 4
  %41 = load i32* %n, align 4
  %42 = load i32* %js, align 4
  %mul16 = mul nsw i32 %41, %42
  %add17 = add nsw i32 %40, %mul16
  %idxprom18 = sext i32 %add17 to i64
  %43 = load double** %A, align 8
  %arrayidx19 = getelementptr inbounds double* %43, i64 %idxprom18
  %44 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp20 = getelementptr inbounds %struct.LocalCopies* %44, i32 0, i32 0
  %45 = load double** %blktmp20, align 8
  %46 = load i32* %jl, align 4
  %47 = load i32* %js, align 4
  %sub21 = sub nsw i32 %46, %47
  %48 = load i32* %il, align 4
  %49 = load i32* %is, align 4
  %sub22 = sub nsw i32 %48, %49
  %50 = load i32* %n, align 4
  %call23 = call i32 @OneDiv(double* %arrayidx19, double* %45, i32 %sub21, i32 %sub22, i32 %50)
  %51 = load double** %A, align 8
  %52 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp24 = getelementptr inbounds %struct.LocalCopies* %52, i32 0, i32 0
  %53 = load double** %blktmp24, align 8
  %54 = load i32* %n, align 4
  %55 = load i32* %is, align 4
  %56 = load i32* %js, align 4
  %57 = load i32* %il, align 4
  %58 = load i32* %jl, align 4
  %59 = load i32* %MyNum.addr, align 4
  %60 = load %struct.LocalCopies** %lc.addr, align 8
  %call25 = call i32 @CopyBlockBack(double* %51, double* %53, i32 %54, i32 %55, i32 %56, i32 %57, i32 %58)
  %61 = load i32* %jl, align 4
  store i32 %61, i32* %ks, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc, %if.end.14
  %62 = load i32* %ks, align 4
  %63 = load i32* %is, align 4
  %cmp27 = icmp slt i32 %62, %63
  br i1 %cmp27, label %for.body.28, label %for.end

for.body.28:                                      ; preds = %for.cond.26
  %64 = load i32* %ks, align 4
  %65 = load i32* @BS, align 4
  %add29 = add nsw i32 %64, %65
  store i32 %add29, i32* %kl, align 4
  %66 = load i32* %kl, align 4
  %67 = load i32* %n, align 4
  %cmp30 = icmp sgt i32 %66, %67
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %for.body.28
  %68 = load i32* %n, align 4
  store i32 %68, i32* %kl, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %for.body.28
  %69 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp33 = getelementptr inbounds %struct.LocalCopies* %69, i32 0, i32 0
  %70 = load double** %blktmp33, align 8
  %71 = load i32* %ks, align 4
  %72 = load i32* %n, align 4
  %73 = load i32* %js, align 4
  %mul34 = mul nsw i32 %72, %73
  %add35 = add nsw i32 %71, %mul34
  %idxprom36 = sext i32 %add35 to i64
  %74 = load double** %A, align 8
  %arrayidx37 = getelementptr inbounds double* %74, i64 %idxprom36
  %75 = load i32* %is, align 4
  %76 = load i32* %n, align 4
  %77 = load i32* %ks, align 4
  %mul38 = mul nsw i32 %76, %77
  %add39 = add nsw i32 %75, %mul38
  %idxprom40 = sext i32 %add39 to i64
  %78 = load double** %A, align 8
  %arrayidx41 = getelementptr inbounds double* %78, i64 %idxprom40
  %79 = load i32* %kl, align 4
  %80 = load i32* %ks, align 4
  %sub42 = sub nsw i32 %79, %80
  %81 = load i32* %jl, align 4
  %82 = load i32* %js, align 4
  %sub43 = sub nsw i32 %81, %82
  %83 = load i32* %il, align 4
  %84 = load i32* %is, align 4
  %sub44 = sub nsw i32 %83, %84
  %85 = load i32* %n, align 4
  %86 = load i32* %n, align 4
  %call45 = call i32 @OneMatmat(double* %70, double* %arrayidx37, double* %arrayidx41, i32 %sub42, i32 %sub43, i32 %sub44, i32 %85, i32 %86)
  br label %for.inc

for.inc:                                          ; preds = %if.end.32
  %87 = load i32* @BS, align 4
  %88 = load i32* %ks, align 4
  %add46 = add nsw i32 %88, %87
  store i32 %add46, i32* %ks, align 4
  br label %for.cond.26

for.end:                                          ; preds = %for.cond.26
  %89 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp47 = getelementptr inbounds %struct.LocalCopies* %89, i32 0, i32 0
  %90 = load double** %blktmp47, align 8
  %91 = load i32* %is, align 4
  %92 = load i32* %n, align 4
  %93 = load i32* %is, align 4
  %mul48 = mul nsw i32 %92, %93
  %add49 = add nsw i32 %91, %mul48
  %idxprom50 = sext i32 %add49 to i64
  %94 = load double** %A, align 8
  %arrayidx51 = getelementptr inbounds double* %94, i64 %idxprom50
  %95 = load i32* %il, align 4
  %96 = load i32* %is, align 4
  %sub52 = sub nsw i32 %95, %96
  %97 = load i32* %jl, align 4
  %98 = load i32* %js, align 4
  %sub53 = sub nsw i32 %97, %98
  %99 = load i32* %n, align 4
  %call54 = call i32 @OneLower(double* %90, double* %arrayidx51, i32 %sub52, i32 %sub53, i32 %99)
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.end
  %100 = load i32* @BS, align 4
  %101 = load i32* %is, align 4
  %add56 = add nsw i32 %101, %100
  store i32 %add56, i32* %is, align 4
  br label %for.cond.8

for.end.57:                                       ; preds = %for.cond.8
  br label %for.inc.58

for.inc.58:                                       ; preds = %for.end.57
  %102 = load i32* @BS, align 4
  %103 = load i32* %js, align 4
  %add59 = add nsw i32 %103, %102
  store i32 %add59, i32* %js, align 4
  br label %for.cond

for.end.60:                                       ; preds = %for.cond
  %104 = load i32* %retval
  ret i32 %104
}

; Function Attrs: nounwind uwtable
define internal i32 @CopyBlock(double* %B, double* %dest, i32 %n3, i32 %is, i32 %ks, i32 %il, i32 %kl, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %B.addr = alloca double*, align 8
  %dest.addr = alloca double*, align 8
  %n3.addr = alloca i32, align 4
  %is.addr = alloca i32, align 4
  %ks.addr = alloca i32, align 4
  %il.addr = alloca i32, align 4
  %kl.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %bs = alloca i32, align 4
  %destination = alloca double*, align 8
  %bptr = alloca double*, align 8
  %top_of_B = alloca double*, align 8
  store double* %B, double** %B.addr, align 8
  store double* %dest, double** %dest.addr, align 8
  store i32 %n3, i32* %n3.addr, align 4
  store i32 %is, i32* %is.addr, align 4
  store i32 %ks, i32* %ks.addr, align 4
  store i32 %il, i32* %il.addr, align 4
  store i32 %kl, i32* %kl.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %il.addr, align 4
  %1 = load i32* %is.addr, align 4
  %sub = sub nsw i32 %0, %1
  store i32 %sub, i32* %bs, align 4
  %2 = load i32* %ks.addr, align 4
  store i32 %2, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %3 = load i32* %k, align 4
  %4 = load i32* %kl.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end.12

for.body:                                         ; preds = %for.cond
  %5 = load i32* %is.addr, align 4
  store i32 %5, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %6 = load i32* %i, align 4
  %7 = load i32* %il.addr, align 4
  %cmp2 = icmp slt i32 %6, %7
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %8 = load i32* %i, align 4
  %9 = load i32* %k, align 4
  %10 = load i32* %n3.addr, align 4
  %mul = mul nsw i32 %9, %10
  %add = add nsw i32 %8, %mul
  %idxprom = sext i32 %add to i64
  %11 = load double** %B.addr, align 8
  %arrayidx = getelementptr inbounds double* %11, i64 %idxprom
  %12 = load double* %arrayidx, align 8
  %13 = load i32* %i, align 4
  %14 = load i32* %is.addr, align 4
  %sub4 = sub nsw i32 %13, %14
  %15 = load i32* %k, align 4
  %16 = load i32* %ks.addr, align 4
  %sub5 = sub nsw i32 %15, %16
  %17 = load i32* %bs, align 4
  %mul6 = mul nsw i32 %sub5, %17
  %add7 = add nsw i32 %sub4, %mul6
  %idxprom8 = sext i32 %add7 to i64
  %18 = load double** %dest.addr, align 8
  %arrayidx9 = getelementptr inbounds double* %18, i64 %idxprom8
  store double %12, double* %arrayidx9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.3
  %19 = load i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.end
  %20 = load i32* %k, align 4
  %inc11 = add nsw i32 %20, 1
  store i32 %inc11, i32* %k, align 4
  br label %for.cond

for.end.12:                                       ; preds = %for.cond
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @OneFac(double* %A, i32 %n1, i32 %n2) {
entry:
  %retval = alloca i32, align 4
  %A.addr = alloca double*, align 8
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.42, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %n1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.44

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.16, %for.body
  %2 = load i32* %k, align 4
  %3 = load i32* %j, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body.3, label %for.end.18

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32* %j, align 4
  store i32 %4, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %5 = load i32* %i, align 4
  %6 = load i32* %n1.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body.6, label %for.end

for.body.6:                                       ; preds = %for.cond.4
  %7 = load i32* %j, align 4
  %8 = load i32* %n2.addr, align 4
  %9 = load i32* %k, align 4
  %mul = mul nsw i32 %8, %9
  %add = add nsw i32 %7, %mul
  %idxprom = sext i32 %add to i64
  %10 = load double** %A.addr, align 8
  %arrayidx = getelementptr inbounds double* %10, i64 %idxprom
  %11 = load double* %arrayidx, align 8
  %12 = load i32* %i, align 4
  %13 = load i32* %n2.addr, align 4
  %14 = load i32* %k, align 4
  %mul7 = mul nsw i32 %13, %14
  %add8 = add nsw i32 %12, %mul7
  %idxprom9 = sext i32 %add8 to i64
  %15 = load double** %A.addr, align 8
  %arrayidx10 = getelementptr inbounds double* %15, i64 %idxprom9
  %16 = load double* %arrayidx10, align 8
  %mul11 = fmul double %11, %16
  %17 = load i32* %i, align 4
  %18 = load i32* %n2.addr, align 4
  %19 = load i32* %j, align 4
  %mul12 = mul nsw i32 %18, %19
  %add13 = add nsw i32 %17, %mul12
  %idxprom14 = sext i32 %add13 to i64
  %20 = load double** %A.addr, align 8
  %arrayidx15 = getelementptr inbounds double* %20, i64 %idxprom14
  %21 = load double* %arrayidx15, align 8
  %sub = fsub double %21, %mul11
  store double %sub, double* %arrayidx15, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.6
  %22 = load i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.end
  %23 = load i32* %k, align 4
  %inc17 = add nsw i32 %23, 1
  store i32 %inc17, i32* %k, align 4
  br label %for.cond.1

for.end.18:                                       ; preds = %for.cond.1
  %24 = load i32* %k, align 4
  %25 = load i32* %n2.addr, align 4
  %26 = load i32* %k, align 4
  %mul19 = mul nsw i32 %25, %26
  %add20 = add nsw i32 %24, %mul19
  %idxprom21 = sext i32 %add20 to i64
  %27 = load double** %A.addr, align 8
  %arrayidx22 = getelementptr inbounds double* %27, i64 %idxprom21
  %28 = load double* %arrayidx22, align 8
  %call = call double @sqrt(double %28)
  %29 = load i32* %k, align 4
  %30 = load i32* %n2.addr, align 4
  %31 = load i32* %k, align 4
  %mul23 = mul nsw i32 %30, %31
  %add24 = add nsw i32 %29, %mul23
  %idxprom25 = sext i32 %add24 to i64
  %32 = load double** %A.addr, align 8
  %arrayidx26 = getelementptr inbounds double* %32, i64 %idxprom25
  store double %call, double* %arrayidx26, align 8
  %33 = load i32* %j, align 4
  %add27 = add nsw i32 %33, 1
  store i32 %add27, i32* %i, align 4
  br label %for.cond.28

for.cond.28:                                      ; preds = %for.inc.39, %for.end.18
  %34 = load i32* %i, align 4
  %35 = load i32* %n1.addr, align 4
  %cmp29 = icmp slt i32 %34, %35
  br i1 %cmp29, label %for.body.30, label %for.end.41

for.body.30:                                      ; preds = %for.cond.28
  %36 = load i32* %k, align 4
  %37 = load i32* %n2.addr, align 4
  %38 = load i32* %k, align 4
  %mul31 = mul nsw i32 %37, %38
  %add32 = add nsw i32 %36, %mul31
  %idxprom33 = sext i32 %add32 to i64
  %39 = load double** %A.addr, align 8
  %arrayidx34 = getelementptr inbounds double* %39, i64 %idxprom33
  %40 = load double* %arrayidx34, align 8
  %41 = load i32* %i, align 4
  %42 = load i32* %n2.addr, align 4
  %43 = load i32* %k, align 4
  %mul35 = mul nsw i32 %42, %43
  %add36 = add nsw i32 %41, %mul35
  %idxprom37 = sext i32 %add36 to i64
  %44 = load double** %A.addr, align 8
  %arrayidx38 = getelementptr inbounds double* %44, i64 %idxprom37
  %45 = load double* %arrayidx38, align 8
  %div = fdiv double %45, %40
  store double %div, double* %arrayidx38, align 8
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.body.30
  %46 = load i32* %i, align 4
  %inc40 = add nsw i32 %46, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond.28

for.end.41:                                       ; preds = %for.cond.28
  br label %for.inc.42

for.inc.42:                                       ; preds = %for.end.41
  %47 = load i32* %j, align 4
  %inc43 = add nsw i32 %47, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond

for.end.44:                                       ; preds = %for.cond
  %48 = load i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind
declare double @sqrt(double)

; Function Attrs: nounwind uwtable
define internal i32 @BDiv(i32 %diag, i32 %below, i32 %n1, i32 %n3, double* %diag_nz, double* %below_nz, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %diag.addr = alloca i32, align 4
  %below.addr = alloca i32, align 4
  %n1.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %diag_nz.addr = alloca double*, align 8
  %below_nz.addr = alloca double*, align 8
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %is = alloca i32, align 4
  %il = alloca i32, align 4
  %js = alloca i32, align 4
  %jl = alloca i32, align 4
  %ks = alloca i32, align 4
  %kl = alloca i32, align 4
  %A = alloca double*, align 8
  %B = alloca double*, align 8
  store i32 %diag, i32* %diag.addr, align 4
  store i32 %below, i32* %below.addr, align 4
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store double* %diag_nz, double** %diag_nz.addr, align 8
  store double* %below_nz, double** %below_nz.addr, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load double** %diag_nz.addr, align 8
  store double* %0, double** %A, align 8
  %1 = load double** %below_nz.addr, align 8
  store double* %1, double** %B, align 8
  %2 = load i32* %n1.addr, align 4
  %3 = load i32* %n3.addr, align 4
  %mul = mul nsw i32 %2, %3
  %4 = load i32* @BS, align 4
  %5 = load i32* @BS, align 4
  %mul1 = mul nsw i32 %4, %5
  %cmp = icmp sle i32 %mul, %mul1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load double** %A, align 8
  %7 = load double** %B, align 8
  %8 = load i32* %n1.addr, align 4
  %9 = load i32* %n3.addr, align 4
  %10 = load i32* %n1.addr, align 4
  %call = call i32 @OneDiv(double* %6, double* %7, i32 %8, i32 %9, i32 %10)
  br label %if.end.47

if.else:                                          ; preds = %entry
  store i32 0, i32* %js, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.44, %if.else
  %11 = load i32* %js, align 4
  %12 = load i32* %n1.addr, align 4
  %cmp2 = icmp slt i32 %11, %12
  br i1 %cmp2, label %for.body, label %for.end.46

for.body:                                         ; preds = %for.cond
  %13 = load i32* %js, align 4
  %14 = load i32* @BS, align 4
  %add = add nsw i32 %13, %14
  store i32 %add, i32* %jl, align 4
  %15 = load i32* %jl, align 4
  %16 = load i32* %n1.addr, align 4
  %cmp3 = icmp sgt i32 %15, %16
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %for.body
  %17 = load i32* %n1.addr, align 4
  store i32 %17, i32* %jl, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.4, %for.body
  store i32 0, i32* %is, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.41, %if.end
  %18 = load i32* %is, align 4
  %19 = load i32* %n3.addr, align 4
  %cmp6 = icmp slt i32 %18, %19
  br i1 %cmp6, label %for.body.7, label %for.end.43

for.body.7:                                       ; preds = %for.cond.5
  %20 = load i32* %is, align 4
  %21 = load i32* @BS, align 4
  %add8 = add nsw i32 %20, %21
  store i32 %add8, i32* %il, align 4
  %22 = load i32* %il, align 4
  %23 = load i32* %n3.addr, align 4
  %cmp9 = icmp sgt i32 %22, %23
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.body.7
  %24 = load i32* %n3.addr, align 4
  store i32 %24, i32* %il, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %for.body.7
  %25 = load double** %B, align 8
  %26 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp = getelementptr inbounds %struct.LocalCopies* %26, i32 0, i32 0
  %27 = load double** %blktmp, align 8
  %28 = load i32* %n3.addr, align 4
  %29 = load i32* %is, align 4
  %30 = load i32* %js, align 4
  %31 = load i32* %il, align 4
  %32 = load i32* %jl, align 4
  %33 = load i32* %MyNum.addr, align 4
  %34 = load %struct.LocalCopies** %lc.addr, align 8
  %call12 = call i32 @CopyBlock(double* %25, double* %27, i32 %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33, %struct.LocalCopies* %34)
  %35 = load i32* %js, align 4
  %36 = load i32* %js, align 4
  %37 = load i32* %n1.addr, align 4
  %mul13 = mul nsw i32 %36, %37
  %add14 = add nsw i32 %35, %mul13
  %idxprom = sext i32 %add14 to i64
  %38 = load double** %A, align 8
  %arrayidx = getelementptr inbounds double* %38, i64 %idxprom
  %39 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp15 = getelementptr inbounds %struct.LocalCopies* %39, i32 0, i32 0
  %40 = load double** %blktmp15, align 8
  %41 = load i32* %jl, align 4
  %42 = load i32* %js, align 4
  %sub = sub nsw i32 %41, %42
  %43 = load i32* %il, align 4
  %44 = load i32* %is, align 4
  %sub16 = sub nsw i32 %43, %44
  %45 = load i32* %n1.addr, align 4
  %call17 = call i32 @OneDiv(double* %arrayidx, double* %40, i32 %sub, i32 %sub16, i32 %45)
  %46 = load double** %B, align 8
  %47 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp18 = getelementptr inbounds %struct.LocalCopies* %47, i32 0, i32 0
  %48 = load double** %blktmp18, align 8
  %49 = load i32* %n3.addr, align 4
  %50 = load i32* %is, align 4
  %51 = load i32* %js, align 4
  %52 = load i32* %il, align 4
  %53 = load i32* %jl, align 4
  %54 = load i32* %MyNum.addr, align 4
  %55 = load %struct.LocalCopies** %lc.addr, align 8
  %call19 = call i32 @CopyBlockBack(double* %46, double* %48, i32 %49, i32 %50, i32 %51, i32 %52, i32 %53)
  %56 = load i32* %jl, align 4
  store i32 %56, i32* %ks, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc, %if.end.11
  %57 = load i32* %ks, align 4
  %58 = load i32* %n1.addr, align 4
  %cmp21 = icmp slt i32 %57, %58
  br i1 %cmp21, label %for.body.22, label %for.end

for.body.22:                                      ; preds = %for.cond.20
  %59 = load i32* %ks, align 4
  %60 = load i32* @BS, align 4
  %add23 = add nsw i32 %59, %60
  store i32 %add23, i32* %kl, align 4
  %61 = load i32* %kl, align 4
  %62 = load i32* %n1.addr, align 4
  %cmp24 = icmp sgt i32 %61, %62
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %for.body.22
  %63 = load i32* %n1.addr, align 4
  store i32 %63, i32* %kl, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %for.body.22
  %64 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp27 = getelementptr inbounds %struct.LocalCopies* %64, i32 0, i32 0
  %65 = load double** %blktmp27, align 8
  %66 = load i32* %ks, align 4
  %67 = load i32* %js, align 4
  %68 = load i32* %n1.addr, align 4
  %mul28 = mul nsw i32 %67, %68
  %add29 = add nsw i32 %66, %mul28
  %idxprom30 = sext i32 %add29 to i64
  %69 = load double** %A, align 8
  %arrayidx31 = getelementptr inbounds double* %69, i64 %idxprom30
  %70 = load i32* %is, align 4
  %71 = load i32* %ks, align 4
  %72 = load i32* %n3.addr, align 4
  %mul32 = mul nsw i32 %71, %72
  %add33 = add nsw i32 %70, %mul32
  %idxprom34 = sext i32 %add33 to i64
  %73 = load double** %B, align 8
  %arrayidx35 = getelementptr inbounds double* %73, i64 %idxprom34
  %74 = load i32* %kl, align 4
  %75 = load i32* %ks, align 4
  %sub36 = sub nsw i32 %74, %75
  %76 = load i32* %jl, align 4
  %77 = load i32* %js, align 4
  %sub37 = sub nsw i32 %76, %77
  %78 = load i32* %il, align 4
  %79 = load i32* %is, align 4
  %sub38 = sub nsw i32 %78, %79
  %80 = load i32* %n3.addr, align 4
  %81 = load i32* %n1.addr, align 4
  %call39 = call i32 @OneMatmat(double* %65, double* %arrayidx31, double* %arrayidx35, i32 %sub36, i32 %sub37, i32 %sub38, i32 %80, i32 %81)
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %82 = load i32* @BS, align 4
  %83 = load i32* %ks, align 4
  %add40 = add nsw i32 %83, %82
  store i32 %add40, i32* %ks, align 4
  br label %for.cond.20

for.end:                                          ; preds = %for.cond.20
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.end
  %84 = load i32* @BS, align 4
  %85 = load i32* %is, align 4
  %add42 = add nsw i32 %85, %84
  store i32 %add42, i32* %is, align 4
  br label %for.cond.5

for.end.43:                                       ; preds = %for.cond.5
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.end.43
  %86 = load i32* @BS, align 4
  %87 = load i32* %js, align 4
  %add45 = add nsw i32 %87, %86
  store i32 %add45, i32* %js, align 4
  br label %for.cond

for.end.46:                                       ; preds = %for.cond
  br label %if.end.47

if.end.47:                                        ; preds = %for.end.46, %if.then
  %88 = load i32* %retval
  ret i32 %88
}

; Function Attrs: nounwind uwtable
define internal i32 @OneDiv(double* %A, double* %B, i32 %n1, i32 %n3, i32 %n4) {
entry:
  %retval = alloca i32, align 4
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %n1.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %n4.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %a_j0k0 = alloca double, align 8
  %a_j0k1 = alloca double, align 8
  %a_j0k2 = alloca double, align 8
  %a_j0k3 = alloca double, align 8
  %a_j1k0 = alloca double, align 8
  %a_j1k1 = alloca double, align 8
  %a_j1k2 = alloca double, align 8
  %a_j1k3 = alloca double, align 8
  %b0 = alloca double*, align 8
  %b1 = alloca double*, align 8
  %b2 = alloca double*, align 8
  %b3 = alloca double*, align 8
  %dest0 = alloca double*, align 8
  %dest1 = alloca double*, align 8
  %last = alloca double*, align 8
  %tmp = alloca double*, align 8
  %t0 = alloca double, align 8
  %t1 = alloca double, align 8
  %tmp0 = alloca double, align 8
  %tmp1 = alloca double, align 8
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store i32 %n4, i32* %n4.addr, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.152, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %n1.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end.154

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %2 = load i32* %k, align 4
  %3 = load i32* %j, align 4
  %sub6 = sub nsw i32 %3, 3
  %cmp7 = icmp slt i32 %2, %sub6
  br i1 %cmp7, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.5
  %4 = load i32* %j, align 4
  %5 = load i32* %n4.addr, align 4
  %6 = load i32* %k, align 4
  %mul = mul nsw i32 %5, %6
  %add = add nsw i32 %4, %mul
  %idxprom = sext i32 %add to i64
  %7 = load double** %A.addr, align 8
  %arrayidx = getelementptr inbounds double* %7, i64 %idxprom
  store double* %arrayidx, double** %tmp, align 8
  %8 = load double** %tmp, align 8
  %9 = load double* %8, align 8
  store double %9, double* %a_j0k0, align 8
  %10 = load double** %tmp, align 8
  %add.ptr = getelementptr inbounds double* %10, i64 1
  %11 = load double* %add.ptr, align 8
  store double %11, double* %a_j1k0, align 8
  %12 = load i32* %n4.addr, align 4
  %13 = load double** %tmp, align 8
  %idx.ext = sext i32 %12 to i64
  %add.ptr9 = getelementptr inbounds double* %13, i64 %idx.ext
  store double* %add.ptr9, double** %tmp, align 8
  %14 = load double** %tmp, align 8
  %15 = load double* %14, align 8
  store double %15, double* %a_j0k1, align 8
  %16 = load double** %tmp, align 8
  %add.ptr10 = getelementptr inbounds double* %16, i64 1
  %17 = load double* %add.ptr10, align 8
  store double %17, double* %a_j1k1, align 8
  %18 = load i32* %n4.addr, align 4
  %19 = load double** %tmp, align 8
  %idx.ext11 = sext i32 %18 to i64
  %add.ptr12 = getelementptr inbounds double* %19, i64 %idx.ext11
  store double* %add.ptr12, double** %tmp, align 8
  %20 = load double** %tmp, align 8
  %21 = load double* %20, align 8
  store double %21, double* %a_j0k2, align 8
  %22 = load double** %tmp, align 8
  %add.ptr13 = getelementptr inbounds double* %22, i64 1
  %23 = load double* %add.ptr13, align 8
  store double %23, double* %a_j1k2, align 8
  %24 = load i32* %n4.addr, align 4
  %25 = load double** %tmp, align 8
  %idx.ext14 = sext i32 %24 to i64
  %add.ptr15 = getelementptr inbounds double* %25, i64 %idx.ext14
  store double* %add.ptr15, double** %tmp, align 8
  %26 = load double** %tmp, align 8
  %27 = load double* %26, align 8
  store double %27, double* %a_j0k3, align 8
  %28 = load double** %tmp, align 8
  %add.ptr16 = getelementptr inbounds double* %28, i64 1
  %29 = load double* %add.ptr16, align 8
  store double %29, double* %a_j1k3, align 8
  %30 = load i32* %n3.addr, align 4
  %31 = load i32* %j, align 4
  %mul17 = mul nsw i32 %30, %31
  %idxprom18 = sext i32 %mul17 to i64
  %32 = load double** %B.addr, align 8
  %arrayidx19 = getelementptr inbounds double* %32, i64 %idxprom18
  store double* %arrayidx19, double** %dest0, align 8
  %33 = load double** %dest0, align 8
  %34 = load i32* %n3.addr, align 4
  %idx.ext20 = sext i32 %34 to i64
  %add.ptr21 = getelementptr inbounds double* %33, i64 %idx.ext20
  store double* %add.ptr21, double** %last, align 8
  store double* %add.ptr21, double** %dest1, align 8
  %35 = load i32* %n3.addr, align 4
  %36 = load i32* %k, align 4
  %mul22 = mul nsw i32 %35, %36
  %idxprom23 = sext i32 %mul22 to i64
  %37 = load double** %B.addr, align 8
  %arrayidx24 = getelementptr inbounds double* %37, i64 %idxprom23
  store double* %arrayidx24, double** %b0, align 8
  %38 = load double** %b0, align 8
  %39 = load i32* %n3.addr, align 4
  %idx.ext25 = sext i32 %39 to i64
  %add.ptr26 = getelementptr inbounds double* %38, i64 %idx.ext25
  store double* %add.ptr26, double** %b1, align 8
  %40 = load double** %b1, align 8
  %41 = load i32* %n3.addr, align 4
  %idx.ext27 = sext i32 %41 to i64
  %add.ptr28 = getelementptr inbounds double* %40, i64 %idx.ext27
  store double* %add.ptr28, double** %b2, align 8
  %42 = load double** %b2, align 8
  %43 = load i32* %n3.addr, align 4
  %idx.ext29 = sext i32 %43 to i64
  %add.ptr30 = getelementptr inbounds double* %42, i64 %idx.ext29
  store double* %add.ptr30, double** %b3, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.8
  %44 = load double** %dest0, align 8
  %45 = load double** %last, align 8
  %cmp31 = icmp ne double* %44, %45
  br i1 %cmp31, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %46 = load double** %dest0, align 8
  %47 = load double* %46, align 8
  store double %47, double* %t0, align 8
  %48 = load double** %dest1, align 8
  %49 = load double* %48, align 8
  store double %49, double* %t1, align 8
  %50 = load double** %b0, align 8
  %incdec.ptr = getelementptr inbounds double* %50, i32 1
  store double* %incdec.ptr, double** %b0, align 8
  %51 = load double* %50, align 8
  store double %51, double* %tmp0, align 8
  %52 = load double* %a_j0k0, align 8
  %53 = load double* %tmp0, align 8
  %mul32 = fmul double %52, %53
  %54 = load double* %t0, align 8
  %sub33 = fsub double %54, %mul32
  store double %sub33, double* %t0, align 8
  %55 = load double* %a_j1k0, align 8
  %56 = load double* %tmp0, align 8
  %mul34 = fmul double %55, %56
  %57 = load double* %t1, align 8
  %sub35 = fsub double %57, %mul34
  store double %sub35, double* %t1, align 8
  %58 = load double** %b1, align 8
  %incdec.ptr36 = getelementptr inbounds double* %58, i32 1
  store double* %incdec.ptr36, double** %b1, align 8
  %59 = load double* %58, align 8
  store double %59, double* %tmp1, align 8
  %60 = load double* %a_j0k1, align 8
  %61 = load double* %tmp1, align 8
  %mul37 = fmul double %60, %61
  %62 = load double* %t0, align 8
  %sub38 = fsub double %62, %mul37
  store double %sub38, double* %t0, align 8
  %63 = load double* %a_j1k1, align 8
  %64 = load double* %tmp1, align 8
  %mul39 = fmul double %63, %64
  %65 = load double* %t1, align 8
  %sub40 = fsub double %65, %mul39
  store double %sub40, double* %t1, align 8
  %66 = load double** %b2, align 8
  %incdec.ptr41 = getelementptr inbounds double* %66, i32 1
  store double* %incdec.ptr41, double** %b2, align 8
  %67 = load double* %66, align 8
  store double %67, double* %tmp0, align 8
  %68 = load double* %a_j0k2, align 8
  %69 = load double* %tmp0, align 8
  %mul42 = fmul double %68, %69
  %70 = load double* %t0, align 8
  %sub43 = fsub double %70, %mul42
  store double %sub43, double* %t0, align 8
  %71 = load double* %a_j1k2, align 8
  %72 = load double* %tmp0, align 8
  %mul44 = fmul double %71, %72
  %73 = load double* %t1, align 8
  %sub45 = fsub double %73, %mul44
  store double %sub45, double* %t1, align 8
  %74 = load double** %b3, align 8
  %incdec.ptr46 = getelementptr inbounds double* %74, i32 1
  store double* %incdec.ptr46, double** %b3, align 8
  %75 = load double* %74, align 8
  store double %75, double* %tmp1, align 8
  %76 = load double* %a_j0k3, align 8
  %77 = load double* %tmp1, align 8
  %mul47 = fmul double %76, %77
  %78 = load double* %t0, align 8
  %sub48 = fsub double %78, %mul47
  store double %sub48, double* %t0, align 8
  %79 = load double* %a_j1k3, align 8
  %80 = load double* %tmp1, align 8
  %mul49 = fmul double %79, %80
  %81 = load double* %t1, align 8
  %sub50 = fsub double %81, %mul49
  store double %sub50, double* %t1, align 8
  %82 = load double* %t0, align 8
  %83 = load double** %dest0, align 8
  %incdec.ptr51 = getelementptr inbounds double* %83, i32 1
  store double* %incdec.ptr51, double** %dest0, align 8
  store double %82, double* %83, align 8
  %84 = load double* %t1, align 8
  %85 = load double** %dest1, align 8
  %incdec.ptr52 = getelementptr inbounds double* %85, i32 1
  store double* %incdec.ptr52, double** %dest1, align 8
  store double %84, double* %85, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %86 = load i32* %k, align 4
  %add53 = add nsw i32 %86, 4
  store i32 %add53, i32* %k, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.93, %for.end
  %87 = load i32* %k, align 4
  %88 = load i32* %j, align 4
  %cmp55 = icmp slt i32 %87, %88
  br i1 %cmp55, label %for.body.56, label %for.end.95

for.body.56:                                      ; preds = %for.cond.54
  %89 = load i32* %j, align 4
  %90 = load i32* %n4.addr, align 4
  %91 = load i32* %k, align 4
  %mul57 = mul nsw i32 %90, %91
  %add58 = add nsw i32 %89, %mul57
  %idxprom59 = sext i32 %add58 to i64
  %92 = load double** %A.addr, align 8
  %arrayidx60 = getelementptr inbounds double* %92, i64 %idxprom59
  %93 = load double* %arrayidx60, align 8
  store double %93, double* %a_j0k0, align 8
  %94 = load i32* %j, align 4
  %add61 = add nsw i32 %94, 1
  %95 = load i32* %n4.addr, align 4
  %96 = load i32* %k, align 4
  %mul62 = mul nsw i32 %95, %96
  %add63 = add nsw i32 %add61, %mul62
  %idxprom64 = sext i32 %add63 to i64
  %97 = load double** %A.addr, align 8
  %arrayidx65 = getelementptr inbounds double* %97, i64 %idxprom64
  %98 = load double* %arrayidx65, align 8
  store double %98, double* %a_j1k0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.91, %for.body.56
  %99 = load i32* %i, align 4
  %100 = load i32* %n3.addr, align 4
  %cmp67 = icmp slt i32 %99, %100
  br i1 %cmp67, label %for.body.68, label %for.end.92

for.body.68:                                      ; preds = %for.cond.66
  %101 = load double* %a_j0k0, align 8
  %102 = load i32* %i, align 4
  %103 = load i32* %n3.addr, align 4
  %104 = load i32* %k, align 4
  %mul69 = mul nsw i32 %103, %104
  %add70 = add nsw i32 %102, %mul69
  %idxprom71 = sext i32 %add70 to i64
  %105 = load double** %B.addr, align 8
  %arrayidx72 = getelementptr inbounds double* %105, i64 %idxprom71
  %106 = load double* %arrayidx72, align 8
  %mul73 = fmul double %101, %106
  %107 = load i32* %i, align 4
  %108 = load i32* %n3.addr, align 4
  %109 = load i32* %j, align 4
  %add74 = add nsw i32 %109, 0
  %mul75 = mul nsw i32 %108, %add74
  %add76 = add nsw i32 %107, %mul75
  %idxprom77 = sext i32 %add76 to i64
  %110 = load double** %B.addr, align 8
  %arrayidx78 = getelementptr inbounds double* %110, i64 %idxprom77
  %111 = load double* %arrayidx78, align 8
  %sub79 = fsub double %111, %mul73
  store double %sub79, double* %arrayidx78, align 8
  %112 = load double* %a_j1k0, align 8
  %113 = load i32* %i, align 4
  %114 = load i32* %n3.addr, align 4
  %115 = load i32* %k, align 4
  %mul80 = mul nsw i32 %114, %115
  %add81 = add nsw i32 %113, %mul80
  %idxprom82 = sext i32 %add81 to i64
  %116 = load double** %B.addr, align 8
  %arrayidx83 = getelementptr inbounds double* %116, i64 %idxprom82
  %117 = load double* %arrayidx83, align 8
  %mul84 = fmul double %112, %117
  %118 = load i32* %i, align 4
  %119 = load i32* %n3.addr, align 4
  %120 = load i32* %j, align 4
  %add85 = add nsw i32 %120, 1
  %mul86 = mul nsw i32 %119, %add85
  %add87 = add nsw i32 %118, %mul86
  %idxprom88 = sext i32 %add87 to i64
  %121 = load double** %B.addr, align 8
  %arrayidx89 = getelementptr inbounds double* %121, i64 %idxprom88
  %122 = load double* %arrayidx89, align 8
  %sub90 = fsub double %122, %mul84
  store double %sub90, double* %arrayidx89, align 8
  br label %for.inc.91

for.inc.91:                                       ; preds = %for.body.68
  %123 = load i32* %i, align 4
  %inc = add nsw i32 %123, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.66

for.end.92:                                       ; preds = %for.cond.66
  br label %for.inc.93

for.inc.93:                                       ; preds = %for.end.92
  %124 = load i32* %k, align 4
  %inc94 = add nsw i32 %124, 1
  store i32 %inc94, i32* %k, align 4
  br label %for.cond.54

for.end.95:                                       ; preds = %for.cond.54
  %125 = load i32* %j, align 4
  %126 = load i32* %n4.addr, align 4
  %127 = load i32* %j, align 4
  %mul96 = mul nsw i32 %126, %127
  %add97 = add nsw i32 %125, %mul96
  %idxprom98 = sext i32 %add97 to i64
  %128 = load double** %A.addr, align 8
  %arrayidx99 = getelementptr inbounds double* %128, i64 %idxprom98
  %129 = load double* %arrayidx99, align 8
  %div = fdiv double 1.000000e+00, %129
  store double %div, double* %tmp0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.108, %for.end.95
  %130 = load i32* %i, align 4
  %131 = load i32* %n3.addr, align 4
  %cmp101 = icmp slt i32 %130, %131
  br i1 %cmp101, label %for.body.102, label %for.end.110

for.body.102:                                     ; preds = %for.cond.100
  %132 = load double* %tmp0, align 8
  %133 = load i32* %i, align 4
  %134 = load i32* %n3.addr, align 4
  %135 = load i32* %j, align 4
  %mul103 = mul nsw i32 %134, %135
  %add104 = add nsw i32 %133, %mul103
  %idxprom105 = sext i32 %add104 to i64
  %136 = load double** %B.addr, align 8
  %arrayidx106 = getelementptr inbounds double* %136, i64 %idxprom105
  %137 = load double* %arrayidx106, align 8
  %mul107 = fmul double %137, %132
  store double %mul107, double* %arrayidx106, align 8
  br label %for.inc.108

for.inc.108:                                      ; preds = %for.body.102
  %138 = load i32* %i, align 4
  %inc109 = add nsw i32 %138, 1
  store i32 %inc109, i32* %i, align 4
  br label %for.cond.100

for.end.110:                                      ; preds = %for.cond.100
  store i32 0, i32* %i, align 4
  br label %for.cond.111

for.cond.111:                                     ; preds = %for.inc.130, %for.end.110
  %139 = load i32* %i, align 4
  %140 = load i32* %n3.addr, align 4
  %cmp112 = icmp slt i32 %139, %140
  br i1 %cmp112, label %for.body.113, label %for.end.132

for.body.113:                                     ; preds = %for.cond.111
  %141 = load i32* %j, align 4
  %add114 = add nsw i32 %141, 1
  %142 = load i32* %n4.addr, align 4
  %143 = load i32* %k, align 4
  %mul115 = mul nsw i32 %142, %143
  %add116 = add nsw i32 %add114, %mul115
  %idxprom117 = sext i32 %add116 to i64
  %144 = load double** %A.addr, align 8
  %arrayidx118 = getelementptr inbounds double* %144, i64 %idxprom117
  %145 = load double* %arrayidx118, align 8
  store double %145, double* %a_j1k0, align 8
  %146 = load double* %a_j1k0, align 8
  %147 = load i32* %i, align 4
  %148 = load i32* %n3.addr, align 4
  %149 = load i32* %j, align 4
  %mul119 = mul nsw i32 %148, %149
  %add120 = add nsw i32 %147, %mul119
  %idxprom121 = sext i32 %add120 to i64
  %150 = load double** %B.addr, align 8
  %arrayidx122 = getelementptr inbounds double* %150, i64 %idxprom121
  %151 = load double* %arrayidx122, align 8
  %mul123 = fmul double %146, %151
  %152 = load i32* %i, align 4
  %153 = load i32* %n3.addr, align 4
  %154 = load i32* %j, align 4
  %add124 = add nsw i32 %154, 1
  %mul125 = mul nsw i32 %153, %add124
  %add126 = add nsw i32 %152, %mul125
  %idxprom127 = sext i32 %add126 to i64
  %155 = load double** %B.addr, align 8
  %arrayidx128 = getelementptr inbounds double* %155, i64 %idxprom127
  %156 = load double* %arrayidx128, align 8
  %sub129 = fsub double %156, %mul123
  store double %sub129, double* %arrayidx128, align 8
  br label %for.inc.130

for.inc.130:                                      ; preds = %for.body.113
  %157 = load i32* %i, align 4
  %inc131 = add nsw i32 %157, 1
  store i32 %inc131, i32* %i, align 4
  br label %for.cond.111

for.end.132:                                      ; preds = %for.cond.111
  %158 = load i32* %j, align 4
  %add133 = add nsw i32 %158, 1
  %159 = load i32* %n4.addr, align 4
  %160 = load i32* %j, align 4
  %add134 = add nsw i32 %160, 1
  %mul135 = mul nsw i32 %159, %add134
  %add136 = add nsw i32 %add133, %mul135
  %idxprom137 = sext i32 %add136 to i64
  %161 = load double** %A.addr, align 8
  %arrayidx138 = getelementptr inbounds double* %161, i64 %idxprom137
  %162 = load double* %arrayidx138, align 8
  %div139 = fdiv double 1.000000e+00, %162
  store double %div139, double* %tmp0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.140

for.cond.140:                                     ; preds = %for.inc.149, %for.end.132
  %163 = load i32* %i, align 4
  %164 = load i32* %n3.addr, align 4
  %cmp141 = icmp slt i32 %163, %164
  br i1 %cmp141, label %for.body.142, label %for.end.151

for.body.142:                                     ; preds = %for.cond.140
  %165 = load double* %tmp0, align 8
  %166 = load i32* %i, align 4
  %167 = load i32* %n3.addr, align 4
  %168 = load i32* %j, align 4
  %add143 = add nsw i32 %168, 1
  %mul144 = mul nsw i32 %167, %add143
  %add145 = add nsw i32 %166, %mul144
  %idxprom146 = sext i32 %add145 to i64
  %169 = load double** %B.addr, align 8
  %arrayidx147 = getelementptr inbounds double* %169, i64 %idxprom146
  %170 = load double* %arrayidx147, align 8
  %mul148 = fmul double %170, %165
  store double %mul148, double* %arrayidx147, align 8
  br label %for.inc.149

for.inc.149:                                      ; preds = %for.body.142
  %171 = load i32* %i, align 4
  %inc150 = add nsw i32 %171, 1
  store i32 %inc150, i32* %i, align 4
  br label %for.cond.140

for.end.151:                                      ; preds = %for.cond.140
  br label %for.inc.152

for.inc.152:                                      ; preds = %for.end.151
  %172 = load i32* %j, align 4
  %add153 = add nsw i32 %172, 2
  store i32 %add153, i32* %j, align 4
  br label %for.cond

for.end.154:                                      ; preds = %for.cond
  br label %for.cond.155

for.cond.155:                                     ; preds = %for.inc.199, %for.end.154
  %173 = load i32* %j, align 4
  %174 = load i32* %n1.addr, align 4
  %cmp156 = icmp slt i32 %173, %174
  br i1 %cmp156, label %for.body.157, label %for.end.201

for.body.157:                                     ; preds = %for.cond.155
  store i32 0, i32* %k, align 4
  br label %for.cond.158

for.cond.158:                                     ; preds = %for.inc.181, %for.body.157
  %175 = load i32* %k, align 4
  %176 = load i32* %j, align 4
  %cmp159 = icmp slt i32 %175, %176
  br i1 %cmp159, label %for.body.160, label %for.end.183

for.body.160:                                     ; preds = %for.cond.158
  %177 = load i32* %j, align 4
  %178 = load i32* %n4.addr, align 4
  %179 = load i32* %k, align 4
  %mul161 = mul nsw i32 %178, %179
  %add162 = add nsw i32 %177, %mul161
  %idxprom163 = sext i32 %add162 to i64
  %180 = load double** %A.addr, align 8
  %arrayidx164 = getelementptr inbounds double* %180, i64 %idxprom163
  %181 = load double* %arrayidx164, align 8
  store double %181, double* %a_j0k0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.165

for.cond.165:                                     ; preds = %for.inc.178, %for.body.160
  %182 = load i32* %i, align 4
  %183 = load i32* %n3.addr, align 4
  %cmp166 = icmp slt i32 %182, %183
  br i1 %cmp166, label %for.body.167, label %for.end.180

for.body.167:                                     ; preds = %for.cond.165
  %184 = load double* %a_j0k0, align 8
  %185 = load i32* %i, align 4
  %186 = load i32* %n3.addr, align 4
  %187 = load i32* %k, align 4
  %mul168 = mul nsw i32 %186, %187
  %add169 = add nsw i32 %185, %mul168
  %idxprom170 = sext i32 %add169 to i64
  %188 = load double** %B.addr, align 8
  %arrayidx171 = getelementptr inbounds double* %188, i64 %idxprom170
  %189 = load double* %arrayidx171, align 8
  %mul172 = fmul double %184, %189
  %190 = load i32* %i, align 4
  %191 = load i32* %n3.addr, align 4
  %192 = load i32* %j, align 4
  %mul173 = mul nsw i32 %191, %192
  %add174 = add nsw i32 %190, %mul173
  %idxprom175 = sext i32 %add174 to i64
  %193 = load double** %B.addr, align 8
  %arrayidx176 = getelementptr inbounds double* %193, i64 %idxprom175
  %194 = load double* %arrayidx176, align 8
  %sub177 = fsub double %194, %mul172
  store double %sub177, double* %arrayidx176, align 8
  br label %for.inc.178

for.inc.178:                                      ; preds = %for.body.167
  %195 = load i32* %i, align 4
  %inc179 = add nsw i32 %195, 1
  store i32 %inc179, i32* %i, align 4
  br label %for.cond.165

for.end.180:                                      ; preds = %for.cond.165
  br label %for.inc.181

for.inc.181:                                      ; preds = %for.end.180
  %196 = load i32* %k, align 4
  %inc182 = add nsw i32 %196, 1
  store i32 %inc182, i32* %k, align 4
  br label %for.cond.158

for.end.183:                                      ; preds = %for.cond.158
  store i32 0, i32* %i, align 4
  br label %for.cond.184

for.cond.184:                                     ; preds = %for.inc.196, %for.end.183
  %197 = load i32* %i, align 4
  %198 = load i32* %n3.addr, align 4
  %cmp185 = icmp slt i32 %197, %198
  br i1 %cmp185, label %for.body.186, label %for.end.198

for.body.186:                                     ; preds = %for.cond.184
  %199 = load i32* %j, align 4
  %200 = load i32* %n4.addr, align 4
  %201 = load i32* %j, align 4
  %mul187 = mul nsw i32 %200, %201
  %add188 = add nsw i32 %199, %mul187
  %idxprom189 = sext i32 %add188 to i64
  %202 = load double** %A.addr, align 8
  %arrayidx190 = getelementptr inbounds double* %202, i64 %idxprom189
  %203 = load double* %arrayidx190, align 8
  %204 = load i32* %i, align 4
  %205 = load i32* %n3.addr, align 4
  %206 = load i32* %j, align 4
  %mul191 = mul nsw i32 %205, %206
  %add192 = add nsw i32 %204, %mul191
  %idxprom193 = sext i32 %add192 to i64
  %207 = load double** %B.addr, align 8
  %arrayidx194 = getelementptr inbounds double* %207, i64 %idxprom193
  %208 = load double* %arrayidx194, align 8
  %div195 = fdiv double %208, %203
  store double %div195, double* %arrayidx194, align 8
  br label %for.inc.196

for.inc.196:                                      ; preds = %for.body.186
  %209 = load i32* %i, align 4
  %inc197 = add nsw i32 %209, 1
  store i32 %inc197, i32* %i, align 4
  br label %for.cond.184

for.end.198:                                      ; preds = %for.cond.184
  br label %for.inc.199

for.inc.199:                                      ; preds = %for.end.198
  %210 = load i32* %j, align 4
  %inc200 = add nsw i32 %210, 1
  store i32 %inc200, i32* %j, align 4
  br label %for.cond.155

for.end.201:                                      ; preds = %for.cond.155
  %211 = load i32* %retval
  ret i32 %211
}

; Function Attrs: nounwind uwtable
define internal i32 @BMod(i32 %top, i32 %bend, i32 %n1, i32 %n2, i32 %n3, double* %top_nz, double* %bend_nz, double* %dest_nz, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %top.addr = alloca i32, align 4
  %bend.addr = alloca i32, align 4
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %top_nz.addr = alloca double*, align 8
  %bend_nz.addr = alloca double*, align 8
  %dest_nz.addr = alloca double*, align 8
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %is = alloca i32, align 4
  %il = alloca i32, align 4
  %ks = alloca i32, align 4
  %kl = alloca i32, align 4
  %hbs = alloca i32, align 4
  %B = alloca double*, align 8
  %A = alloca double*, align 8
  %C = alloca double*, align 8
  store i32 %top, i32* %top.addr, align 4
  store i32 %bend, i32* %bend.addr, align 4
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store double* %top_nz, double** %top_nz.addr, align 8
  store double* %bend_nz, double** %bend_nz.addr, align 8
  store double* %dest_nz, double** %dest_nz.addr, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load double** %top_nz.addr, align 8
  store double* %0, double** %A, align 8
  %1 = load double** %bend_nz.addr, align 8
  store double* %1, double** %B, align 8
  %2 = load double** %dest_nz.addr, align 8
  store double* %2, double** %C, align 8
  %3 = load i32* %n2.addr, align 4
  %4 = load i32* %n3.addr, align 4
  %mul = mul nsw i32 %3, %4
  %5 = load i32* @BS, align 4
  %6 = load i32* @BS, align 4
  %mul1 = mul nsw i32 %5, %6
  %cmp = icmp sle i32 %mul, %mul1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load double** %B, align 8
  %8 = load double** %A, align 8
  %9 = load double** %C, align 8
  %10 = load i32* %n1.addr, align 4
  %11 = load i32* %n2.addr, align 4
  %12 = load i32* %n3.addr, align 4
  %13 = load i32* %n3.addr, align 4
  %14 = load i32* %n1.addr, align 4
  %call = call i32 @OneMatmat(double* %7, double* %8, double* %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14)
  br label %if.end.45

if.else:                                          ; preds = %entry
  %15 = load i32* %n3.addr, align 4
  %cmp2 = icmp slt i32 %15, 128
  br i1 %cmp2, label %if.then.3, label %if.else.13

if.then.3:                                        ; preds = %if.else
  %16 = load i32* %n3.addr, align 4
  %div = sdiv i32 2048, %16
  store i32 %div, i32* %hbs, align 4
  store i32 0, i32* %ks, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.3
  %17 = load i32* %ks, align 4
  %18 = load i32* %n2.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i32* %ks, align 4
  %20 = load i32* %hbs, align 4
  %add = add nsw i32 %19, %20
  store i32 %add, i32* %kl, align 4
  %21 = load i32* %kl, align 4
  %22 = load i32* %n2.addr, align 4
  %cmp5 = icmp sgt i32 %21, %22
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %for.body
  %23 = load i32* %n2.addr, align 4
  store i32 %23, i32* %kl, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.6, %for.body
  %24 = load i32* %ks, align 4
  %25 = load i32* %n3.addr, align 4
  %mul7 = mul nsw i32 %24, %25
  %idxprom = sext i32 %mul7 to i64
  %26 = load double** %B, align 8
  %arrayidx = getelementptr inbounds double* %26, i64 %idxprom
  %27 = load i32* %ks, align 4
  %28 = load i32* %n1.addr, align 4
  %mul8 = mul nsw i32 %27, %28
  %idxprom9 = sext i32 %mul8 to i64
  %29 = load double** %A, align 8
  %arrayidx10 = getelementptr inbounds double* %29, i64 %idxprom9
  %30 = load double** %C, align 8
  %31 = load i32* %n1.addr, align 4
  %32 = load i32* %kl, align 4
  %33 = load i32* %ks, align 4
  %sub = sub nsw i32 %32, %33
  %34 = load i32* %n3.addr, align 4
  %35 = load i32* %n3.addr, align 4
  %36 = load i32* %n1.addr, align 4
  %call11 = call i32 @OneMatmat(double* %arrayidx, double* %arrayidx10, double* %30, i32 %31, i32 %sub, i32 %34, i32 %35, i32 %36)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %37 = load i32* %hbs, align 4
  %38 = load i32* %ks, align 4
  %add12 = add nsw i32 %38, %37
  store i32 %add12, i32* %ks, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.44

if.else.13:                                       ; preds = %if.else
  store i32 0, i32* %is, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.41, %if.else.13
  %39 = load i32* %is, align 4
  %40 = load i32* %n3.addr, align 4
  %cmp15 = icmp slt i32 %39, %40
  br i1 %cmp15, label %for.body.16, label %for.end.43

for.body.16:                                      ; preds = %for.cond.14
  %41 = load i32* %is, align 4
  %42 = load i32* @BS, align 4
  %add17 = add nsw i32 %41, %42
  store i32 %add17, i32* %il, align 4
  %43 = load i32* %il, align 4
  %44 = load i32* %n3.addr, align 4
  %cmp18 = icmp sgt i32 %43, %44
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %for.body.16
  %45 = load i32* %n3.addr, align 4
  store i32 %45, i32* %il, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %for.body.16
  store i32 0, i32* %ks, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.38, %if.end.20
  %46 = load i32* %ks, align 4
  %47 = load i32* %n2.addr, align 4
  %cmp22 = icmp slt i32 %46, %47
  br i1 %cmp22, label %for.body.23, label %for.end.40

for.body.23:                                      ; preds = %for.cond.21
  %48 = load i32* %ks, align 4
  %49 = load i32* @BS, align 4
  %add24 = add nsw i32 %48, %49
  store i32 %add24, i32* %kl, align 4
  %50 = load i32* %kl, align 4
  %51 = load i32* %n2.addr, align 4
  %cmp25 = icmp sgt i32 %50, %51
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %for.body.23
  %52 = load i32* %n2.addr, align 4
  store i32 %52, i32* %kl, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %for.body.23
  %53 = load double** %B, align 8
  %54 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp = getelementptr inbounds %struct.LocalCopies* %54, i32 0, i32 0
  %55 = load double** %blktmp, align 8
  %56 = load i32* %n3.addr, align 4
  %57 = load i32* %is, align 4
  %58 = load i32* %ks, align 4
  %59 = load i32* %il, align 4
  %60 = load i32* %kl, align 4
  %61 = load i32* %MyNum.addr, align 4
  %62 = load %struct.LocalCopies** %lc.addr, align 8
  %call28 = call i32 @CopyBlock(double* %53, double* %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, %struct.LocalCopies* %62)
  %63 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp29 = getelementptr inbounds %struct.LocalCopies* %63, i32 0, i32 0
  %64 = load double** %blktmp29, align 8
  %65 = load i32* %ks, align 4
  %66 = load i32* %n1.addr, align 4
  %mul30 = mul nsw i32 %65, %66
  %idxprom31 = sext i32 %mul30 to i64
  %67 = load double** %A, align 8
  %arrayidx32 = getelementptr inbounds double* %67, i64 %idxprom31
  %68 = load i32* %is, align 4
  %idxprom33 = sext i32 %68 to i64
  %69 = load double** %C, align 8
  %arrayidx34 = getelementptr inbounds double* %69, i64 %idxprom33
  %70 = load i32* %n1.addr, align 4
  %71 = load i32* %kl, align 4
  %72 = load i32* %ks, align 4
  %sub35 = sub nsw i32 %71, %72
  %73 = load i32* %il, align 4
  %74 = load i32* %is, align 4
  %sub36 = sub nsw i32 %73, %74
  %75 = load i32* %n3.addr, align 4
  %76 = load i32* %n1.addr, align 4
  %call37 = call i32 @OneMatmat(double* %64, double* %arrayidx32, double* %arrayidx34, i32 %70, i32 %sub35, i32 %sub36, i32 %75, i32 %76)
  br label %for.inc.38

for.inc.38:                                       ; preds = %if.end.27
  %77 = load i32* @BS, align 4
  %78 = load i32* %ks, align 4
  %add39 = add nsw i32 %78, %77
  store i32 %add39, i32* %ks, align 4
  br label %for.cond.21

for.end.40:                                       ; preds = %for.cond.21
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.end.40
  %79 = load i32* @BS, align 4
  %80 = load i32* %is, align 4
  %add42 = add nsw i32 %80, %79
  store i32 %add42, i32* %is, align 4
  br label %for.cond.14

for.end.43:                                       ; preds = %for.cond.14
  br label %if.end.44

if.end.44:                                        ; preds = %for.end.43, %for.end
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then
  %81 = load i32* %retval
  ret i32 %81
}

; Function Attrs: nounwind uwtable
define internal i32 @CopyBlockBack(double* %B, double* %src, i32 %n3, i32 %is, i32 %ks, i32 %il, i32 %kl) {
entry:
  %retval = alloca i32, align 4
  %B.addr = alloca double*, align 8
  %src.addr = alloca double*, align 8
  %n3.addr = alloca i32, align 4
  %is.addr = alloca i32, align 4
  %ks.addr = alloca i32, align 4
  %il.addr = alloca i32, align 4
  %kl.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %bs = alloca i32, align 4
  store double* %B, double** %B.addr, align 8
  store double* %src, double** %src.addr, align 8
  store i32 %n3, i32* %n3.addr, align 4
  store i32 %is, i32* %is.addr, align 4
  store i32 %ks, i32* %ks.addr, align 4
  store i32 %il, i32* %il.addr, align 4
  store i32 %kl, i32* %kl.addr, align 4
  %0 = load i32* %il.addr, align 4
  %1 = load i32* %is.addr, align 4
  %sub = sub nsw i32 %0, %1
  store i32 %sub, i32* %bs, align 4
  %2 = load i32* %ks.addr, align 4
  store i32 %2, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %3 = load i32* %k, align 4
  %4 = load i32* %kl.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end.12

for.body:                                         ; preds = %for.cond
  %5 = load i32* %is.addr, align 4
  store i32 %5, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %6 = load i32* %i, align 4
  %7 = load i32* %il.addr, align 4
  %cmp2 = icmp slt i32 %6, %7
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %8 = load i32* %i, align 4
  %9 = load i32* %is.addr, align 4
  %sub4 = sub nsw i32 %8, %9
  %10 = load i32* %k, align 4
  %11 = load i32* %ks.addr, align 4
  %sub5 = sub nsw i32 %10, %11
  %12 = load i32* %bs, align 4
  %mul = mul nsw i32 %sub5, %12
  %add = add nsw i32 %sub4, %mul
  %idxprom = sext i32 %add to i64
  %13 = load double** %src.addr, align 8
  %arrayidx = getelementptr inbounds double* %13, i64 %idxprom
  %14 = load double* %arrayidx, align 8
  %15 = load i32* %i, align 4
  %16 = load i32* %k, align 4
  %17 = load i32* %n3.addr, align 4
  %mul6 = mul nsw i32 %16, %17
  %add7 = add nsw i32 %15, %mul6
  %idxprom8 = sext i32 %add7 to i64
  %18 = load double** %B.addr, align 8
  %arrayidx9 = getelementptr inbounds double* %18, i64 %idxprom8
  store double %14, double* %arrayidx9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.3
  %19 = load i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.end
  %20 = load i32* %k, align 4
  %inc11 = add nsw i32 %20, 1
  store i32 %inc11, i32* %k, align 4
  br label %for.cond

for.end.12:                                       ; preds = %for.cond
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @OneMatmat(double* %B, double* %A, double* %C, i32 %n1, i32 %n2, i32 %n3, i32 %n4, i32 %n5) {
entry:
  %retval = alloca i32, align 4
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %n4.addr = alloca i32, align 4
  %n5.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %a_j0k0 = alloca double, align 8
  %a_j0k1 = alloca double, align 8
  %a_j0k2 = alloca double, align 8
  %a_j0k3 = alloca double, align 8
  %a_j0k4 = alloca double, align 8
  %a_j0k5 = alloca double, align 8
  %a_j0k6 = alloca double, align 8
  %a_j0k7 = alloca double, align 8
  %a_j1k0 = alloca double, align 8
  %a_j1k1 = alloca double, align 8
  %a_j1k2 = alloca double, align 8
  %a_j1k3 = alloca double, align 8
  %a_j1k4 = alloca double, align 8
  %a_j1k5 = alloca double, align 8
  %a_j1k6 = alloca double, align 8
  %a_j1k7 = alloca double, align 8
  %b0 = alloca double*, align 8
  %b1 = alloca double*, align 8
  %b2 = alloca double*, align 8
  %b3 = alloca double*, align 8
  %b4 = alloca double*, align 8
  %b5 = alloca double*, align 8
  %b6 = alloca double*, align 8
  %b7 = alloca double*, align 8
  %dest0 = alloca double*, align 8
  %dest1 = alloca double*, align 8
  %last = alloca double*, align 8
  %tmp = alloca double*, align 8
  %t0 = alloca double, align 8
  %t1 = alloca double, align 8
  %tmp0 = alloca double, align 8
  %tmp1 = alloca double, align 8
  store double* %B, double** %B.addr, align 8
  store double* %A, double** %A.addr, align 8
  store double* %C, double** %C.addr, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store i32 %n4, i32* %n4.addr, align 4
  store i32 %n5, i32* %n5.addr, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.196, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %n1.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end.198

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %2 = load i32* %k, align 4
  %3 = load i32* %n2.addr, align 4
  %sub6 = sub nsw i32 %3, 7
  %cmp7 = icmp slt i32 %2, %sub6
  br i1 %cmp7, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.5
  %4 = load i32* %j, align 4
  %5 = load i32* %n5.addr, align 4
  %6 = load i32* %k, align 4
  %mul = mul nsw i32 %5, %6
  %add = add nsw i32 %4, %mul
  %idxprom = sext i32 %add to i64
  %7 = load double** %A.addr, align 8
  %arrayidx = getelementptr inbounds double* %7, i64 %idxprom
  store double* %arrayidx, double** %tmp, align 8
  %8 = load double** %tmp, align 8
  %9 = load double* %8, align 8
  store double %9, double* %a_j0k0, align 8
  %10 = load double** %tmp, align 8
  %add.ptr = getelementptr inbounds double* %10, i64 1
  %11 = load double* %add.ptr, align 8
  store double %11, double* %a_j1k0, align 8
  %12 = load i32* %n5.addr, align 4
  %13 = load double** %tmp, align 8
  %idx.ext = sext i32 %12 to i64
  %add.ptr9 = getelementptr inbounds double* %13, i64 %idx.ext
  store double* %add.ptr9, double** %tmp, align 8
  %14 = load double** %tmp, align 8
  %15 = load double* %14, align 8
  store double %15, double* %a_j0k1, align 8
  %16 = load double** %tmp, align 8
  %add.ptr10 = getelementptr inbounds double* %16, i64 1
  %17 = load double* %add.ptr10, align 8
  store double %17, double* %a_j1k1, align 8
  %18 = load i32* %n5.addr, align 4
  %19 = load double** %tmp, align 8
  %idx.ext11 = sext i32 %18 to i64
  %add.ptr12 = getelementptr inbounds double* %19, i64 %idx.ext11
  store double* %add.ptr12, double** %tmp, align 8
  %20 = load double** %tmp, align 8
  %21 = load double* %20, align 8
  store double %21, double* %a_j0k2, align 8
  %22 = load double** %tmp, align 8
  %add.ptr13 = getelementptr inbounds double* %22, i64 1
  %23 = load double* %add.ptr13, align 8
  store double %23, double* %a_j1k2, align 8
  %24 = load i32* %n5.addr, align 4
  %25 = load double** %tmp, align 8
  %idx.ext14 = sext i32 %24 to i64
  %add.ptr15 = getelementptr inbounds double* %25, i64 %idx.ext14
  store double* %add.ptr15, double** %tmp, align 8
  %26 = load double** %tmp, align 8
  %27 = load double* %26, align 8
  store double %27, double* %a_j0k3, align 8
  %28 = load double** %tmp, align 8
  %add.ptr16 = getelementptr inbounds double* %28, i64 1
  %29 = load double* %add.ptr16, align 8
  store double %29, double* %a_j1k3, align 8
  %30 = load i32* %n5.addr, align 4
  %31 = load double** %tmp, align 8
  %idx.ext17 = sext i32 %30 to i64
  %add.ptr18 = getelementptr inbounds double* %31, i64 %idx.ext17
  store double* %add.ptr18, double** %tmp, align 8
  %32 = load double** %tmp, align 8
  %33 = load double* %32, align 8
  store double %33, double* %a_j0k4, align 8
  %34 = load double** %tmp, align 8
  %add.ptr19 = getelementptr inbounds double* %34, i64 1
  %35 = load double* %add.ptr19, align 8
  store double %35, double* %a_j1k4, align 8
  %36 = load i32* %n5.addr, align 4
  %37 = load double** %tmp, align 8
  %idx.ext20 = sext i32 %36 to i64
  %add.ptr21 = getelementptr inbounds double* %37, i64 %idx.ext20
  store double* %add.ptr21, double** %tmp, align 8
  %38 = load double** %tmp, align 8
  %39 = load double* %38, align 8
  store double %39, double* %a_j0k5, align 8
  %40 = load double** %tmp, align 8
  %add.ptr22 = getelementptr inbounds double* %40, i64 1
  %41 = load double* %add.ptr22, align 8
  store double %41, double* %a_j1k5, align 8
  %42 = load i32* %n5.addr, align 4
  %43 = load double** %tmp, align 8
  %idx.ext23 = sext i32 %42 to i64
  %add.ptr24 = getelementptr inbounds double* %43, i64 %idx.ext23
  store double* %add.ptr24, double** %tmp, align 8
  %44 = load double** %tmp, align 8
  %45 = load double* %44, align 8
  store double %45, double* %a_j0k6, align 8
  %46 = load double** %tmp, align 8
  %add.ptr25 = getelementptr inbounds double* %46, i64 1
  %47 = load double* %add.ptr25, align 8
  store double %47, double* %a_j1k6, align 8
  %48 = load i32* %n5.addr, align 4
  %49 = load double** %tmp, align 8
  %idx.ext26 = sext i32 %48 to i64
  %add.ptr27 = getelementptr inbounds double* %49, i64 %idx.ext26
  store double* %add.ptr27, double** %tmp, align 8
  %50 = load double** %tmp, align 8
  %51 = load double* %50, align 8
  store double %51, double* %a_j0k7, align 8
  %52 = load double** %tmp, align 8
  %add.ptr28 = getelementptr inbounds double* %52, i64 1
  %53 = load double* %add.ptr28, align 8
  store double %53, double* %a_j1k7, align 8
  %54 = load i32* %n4.addr, align 4
  %55 = load i32* %j, align 4
  %mul29 = mul nsw i32 %54, %55
  %idxprom30 = sext i32 %mul29 to i64
  %56 = load double** %C.addr, align 8
  %arrayidx31 = getelementptr inbounds double* %56, i64 %idxprom30
  store double* %arrayidx31, double** %dest0, align 8
  %57 = load double** %dest0, align 8
  %58 = load i32* %n4.addr, align 4
  %idx.ext32 = sext i32 %58 to i64
  %add.ptr33 = getelementptr inbounds double* %57, i64 %idx.ext32
  store double* %add.ptr33, double** %dest1, align 8
  %59 = load double** %dest0, align 8
  %60 = load i32* %n3.addr, align 4
  %idx.ext34 = sext i32 %60 to i64
  %add.ptr35 = getelementptr inbounds double* %59, i64 %idx.ext34
  store double* %add.ptr35, double** %last, align 8
  %61 = load i32* %n3.addr, align 4
  %62 = load i32* %k, align 4
  %mul36 = mul nsw i32 %61, %62
  %idxprom37 = sext i32 %mul36 to i64
  %63 = load double** %B.addr, align 8
  %arrayidx38 = getelementptr inbounds double* %63, i64 %idxprom37
  store double* %arrayidx38, double** %b0, align 8
  %64 = load double** %b0, align 8
  %65 = load i32* %n3.addr, align 4
  %idx.ext39 = sext i32 %65 to i64
  %add.ptr40 = getelementptr inbounds double* %64, i64 %idx.ext39
  store double* %add.ptr40, double** %b1, align 8
  %66 = load double** %b1, align 8
  %67 = load i32* %n3.addr, align 4
  %idx.ext41 = sext i32 %67 to i64
  %add.ptr42 = getelementptr inbounds double* %66, i64 %idx.ext41
  store double* %add.ptr42, double** %b2, align 8
  %68 = load double** %b2, align 8
  %69 = load i32* %n3.addr, align 4
  %idx.ext43 = sext i32 %69 to i64
  %add.ptr44 = getelementptr inbounds double* %68, i64 %idx.ext43
  store double* %add.ptr44, double** %b3, align 8
  %70 = load double** %b3, align 8
  %71 = load i32* %n3.addr, align 4
  %idx.ext45 = sext i32 %71 to i64
  %add.ptr46 = getelementptr inbounds double* %70, i64 %idx.ext45
  store double* %add.ptr46, double** %b4, align 8
  %72 = load double** %b4, align 8
  %73 = load i32* %n3.addr, align 4
  %idx.ext47 = sext i32 %73 to i64
  %add.ptr48 = getelementptr inbounds double* %72, i64 %idx.ext47
  store double* %add.ptr48, double** %b5, align 8
  %74 = load double** %b5, align 8
  %75 = load i32* %n3.addr, align 4
  %idx.ext49 = sext i32 %75 to i64
  %add.ptr50 = getelementptr inbounds double* %74, i64 %idx.ext49
  store double* %add.ptr50, double** %b6, align 8
  %76 = load double** %b6, align 8
  %77 = load i32* %n3.addr, align 4
  %idx.ext51 = sext i32 %77 to i64
  %add.ptr52 = getelementptr inbounds double* %76, i64 %idx.ext51
  store double* %add.ptr52, double** %b7, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.8
  %78 = load double** %dest0, align 8
  %79 = load double** %last, align 8
  %cmp53 = icmp ne double* %78, %79
  br i1 %cmp53, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %80 = load double** %dest0, align 8
  %81 = load double* %80, align 8
  store double %81, double* %t0, align 8
  %82 = load double** %dest1, align 8
  %83 = load double* %82, align 8
  store double %83, double* %t1, align 8
  %84 = load double** %b0, align 8
  %incdec.ptr = getelementptr inbounds double* %84, i32 1
  store double* %incdec.ptr, double** %b0, align 8
  %85 = load double* %84, align 8
  store double %85, double* %tmp0, align 8
  %86 = load double* %a_j0k0, align 8
  %87 = load double* %tmp0, align 8
  %mul54 = fmul double %86, %87
  %88 = load double* %t0, align 8
  %sub55 = fsub double %88, %mul54
  store double %sub55, double* %t0, align 8
  %89 = load double* %a_j1k0, align 8
  %90 = load double* %tmp0, align 8
  %mul56 = fmul double %89, %90
  %91 = load double* %t1, align 8
  %sub57 = fsub double %91, %mul56
  store double %sub57, double* %t1, align 8
  %92 = load double** %b1, align 8
  %incdec.ptr58 = getelementptr inbounds double* %92, i32 1
  store double* %incdec.ptr58, double** %b1, align 8
  %93 = load double* %92, align 8
  store double %93, double* %tmp1, align 8
  %94 = load double* %a_j0k1, align 8
  %95 = load double* %tmp1, align 8
  %mul59 = fmul double %94, %95
  %96 = load double* %t0, align 8
  %sub60 = fsub double %96, %mul59
  store double %sub60, double* %t0, align 8
  %97 = load double* %a_j1k1, align 8
  %98 = load double* %tmp1, align 8
  %mul61 = fmul double %97, %98
  %99 = load double* %t1, align 8
  %sub62 = fsub double %99, %mul61
  store double %sub62, double* %t1, align 8
  %100 = load double** %b2, align 8
  %incdec.ptr63 = getelementptr inbounds double* %100, i32 1
  store double* %incdec.ptr63, double** %b2, align 8
  %101 = load double* %100, align 8
  store double %101, double* %tmp0, align 8
  %102 = load double* %a_j0k2, align 8
  %103 = load double* %tmp0, align 8
  %mul64 = fmul double %102, %103
  %104 = load double* %t0, align 8
  %sub65 = fsub double %104, %mul64
  store double %sub65, double* %t0, align 8
  %105 = load double* %a_j1k2, align 8
  %106 = load double* %tmp0, align 8
  %mul66 = fmul double %105, %106
  %107 = load double* %t1, align 8
  %sub67 = fsub double %107, %mul66
  store double %sub67, double* %t1, align 8
  %108 = load double** %b3, align 8
  %incdec.ptr68 = getelementptr inbounds double* %108, i32 1
  store double* %incdec.ptr68, double** %b3, align 8
  %109 = load double* %108, align 8
  store double %109, double* %tmp1, align 8
  %110 = load double* %a_j0k3, align 8
  %111 = load double* %tmp1, align 8
  %mul69 = fmul double %110, %111
  %112 = load double* %t0, align 8
  %sub70 = fsub double %112, %mul69
  store double %sub70, double* %t0, align 8
  %113 = load double* %a_j1k3, align 8
  %114 = load double* %tmp1, align 8
  %mul71 = fmul double %113, %114
  %115 = load double* %t1, align 8
  %sub72 = fsub double %115, %mul71
  store double %sub72, double* %t1, align 8
  %116 = load double** %b4, align 8
  %incdec.ptr73 = getelementptr inbounds double* %116, i32 1
  store double* %incdec.ptr73, double** %b4, align 8
  %117 = load double* %116, align 8
  store double %117, double* %tmp0, align 8
  %118 = load double* %a_j0k4, align 8
  %119 = load double* %tmp0, align 8
  %mul74 = fmul double %118, %119
  %120 = load double* %t0, align 8
  %sub75 = fsub double %120, %mul74
  store double %sub75, double* %t0, align 8
  %121 = load double* %a_j1k4, align 8
  %122 = load double* %tmp0, align 8
  %mul76 = fmul double %121, %122
  %123 = load double* %t1, align 8
  %sub77 = fsub double %123, %mul76
  store double %sub77, double* %t1, align 8
  %124 = load double** %b5, align 8
  %incdec.ptr78 = getelementptr inbounds double* %124, i32 1
  store double* %incdec.ptr78, double** %b5, align 8
  %125 = load double* %124, align 8
  store double %125, double* %tmp1, align 8
  %126 = load double* %a_j0k5, align 8
  %127 = load double* %tmp1, align 8
  %mul79 = fmul double %126, %127
  %128 = load double* %t0, align 8
  %sub80 = fsub double %128, %mul79
  store double %sub80, double* %t0, align 8
  %129 = load double* %a_j1k5, align 8
  %130 = load double* %tmp1, align 8
  %mul81 = fmul double %129, %130
  %131 = load double* %t1, align 8
  %sub82 = fsub double %131, %mul81
  store double %sub82, double* %t1, align 8
  %132 = load double** %b6, align 8
  %incdec.ptr83 = getelementptr inbounds double* %132, i32 1
  store double* %incdec.ptr83, double** %b6, align 8
  %133 = load double* %132, align 8
  store double %133, double* %tmp0, align 8
  %134 = load double* %a_j0k6, align 8
  %135 = load double* %tmp0, align 8
  %mul84 = fmul double %134, %135
  %136 = load double* %t0, align 8
  %sub85 = fsub double %136, %mul84
  store double %sub85, double* %t0, align 8
  %137 = load double* %a_j1k6, align 8
  %138 = load double* %tmp0, align 8
  %mul86 = fmul double %137, %138
  %139 = load double* %t1, align 8
  %sub87 = fsub double %139, %mul86
  store double %sub87, double* %t1, align 8
  %140 = load double** %b7, align 8
  %incdec.ptr88 = getelementptr inbounds double* %140, i32 1
  store double* %incdec.ptr88, double** %b7, align 8
  %141 = load double* %140, align 8
  store double %141, double* %tmp1, align 8
  %142 = load double* %a_j0k7, align 8
  %143 = load double* %tmp1, align 8
  %mul89 = fmul double %142, %143
  %144 = load double* %t0, align 8
  %sub90 = fsub double %144, %mul89
  store double %sub90, double* %t0, align 8
  %145 = load double* %a_j1k7, align 8
  %146 = load double* %tmp1, align 8
  %mul91 = fmul double %145, %146
  %147 = load double* %t1, align 8
  %sub92 = fsub double %147, %mul91
  store double %sub92, double* %t1, align 8
  %148 = load double* %t0, align 8
  %149 = load double** %dest0, align 8
  %incdec.ptr93 = getelementptr inbounds double* %149, i32 1
  store double* %incdec.ptr93, double** %dest0, align 8
  store double %148, double* %149, align 8
  %150 = load double* %t1, align 8
  %151 = load double** %dest1, align 8
  %incdec.ptr94 = getelementptr inbounds double* %151, i32 1
  store double* %incdec.ptr94, double** %dest1, align 8
  store double %150, double* %151, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %152 = load i32* %k, align 4
  %add95 = add nsw i32 %152, 8
  store i32 %add95, i32* %k, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.cond.96

for.cond.96:                                      ; preds = %for.inc.156, %for.end
  %153 = load i32* %k, align 4
  %154 = load i32* %n2.addr, align 4
  %sub97 = sub nsw i32 %154, 3
  %cmp98 = icmp slt i32 %153, %sub97
  br i1 %cmp98, label %for.body.99, label %for.end.158

for.body.99:                                      ; preds = %for.cond.96
  %155 = load i32* %j, align 4
  %156 = load i32* %n5.addr, align 4
  %157 = load i32* %k, align 4
  %mul100 = mul nsw i32 %156, %157
  %add101 = add nsw i32 %155, %mul100
  %idxprom102 = sext i32 %add101 to i64
  %158 = load double** %A.addr, align 8
  %arrayidx103 = getelementptr inbounds double* %158, i64 %idxprom102
  store double* %arrayidx103, double** %tmp, align 8
  %159 = load double** %tmp, align 8
  %160 = load double* %159, align 8
  store double %160, double* %a_j0k0, align 8
  %161 = load double** %tmp, align 8
  %add.ptr104 = getelementptr inbounds double* %161, i64 1
  %162 = load double* %add.ptr104, align 8
  store double %162, double* %a_j1k0, align 8
  %163 = load i32* %n5.addr, align 4
  %164 = load double** %tmp, align 8
  %idx.ext105 = sext i32 %163 to i64
  %add.ptr106 = getelementptr inbounds double* %164, i64 %idx.ext105
  store double* %add.ptr106, double** %tmp, align 8
  %165 = load double** %tmp, align 8
  %166 = load double* %165, align 8
  store double %166, double* %a_j0k1, align 8
  %167 = load double** %tmp, align 8
  %add.ptr107 = getelementptr inbounds double* %167, i64 1
  %168 = load double* %add.ptr107, align 8
  store double %168, double* %a_j1k1, align 8
  %169 = load i32* %n5.addr, align 4
  %170 = load double** %tmp, align 8
  %idx.ext108 = sext i32 %169 to i64
  %add.ptr109 = getelementptr inbounds double* %170, i64 %idx.ext108
  store double* %add.ptr109, double** %tmp, align 8
  %171 = load double** %tmp, align 8
  %172 = load double* %171, align 8
  store double %172, double* %a_j0k2, align 8
  %173 = load double** %tmp, align 8
  %add.ptr110 = getelementptr inbounds double* %173, i64 1
  %174 = load double* %add.ptr110, align 8
  store double %174, double* %a_j1k2, align 8
  %175 = load i32* %n5.addr, align 4
  %176 = load double** %tmp, align 8
  %idx.ext111 = sext i32 %175 to i64
  %add.ptr112 = getelementptr inbounds double* %176, i64 %idx.ext111
  store double* %add.ptr112, double** %tmp, align 8
  %177 = load double** %tmp, align 8
  %178 = load double* %177, align 8
  store double %178, double* %a_j0k3, align 8
  %179 = load double** %tmp, align 8
  %add.ptr113 = getelementptr inbounds double* %179, i64 1
  %180 = load double* %add.ptr113, align 8
  store double %180, double* %a_j1k3, align 8
  %181 = load i32* %n4.addr, align 4
  %182 = load i32* %j, align 4
  %mul114 = mul nsw i32 %181, %182
  %idxprom115 = sext i32 %mul114 to i64
  %183 = load double** %C.addr, align 8
  %arrayidx116 = getelementptr inbounds double* %183, i64 %idxprom115
  store double* %arrayidx116, double** %dest0, align 8
  %184 = load double** %dest0, align 8
  %185 = load i32* %n4.addr, align 4
  %idx.ext117 = sext i32 %185 to i64
  %add.ptr118 = getelementptr inbounds double* %184, i64 %idx.ext117
  store double* %add.ptr118, double** %dest1, align 8
  %186 = load double** %dest0, align 8
  %187 = load i32* %n3.addr, align 4
  %idx.ext119 = sext i32 %187 to i64
  %add.ptr120 = getelementptr inbounds double* %186, i64 %idx.ext119
  store double* %add.ptr120, double** %last, align 8
  %188 = load i32* %n3.addr, align 4
  %189 = load i32* %k, align 4
  %mul121 = mul nsw i32 %188, %189
  %idxprom122 = sext i32 %mul121 to i64
  %190 = load double** %B.addr, align 8
  %arrayidx123 = getelementptr inbounds double* %190, i64 %idxprom122
  store double* %arrayidx123, double** %b0, align 8
  %191 = load double** %b0, align 8
  %192 = load i32* %n3.addr, align 4
  %idx.ext124 = sext i32 %192 to i64
  %add.ptr125 = getelementptr inbounds double* %191, i64 %idx.ext124
  store double* %add.ptr125, double** %b1, align 8
  %193 = load double** %b1, align 8
  %194 = load i32* %n3.addr, align 4
  %idx.ext126 = sext i32 %194 to i64
  %add.ptr127 = getelementptr inbounds double* %193, i64 %idx.ext126
  store double* %add.ptr127, double** %b2, align 8
  %195 = load double** %b2, align 8
  %196 = load i32* %n3.addr, align 4
  %idx.ext128 = sext i32 %196 to i64
  %add.ptr129 = getelementptr inbounds double* %195, i64 %idx.ext128
  store double* %add.ptr129, double** %b3, align 8
  br label %while.cond.130

while.cond.130:                                   ; preds = %while.body.132, %for.body.99
  %197 = load double** %dest0, align 8
  %198 = load double** %last, align 8
  %cmp131 = icmp ne double* %197, %198
  br i1 %cmp131, label %while.body.132, label %while.end.155

while.body.132:                                   ; preds = %while.cond.130
  %199 = load double** %dest0, align 8
  %200 = load double* %199, align 8
  store double %200, double* %t0, align 8
  %201 = load double** %dest1, align 8
  %202 = load double* %201, align 8
  store double %202, double* %t1, align 8
  %203 = load double** %b0, align 8
  %incdec.ptr133 = getelementptr inbounds double* %203, i32 1
  store double* %incdec.ptr133, double** %b0, align 8
  %204 = load double* %203, align 8
  store double %204, double* %tmp0, align 8
  %205 = load double* %a_j0k0, align 8
  %206 = load double* %tmp0, align 8
  %mul134 = fmul double %205, %206
  %207 = load double* %t0, align 8
  %sub135 = fsub double %207, %mul134
  store double %sub135, double* %t0, align 8
  %208 = load double* %a_j1k0, align 8
  %209 = load double* %tmp0, align 8
  %mul136 = fmul double %208, %209
  %210 = load double* %t1, align 8
  %sub137 = fsub double %210, %mul136
  store double %sub137, double* %t1, align 8
  %211 = load double** %b1, align 8
  %incdec.ptr138 = getelementptr inbounds double* %211, i32 1
  store double* %incdec.ptr138, double** %b1, align 8
  %212 = load double* %211, align 8
  store double %212, double* %tmp1, align 8
  %213 = load double* %a_j0k1, align 8
  %214 = load double* %tmp1, align 8
  %mul139 = fmul double %213, %214
  %215 = load double* %t0, align 8
  %sub140 = fsub double %215, %mul139
  store double %sub140, double* %t0, align 8
  %216 = load double* %a_j1k1, align 8
  %217 = load double* %tmp1, align 8
  %mul141 = fmul double %216, %217
  %218 = load double* %t1, align 8
  %sub142 = fsub double %218, %mul141
  store double %sub142, double* %t1, align 8
  %219 = load double** %b2, align 8
  %incdec.ptr143 = getelementptr inbounds double* %219, i32 1
  store double* %incdec.ptr143, double** %b2, align 8
  %220 = load double* %219, align 8
  store double %220, double* %tmp0, align 8
  %221 = load double* %a_j0k2, align 8
  %222 = load double* %tmp0, align 8
  %mul144 = fmul double %221, %222
  %223 = load double* %t0, align 8
  %sub145 = fsub double %223, %mul144
  store double %sub145, double* %t0, align 8
  %224 = load double* %a_j1k2, align 8
  %225 = load double* %tmp0, align 8
  %mul146 = fmul double %224, %225
  %226 = load double* %t1, align 8
  %sub147 = fsub double %226, %mul146
  store double %sub147, double* %t1, align 8
  %227 = load double** %b3, align 8
  %incdec.ptr148 = getelementptr inbounds double* %227, i32 1
  store double* %incdec.ptr148, double** %b3, align 8
  %228 = load double* %227, align 8
  store double %228, double* %tmp1, align 8
  %229 = load double* %a_j0k3, align 8
  %230 = load double* %tmp1, align 8
  %mul149 = fmul double %229, %230
  %231 = load double* %t0, align 8
  %sub150 = fsub double %231, %mul149
  store double %sub150, double* %t0, align 8
  %232 = load double* %a_j1k3, align 8
  %233 = load double* %tmp1, align 8
  %mul151 = fmul double %232, %233
  %234 = load double* %t1, align 8
  %sub152 = fsub double %234, %mul151
  store double %sub152, double* %t1, align 8
  %235 = load double* %t0, align 8
  %236 = load double** %dest0, align 8
  %incdec.ptr153 = getelementptr inbounds double* %236, i32 1
  store double* %incdec.ptr153, double** %dest0, align 8
  store double %235, double* %236, align 8
  %237 = load double* %t1, align 8
  %238 = load double** %dest1, align 8
  %incdec.ptr154 = getelementptr inbounds double* %238, i32 1
  store double* %incdec.ptr154, double** %dest1, align 8
  store double %237, double* %238, align 8
  br label %while.cond.130

while.end.155:                                    ; preds = %while.cond.130
  br label %for.inc.156

for.inc.156:                                      ; preds = %while.end.155
  %239 = load i32* %k, align 4
  %add157 = add nsw i32 %239, 4
  store i32 %add157, i32* %k, align 4
  br label %for.cond.96

for.end.158:                                      ; preds = %for.cond.96
  br label %for.cond.159

for.cond.159:                                     ; preds = %for.inc.193, %for.end.158
  %240 = load i32* %k, align 4
  %241 = load i32* %n2.addr, align 4
  %cmp160 = icmp slt i32 %240, %241
  br i1 %cmp160, label %for.body.161, label %for.end.195

for.body.161:                                     ; preds = %for.cond.159
  %242 = load i32* %j, align 4
  %243 = load i32* %n5.addr, align 4
  %244 = load i32* %k, align 4
  %mul162 = mul nsw i32 %243, %244
  %add163 = add nsw i32 %242, %mul162
  %idxprom164 = sext i32 %add163 to i64
  %245 = load double** %A.addr, align 8
  %arrayidx165 = getelementptr inbounds double* %245, i64 %idxprom164
  %246 = load double* %arrayidx165, align 8
  store double %246, double* %a_j0k0, align 8
  %247 = load i32* %j, align 4
  %add166 = add nsw i32 %247, 1
  %248 = load i32* %n5.addr, align 4
  %249 = load i32* %k, align 4
  %mul167 = mul nsw i32 %248, %249
  %add168 = add nsw i32 %add166, %mul167
  %idxprom169 = sext i32 %add168 to i64
  %250 = load double** %A.addr, align 8
  %arrayidx170 = getelementptr inbounds double* %250, i64 %idxprom169
  %251 = load double* %arrayidx170, align 8
  store double %251, double* %a_j1k0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.171

for.cond.171:                                     ; preds = %for.inc.191, %for.body.161
  %252 = load i32* %i, align 4
  %253 = load i32* %n3.addr, align 4
  %cmp172 = icmp slt i32 %252, %253
  br i1 %cmp172, label %for.body.173, label %for.end.192

for.body.173:                                     ; preds = %for.cond.171
  %254 = load i32* %i, align 4
  %255 = load i32* %n3.addr, align 4
  %256 = load i32* %k, align 4
  %mul174 = mul nsw i32 %255, %256
  %add175 = add nsw i32 %254, %mul174
  %idxprom176 = sext i32 %add175 to i64
  %257 = load double** %B.addr, align 8
  %arrayidx177 = getelementptr inbounds double* %257, i64 %idxprom176
  %258 = load double* %arrayidx177, align 8
  store double %258, double* %t0, align 8
  %259 = load double* %a_j0k0, align 8
  %260 = load double* %t0, align 8
  %mul178 = fmul double %259, %260
  %261 = load i32* %i, align 4
  %262 = load i32* %n4.addr, align 4
  %263 = load i32* %j, align 4
  %mul179 = mul nsw i32 %262, %263
  %add180 = add nsw i32 %261, %mul179
  %idxprom181 = sext i32 %add180 to i64
  %264 = load double** %C.addr, align 8
  %arrayidx182 = getelementptr inbounds double* %264, i64 %idxprom181
  %265 = load double* %arrayidx182, align 8
  %sub183 = fsub double %265, %mul178
  store double %sub183, double* %arrayidx182, align 8
  %266 = load double* %a_j1k0, align 8
  %267 = load double* %t0, align 8
  %mul184 = fmul double %266, %267
  %268 = load i32* %i, align 4
  %269 = load i32* %n4.addr, align 4
  %270 = load i32* %j, align 4
  %add185 = add nsw i32 %270, 1
  %mul186 = mul nsw i32 %269, %add185
  %add187 = add nsw i32 %268, %mul186
  %idxprom188 = sext i32 %add187 to i64
  %271 = load double** %C.addr, align 8
  %arrayidx189 = getelementptr inbounds double* %271, i64 %idxprom188
  %272 = load double* %arrayidx189, align 8
  %sub190 = fsub double %272, %mul184
  store double %sub190, double* %arrayidx189, align 8
  br label %for.inc.191

for.inc.191:                                      ; preds = %for.body.173
  %273 = load i32* %i, align 4
  %inc = add nsw i32 %273, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.171

for.end.192:                                      ; preds = %for.cond.171
  br label %for.inc.193

for.inc.193:                                      ; preds = %for.end.192
  %274 = load i32* %k, align 4
  %inc194 = add nsw i32 %274, 1
  store i32 %inc194, i32* %k, align 4
  br label %for.cond.159

for.end.195:                                      ; preds = %for.cond.159
  br label %for.inc.196

for.inc.196:                                      ; preds = %for.end.195
  %275 = load i32* %j, align 4
  %add197 = add nsw i32 %275, 2
  store i32 %add197, i32* %j, align 4
  br label %for.cond

for.end.198:                                      ; preds = %for.cond
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.278, %for.end.198
  %276 = load i32* %j, align 4
  %277 = load i32* %n1.addr, align 4
  %cmp200 = icmp slt i32 %276, %277
  br i1 %cmp200, label %for.body.201, label %for.end.280

for.body.201:                                     ; preds = %for.cond.199
  store i32 0, i32* %k, align 4
  br label %for.cond.202

for.cond.202:                                     ; preds = %for.inc.249, %for.body.201
  %278 = load i32* %k, align 4
  %279 = load i32* %n2.addr, align 4
  %sub203 = sub nsw i32 %279, 3
  %cmp204 = icmp slt i32 %278, %sub203
  br i1 %cmp204, label %for.body.205, label %for.end.251

for.body.205:                                     ; preds = %for.cond.202
  %280 = load i32* %j, align 4
  %281 = load i32* %n5.addr, align 4
  %282 = load i32* %k, align 4
  %mul206 = mul nsw i32 %281, %282
  %add207 = add nsw i32 %280, %mul206
  %idxprom208 = sext i32 %add207 to i64
  %283 = load double** %A.addr, align 8
  %arrayidx209 = getelementptr inbounds double* %283, i64 %idxprom208
  store double* %arrayidx209, double** %tmp, align 8
  %284 = load double** %tmp, align 8
  %285 = load double* %284, align 8
  store double %285, double* %a_j0k0, align 8
  %286 = load i32* %n5.addr, align 4
  %287 = load double** %tmp, align 8
  %idx.ext210 = sext i32 %286 to i64
  %add.ptr211 = getelementptr inbounds double* %287, i64 %idx.ext210
  store double* %add.ptr211, double** %tmp, align 8
  %288 = load double** %tmp, align 8
  %289 = load double* %288, align 8
  store double %289, double* %a_j0k1, align 8
  %290 = load i32* %n5.addr, align 4
  %291 = load double** %tmp, align 8
  %idx.ext212 = sext i32 %290 to i64
  %add.ptr213 = getelementptr inbounds double* %291, i64 %idx.ext212
  store double* %add.ptr213, double** %tmp, align 8
  %292 = load double** %tmp, align 8
  %293 = load double* %292, align 8
  store double %293, double* %a_j0k2, align 8
  %294 = load i32* %n5.addr, align 4
  %295 = load double** %tmp, align 8
  %idx.ext214 = sext i32 %294 to i64
  %add.ptr215 = getelementptr inbounds double* %295, i64 %idx.ext214
  store double* %add.ptr215, double** %tmp, align 8
  %296 = load double** %tmp, align 8
  %297 = load double* %296, align 8
  store double %297, double* %a_j0k3, align 8
  %298 = load i32* %n5.addr, align 4
  %299 = load double** %tmp, align 8
  %idx.ext216 = sext i32 %298 to i64
  %add.ptr217 = getelementptr inbounds double* %299, i64 %idx.ext216
  store double* %add.ptr217, double** %tmp, align 8
  %300 = load i32* %n3.addr, align 4
  %301 = load i32* %k, align 4
  %mul218 = mul nsw i32 %300, %301
  %idxprom219 = sext i32 %mul218 to i64
  %302 = load double** %B.addr, align 8
  %arrayidx220 = getelementptr inbounds double* %302, i64 %idxprom219
  store double* %arrayidx220, double** %b0, align 8
  %303 = load double** %b0, align 8
  %304 = load i32* %n3.addr, align 4
  %idx.ext221 = sext i32 %304 to i64
  %add.ptr222 = getelementptr inbounds double* %303, i64 %idx.ext221
  store double* %add.ptr222, double** %b1, align 8
  %305 = load double** %b1, align 8
  %306 = load i32* %n3.addr, align 4
  %idx.ext223 = sext i32 %306 to i64
  %add.ptr224 = getelementptr inbounds double* %305, i64 %idx.ext223
  store double* %add.ptr224, double** %b2, align 8
  %307 = load double** %b2, align 8
  %308 = load i32* %n3.addr, align 4
  %idx.ext225 = sext i32 %308 to i64
  %add.ptr226 = getelementptr inbounds double* %307, i64 %idx.ext225
  store double* %add.ptr226, double** %b3, align 8
  %309 = load i32* %n4.addr, align 4
  %310 = load i32* %j, align 4
  %mul227 = mul nsw i32 %309, %310
  %idxprom228 = sext i32 %mul227 to i64
  %311 = load double** %C.addr, align 8
  %arrayidx229 = getelementptr inbounds double* %311, i64 %idxprom228
  store double* %arrayidx229, double** %dest0, align 8
  %312 = load double** %dest0, align 8
  %313 = load i32* %n3.addr, align 4
  %idx.ext230 = sext i32 %313 to i64
  %add.ptr231 = getelementptr inbounds double* %312, i64 %idx.ext230
  store double* %add.ptr231, double** %last, align 8
  br label %while.cond.232

while.cond.232:                                   ; preds = %while.body.234, %for.body.205
  %314 = load double** %dest0, align 8
  %315 = load double** %last, align 8
  %cmp233 = icmp ne double* %314, %315
  br i1 %cmp233, label %while.body.234, label %while.end.248

while.body.234:                                   ; preds = %while.cond.232
  %316 = load double** %dest0, align 8
  %317 = load double* %316, align 8
  store double %317, double* %t0, align 8
  %318 = load double* %a_j0k0, align 8
  %319 = load double** %b0, align 8
  %incdec.ptr235 = getelementptr inbounds double* %319, i32 1
  store double* %incdec.ptr235, double** %b0, align 8
  %320 = load double* %319, align 8
  %mul236 = fmul double %318, %320
  %321 = load double* %t0, align 8
  %sub237 = fsub double %321, %mul236
  store double %sub237, double* %t0, align 8
  %322 = load double* %a_j0k1, align 8
  %323 = load double** %b1, align 8
  %incdec.ptr238 = getelementptr inbounds double* %323, i32 1
  store double* %incdec.ptr238, double** %b1, align 8
  %324 = load double* %323, align 8
  %mul239 = fmul double %322, %324
  %325 = load double* %t0, align 8
  %sub240 = fsub double %325, %mul239
  store double %sub240, double* %t0, align 8
  %326 = load double* %a_j0k2, align 8
  %327 = load double** %b2, align 8
  %incdec.ptr241 = getelementptr inbounds double* %327, i32 1
  store double* %incdec.ptr241, double** %b2, align 8
  %328 = load double* %327, align 8
  %mul242 = fmul double %326, %328
  %329 = load double* %t0, align 8
  %sub243 = fsub double %329, %mul242
  store double %sub243, double* %t0, align 8
  %330 = load double* %a_j0k3, align 8
  %331 = load double** %b3, align 8
  %incdec.ptr244 = getelementptr inbounds double* %331, i32 1
  store double* %incdec.ptr244, double** %b3, align 8
  %332 = load double* %331, align 8
  %mul245 = fmul double %330, %332
  %333 = load double* %t0, align 8
  %sub246 = fsub double %333, %mul245
  store double %sub246, double* %t0, align 8
  %334 = load double* %t0, align 8
  %335 = load double** %dest0, align 8
  %incdec.ptr247 = getelementptr inbounds double* %335, i32 1
  store double* %incdec.ptr247, double** %dest0, align 8
  store double %334, double* %335, align 8
  br label %while.cond.232

while.end.248:                                    ; preds = %while.cond.232
  br label %for.inc.249

for.inc.249:                                      ; preds = %while.end.248
  %336 = load i32* %k, align 4
  %add250 = add nsw i32 %336, 4
  store i32 %add250, i32* %k, align 4
  br label %for.cond.202

for.end.251:                                      ; preds = %for.cond.202
  br label %for.cond.252

for.cond.252:                                     ; preds = %for.inc.275, %for.end.251
  %337 = load i32* %k, align 4
  %338 = load i32* %n2.addr, align 4
  %cmp253 = icmp slt i32 %337, %338
  br i1 %cmp253, label %for.body.254, label %for.end.277

for.body.254:                                     ; preds = %for.cond.252
  %339 = load i32* %j, align 4
  %340 = load i32* %n5.addr, align 4
  %341 = load i32* %k, align 4
  %mul255 = mul nsw i32 %340, %341
  %add256 = add nsw i32 %339, %mul255
  %idxprom257 = sext i32 %add256 to i64
  %342 = load double** %A.addr, align 8
  %arrayidx258 = getelementptr inbounds double* %342, i64 %idxprom257
  %343 = load double* %arrayidx258, align 8
  store double %343, double* %a_j0k0, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.259

for.cond.259:                                     ; preds = %for.inc.272, %for.body.254
  %344 = load i32* %i, align 4
  %345 = load i32* %n3.addr, align 4
  %cmp260 = icmp slt i32 %344, %345
  br i1 %cmp260, label %for.body.261, label %for.end.274

for.body.261:                                     ; preds = %for.cond.259
  %346 = load double* %a_j0k0, align 8
  %347 = load i32* %i, align 4
  %348 = load i32* %n3.addr, align 4
  %349 = load i32* %k, align 4
  %mul262 = mul nsw i32 %348, %349
  %add263 = add nsw i32 %347, %mul262
  %idxprom264 = sext i32 %add263 to i64
  %350 = load double** %B.addr, align 8
  %arrayidx265 = getelementptr inbounds double* %350, i64 %idxprom264
  %351 = load double* %arrayidx265, align 8
  %mul266 = fmul double %346, %351
  %352 = load i32* %i, align 4
  %353 = load i32* %n4.addr, align 4
  %354 = load i32* %j, align 4
  %mul267 = mul nsw i32 %353, %354
  %add268 = add nsw i32 %352, %mul267
  %idxprom269 = sext i32 %add268 to i64
  %355 = load double** %C.addr, align 8
  %arrayidx270 = getelementptr inbounds double* %355, i64 %idxprom269
  %356 = load double* %arrayidx270, align 8
  %sub271 = fsub double %356, %mul266
  store double %sub271, double* %arrayidx270, align 8
  br label %for.inc.272

for.inc.272:                                      ; preds = %for.body.261
  %357 = load i32* %i, align 4
  %inc273 = add nsw i32 %357, 1
  store i32 %inc273, i32* %i, align 4
  br label %for.cond.259

for.end.274:                                      ; preds = %for.cond.259
  br label %for.inc.275

for.inc.275:                                      ; preds = %for.end.274
  %358 = load i32* %k, align 4
  %inc276 = add nsw i32 %358, 1
  store i32 %inc276, i32* %k, align 4
  br label %for.cond.252

for.end.277:                                      ; preds = %for.cond.252
  br label %for.inc.278

for.inc.278:                                      ; preds = %for.end.277
  %359 = load i32* %j, align 4
  %inc279 = add nsw i32 %359, 1
  store i32 %inc279, i32* %j, align 4
  br label %for.cond.199

for.end.280:                                      ; preds = %for.cond.199
  %360 = load i32* %retval
  ret i32 %360
}

; Function Attrs: nounwind uwtable
define internal i32 @BLMod(i32 %left, i32 %n1, i32 %n2, double* %left_nz, double* %dest_nz, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %left.addr = alloca i32, align 4
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %left_nz.addr = alloca double*, align 8
  %dest_nz.addr = alloca double*, align 8
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %is = alloca i32, align 4
  %ks = alloca i32, align 4
  %il = alloca i32, align 4
  %kl = alloca i32, align 4
  %A = alloca double*, align 8
  %C = alloca double*, align 8
  store i32 %left, i32* %left.addr, align 4
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store double* %left_nz, double** %left_nz.addr, align 8
  store double* %dest_nz, double** %dest_nz.addr, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load double** %left_nz.addr, align 8
  store double* %0, double** %A, align 8
  %1 = load double** %dest_nz.addr, align 8
  store double* %1, double** %C, align 8
  %2 = load i32* %n1.addr, align 4
  %3 = load i32* %n2.addr, align 4
  %mul = mul nsw i32 %2, %3
  %4 = load i32* @BS, align 4
  %5 = load i32* @BS, align 4
  %mul1 = mul nsw i32 %4, %5
  %cmp = icmp sle i32 %mul, %mul1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load double** %A, align 8
  %7 = load double** %C, align 8
  %8 = load i32* %n1.addr, align 4
  %9 = load i32* %n2.addr, align 4
  %10 = load i32* %n1.addr, align 4
  %call = call i32 @OneLower(double* %6, double* %7, i32 %8, i32 %9, i32 %10)
  br label %if.end.31

if.else:                                          ; preds = %entry
  store i32 0, i32* %is, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.28, %if.else
  %11 = load i32* %is, align 4
  %12 = load i32* %n1.addr, align 4
  %cmp2 = icmp slt i32 %11, %12
  br i1 %cmp2, label %for.body, label %for.end.30

for.body:                                         ; preds = %for.cond
  %13 = load i32* %is, align 4
  %14 = load i32* @BS, align 4
  %add = add nsw i32 %13, %14
  store i32 %add, i32* %il, align 4
  %15 = load i32* %il, align 4
  %16 = load i32* %n1.addr, align 4
  %cmp3 = icmp sgt i32 %15, %16
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %for.body
  %17 = load i32* %n1.addr, align 4
  store i32 %17, i32* %il, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.4, %for.body
  store i32 0, i32* %ks, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %if.end
  %18 = load i32* %ks, align 4
  %19 = load i32* %n2.addr, align 4
  %cmp6 = icmp slt i32 %18, %19
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.5
  %20 = load i32* %ks, align 4
  %21 = load i32* @BS, align 4
  %add8 = add nsw i32 %20, %21
  store i32 %add8, i32* %kl, align 4
  %22 = load i32* %kl, align 4
  %23 = load i32* %n2.addr, align 4
  %cmp9 = icmp sgt i32 %22, %23
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.body.7
  %24 = load i32* %n2.addr, align 4
  store i32 %24, i32* %kl, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %for.body.7
  %25 = load double** %A, align 8
  %26 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp = getelementptr inbounds %struct.LocalCopies* %26, i32 0, i32 0
  %27 = load double** %blktmp, align 8
  %28 = load i32* %n1.addr, align 4
  %29 = load i32* %is, align 4
  %30 = load i32* %ks, align 4
  %31 = load i32* %il, align 4
  %32 = load i32* %kl, align 4
  %33 = load i32* %MyNum.addr, align 4
  %34 = load %struct.LocalCopies** %lc.addr, align 8
  %call12 = call i32 @CopyBlock(double* %25, double* %27, i32 %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33, %struct.LocalCopies* %34)
  %35 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp13 = getelementptr inbounds %struct.LocalCopies* %35, i32 0, i32 0
  %36 = load double** %blktmp13, align 8
  %37 = load i32* %ks, align 4
  %38 = load i32* %n1.addr, align 4
  %mul14 = mul nsw i32 %37, %38
  %idxprom = sext i32 %mul14 to i64
  %39 = load double** %A, align 8
  %arrayidx = getelementptr inbounds double* %39, i64 %idxprom
  %40 = load i32* %is, align 4
  %idxprom15 = sext i32 %40 to i64
  %41 = load double** %C, align 8
  %arrayidx16 = getelementptr inbounds double* %41, i64 %idxprom15
  %42 = load i32* %is, align 4
  %43 = load i32* %kl, align 4
  %44 = load i32* %ks, align 4
  %sub = sub nsw i32 %43, %44
  %45 = load i32* %il, align 4
  %46 = load i32* %is, align 4
  %sub17 = sub nsw i32 %45, %46
  %47 = load i32* %n1.addr, align 4
  %48 = load i32* %n1.addr, align 4
  %call18 = call i32 @OneMatmat(double* %36, double* %arrayidx, double* %arrayidx16, i32 %42, i32 %sub, i32 %sub17, i32 %47, i32 %48)
  %49 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp19 = getelementptr inbounds %struct.LocalCopies* %49, i32 0, i32 0
  %50 = load double** %blktmp19, align 8
  %51 = load i32* %is, align 4
  %52 = load i32* %is, align 4
  %53 = load i32* %n1.addr, align 4
  %mul20 = mul nsw i32 %52, %53
  %add21 = add nsw i32 %51, %mul20
  %idxprom22 = sext i32 %add21 to i64
  %54 = load double** %C, align 8
  %arrayidx23 = getelementptr inbounds double* %54, i64 %idxprom22
  %55 = load i32* %il, align 4
  %56 = load i32* %is, align 4
  %sub24 = sub nsw i32 %55, %56
  %57 = load i32* %kl, align 4
  %58 = load i32* %ks, align 4
  %sub25 = sub nsw i32 %57, %58
  %59 = load i32* %n1.addr, align 4
  %call26 = call i32 @OneLower(double* %50, double* %arrayidx23, i32 %sub24, i32 %sub25, i32 %59)
  br label %for.inc

for.inc:                                          ; preds = %if.end.11
  %60 = load i32* @BS, align 4
  %61 = load i32* %ks, align 4
  %add27 = add nsw i32 %61, %60
  store i32 %add27, i32* %ks, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.end
  %62 = load i32* @BS, align 4
  %63 = load i32* %is, align 4
  %add29 = add nsw i32 %63, %62
  store i32 %add29, i32* %is, align 4
  br label %for.cond

for.end.30:                                       ; preds = %for.cond
  br label %if.end.31

if.end.31:                                        ; preds = %for.end.30, %if.then
  %64 = load i32* %retval
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define internal i32 @OneLower(double* %A, double* %C, i32 %n1, i32 %n2, i32 %n3) {
entry:
  %retval = alloca i32, align 4
  %A.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double*, align 8
  %a_j0k0 = alloca double, align 8
  %a_j0k1 = alloca double, align 8
  %a_j0k2 = alloca double, align 8
  %a_j0k3 = alloca double, align 8
  %a_j1k0 = alloca double, align 8
  %a_j1k1 = alloca double, align 8
  %a_j1k2 = alloca double, align 8
  %a_j1k3 = alloca double, align 8
  %b0 = alloca double*, align 8
  %b1 = alloca double*, align 8
  %b2 = alloca double*, align 8
  %b3 = alloca double*, align 8
  %t0 = alloca double, align 8
  %t1 = alloca double, align 8
  %tmp0 = alloca double, align 8
  %tmp1 = alloca double, align 8
  %dest0 = alloca double*, align 8
  %dest1 = alloca double*, align 8
  %last = alloca double*, align 8
  store double* %A, double** %A.addr, align 8
  store double* %C, double** %C.addr, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.140, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %n1.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end.142

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc, %for.body
  %2 = load i32* %k, align 4
  %3 = load i32* %n2.addr, align 4
  %sub21 = sub nsw i32 %3, 3
  %cmp22 = icmp slt i32 %2, %sub21
  br i1 %cmp22, label %for.body.23, label %for.end

for.body.23:                                      ; preds = %for.cond.20
  %4 = load i32* %j, align 4
  %5 = load i32* %n1.addr, align 4
  %6 = load i32* %k, align 4
  %mul = mul nsw i32 %5, %6
  %add = add nsw i32 %4, %mul
  %idxprom = sext i32 %add to i64
  %7 = load double** %A.addr, align 8
  %arrayidx = getelementptr inbounds double* %7, i64 %idxprom
  store double* %arrayidx, double** %tmp, align 8
  %8 = load double** %tmp, align 8
  %9 = load double* %8, align 8
  store double %9, double* %a_j0k0, align 8
  %10 = load double** %tmp, align 8
  %add.ptr = getelementptr inbounds double* %10, i64 1
  %11 = load double* %add.ptr, align 8
  store double %11, double* %a_j1k0, align 8
  %12 = load i32* %n1.addr, align 4
  %13 = load double** %tmp, align 8
  %idx.ext = sext i32 %12 to i64
  %add.ptr24 = getelementptr inbounds double* %13, i64 %idx.ext
  store double* %add.ptr24, double** %tmp, align 8
  %14 = load double** %tmp, align 8
  %15 = load double* %14, align 8
  store double %15, double* %a_j0k1, align 8
  %16 = load double** %tmp, align 8
  %add.ptr25 = getelementptr inbounds double* %16, i64 1
  %17 = load double* %add.ptr25, align 8
  store double %17, double* %a_j1k1, align 8
  %18 = load i32* %n1.addr, align 4
  %19 = load double** %tmp, align 8
  %idx.ext26 = sext i32 %18 to i64
  %add.ptr27 = getelementptr inbounds double* %19, i64 %idx.ext26
  store double* %add.ptr27, double** %tmp, align 8
  %20 = load double** %tmp, align 8
  %21 = load double* %20, align 8
  store double %21, double* %a_j0k2, align 8
  %22 = load double** %tmp, align 8
  %add.ptr28 = getelementptr inbounds double* %22, i64 1
  %23 = load double* %add.ptr28, align 8
  store double %23, double* %a_j1k2, align 8
  %24 = load i32* %n1.addr, align 4
  %25 = load double** %tmp, align 8
  %idx.ext29 = sext i32 %24 to i64
  %add.ptr30 = getelementptr inbounds double* %25, i64 %idx.ext29
  store double* %add.ptr30, double** %tmp, align 8
  %26 = load double** %tmp, align 8
  %27 = load double* %26, align 8
  store double %27, double* %a_j0k3, align 8
  %28 = load double** %tmp, align 8
  %add.ptr31 = getelementptr inbounds double* %28, i64 1
  %29 = load double* %add.ptr31, align 8
  store double %29, double* %a_j1k3, align 8
  %30 = load i32* %j, align 4
  %31 = load i32* %n1.addr, align 4
  %32 = load i32* %k, align 4
  %mul32 = mul nsw i32 %31, %32
  %add33 = add nsw i32 %30, %mul32
  %idxprom34 = sext i32 %add33 to i64
  %33 = load double** %A.addr, align 8
  %arrayidx35 = getelementptr inbounds double* %33, i64 %idxprom34
  store double* %arrayidx35, double** %b0, align 8
  %34 = load double** %b0, align 8
  %35 = load i32* %n1.addr, align 4
  %idx.ext36 = sext i32 %35 to i64
  %add.ptr37 = getelementptr inbounds double* %34, i64 %idx.ext36
  store double* %add.ptr37, double** %b1, align 8
  %36 = load double** %b1, align 8
  %37 = load i32* %n1.addr, align 4
  %idx.ext38 = sext i32 %37 to i64
  %add.ptr39 = getelementptr inbounds double* %36, i64 %idx.ext38
  store double* %add.ptr39, double** %b2, align 8
  %38 = load double** %b2, align 8
  %39 = load i32* %n1.addr, align 4
  %idx.ext40 = sext i32 %39 to i64
  %add.ptr41 = getelementptr inbounds double* %38, i64 %idx.ext40
  store double* %add.ptr41, double** %b3, align 8
  %40 = load i32* %j, align 4
  %41 = load i32* %n3.addr, align 4
  %42 = load i32* %j, align 4
  %mul42 = mul nsw i32 %41, %42
  %add43 = add nsw i32 %40, %mul42
  %idxprom44 = sext i32 %add43 to i64
  %43 = load double** %C.addr, align 8
  %arrayidx45 = getelementptr inbounds double* %43, i64 %idxprom44
  store double* %arrayidx45, double** %dest0, align 8
  %44 = load double** %dest0, align 8
  %45 = load i32* %n1.addr, align 4
  %idx.ext46 = sext i32 %45 to i64
  %add.ptr47 = getelementptr inbounds double* %44, i64 %idx.ext46
  %46 = load i32* %j, align 4
  %idx.ext48 = sext i32 %46 to i64
  %idx.neg = sub i64 0, %idx.ext48
  %add.ptr49 = getelementptr inbounds double* %add.ptr47, i64 %idx.neg
  store double* %add.ptr49, double** %last, align 8
  %47 = load double* %a_j0k0, align 8
  %48 = load double** %b0, align 8
  %incdec.ptr = getelementptr inbounds double* %48, i32 1
  store double* %incdec.ptr, double** %b0, align 8
  %49 = load double* %48, align 8
  %mul50 = fmul double %47, %49
  %50 = load double* %a_j0k1, align 8
  %51 = load double** %b1, align 8
  %incdec.ptr51 = getelementptr inbounds double* %51, i32 1
  store double* %incdec.ptr51, double** %b1, align 8
  %52 = load double* %51, align 8
  %mul52 = fmul double %50, %52
  %add53 = fadd double %mul50, %mul52
  %53 = load double* %a_j0k2, align 8
  %54 = load double** %b2, align 8
  %incdec.ptr54 = getelementptr inbounds double* %54, i32 1
  store double* %incdec.ptr54, double** %b2, align 8
  %55 = load double* %54, align 8
  %mul55 = fmul double %53, %55
  %add56 = fadd double %add53, %mul55
  %56 = load double* %a_j0k3, align 8
  %57 = load double** %b3, align 8
  %incdec.ptr57 = getelementptr inbounds double* %57, i32 1
  store double* %incdec.ptr57, double** %b3, align 8
  %58 = load double* %57, align 8
  %mul58 = fmul double %56, %58
  %add59 = fadd double %add56, %mul58
  %59 = load double** %dest0, align 8
  %incdec.ptr60 = getelementptr inbounds double* %59, i32 1
  store double* %incdec.ptr60, double** %dest0, align 8
  %60 = load double* %59, align 8
  %sub61 = fsub double %60, %add59
  store double %sub61, double* %59, align 8
  %61 = load double** %dest0, align 8
  %62 = load i32* %n3.addr, align 4
  %idx.ext62 = sext i32 %62 to i64
  %add.ptr63 = getelementptr inbounds double* %61, i64 %idx.ext62
  store double* %add.ptr63, double** %dest1, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.23
  %63 = load double** %dest0, align 8
  %64 = load double** %last, align 8
  %cmp64 = icmp ne double* %63, %64
  br i1 %cmp64, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %65 = load double** %dest0, align 8
  %66 = load double* %65, align 8
  store double %66, double* %t0, align 8
  %67 = load double** %dest1, align 8
  %68 = load double* %67, align 8
  store double %68, double* %t1, align 8
  %69 = load double** %b0, align 8
  %incdec.ptr65 = getelementptr inbounds double* %69, i32 1
  store double* %incdec.ptr65, double** %b0, align 8
  %70 = load double* %69, align 8
  store double %70, double* %tmp0, align 8
  %71 = load double* %a_j0k0, align 8
  %72 = load double* %tmp0, align 8
  %mul66 = fmul double %71, %72
  %73 = load double* %t0, align 8
  %sub67 = fsub double %73, %mul66
  store double %sub67, double* %t0, align 8
  %74 = load double* %a_j1k0, align 8
  %75 = load double* %tmp0, align 8
  %mul68 = fmul double %74, %75
  %76 = load double* %t1, align 8
  %sub69 = fsub double %76, %mul68
  store double %sub69, double* %t1, align 8
  %77 = load double** %b1, align 8
  %incdec.ptr70 = getelementptr inbounds double* %77, i32 1
  store double* %incdec.ptr70, double** %b1, align 8
  %78 = load double* %77, align 8
  store double %78, double* %tmp1, align 8
  %79 = load double* %a_j0k1, align 8
  %80 = load double* %tmp1, align 8
  %mul71 = fmul double %79, %80
  %81 = load double* %t0, align 8
  %sub72 = fsub double %81, %mul71
  store double %sub72, double* %t0, align 8
  %82 = load double* %a_j1k1, align 8
  %83 = load double* %tmp1, align 8
  %mul73 = fmul double %82, %83
  %84 = load double* %t1, align 8
  %sub74 = fsub double %84, %mul73
  store double %sub74, double* %t1, align 8
  %85 = load double** %b2, align 8
  %incdec.ptr75 = getelementptr inbounds double* %85, i32 1
  store double* %incdec.ptr75, double** %b2, align 8
  %86 = load double* %85, align 8
  store double %86, double* %tmp0, align 8
  %87 = load double* %a_j0k2, align 8
  %88 = load double* %tmp0, align 8
  %mul76 = fmul double %87, %88
  %89 = load double* %t0, align 8
  %sub77 = fsub double %89, %mul76
  store double %sub77, double* %t0, align 8
  %90 = load double* %a_j1k2, align 8
  %91 = load double* %tmp0, align 8
  %mul78 = fmul double %90, %91
  %92 = load double* %t1, align 8
  %sub79 = fsub double %92, %mul78
  store double %sub79, double* %t1, align 8
  %93 = load double** %b3, align 8
  %incdec.ptr80 = getelementptr inbounds double* %93, i32 1
  store double* %incdec.ptr80, double** %b3, align 8
  %94 = load double* %93, align 8
  store double %94, double* %tmp1, align 8
  %95 = load double* %a_j0k3, align 8
  %96 = load double* %tmp1, align 8
  %mul81 = fmul double %95, %96
  %97 = load double* %t0, align 8
  %sub82 = fsub double %97, %mul81
  store double %sub82, double* %t0, align 8
  %98 = load double* %a_j1k3, align 8
  %99 = load double* %tmp1, align 8
  %mul83 = fmul double %98, %99
  %100 = load double* %t1, align 8
  %sub84 = fsub double %100, %mul83
  store double %sub84, double* %t1, align 8
  %101 = load double* %t0, align 8
  %102 = load double** %dest0, align 8
  %incdec.ptr85 = getelementptr inbounds double* %102, i32 1
  store double* %incdec.ptr85, double** %dest0, align 8
  store double %101, double* %102, align 8
  %103 = load double* %t1, align 8
  %104 = load double** %dest1, align 8
  %incdec.ptr86 = getelementptr inbounds double* %104, i32 1
  store double* %incdec.ptr86, double** %dest1, align 8
  store double %103, double* %104, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %105 = load i32* %k, align 4
  %add87 = add nsw i32 %105, 4
  store i32 %add87, i32* %k, align 4
  br label %for.cond.20

for.end:                                          ; preds = %for.cond.20
  br label %for.cond.88

for.cond.88:                                      ; preds = %for.inc.137, %for.end
  %106 = load i32* %k, align 4
  %107 = load i32* %n2.addr, align 4
  %cmp89 = icmp slt i32 %106, %107
  br i1 %cmp89, label %for.body.90, label %for.end.139

for.body.90:                                      ; preds = %for.cond.88
  %108 = load i32* %j, align 4
  %109 = load i32* %n1.addr, align 4
  %110 = load i32* %k, align 4
  %mul91 = mul nsw i32 %109, %110
  %add92 = add nsw i32 %108, %mul91
  %idxprom93 = sext i32 %add92 to i64
  %111 = load double** %A.addr, align 8
  %arrayidx94 = getelementptr inbounds double* %111, i64 %idxprom93
  %112 = load double* %arrayidx94, align 8
  store double %112, double* %a_j0k0, align 8
  %113 = load i32* %j, align 4
  %add95 = add nsw i32 %113, 1
  %114 = load i32* %n1.addr, align 4
  %115 = load i32* %k, align 4
  %mul96 = mul nsw i32 %114, %115
  %add97 = add nsw i32 %add95, %mul96
  %idxprom98 = sext i32 %add97 to i64
  %116 = load double** %A.addr, align 8
  %arrayidx99 = getelementptr inbounds double* %116, i64 %idxprom98
  %117 = load double* %arrayidx99, align 8
  store double %117, double* %a_j1k0, align 8
  %118 = load double* %a_j0k0, align 8
  %119 = load i32* %j, align 4
  %120 = load i32* %n1.addr, align 4
  %121 = load i32* %k, align 4
  %mul100 = mul nsw i32 %120, %121
  %add101 = add nsw i32 %119, %mul100
  %idxprom102 = sext i32 %add101 to i64
  %122 = load double** %A.addr, align 8
  %arrayidx103 = getelementptr inbounds double* %122, i64 %idxprom102
  %123 = load double* %arrayidx103, align 8
  %mul104 = fmul double %118, %123
  %124 = load i32* %j, align 4
  %125 = load i32* %n3.addr, align 4
  %126 = load i32* %j, align 4
  %mul105 = mul nsw i32 %125, %126
  %add106 = add nsw i32 %124, %mul105
  %idxprom107 = sext i32 %add106 to i64
  %127 = load double** %C.addr, align 8
  %arrayidx108 = getelementptr inbounds double* %127, i64 %idxprom107
  %128 = load double* %arrayidx108, align 8
  %sub109 = fsub double %128, %mul104
  store double %sub109, double* %arrayidx108, align 8
  %129 = load i32* %j, align 4
  %add110 = add nsw i32 %129, 1
  store i32 %add110, i32* %i, align 4
  br label %for.cond.111

for.cond.111:                                     ; preds = %for.inc.135, %for.body.90
  %130 = load i32* %i, align 4
  %131 = load i32* %n1.addr, align 4
  %cmp112 = icmp slt i32 %130, %131
  br i1 %cmp112, label %for.body.113, label %for.end.136

for.body.113:                                     ; preds = %for.cond.111
  %132 = load double* %a_j0k0, align 8
  %133 = load i32* %i, align 4
  %134 = load i32* %n1.addr, align 4
  %135 = load i32* %k, align 4
  %mul114 = mul nsw i32 %134, %135
  %add115 = add nsw i32 %133, %mul114
  %idxprom116 = sext i32 %add115 to i64
  %136 = load double** %A.addr, align 8
  %arrayidx117 = getelementptr inbounds double* %136, i64 %idxprom116
  %137 = load double* %arrayidx117, align 8
  %mul118 = fmul double %132, %137
  %138 = load i32* %i, align 4
  %139 = load i32* %n3.addr, align 4
  %140 = load i32* %j, align 4
  %mul119 = mul nsw i32 %139, %140
  %add120 = add nsw i32 %138, %mul119
  %idxprom121 = sext i32 %add120 to i64
  %141 = load double** %C.addr, align 8
  %arrayidx122 = getelementptr inbounds double* %141, i64 %idxprom121
  %142 = load double* %arrayidx122, align 8
  %sub123 = fsub double %142, %mul118
  store double %sub123, double* %arrayidx122, align 8
  %143 = load double* %a_j1k0, align 8
  %144 = load i32* %i, align 4
  %145 = load i32* %n1.addr, align 4
  %146 = load i32* %k, align 4
  %mul124 = mul nsw i32 %145, %146
  %add125 = add nsw i32 %144, %mul124
  %idxprom126 = sext i32 %add125 to i64
  %147 = load double** %A.addr, align 8
  %arrayidx127 = getelementptr inbounds double* %147, i64 %idxprom126
  %148 = load double* %arrayidx127, align 8
  %mul128 = fmul double %143, %148
  %149 = load i32* %i, align 4
  %150 = load i32* %n3.addr, align 4
  %151 = load i32* %j, align 4
  %add129 = add nsw i32 %151, 1
  %mul130 = mul nsw i32 %150, %add129
  %add131 = add nsw i32 %149, %mul130
  %idxprom132 = sext i32 %add131 to i64
  %152 = load double** %C.addr, align 8
  %arrayidx133 = getelementptr inbounds double* %152, i64 %idxprom132
  %153 = load double* %arrayidx133, align 8
  %sub134 = fsub double %153, %mul128
  store double %sub134, double* %arrayidx133, align 8
  br label %for.inc.135

for.inc.135:                                      ; preds = %for.body.113
  %154 = load i32* %i, align 4
  %inc = add nsw i32 %154, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.111

for.end.136:                                      ; preds = %for.cond.111
  br label %for.inc.137

for.inc.137:                                      ; preds = %for.end.136
  %155 = load i32* %k, align 4
  %inc138 = add nsw i32 %155, 1
  store i32 %inc138, i32* %k, align 4
  br label %for.cond.88

for.end.139:                                      ; preds = %for.cond.88
  br label %for.inc.140

for.inc.140:                                      ; preds = %for.end.139
  %156 = load i32* %j, align 4
  %add141 = add nsw i32 %156, 2
  store i32 %add141, i32* %j, align 4
  br label %for.cond

for.end.142:                                      ; preds = %for.cond
  br label %for.cond.143

for.cond.143:                                     ; preds = %for.inc.172, %for.end.142
  %157 = load i32* %j, align 4
  %158 = load i32* %n1.addr, align 4
  %cmp144 = icmp slt i32 %157, %158
  br i1 %cmp144, label %for.body.145, label %for.end.174

for.body.145:                                     ; preds = %for.cond.143
  store i32 0, i32* %k, align 4
  br label %for.cond.146

for.cond.146:                                     ; preds = %for.inc.169, %for.body.145
  %159 = load i32* %k, align 4
  %160 = load i32* %n2.addr, align 4
  %cmp147 = icmp slt i32 %159, %160
  br i1 %cmp147, label %for.body.148, label %for.end.171

for.body.148:                                     ; preds = %for.cond.146
  %161 = load i32* %j, align 4
  %162 = load i32* %n1.addr, align 4
  %163 = load i32* %k, align 4
  %mul149 = mul nsw i32 %162, %163
  %add150 = add nsw i32 %161, %mul149
  %idxprom151 = sext i32 %add150 to i64
  %164 = load double** %A.addr, align 8
  %arrayidx152 = getelementptr inbounds double* %164, i64 %idxprom151
  %165 = load double* %arrayidx152, align 8
  store double %165, double* %a_j0k0, align 8
  %166 = load i32* %j, align 4
  store i32 %166, i32* %i, align 4
  br label %for.cond.153

for.cond.153:                                     ; preds = %for.inc.166, %for.body.148
  %167 = load i32* %i, align 4
  %168 = load i32* %n1.addr, align 4
  %cmp154 = icmp slt i32 %167, %168
  br i1 %cmp154, label %for.body.155, label %for.end.168

for.body.155:                                     ; preds = %for.cond.153
  %169 = load double* %a_j0k0, align 8
  %170 = load i32* %i, align 4
  %171 = load i32* %n1.addr, align 4
  %172 = load i32* %k, align 4
  %mul156 = mul nsw i32 %171, %172
  %add157 = add nsw i32 %170, %mul156
  %idxprom158 = sext i32 %add157 to i64
  %173 = load double** %A.addr, align 8
  %arrayidx159 = getelementptr inbounds double* %173, i64 %idxprom158
  %174 = load double* %arrayidx159, align 8
  %mul160 = fmul double %169, %174
  %175 = load i32* %i, align 4
  %176 = load i32* %n3.addr, align 4
  %177 = load i32* %j, align 4
  %mul161 = mul nsw i32 %176, %177
  %add162 = add nsw i32 %175, %mul161
  %idxprom163 = sext i32 %add162 to i64
  %178 = load double** %C.addr, align 8
  %arrayidx164 = getelementptr inbounds double* %178, i64 %idxprom163
  %179 = load double* %arrayidx164, align 8
  %sub165 = fsub double %179, %mul160
  store double %sub165, double* %arrayidx164, align 8
  br label %for.inc.166

for.inc.166:                                      ; preds = %for.body.155
  %180 = load i32* %i, align 4
  %inc167 = add nsw i32 %180, 1
  store i32 %inc167, i32* %i, align 4
  br label %for.cond.153

for.end.168:                                      ; preds = %for.cond.153
  br label %for.inc.169

for.inc.169:                                      ; preds = %for.end.168
  %181 = load i32* %k, align 4
  %inc170 = add nsw i32 %181, 1
  store i32 %inc170, i32* %k, align 4
  br label %for.cond.146

for.end.171:                                      ; preds = %for.cond.146
  br label %for.inc.172

for.inc.172:                                      ; preds = %for.end.171
  %182 = load i32* %j, align 4
  %inc173 = add nsw i32 %182, 1
  store i32 %inc173, i32* %j, align 4
  br label %for.cond.143

for.end.174:                                      ; preds = %for.cond.143
  %183 = load i32* %retval
  ret i32 %183
}

; Function Attrs: nounwind uwtable
define internal i32 @FindBlockUpdate(i32 %domain, i32 %bli, i32 %blj, double** %update, i32* %stride) {
entry:
  %retval = alloca i32, align 4
  %domain.addr = alloca i32, align 4
  %bli.addr = alloca i32, align 4
  %blj.addr = alloca i32, align 4
  %update.addr = alloca double**, align 8
  %stride.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %into_i = alloca i32, align 4
  %into_j = alloca i32, align 4
  %update_len = alloca i32, align 4
  %domain_update = alloca double*, align 8
  store i32 %domain, i32* %domain.addr, align 4
  store i32 %bli, i32* %bli.addr, align 4
  store i32 %blj, i32* %blj.addr, align 4
  store double** %update, double*** %update.addr, align 8
  store i32* %stride, i32** %stride.addr, align 8
  store i32 0, i32* %into_j, align 4
  %0 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %1 = load i32* %domain.addr, align 4
  %add = add nsw i32 %0, %1
  %idxprom = sext i32 %add to i64
  %2 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %i, align 4
  %5 = load i32* %blj.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %7, i64 %idxprom1
  %block = bitcast %union.Entry* %arrayidx2 to %struct.Block**
  %8 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %8, i32 0, i32 5
  %9 = load i32* %length, align 4
  %10 = load i32* %into_j, align 4
  %add3 = add nsw i32 %10, %9
  store i32 %add3, i32* %into_j, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32* %into_j, align 4
  store i32 %12, i32* %into_i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.12, %for.end
  %13 = load i32* %i, align 4
  %14 = load i32* %bli.addr, align 4
  %cmp5 = icmp slt i32 %13, %14
  br i1 %cmp5, label %for.body.6, label %for.end.14

for.body.6:                                       ; preds = %for.cond.4
  %15 = load i32* %i, align 4
  %idxprom7 = sext i32 %15 to i64
  %16 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx8 = getelementptr inbounds %union.Entry* %16, i64 %idxprom7
  %block9 = bitcast %union.Entry* %arrayidx8 to %struct.Block**
  %17 = load %struct.Block** %block9, align 8
  %length10 = getelementptr inbounds %struct.Block* %17, i32 0, i32 5
  %18 = load i32* %length10, align 4
  %19 = load i32* %into_i, align 4
  %add11 = add nsw i32 %19, %18
  store i32 %add11, i32* %into_i, align 4
  br label %for.inc.12

for.inc.12:                                       ; preds = %for.body.6
  %20 = load i32* %i, align 4
  %inc13 = add nsw i32 %20, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond.4

for.end.14:                                       ; preds = %for.cond.4
  %21 = load i32* %into_i, align 4
  store i32 %21, i32* %update_len, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.27, %for.end.14
  %22 = load i32* %i, align 4
  %23 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %24 = load i32* %domain.addr, align 4
  %add16 = add nsw i32 %23, %24
  %add17 = add nsw i32 %add16, 1
  %idxprom18 = sext i32 %add17 to i64
  %25 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx19 = getelementptr inbounds i32* %25, i64 %idxprom18
  %26 = load i32* %arrayidx19, align 4
  %cmp20 = icmp slt i32 %22, %26
  br i1 %cmp20, label %for.body.21, label %for.end.29

for.body.21:                                      ; preds = %for.cond.15
  %27 = load i32* %i, align 4
  %idxprom22 = sext i32 %27 to i64
  %28 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx23 = getelementptr inbounds %union.Entry* %28, i64 %idxprom22
  %block24 = bitcast %union.Entry* %arrayidx23 to %struct.Block**
  %29 = load %struct.Block** %block24, align 8
  %length25 = getelementptr inbounds %struct.Block* %29, i32 0, i32 5
  %30 = load i32* %length25, align 4
  %31 = load i32* %update_len, align 4
  %add26 = add nsw i32 %31, %30
  store i32 %add26, i32* %update_len, align 4
  br label %for.inc.27

for.inc.27:                                       ; preds = %for.body.21
  %32 = load i32* %i, align 4
  %inc28 = add nsw i32 %32, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond.15

for.end.29:                                       ; preds = %for.cond.15
  %33 = load i32* %domain.addr, align 4
  %idxprom30 = sext i32 %33 to i64
  %34 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx31 = getelementptr inbounds double** %34, i64 %idxprom30
  %35 = load double** %arrayidx31, align 8
  store double* %35, double** %domain_update, align 8
  %36 = load i32* %into_j, align 4
  %37 = load i32* %update_len, align 4
  %mul = mul nsw i32 %36, %37
  %38 = load i32* %into_j, align 4
  %39 = load i32* %into_j, align 4
  %add32 = add nsw i32 %39, 1
  %mul33 = mul nsw i32 %38, %add32
  %div = sdiv i32 %mul33, 2
  %sub = sub nsw i32 %mul, %div
  %40 = load i32* %into_i, align 4
  %add34 = add nsw i32 %sub, %40
  %idxprom35 = sext i32 %add34 to i64
  %41 = load double** %domain_update, align 8
  %arrayidx36 = getelementptr inbounds double* %41, i64 %idxprom35
  %42 = load double*** %update.addr, align 8
  store double* %arrayidx36, double** %42, align 8
  %43 = load i32* %update_len, align 4
  %44 = load i32* %into_j, align 4
  %sub37 = sub nsw i32 %43, %44
  %sub38 = sub nsw i32 %sub37, 1
  %45 = load i32** %stride.addr, align 8
  store i32 %sub38, i32* %45, align 4
  %46 = load i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal double* @TriBSolve(%struct.BMatrix* byval align 8 %LB, double* %b, i32* %PERM, i32* %INVP) {
entry:
  %b.addr = alloca double*, align 8
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %bl = alloca i32, align 4
  %row = alloca i32, align 4
  %y = alloca double*, align 8
  %xp = alloca double*, align 8
  %x = alloca double*, align 8
  %bt = alloca double*, align 8
  store double* %b, double** %b.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  %n = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to double*
  store double* %1, double** %x, align 8
  %n1 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %2 = load i32* %n1, align 4
  %conv2 = sext i32 %2 to i64
  %mul3 = mul i64 %conv2, 8
  %call4 = call i8* @malloc(i64 %mul3)
  %3 = bitcast i8* %call4 to double*
  store double* %3, double** %xp, align 8
  %n5 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %4 = load i32* %n5, align 4
  %conv6 = sext i32 %4 to i64
  %mul7 = mul i64 %conv6, 8
  %call8 = call i8* @malloc(i64 %mul7)
  %5 = bitcast i8* %call8 to double*
  store double* %5, double** %y, align 8
  %n9 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %6 = load i32* %n9, align 4
  %conv10 = sext i32 %6 to i64
  %mul11 = mul i64 %conv10, 8
  %call12 = call i8* @malloc(i64 %mul11)
  %7 = bitcast i8* %call12 to double*
  store double* %7, double** %bt, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32* %j, align 4
  %n13 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %9 = load i32* %n13, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32* %j, align 4
  %idxprom = sext i32 %10 to i64
  %11 = load double** %b.addr, align 8
  %arrayidx = getelementptr inbounds double* %11, i64 %idxprom
  %12 = load double* %arrayidx, align 8
  %13 = load i32* %j, align 4
  %idxprom15 = sext i32 %13 to i64
  %14 = load double** %bt, align 8
  %arrayidx16 = getelementptr inbounds double* %14, i64 %idxprom15
  store double %12, double* %arrayidx16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.242, %for.end
  %16 = load i32* %j, align 4
  %n18 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %17 = load i32* %n18, align 4
  %cmp19 = icmp slt i32 %16, %17
  br i1 %cmp19, label %for.body.21, label %for.end.247

for.body.21:                                      ; preds = %for.cond.17
  %18 = load i32* %j, align 4
  %idxprom22 = sext i32 %18 to i64
  %domain = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 10
  %19 = load i32** %domain, align 8
  %arrayidx23 = getelementptr inbounds i32* %19, i64 %idxprom22
  %20 = load i32* %arrayidx23, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.21
  %21 = load i32* %j, align 4
  %idxprom24 = sext i32 %21 to i64
  %22 = load i32** %PERM.addr, align 8
  %arrayidx25 = getelementptr inbounds i32* %22, i64 %idxprom24
  %23 = load i32* %arrayidx25, align 4
  %idxprom26 = sext i32 %23 to i64
  %24 = load double** %bt, align 8
  %arrayidx27 = getelementptr inbounds double* %24, i64 %idxprom26
  %25 = load double* %arrayidx27, align 8
  %26 = load i32* %j, align 4
  %idxprom28 = sext i32 %26 to i64
  %col = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %27 = load i32** %col, align 8
  %arrayidx29 = getelementptr inbounds i32* %27, i64 %idxprom28
  %28 = load i32* %arrayidx29, align 4
  %idxprom30 = sext i32 %28 to i64
  %entry31 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %29 = load %union.Entry** %entry31, align 8
  %arrayidx32 = getelementptr inbounds %union.Entry* %29, i64 %idxprom30
  %nz = bitcast %union.Entry* %arrayidx32 to double*
  %30 = load double* %nz, align 8
  %div = fdiv double %25, %30
  %31 = load i32* %j, align 4
  %idxprom33 = sext i32 %31 to i64
  %32 = load double** %y, align 8
  %arrayidx34 = getelementptr inbounds double* %32, i64 %idxprom33
  store double %div, double* %arrayidx34, align 8
  %33 = load i32* %j, align 4
  %idxprom35 = sext i32 %33 to i64
  %col36 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %34 = load i32** %col36, align 8
  %arrayidx37 = getelementptr inbounds i32* %34, i64 %idxprom35
  %35 = load i32* %arrayidx37, align 4
  %add = add nsw i32 %35, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.60, %if.then
  %36 = load i32* %i, align 4
  %37 = load i32* %j, align 4
  %add39 = add nsw i32 %37, 1
  %idxprom40 = sext i32 %add39 to i64
  %col41 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %38 = load i32** %col41, align 8
  %arrayidx42 = getelementptr inbounds i32* %38, i64 %idxprom40
  %39 = load i32* %arrayidx42, align 4
  %cmp43 = icmp slt i32 %36, %39
  br i1 %cmp43, label %for.body.45, label %for.end.62

for.body.45:                                      ; preds = %for.cond.38
  %40 = load i32* %i, align 4
  %idxprom46 = sext i32 %40 to i64
  %entry47 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %41 = load %union.Entry** %entry47, align 8
  %arrayidx48 = getelementptr inbounds %union.Entry* %41, i64 %idxprom46
  %nz49 = bitcast %union.Entry* %arrayidx48 to double*
  %42 = load double* %nz49, align 8
  %43 = load i32* %j, align 4
  %idxprom50 = sext i32 %43 to i64
  %44 = load double** %y, align 8
  %arrayidx51 = getelementptr inbounds double* %44, i64 %idxprom50
  %45 = load double* %arrayidx51, align 8
  %mul52 = fmul double %42, %45
  %46 = load i32* %i, align 4
  %idxprom53 = sext i32 %46 to i64
  %row54 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %47 = load i32** %row54, align 8
  %arrayidx55 = getelementptr inbounds i32* %47, i64 %idxprom53
  %48 = load i32* %arrayidx55, align 4
  %idxprom56 = sext i32 %48 to i64
  %49 = load i32** %PERM.addr, align 8
  %arrayidx57 = getelementptr inbounds i32* %49, i64 %idxprom56
  %50 = load i32* %arrayidx57, align 4
  %idxprom58 = sext i32 %50 to i64
  %51 = load double** %bt, align 8
  %arrayidx59 = getelementptr inbounds double* %51, i64 %idxprom58
  %52 = load double* %arrayidx59, align 8
  %sub = fsub double %52, %mul52
  store double %sub, double* %arrayidx59, align 8
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.body.45
  %53 = load i32* %i, align 4
  %inc61 = add nsw i32 %53, 1
  store i32 %inc61, i32* %i, align 4
  br label %for.cond.38

for.end.62:                                       ; preds = %for.cond.38
  br label %if.end.241

if.else:                                          ; preds = %for.body.21
  %54 = load i32* %j, align 4
  %idxprom63 = sext i32 %54 to i64
  %col64 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %55 = load i32** %col64, align 8
  %arrayidx65 = getelementptr inbounds i32* %55, i64 %idxprom63
  %56 = load i32* %arrayidx65, align 4
  store i32 %56, i32* %bl, align 4
  %57 = load i32* %j, align 4
  store i32 %57, i32* %j1, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.153, %if.else
  %58 = load i32* %j1, align 4
  %59 = load i32* %j, align 4
  %60 = load i32* %j, align 4
  %idxprom67 = sext i32 %60 to i64
  %partition_size = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %61 = load i32** %partition_size, align 8
  %arrayidx68 = getelementptr inbounds i32* %61, i64 %idxprom67
  %62 = load i32* %arrayidx68, align 4
  %add69 = add nsw i32 %59, %62
  %cmp70 = icmp slt i32 %58, %add69
  br i1 %cmp70, label %for.body.72, label %for.end.155

for.body.72:                                      ; preds = %for.cond.66
  %63 = load i32* %j1, align 4
  %idxprom73 = sext i32 %63 to i64
  %64 = load i32** %PERM.addr, align 8
  %arrayidx74 = getelementptr inbounds i32* %64, i64 %idxprom73
  %65 = load i32* %arrayidx74, align 4
  %idxprom75 = sext i32 %65 to i64
  %66 = load double** %bt, align 8
  %arrayidx76 = getelementptr inbounds double* %66, i64 %idxprom75
  %67 = load double* %arrayidx76, align 8
  %68 = load i32* %j1, align 4
  %69 = load i32* %j, align 4
  %sub77 = sub nsw i32 %68, %69
  %70 = load i32* %j1, align 4
  %71 = load i32* %j, align 4
  %sub78 = sub nsw i32 %70, %71
  %72 = load i32* %bl, align 4
  %idxprom79 = sext i32 %72 to i64
  %entry80 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %73 = load %union.Entry** %entry80, align 8
  %arrayidx81 = getelementptr inbounds %union.Entry* %73, i64 %idxprom79
  %block = bitcast %union.Entry* %arrayidx81 to %struct.Block**
  %74 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %74, i32 0, i32 5
  %75 = load i32* %length, align 4
  %mul82 = mul nsw i32 %sub78, %75
  %add83 = add nsw i32 %sub77, %mul82
  %idxprom84 = sext i32 %add83 to i64
  %76 = load i32* %bl, align 4
  %idxprom85 = sext i32 %76 to i64
  %entry86 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %77 = load %union.Entry** %entry86, align 8
  %arrayidx87 = getelementptr inbounds %union.Entry* %77, i64 %idxprom85
  %block88 = bitcast %union.Entry* %arrayidx87 to %struct.Block**
  %78 = load %struct.Block** %block88, align 8
  %nz89 = getelementptr inbounds %struct.Block* %78, i32 0, i32 11
  %79 = load double** %nz89, align 8
  %arrayidx90 = getelementptr inbounds double* %79, i64 %idxprom84
  %80 = load double* %arrayidx90, align 8
  %div91 = fdiv double %67, %80
  %81 = load i32* %j1, align 4
  %idxprom92 = sext i32 %81 to i64
  %82 = load double** %y, align 8
  %arrayidx93 = getelementptr inbounds double* %82, i64 %idxprom92
  store double %div91, double* %arrayidx93, align 8
  %83 = load i32* %j1, align 4
  %84 = load i32* %j, align 4
  %sub94 = sub nsw i32 %83, %84
  %add95 = add nsw i32 %sub94, 1
  store i32 %add95, i32* %i1, align 4
  br label %for.cond.96

for.cond.96:                                      ; preds = %for.inc.150, %for.body.72
  %85 = load i32* %i1, align 4
  %86 = load i32* %bl, align 4
  %idxprom97 = sext i32 %86 to i64
  %entry98 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %87 = load %union.Entry** %entry98, align 8
  %arrayidx99 = getelementptr inbounds %union.Entry* %87, i64 %idxprom97
  %block100 = bitcast %union.Entry* %arrayidx99 to %struct.Block**
  %88 = load %struct.Block** %block100, align 8
  %length101 = getelementptr inbounds %struct.Block* %88, i32 0, i32 5
  %89 = load i32* %length101, align 4
  %cmp102 = icmp slt i32 %85, %89
  br i1 %cmp102, label %for.body.104, label %for.end.152

for.body.104:                                     ; preds = %for.cond.96
  %90 = load i32* %bl, align 4
  %idxprom105 = sext i32 %90 to i64
  %entry106 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %91 = load %union.Entry** %entry106, align 8
  %arrayidx107 = getelementptr inbounds %union.Entry* %91, i64 %idxprom105
  %block108 = bitcast %union.Entry* %arrayidx107 to %struct.Block**
  %92 = load %struct.Block** %block108, align 8
  %structure = getelementptr inbounds %struct.Block* %92, i32 0, i32 9
  %93 = load i32** %structure, align 8
  %tobool109 = icmp ne i32* %93, null
  br i1 %tobool109, label %if.then.110, label %if.else.122

if.then.110:                                      ; preds = %for.body.104
  %94 = load i32* %bl, align 4
  %idxprom111 = sext i32 %94 to i64
  %row112 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %95 = load i32** %row112, align 8
  %arrayidx113 = getelementptr inbounds i32* %95, i64 %idxprom111
  %96 = load i32* %arrayidx113, align 4
  %97 = load i32* %i1, align 4
  %idxprom114 = sext i32 %97 to i64
  %98 = load i32* %bl, align 4
  %idxprom115 = sext i32 %98 to i64
  %entry116 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %99 = load %union.Entry** %entry116, align 8
  %arrayidx117 = getelementptr inbounds %union.Entry* %99, i64 %idxprom115
  %block118 = bitcast %union.Entry* %arrayidx117 to %struct.Block**
  %100 = load %struct.Block** %block118, align 8
  %structure119 = getelementptr inbounds %struct.Block* %100, i32 0, i32 9
  %101 = load i32** %structure119, align 8
  %arrayidx120 = getelementptr inbounds i32* %101, i64 %idxprom114
  %102 = load i32* %arrayidx120, align 4
  %add121 = add nsw i32 %96, %102
  store i32 %add121, i32* %row, align 4
  br label %if.end

if.else.122:                                      ; preds = %for.body.104
  %103 = load i32* %bl, align 4
  %idxprom123 = sext i32 %103 to i64
  %row124 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %104 = load i32** %row124, align 8
  %arrayidx125 = getelementptr inbounds i32* %104, i64 %idxprom123
  %105 = load i32* %arrayidx125, align 4
  %106 = load i32* %i1, align 4
  %add126 = add nsw i32 %105, %106
  store i32 %add126, i32* %row, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.122, %if.then.110
  %107 = load i32* %i1, align 4
  %108 = load i32* %j1, align 4
  %109 = load i32* %j, align 4
  %sub127 = sub nsw i32 %108, %109
  %110 = load i32* %bl, align 4
  %idxprom128 = sext i32 %110 to i64
  %entry129 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %111 = load %union.Entry** %entry129, align 8
  %arrayidx130 = getelementptr inbounds %union.Entry* %111, i64 %idxprom128
  %block131 = bitcast %union.Entry* %arrayidx130 to %struct.Block**
  %112 = load %struct.Block** %block131, align 8
  %length132 = getelementptr inbounds %struct.Block* %112, i32 0, i32 5
  %113 = load i32* %length132, align 4
  %mul133 = mul nsw i32 %sub127, %113
  %add134 = add nsw i32 %107, %mul133
  %idxprom135 = sext i32 %add134 to i64
  %114 = load i32* %bl, align 4
  %idxprom136 = sext i32 %114 to i64
  %entry137 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %115 = load %union.Entry** %entry137, align 8
  %arrayidx138 = getelementptr inbounds %union.Entry* %115, i64 %idxprom136
  %block139 = bitcast %union.Entry* %arrayidx138 to %struct.Block**
  %116 = load %struct.Block** %block139, align 8
  %nz140 = getelementptr inbounds %struct.Block* %116, i32 0, i32 11
  %117 = load double** %nz140, align 8
  %arrayidx141 = getelementptr inbounds double* %117, i64 %idxprom135
  %118 = load double* %arrayidx141, align 8
  %119 = load i32* %j1, align 4
  %idxprom142 = sext i32 %119 to i64
  %120 = load double** %y, align 8
  %arrayidx143 = getelementptr inbounds double* %120, i64 %idxprom142
  %121 = load double* %arrayidx143, align 8
  %mul144 = fmul double %118, %121
  %122 = load i32* %row, align 4
  %idxprom145 = sext i32 %122 to i64
  %123 = load i32** %PERM.addr, align 8
  %arrayidx146 = getelementptr inbounds i32* %123, i64 %idxprom145
  %124 = load i32* %arrayidx146, align 4
  %idxprom147 = sext i32 %124 to i64
  %125 = load double** %bt, align 8
  %arrayidx148 = getelementptr inbounds double* %125, i64 %idxprom147
  %126 = load double* %arrayidx148, align 8
  %sub149 = fsub double %126, %mul144
  store double %sub149, double* %arrayidx148, align 8
  br label %for.inc.150

for.inc.150:                                      ; preds = %if.end
  %127 = load i32* %i1, align 4
  %inc151 = add nsw i32 %127, 1
  store i32 %inc151, i32* %i1, align 4
  br label %for.cond.96

for.end.152:                                      ; preds = %for.cond.96
  br label %for.inc.153

for.inc.153:                                      ; preds = %for.end.152
  %128 = load i32* %j1, align 4
  %inc154 = add nsw i32 %128, 1
  store i32 %inc154, i32* %j1, align 4
  br label %for.cond.66

for.end.155:                                      ; preds = %for.cond.66
  %129 = load i32* %j, align 4
  %idxprom156 = sext i32 %129 to i64
  %col157 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %130 = load i32** %col157, align 8
  %arrayidx158 = getelementptr inbounds i32* %130, i64 %idxprom156
  %131 = load i32* %arrayidx158, align 4
  %add159 = add nsw i32 %131, 1
  store i32 %add159, i32* %bl, align 4
  br label %for.cond.160

for.cond.160:                                     ; preds = %for.inc.238, %for.end.155
  %132 = load i32* %bl, align 4
  %133 = load i32* %j, align 4
  %add161 = add nsw i32 %133, 1
  %idxprom162 = sext i32 %add161 to i64
  %col163 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %134 = load i32** %col163, align 8
  %arrayidx164 = getelementptr inbounds i32* %134, i64 %idxprom162
  %135 = load i32* %arrayidx164, align 4
  %cmp165 = icmp slt i32 %132, %135
  br i1 %cmp165, label %for.body.167, label %for.end.240

for.body.167:                                     ; preds = %for.cond.160
  store i32 0, i32* %i1, align 4
  br label %for.cond.168

for.cond.168:                                     ; preds = %for.inc.235, %for.body.167
  %136 = load i32* %i1, align 4
  %137 = load i32* %bl, align 4
  %idxprom169 = sext i32 %137 to i64
  %entry170 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %138 = load %union.Entry** %entry170, align 8
  %arrayidx171 = getelementptr inbounds %union.Entry* %138, i64 %idxprom169
  %block172 = bitcast %union.Entry* %arrayidx171 to %struct.Block**
  %139 = load %struct.Block** %block172, align 8
  %length173 = getelementptr inbounds %struct.Block* %139, i32 0, i32 5
  %140 = load i32* %length173, align 4
  %cmp174 = icmp slt i32 %136, %140
  br i1 %cmp174, label %for.body.176, label %for.end.237

for.body.176:                                     ; preds = %for.cond.168
  %141 = load i32* %bl, align 4
  %idxprom177 = sext i32 %141 to i64
  %entry178 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %142 = load %union.Entry** %entry178, align 8
  %arrayidx179 = getelementptr inbounds %union.Entry* %142, i64 %idxprom177
  %block180 = bitcast %union.Entry* %arrayidx179 to %struct.Block**
  %143 = load %struct.Block** %block180, align 8
  %structure181 = getelementptr inbounds %struct.Block* %143, i32 0, i32 9
  %144 = load i32** %structure181, align 8
  %tobool182 = icmp ne i32* %144, null
  br i1 %tobool182, label %if.then.183, label %if.else.195

if.then.183:                                      ; preds = %for.body.176
  %145 = load i32* %bl, align 4
  %idxprom184 = sext i32 %145 to i64
  %row185 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %146 = load i32** %row185, align 8
  %arrayidx186 = getelementptr inbounds i32* %146, i64 %idxprom184
  %147 = load i32* %arrayidx186, align 4
  %148 = load i32* %i1, align 4
  %idxprom187 = sext i32 %148 to i64
  %149 = load i32* %bl, align 4
  %idxprom188 = sext i32 %149 to i64
  %entry189 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %150 = load %union.Entry** %entry189, align 8
  %arrayidx190 = getelementptr inbounds %union.Entry* %150, i64 %idxprom188
  %block191 = bitcast %union.Entry* %arrayidx190 to %struct.Block**
  %151 = load %struct.Block** %block191, align 8
  %structure192 = getelementptr inbounds %struct.Block* %151, i32 0, i32 9
  %152 = load i32** %structure192, align 8
  %arrayidx193 = getelementptr inbounds i32* %152, i64 %idxprom187
  %153 = load i32* %arrayidx193, align 4
  %add194 = add nsw i32 %147, %153
  store i32 %add194, i32* %row, align 4
  br label %if.end.200

if.else.195:                                      ; preds = %for.body.176
  %154 = load i32* %bl, align 4
  %idxprom196 = sext i32 %154 to i64
  %row197 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %155 = load i32** %row197, align 8
  %arrayidx198 = getelementptr inbounds i32* %155, i64 %idxprom196
  %156 = load i32* %arrayidx198, align 4
  %157 = load i32* %i1, align 4
  %add199 = add nsw i32 %156, %157
  store i32 %add199, i32* %row, align 4
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.195, %if.then.183
  %158 = load i32* %j, align 4
  store i32 %158, i32* %j1, align 4
  br label %for.cond.201

for.cond.201:                                     ; preds = %for.inc.232, %if.end.200
  %159 = load i32* %j1, align 4
  %160 = load i32* %j, align 4
  %161 = load i32* %j, align 4
  %idxprom202 = sext i32 %161 to i64
  %partition_size203 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %162 = load i32** %partition_size203, align 8
  %arrayidx204 = getelementptr inbounds i32* %162, i64 %idxprom202
  %163 = load i32* %arrayidx204, align 4
  %add205 = add nsw i32 %160, %163
  %cmp206 = icmp slt i32 %159, %add205
  br i1 %cmp206, label %for.body.208, label %for.end.234

for.body.208:                                     ; preds = %for.cond.201
  %164 = load i32* %i1, align 4
  %165 = load i32* %j1, align 4
  %166 = load i32* %j, align 4
  %sub209 = sub nsw i32 %165, %166
  %167 = load i32* %bl, align 4
  %idxprom210 = sext i32 %167 to i64
  %entry211 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %168 = load %union.Entry** %entry211, align 8
  %arrayidx212 = getelementptr inbounds %union.Entry* %168, i64 %idxprom210
  %block213 = bitcast %union.Entry* %arrayidx212 to %struct.Block**
  %169 = load %struct.Block** %block213, align 8
  %length214 = getelementptr inbounds %struct.Block* %169, i32 0, i32 5
  %170 = load i32* %length214, align 4
  %mul215 = mul nsw i32 %sub209, %170
  %add216 = add nsw i32 %164, %mul215
  %idxprom217 = sext i32 %add216 to i64
  %171 = load i32* %bl, align 4
  %idxprom218 = sext i32 %171 to i64
  %entry219 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %172 = load %union.Entry** %entry219, align 8
  %arrayidx220 = getelementptr inbounds %union.Entry* %172, i64 %idxprom218
  %block221 = bitcast %union.Entry* %arrayidx220 to %struct.Block**
  %173 = load %struct.Block** %block221, align 8
  %nz222 = getelementptr inbounds %struct.Block* %173, i32 0, i32 11
  %174 = load double** %nz222, align 8
  %arrayidx223 = getelementptr inbounds double* %174, i64 %idxprom217
  %175 = load double* %arrayidx223, align 8
  %176 = load i32* %j1, align 4
  %idxprom224 = sext i32 %176 to i64
  %177 = load double** %y, align 8
  %arrayidx225 = getelementptr inbounds double* %177, i64 %idxprom224
  %178 = load double* %arrayidx225, align 8
  %mul226 = fmul double %175, %178
  %179 = load i32* %row, align 4
  %idxprom227 = sext i32 %179 to i64
  %180 = load i32** %PERM.addr, align 8
  %arrayidx228 = getelementptr inbounds i32* %180, i64 %idxprom227
  %181 = load i32* %arrayidx228, align 4
  %idxprom229 = sext i32 %181 to i64
  %182 = load double** %bt, align 8
  %arrayidx230 = getelementptr inbounds double* %182, i64 %idxprom229
  %183 = load double* %arrayidx230, align 8
  %sub231 = fsub double %183, %mul226
  store double %sub231, double* %arrayidx230, align 8
  br label %for.inc.232

for.inc.232:                                      ; preds = %for.body.208
  %184 = load i32* %j1, align 4
  %inc233 = add nsw i32 %184, 1
  store i32 %inc233, i32* %j1, align 4
  br label %for.cond.201

for.end.234:                                      ; preds = %for.cond.201
  br label %for.inc.235

for.inc.235:                                      ; preds = %for.end.234
  %185 = load i32* %i1, align 4
  %inc236 = add nsw i32 %185, 1
  store i32 %inc236, i32* %i1, align 4
  br label %for.cond.168

for.end.237:                                      ; preds = %for.cond.168
  br label %for.inc.238

for.inc.238:                                      ; preds = %for.end.237
  %186 = load i32* %bl, align 4
  %inc239 = add nsw i32 %186, 1
  store i32 %inc239, i32* %bl, align 4
  br label %for.cond.160

for.end.240:                                      ; preds = %for.cond.160
  br label %if.end.241

if.end.241:                                       ; preds = %for.end.240, %for.end.62
  br label %for.inc.242

for.inc.242:                                      ; preds = %if.end.241
  %187 = load i32* %j, align 4
  %idxprom243 = sext i32 %187 to i64
  %partition_size244 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %188 = load i32** %partition_size244, align 8
  %arrayidx245 = getelementptr inbounds i32* %188, i64 %idxprom243
  %189 = load i32* %arrayidx245, align 4
  %190 = load i32* %j, align 4
  %add246 = add nsw i32 %190, %189
  store i32 %add246, i32* %j, align 4
  br label %for.cond.17

for.end.247:                                      ; preds = %for.cond.17
  %n248 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %191 = load i32* %n248, align 4
  %sub249 = sub nsw i32 %191, 1
  store i32 %sub249, i32* %j, align 4
  %192 = load i32* %j, align 4
  %idxprom250 = sext i32 %192 to i64
  %partition_size251 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %193 = load i32** %partition_size251, align 8
  %arrayidx252 = getelementptr inbounds i32* %193, i64 %idxprom250
  %194 = load i32* %arrayidx252, align 4
  %cmp253 = icmp slt i32 %194, 0
  br i1 %cmp253, label %if.then.255, label %if.end.260

if.then.255:                                      ; preds = %for.end.247
  %195 = load i32* %j, align 4
  %idxprom256 = sext i32 %195 to i64
  %partition_size257 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %196 = load i32** %partition_size257, align 8
  %arrayidx258 = getelementptr inbounds i32* %196, i64 %idxprom256
  %197 = load i32* %arrayidx258, align 4
  %198 = load i32* %j, align 4
  %add259 = add nsw i32 %198, %197
  store i32 %add259, i32* %j, align 4
  br label %if.end.260

if.end.260:                                       ; preds = %if.then.255, %for.end.247
  br label %while.cond

while.cond:                                       ; preds = %if.end.500, %if.end.260
  %199 = load i32* %j, align 4
  %cmp261 = icmp sge i32 %199, 0
  br i1 %cmp261, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %200 = load i32* %j, align 4
  %idxprom263 = sext i32 %200 to i64
  %domain264 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 10
  %201 = load i32** %domain264, align 8
  %arrayidx265 = getelementptr inbounds i32* %201, i64 %idxprom263
  %202 = load i32* %arrayidx265, align 4
  %tobool266 = icmp ne i32 %202, 0
  br i1 %tobool266, label %if.then.267, label %if.else.308

if.then.267:                                      ; preds = %while.body
  %203 = load i32* %j, align 4
  %idxprom268 = sext i32 %203 to i64
  %col269 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %204 = load i32** %col269, align 8
  %arrayidx270 = getelementptr inbounds i32* %204, i64 %idxprom268
  %205 = load i32* %arrayidx270, align 4
  %add271 = add nsw i32 %205, 1
  store i32 %add271, i32* %i, align 4
  br label %for.cond.272

for.cond.272:                                     ; preds = %for.inc.293, %if.then.267
  %206 = load i32* %i, align 4
  %207 = load i32* %j, align 4
  %add273 = add nsw i32 %207, 1
  %idxprom274 = sext i32 %add273 to i64
  %col275 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %208 = load i32** %col275, align 8
  %arrayidx276 = getelementptr inbounds i32* %208, i64 %idxprom274
  %209 = load i32* %arrayidx276, align 4
  %cmp277 = icmp slt i32 %206, %209
  br i1 %cmp277, label %for.body.279, label %for.end.295

for.body.279:                                     ; preds = %for.cond.272
  %210 = load i32* %i, align 4
  %idxprom280 = sext i32 %210 to i64
  %entry281 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %211 = load %union.Entry** %entry281, align 8
  %arrayidx282 = getelementptr inbounds %union.Entry* %211, i64 %idxprom280
  %nz283 = bitcast %union.Entry* %arrayidx282 to double*
  %212 = load double* %nz283, align 8
  %213 = load i32* %i, align 4
  %idxprom284 = sext i32 %213 to i64
  %row285 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %214 = load i32** %row285, align 8
  %arrayidx286 = getelementptr inbounds i32* %214, i64 %idxprom284
  %215 = load i32* %arrayidx286, align 4
  %idxprom287 = sext i32 %215 to i64
  %216 = load double** %xp, align 8
  %arrayidx288 = getelementptr inbounds double* %216, i64 %idxprom287
  %217 = load double* %arrayidx288, align 8
  %mul289 = fmul double %212, %217
  %218 = load i32* %j, align 4
  %idxprom290 = sext i32 %218 to i64
  %219 = load double** %y, align 8
  %arrayidx291 = getelementptr inbounds double* %219, i64 %idxprom290
  %220 = load double* %arrayidx291, align 8
  %sub292 = fsub double %220, %mul289
  store double %sub292, double* %arrayidx291, align 8
  br label %for.inc.293

for.inc.293:                                      ; preds = %for.body.279
  %221 = load i32* %i, align 4
  %inc294 = add nsw i32 %221, 1
  store i32 %inc294, i32* %i, align 4
  br label %for.cond.272

for.end.295:                                      ; preds = %for.cond.272
  %222 = load i32* %j, align 4
  %idxprom296 = sext i32 %222 to i64
  %223 = load double** %y, align 8
  %arrayidx297 = getelementptr inbounds double* %223, i64 %idxprom296
  %224 = load double* %arrayidx297, align 8
  %225 = load i32* %j, align 4
  %idxprom298 = sext i32 %225 to i64
  %col299 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %226 = load i32** %col299, align 8
  %arrayidx300 = getelementptr inbounds i32* %226, i64 %idxprom298
  %227 = load i32* %arrayidx300, align 4
  %idxprom301 = sext i32 %227 to i64
  %entry302 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %228 = load %union.Entry** %entry302, align 8
  %arrayidx303 = getelementptr inbounds %union.Entry* %228, i64 %idxprom301
  %nz304 = bitcast %union.Entry* %arrayidx303 to double*
  %229 = load double* %nz304, align 8
  %div305 = fdiv double %224, %229
  %230 = load i32* %j, align 4
  %idxprom306 = sext i32 %230 to i64
  %231 = load double** %xp, align 8
  %arrayidx307 = getelementptr inbounds double* %231, i64 %idxprom306
  store double %div305, double* %arrayidx307, align 8
  br label %if.end.486

if.else.308:                                      ; preds = %while.body
  %232 = load i32* %j, align 4
  %idxprom309 = sext i32 %232 to i64
  %col310 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %233 = load i32** %col310, align 8
  %arrayidx311 = getelementptr inbounds i32* %233, i64 %idxprom309
  %234 = load i32* %arrayidx311, align 4
  %add312 = add nsw i32 %234, 1
  store i32 %add312, i32* %bl, align 4
  br label %for.cond.313

for.cond.313:                                     ; preds = %for.inc.389, %if.else.308
  %235 = load i32* %bl, align 4
  %236 = load i32* %j, align 4
  %add314 = add nsw i32 %236, 1
  %idxprom315 = sext i32 %add314 to i64
  %col316 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %237 = load i32** %col316, align 8
  %arrayidx317 = getelementptr inbounds i32* %237, i64 %idxprom315
  %238 = load i32* %arrayidx317, align 4
  %cmp318 = icmp slt i32 %235, %238
  br i1 %cmp318, label %for.body.320, label %for.end.391

for.body.320:                                     ; preds = %for.cond.313
  store i32 0, i32* %i1, align 4
  br label %for.cond.321

for.cond.321:                                     ; preds = %for.inc.386, %for.body.320
  %239 = load i32* %i1, align 4
  %240 = load i32* %bl, align 4
  %idxprom322 = sext i32 %240 to i64
  %entry323 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %241 = load %union.Entry** %entry323, align 8
  %arrayidx324 = getelementptr inbounds %union.Entry* %241, i64 %idxprom322
  %block325 = bitcast %union.Entry* %arrayidx324 to %struct.Block**
  %242 = load %struct.Block** %block325, align 8
  %length326 = getelementptr inbounds %struct.Block* %242, i32 0, i32 5
  %243 = load i32* %length326, align 4
  %cmp327 = icmp slt i32 %239, %243
  br i1 %cmp327, label %for.body.329, label %for.end.388

for.body.329:                                     ; preds = %for.cond.321
  %244 = load i32* %bl, align 4
  %idxprom330 = sext i32 %244 to i64
  %entry331 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %245 = load %union.Entry** %entry331, align 8
  %arrayidx332 = getelementptr inbounds %union.Entry* %245, i64 %idxprom330
  %block333 = bitcast %union.Entry* %arrayidx332 to %struct.Block**
  %246 = load %struct.Block** %block333, align 8
  %structure334 = getelementptr inbounds %struct.Block* %246, i32 0, i32 9
  %247 = load i32** %structure334, align 8
  %tobool335 = icmp ne i32* %247, null
  br i1 %tobool335, label %if.then.336, label %if.else.348

if.then.336:                                      ; preds = %for.body.329
  %248 = load i32* %bl, align 4
  %idxprom337 = sext i32 %248 to i64
  %row338 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %249 = load i32** %row338, align 8
  %arrayidx339 = getelementptr inbounds i32* %249, i64 %idxprom337
  %250 = load i32* %arrayidx339, align 4
  %251 = load i32* %i1, align 4
  %idxprom340 = sext i32 %251 to i64
  %252 = load i32* %bl, align 4
  %idxprom341 = sext i32 %252 to i64
  %entry342 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %253 = load %union.Entry** %entry342, align 8
  %arrayidx343 = getelementptr inbounds %union.Entry* %253, i64 %idxprom341
  %block344 = bitcast %union.Entry* %arrayidx343 to %struct.Block**
  %254 = load %struct.Block** %block344, align 8
  %structure345 = getelementptr inbounds %struct.Block* %254, i32 0, i32 9
  %255 = load i32** %structure345, align 8
  %arrayidx346 = getelementptr inbounds i32* %255, i64 %idxprom340
  %256 = load i32* %arrayidx346, align 4
  %add347 = add nsw i32 %250, %256
  store i32 %add347, i32* %row, align 4
  br label %if.end.353

if.else.348:                                      ; preds = %for.body.329
  %257 = load i32* %bl, align 4
  %idxprom349 = sext i32 %257 to i64
  %row350 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %258 = load i32** %row350, align 8
  %arrayidx351 = getelementptr inbounds i32* %258, i64 %idxprom349
  %259 = load i32* %arrayidx351, align 4
  %260 = load i32* %i1, align 4
  %add352 = add nsw i32 %259, %260
  store i32 %add352, i32* %row, align 4
  br label %if.end.353

if.end.353:                                       ; preds = %if.else.348, %if.then.336
  %261 = load i32* %j, align 4
  store i32 %261, i32* %j1, align 4
  br label %for.cond.354

for.cond.354:                                     ; preds = %for.inc.383, %if.end.353
  %262 = load i32* %j1, align 4
  %263 = load i32* %j, align 4
  %264 = load i32* %j, align 4
  %idxprom355 = sext i32 %264 to i64
  %partition_size356 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %265 = load i32** %partition_size356, align 8
  %arrayidx357 = getelementptr inbounds i32* %265, i64 %idxprom355
  %266 = load i32* %arrayidx357, align 4
  %add358 = add nsw i32 %263, %266
  %cmp359 = icmp slt i32 %262, %add358
  br i1 %cmp359, label %for.body.361, label %for.end.385

for.body.361:                                     ; preds = %for.cond.354
  %267 = load i32* %i1, align 4
  %268 = load i32* %j1, align 4
  %269 = load i32* %j, align 4
  %sub362 = sub nsw i32 %268, %269
  %270 = load i32* %bl, align 4
  %idxprom363 = sext i32 %270 to i64
  %entry364 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %271 = load %union.Entry** %entry364, align 8
  %arrayidx365 = getelementptr inbounds %union.Entry* %271, i64 %idxprom363
  %block366 = bitcast %union.Entry* %arrayidx365 to %struct.Block**
  %272 = load %struct.Block** %block366, align 8
  %length367 = getelementptr inbounds %struct.Block* %272, i32 0, i32 5
  %273 = load i32* %length367, align 4
  %mul368 = mul nsw i32 %sub362, %273
  %add369 = add nsw i32 %267, %mul368
  %idxprom370 = sext i32 %add369 to i64
  %274 = load i32* %bl, align 4
  %idxprom371 = sext i32 %274 to i64
  %entry372 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %275 = load %union.Entry** %entry372, align 8
  %arrayidx373 = getelementptr inbounds %union.Entry* %275, i64 %idxprom371
  %block374 = bitcast %union.Entry* %arrayidx373 to %struct.Block**
  %276 = load %struct.Block** %block374, align 8
  %nz375 = getelementptr inbounds %struct.Block* %276, i32 0, i32 11
  %277 = load double** %nz375, align 8
  %arrayidx376 = getelementptr inbounds double* %277, i64 %idxprom370
  %278 = load double* %arrayidx376, align 8
  %279 = load i32* %row, align 4
  %idxprom377 = sext i32 %279 to i64
  %280 = load double** %xp, align 8
  %arrayidx378 = getelementptr inbounds double* %280, i64 %idxprom377
  %281 = load double* %arrayidx378, align 8
  %mul379 = fmul double %278, %281
  %282 = load i32* %j1, align 4
  %idxprom380 = sext i32 %282 to i64
  %283 = load double** %y, align 8
  %arrayidx381 = getelementptr inbounds double* %283, i64 %idxprom380
  %284 = load double* %arrayidx381, align 8
  %sub382 = fsub double %284, %mul379
  store double %sub382, double* %arrayidx381, align 8
  br label %for.inc.383

for.inc.383:                                      ; preds = %for.body.361
  %285 = load i32* %j1, align 4
  %inc384 = add nsw i32 %285, 1
  store i32 %inc384, i32* %j1, align 4
  br label %for.cond.354

for.end.385:                                      ; preds = %for.cond.354
  br label %for.inc.386

for.inc.386:                                      ; preds = %for.end.385
  %286 = load i32* %i1, align 4
  %inc387 = add nsw i32 %286, 1
  store i32 %inc387, i32* %i1, align 4
  br label %for.cond.321

for.end.388:                                      ; preds = %for.cond.321
  br label %for.inc.389

for.inc.389:                                      ; preds = %for.end.388
  %287 = load i32* %bl, align 4
  %inc390 = add nsw i32 %287, 1
  store i32 %inc390, i32* %bl, align 4
  br label %for.cond.313

for.end.391:                                      ; preds = %for.cond.313
  %288 = load i32* %j, align 4
  %idxprom392 = sext i32 %288 to i64
  %col393 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 1
  %289 = load i32** %col393, align 8
  %arrayidx394 = getelementptr inbounds i32* %289, i64 %idxprom392
  %290 = load i32* %arrayidx394, align 4
  store i32 %290, i32* %bl, align 4
  %291 = load i32* %j, align 4
  %292 = load i32* %j, align 4
  %idxprom395 = sext i32 %292 to i64
  %partition_size396 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %293 = load i32** %partition_size396, align 8
  %arrayidx397 = getelementptr inbounds i32* %293, i64 %idxprom395
  %294 = load i32* %arrayidx397, align 4
  %add398 = add nsw i32 %291, %294
  %sub399 = sub nsw i32 %add398, 1
  store i32 %sub399, i32* %j1, align 4
  br label %for.cond.400

for.cond.400:                                     ; preds = %for.inc.484, %for.end.391
  %295 = load i32* %j1, align 4
  %296 = load i32* %j, align 4
  %cmp401 = icmp sge i32 %295, %296
  br i1 %cmp401, label %for.body.403, label %for.end.485

for.body.403:                                     ; preds = %for.cond.400
  %297 = load i32* %j1, align 4
  %298 = load i32* %j, align 4
  %sub404 = sub nsw i32 %297, %298
  %add405 = add nsw i32 %sub404, 1
  store i32 %add405, i32* %i1, align 4
  br label %for.cond.406

for.cond.406:                                     ; preds = %for.inc.460, %for.body.403
  %299 = load i32* %i1, align 4
  %300 = load i32* %bl, align 4
  %idxprom407 = sext i32 %300 to i64
  %entry408 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %301 = load %union.Entry** %entry408, align 8
  %arrayidx409 = getelementptr inbounds %union.Entry* %301, i64 %idxprom407
  %block410 = bitcast %union.Entry* %arrayidx409 to %struct.Block**
  %302 = load %struct.Block** %block410, align 8
  %length411 = getelementptr inbounds %struct.Block* %302, i32 0, i32 5
  %303 = load i32* %length411, align 4
  %cmp412 = icmp slt i32 %299, %303
  br i1 %cmp412, label %for.body.414, label %for.end.462

for.body.414:                                     ; preds = %for.cond.406
  %304 = load i32* %bl, align 4
  %idxprom415 = sext i32 %304 to i64
  %entry416 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %305 = load %union.Entry** %entry416, align 8
  %arrayidx417 = getelementptr inbounds %union.Entry* %305, i64 %idxprom415
  %block418 = bitcast %union.Entry* %arrayidx417 to %struct.Block**
  %306 = load %struct.Block** %block418, align 8
  %structure419 = getelementptr inbounds %struct.Block* %306, i32 0, i32 9
  %307 = load i32** %structure419, align 8
  %tobool420 = icmp ne i32* %307, null
  br i1 %tobool420, label %if.then.421, label %if.else.433

if.then.421:                                      ; preds = %for.body.414
  %308 = load i32* %bl, align 4
  %idxprom422 = sext i32 %308 to i64
  %row423 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %309 = load i32** %row423, align 8
  %arrayidx424 = getelementptr inbounds i32* %309, i64 %idxprom422
  %310 = load i32* %arrayidx424, align 4
  %311 = load i32* %i1, align 4
  %idxprom425 = sext i32 %311 to i64
  %312 = load i32* %bl, align 4
  %idxprom426 = sext i32 %312 to i64
  %entry427 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %313 = load %union.Entry** %entry427, align 8
  %arrayidx428 = getelementptr inbounds %union.Entry* %313, i64 %idxprom426
  %block429 = bitcast %union.Entry* %arrayidx428 to %struct.Block**
  %314 = load %struct.Block** %block429, align 8
  %structure430 = getelementptr inbounds %struct.Block* %314, i32 0, i32 9
  %315 = load i32** %structure430, align 8
  %arrayidx431 = getelementptr inbounds i32* %315, i64 %idxprom425
  %316 = load i32* %arrayidx431, align 4
  %add432 = add nsw i32 %310, %316
  store i32 %add432, i32* %row, align 4
  br label %if.end.438

if.else.433:                                      ; preds = %for.body.414
  %317 = load i32* %bl, align 4
  %idxprom434 = sext i32 %317 to i64
  %row435 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 2
  %318 = load i32** %row435, align 8
  %arrayidx436 = getelementptr inbounds i32* %318, i64 %idxprom434
  %319 = load i32* %arrayidx436, align 4
  %320 = load i32* %i1, align 4
  %add437 = add nsw i32 %319, %320
  store i32 %add437, i32* %row, align 4
  br label %if.end.438

if.end.438:                                       ; preds = %if.else.433, %if.then.421
  %321 = load i32* %i1, align 4
  %322 = load i32* %j1, align 4
  %323 = load i32* %j, align 4
  %sub439 = sub nsw i32 %322, %323
  %324 = load i32* %bl, align 4
  %idxprom440 = sext i32 %324 to i64
  %entry441 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %325 = load %union.Entry** %entry441, align 8
  %arrayidx442 = getelementptr inbounds %union.Entry* %325, i64 %idxprom440
  %block443 = bitcast %union.Entry* %arrayidx442 to %struct.Block**
  %326 = load %struct.Block** %block443, align 8
  %length444 = getelementptr inbounds %struct.Block* %326, i32 0, i32 5
  %327 = load i32* %length444, align 4
  %mul445 = mul nsw i32 %sub439, %327
  %add446 = add nsw i32 %321, %mul445
  %idxprom447 = sext i32 %add446 to i64
  %328 = load i32* %bl, align 4
  %idxprom448 = sext i32 %328 to i64
  %entry449 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %329 = load %union.Entry** %entry449, align 8
  %arrayidx450 = getelementptr inbounds %union.Entry* %329, i64 %idxprom448
  %block451 = bitcast %union.Entry* %arrayidx450 to %struct.Block**
  %330 = load %struct.Block** %block451, align 8
  %nz452 = getelementptr inbounds %struct.Block* %330, i32 0, i32 11
  %331 = load double** %nz452, align 8
  %arrayidx453 = getelementptr inbounds double* %331, i64 %idxprom447
  %332 = load double* %arrayidx453, align 8
  %333 = load i32* %row, align 4
  %idxprom454 = sext i32 %333 to i64
  %334 = load double** %xp, align 8
  %arrayidx455 = getelementptr inbounds double* %334, i64 %idxprom454
  %335 = load double* %arrayidx455, align 8
  %mul456 = fmul double %332, %335
  %336 = load i32* %j1, align 4
  %idxprom457 = sext i32 %336 to i64
  %337 = load double** %y, align 8
  %arrayidx458 = getelementptr inbounds double* %337, i64 %idxprom457
  %338 = load double* %arrayidx458, align 8
  %sub459 = fsub double %338, %mul456
  store double %sub459, double* %arrayidx458, align 8
  br label %for.inc.460

for.inc.460:                                      ; preds = %if.end.438
  %339 = load i32* %i1, align 4
  %inc461 = add nsw i32 %339, 1
  store i32 %inc461, i32* %i1, align 4
  br label %for.cond.406

for.end.462:                                      ; preds = %for.cond.406
  %340 = load i32* %j1, align 4
  %idxprom463 = sext i32 %340 to i64
  %341 = load double** %y, align 8
  %arrayidx464 = getelementptr inbounds double* %341, i64 %idxprom463
  %342 = load double* %arrayidx464, align 8
  %343 = load i32* %j1, align 4
  %344 = load i32* %j, align 4
  %sub465 = sub nsw i32 %343, %344
  %345 = load i32* %j1, align 4
  %346 = load i32* %j, align 4
  %sub466 = sub nsw i32 %345, %346
  %347 = load i32* %bl, align 4
  %idxprom467 = sext i32 %347 to i64
  %entry468 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %348 = load %union.Entry** %entry468, align 8
  %arrayidx469 = getelementptr inbounds %union.Entry* %348, i64 %idxprom467
  %block470 = bitcast %union.Entry* %arrayidx469 to %struct.Block**
  %349 = load %struct.Block** %block470, align 8
  %length471 = getelementptr inbounds %struct.Block* %349, i32 0, i32 5
  %350 = load i32* %length471, align 4
  %mul472 = mul nsw i32 %sub466, %350
  %add473 = add nsw i32 %sub465, %mul472
  %idxprom474 = sext i32 %add473 to i64
  %351 = load i32* %bl, align 4
  %idxprom475 = sext i32 %351 to i64
  %entry476 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 17
  %352 = load %union.Entry** %entry476, align 8
  %arrayidx477 = getelementptr inbounds %union.Entry* %352, i64 %idxprom475
  %block478 = bitcast %union.Entry* %arrayidx477 to %struct.Block**
  %353 = load %struct.Block** %block478, align 8
  %nz479 = getelementptr inbounds %struct.Block* %353, i32 0, i32 11
  %354 = load double** %nz479, align 8
  %arrayidx480 = getelementptr inbounds double* %354, i64 %idxprom474
  %355 = load double* %arrayidx480, align 8
  %div481 = fdiv double %342, %355
  %356 = load i32* %j1, align 4
  %idxprom482 = sext i32 %356 to i64
  %357 = load double** %xp, align 8
  %arrayidx483 = getelementptr inbounds double* %357, i64 %idxprom482
  store double %div481, double* %arrayidx483, align 8
  br label %for.inc.484

for.inc.484:                                      ; preds = %for.end.462
  %358 = load i32* %j1, align 4
  %dec = add nsw i32 %358, -1
  store i32 %dec, i32* %j1, align 4
  br label %for.cond.400

for.end.485:                                      ; preds = %for.cond.400
  br label %if.end.486

if.end.486:                                       ; preds = %for.end.485, %for.end.295
  %359 = load i32* %j, align 4
  %dec487 = add nsw i32 %359, -1
  store i32 %dec487, i32* %j, align 4
  %360 = load i32* %j, align 4
  %cmp488 = icmp sge i32 %360, 0
  br i1 %cmp488, label %land.lhs.true, label %if.end.500

land.lhs.true:                                    ; preds = %if.end.486
  %361 = load i32* %j, align 4
  %idxprom490 = sext i32 %361 to i64
  %partition_size491 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %362 = load i32** %partition_size491, align 8
  %arrayidx492 = getelementptr inbounds i32* %362, i64 %idxprom490
  %363 = load i32* %arrayidx492, align 4
  %cmp493 = icmp slt i32 %363, 0
  br i1 %cmp493, label %if.then.495, label %if.end.500

if.then.495:                                      ; preds = %land.lhs.true
  %364 = load i32* %j, align 4
  %idxprom496 = sext i32 %364 to i64
  %partition_size497 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 6
  %365 = load i32** %partition_size497, align 8
  %arrayidx498 = getelementptr inbounds i32* %365, i64 %idxprom496
  %366 = load i32* %arrayidx498, align 4
  %367 = load i32* %j, align 4
  %add499 = add nsw i32 %367, %366
  store i32 %add499, i32* %j, align 4
  br label %if.end.500

if.end.500:                                       ; preds = %if.then.495, %land.lhs.true, %if.end.486
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.501

for.cond.501:                                     ; preds = %for.inc.512, %while.end
  %368 = load i32* %j, align 4
  %n502 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %369 = load i32* %n502, align 4
  %cmp503 = icmp slt i32 %368, %369
  br i1 %cmp503, label %for.body.505, label %for.end.514

for.body.505:                                     ; preds = %for.cond.501
  %370 = load i32* %j, align 4
  %idxprom506 = sext i32 %370 to i64
  %371 = load i32** %PERM.addr, align 8
  %arrayidx507 = getelementptr inbounds i32* %371, i64 %idxprom506
  %372 = load i32* %arrayidx507, align 4
  %idxprom508 = sext i32 %372 to i64
  %373 = load double** %xp, align 8
  %arrayidx509 = getelementptr inbounds double* %373, i64 %idxprom508
  %374 = load double* %arrayidx509, align 8
  %375 = load i32* %j, align 4
  %idxprom510 = sext i32 %375 to i64
  %376 = load double** %x, align 8
  %arrayidx511 = getelementptr inbounds double* %376, i64 %idxprom510
  store double %374, double* %arrayidx511, align 8
  br label %for.inc.512

for.inc.512:                                      ; preds = %for.body.505
  %377 = load i32* %j, align 4
  %inc513 = add nsw i32 %377, 1
  store i32 %inc513, i32* %j, align 4
  br label %for.cond.501

for.end.514:                                      ; preds = %for.cond.501
  %378 = load double** %xp, align 8
  %call515 = call i32 (double*, ...) *bitcast (i32 (...)* @free to i32 (double*, ...)*)(double* %378)
  %379 = load double** %y, align 8
  %call516 = call i32 (double*, ...) *bitcast (i32 (...)* @free to i32 (double*, ...)*)(double* %379)
  %380 = load double** %bt, align 8
  %call517 = call i32 (double*, ...) *bitcast (i32 (...)* @free to i32 (double*, ...)*)(double* %380)
  %381 = load double** %x, align 8
  ret double* %381
}

; Function Attrs: nounwind uwtable
define internal double @ComputeNorm(double* %x, i32 %n) {
entry:
  %x.addr = alloca double*, align 8
  %n.addr = alloca i32, align 4
  %tmp = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %tmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load double** %x.addr, align 8
  %arrayidx = getelementptr inbounds double* %3, i64 %idxprom
  %4 = load double* %arrayidx, align 8
  %sub = fsub double %4, 1.000000e+00
  %call = call double @fabs(double %sub)
  %5 = load double* %tmp, align 8
  %cmp2 = fcmp ogt double %call, %5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %idxprom3 = sext i32 %6 to i64
  %7 = load double** %x.addr, align 8
  %arrayidx4 = getelementptr inbounds double* %7, i64 %idxprom3
  %8 = load double* %arrayidx4, align 8
  %sub5 = fsub double %8, 1.000000e+00
  %call6 = call double @fabs(double %sub5)
  store double %call6, double* %tmp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double* %tmp, align 8
  ret double %10
}

; Function Attrs: nounwind readnone
declare double @fabs(double)

; Function Attrs: nounwind uwtable
define internal double* @CreateVector(%struct.SMatrix* byval align 8 %M) {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca double*, align 8
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %call = call double* (i32, ...) *bitcast (double* (i32)* @NewVector to double* (i32, ...)*)(i32 %0)
  store double* %call, double** %b, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32* %j, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %2 = load i32* %n1, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load double** %b, align 8
  %arrayidx = getelementptr inbounds double* %4, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %nz = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %6 = load double** %nz, align 8
  %tobool = icmp ne double* %6, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.25, %if.then
  %7 = load i32* %j, align 4
  %n3 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %8 = load i32* %n3, align 4
  %cmp4 = icmp slt i32 %7, %8
  br i1 %cmp4, label %for.body.5, label %for.end.27

for.body.5:                                       ; preds = %for.cond.2
  %9 = load i32* %j, align 4
  %idxprom6 = sext i32 %9 to i64
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %10 = load i32** %col, align 8
  %arrayidx7 = getelementptr inbounds i32* %10, i64 %idxprom6
  %11 = load i32* %arrayidx7, align 4
  store i32 %11, i32* %i, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.22, %for.body.5
  %12 = load i32* %i, align 4
  %13 = load i32* %j, align 4
  %add = add nsw i32 %13, 1
  %idxprom9 = sext i32 %add to i64
  %col10 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %14 = load i32** %col10, align 8
  %arrayidx11 = getelementptr inbounds i32* %14, i64 %idxprom9
  %15 = load i32* %arrayidx11, align 4
  %cmp12 = icmp slt i32 %12, %15
  br i1 %cmp12, label %for.body.13, label %for.end.24

for.body.13:                                      ; preds = %for.cond.8
  %16 = load i32* %i, align 4
  %idxprom14 = sext i32 %16 to i64
  %nz15 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %17 = load double** %nz15, align 8
  %arrayidx16 = getelementptr inbounds double* %17, i64 %idxprom14
  %18 = load double* %arrayidx16, align 8
  %19 = load i32* %i, align 4
  %idxprom17 = sext i32 %19 to i64
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %20 = load i32** %row, align 8
  %arrayidx18 = getelementptr inbounds i32* %20, i64 %idxprom17
  %21 = load i32* %arrayidx18, align 4
  %idxprom19 = sext i32 %21 to i64
  %22 = load double** %b, align 8
  %arrayidx20 = getelementptr inbounds double* %22, i64 %idxprom19
  %23 = load double* %arrayidx20, align 8
  %add21 = fadd double %23, %18
  store double %add21, double* %arrayidx20, align 8
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.body.13
  %24 = load i32* %i, align 4
  %inc23 = add nsw i32 %24, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond.8

for.end.24:                                       ; preds = %for.cond.8
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.end.24
  %25 = load i32* %j, align 4
  %inc26 = add nsw i32 %25, 1
  store i32 %inc26, i32* %j, align 4
  br label %for.cond.2

for.end.27:                                       ; preds = %for.cond.2
  br label %if.end

if.else:                                          ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond.28

for.cond.28:                                      ; preds = %for.inc.56, %if.else
  %26 = load i32* %j, align 4
  %n29 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %27 = load i32* %n29, align 4
  %cmp30 = icmp slt i32 %26, %27
  br i1 %cmp30, label %for.body.31, label %for.end.58

for.body.31:                                      ; preds = %for.cond.28
  %28 = load i32* %j, align 4
  %idxprom32 = sext i32 %28 to i64
  %col33 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %29 = load i32** %col33, align 8
  %arrayidx34 = getelementptr inbounds i32* %29, i64 %idxprom32
  %30 = load i32* %arrayidx34, align 4
  store i32 %30, i32* %i, align 4
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.53, %for.body.31
  %31 = load i32* %i, align 4
  %32 = load i32* %j, align 4
  %add36 = add nsw i32 %32, 1
  %idxprom37 = sext i32 %add36 to i64
  %col38 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %33 = load i32** %col38, align 8
  %arrayidx39 = getelementptr inbounds i32* %33, i64 %idxprom37
  %34 = load i32* %arrayidx39, align 4
  %cmp40 = icmp slt i32 %31, %34
  br i1 %cmp40, label %for.body.41, label %for.end.55

for.body.41:                                      ; preds = %for.cond.35
  %35 = load i32* %i, align 4
  %idxprom42 = sext i32 %35 to i64
  %row43 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %36 = load i32** %row43, align 8
  %arrayidx44 = getelementptr inbounds i32* %36, i64 %idxprom42
  %37 = load i32* %arrayidx44, align 4
  %38 = load i32* %j, align 4
  %n45 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %39 = load i32* %n45, align 4
  %call46 = call double (i32, i32, i32, ...) *bitcast (double (i32, i32, i32)* @Value to double (i32, i32, i32, ...)*)(i32 %37, i32 %38, i32 %39)
  %40 = load i32* %i, align 4
  %idxprom47 = sext i32 %40 to i64
  %row48 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %41 = load i32** %row48, align 8
  %arrayidx49 = getelementptr inbounds i32* %41, i64 %idxprom47
  %42 = load i32* %arrayidx49, align 4
  %idxprom50 = sext i32 %42 to i64
  %43 = load double** %b, align 8
  %arrayidx51 = getelementptr inbounds double* %43, i64 %idxprom50
  %44 = load double* %arrayidx51, align 8
  %add52 = fadd double %44, %call46
  store double %add52, double* %arrayidx51, align 8
  br label %for.inc.53

for.inc.53:                                       ; preds = %for.body.41
  %45 = load i32* %i, align 4
  %inc54 = add nsw i32 %45, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond.35

for.end.55:                                       ; preds = %for.cond.35
  br label %for.inc.56

for.inc.56:                                       ; preds = %for.end.55
  %46 = load i32* %j, align 4
  %inc57 = add nsw i32 %46, 1
  store i32 %inc57, i32* %j, align 4
  br label %for.cond.28

for.end.58:                                       ; preds = %for.cond.28
  br label %if.end

if.end:                                           ; preds = %for.end.58, %for.end.27
  %47 = load double** %b, align 8
  ret double* %47
}

; Function Attrs: nounwind uwtable
define internal i32 @CreateBlockedMatrix2(%struct.SMatrix* byval align 8 %M, i32 %block_ub, i32* %T, i32* %firstchild, i32* %child, i32* %PERM, i32* %INVP, i32* %domain, i32* %partition) {
entry:
  %retval = alloca i32, align 4
  %block_ub.addr = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %firstchild.addr = alloca i32*, align 8
  %child.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %domain.addr = alloca i32*, align 8
  %partition.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %p = alloca i32, align 4
  %which = alloca i32, align 4
  %super = alloca i32, align 4
  %n_nz = alloca i32, align 4
  %structure = alloca i32*, align 8
  %nz = alloca i32*, align 8
  %blocks = alloca %struct.Block*, align 8
  %num_partitions = alloca i32, align 4
  %piece_size = alloca i32, align 4
  %piece = alloca i32, align 4
  %current = alloca i32, align 4
  store i32 %block_ub, i32* %block_ub.addr, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32* %firstchild, i32** %firstchild.addr, align 8
  store i32* %child, i32** %child.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store i32* %domain, i32** %domain.addr, align 8
  store i32* %partition, i32** %partition.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  store i32 %0, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %1 = load i32** %domain.addr, align 8
  store i32* %1, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %2 = load i32** @domains, align 8
  store i32* %2, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %3 = load i32** @proc_domains, align 8
  store i32* %3, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %4 = load i32* @P, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** @proc_domains, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %7 = load i32* %block_ub.addr, align 4
  %add = add nsw i32 %7, 20
  store i32 %add, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %8 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %conv = sext i32 %8 to i64
  %mul = mul i64 %conv, 8
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv1, i32 888)
  %9 = bitcast i8* %call to double**
  store double** %9, double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32* %i, align 4
  %11 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32* %i, align 4
  %idxprom3 = sext i32 %12 to i64
  %13 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx4 = getelementptr inbounds double** %13, i64 %idxprom3
  store double* null, double** %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %16 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %add5 = add nsw i32 %15, %16
  %add6 = add nsw i32 %add5, 1
  %conv7 = sext i32 %add6 to i64
  %mul8 = mul i64 %conv7, 4
  %conv9 = trunc i64 %mul8 to i32
  %call10 = call i8* @MyMalloc(i32 %conv9, i32 888)
  %17 = bitcast i8* %call10 to i32*
  store i32* %17, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %18 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %19 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %add11 = add nsw i32 %18, %19
  %add12 = add nsw i32 %add11, 1
  %conv13 = sext i32 %add12 to i64
  %mul14 = mul i64 %conv13, 4
  %conv15 = trunc i64 %mul14 to i32
  %call16 = call i8* @MyMalloc(i32 %conv15, i32 888)
  %20 = bitcast i8* %call16 to i32*
  store i32* %20, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %21 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %conv17 = sext i32 %21 to i64
  %mul18 = mul i64 %conv17, 8
  %call19 = call i8* @malloc(i64 %mul18)
  %22 = bitcast i8* %call19 to %union.Entry*
  store %union.Entry* %22, %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %23 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %24 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %conv20 = sext i32 %24 to i64
  %mul21 = mul i64 %conv20, 8
  %call22 = call i32 (%union.Entry*, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (%union.Entry*, i64, i32, ...)*)(%union.Entry* %23, i64 %mul21, i32 888)
  %25 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %conv23 = sext i32 %25 to i64
  %mul24 = mul i64 %conv23, 4
  %call25 = call i8* @malloc(i64 %mul24)
  %26 = bitcast i8* %call25 to i32*
  store i32* %26, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %27 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %28 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %conv26 = sext i32 %28 to i64
  %mul27 = mul i64 %conv26, 4
  %call28 = call i32 (i32*, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (i32*, i64, i32, ...)*)(i32* %27, i64 %mul27, i32 888)
  %29 = load i32* @P, align 4
  %call29 = call i32 @FindMachineDimensions(i32 %29)
  store i32 0, i32* %j, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.66, %for.end
  %30 = load i32* %j, align 4
  %n31 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %31 = load i32* %n31, align 4
  %cmp32 = icmp slt i32 %30, %31
  br i1 %cmp32, label %for.body.34, label %for.end.70

for.body.34:                                      ; preds = %for.cond.30
  %32 = load i32* %j, align 4
  %idxprom35 = sext i32 %32 to i64
  %33 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx36 = getelementptr inbounds i32* %33, i64 %idxprom35
  %34 = load i32* %arrayidx36, align 4
  %tobool = icmp ne i32 %34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body.34
  %35 = load i32* %j, align 4
  %idxprom37 = sext i32 %35 to i64
  %36 = load i32** @node, align 8
  %arrayidx38 = getelementptr inbounds i32* %36, i64 %idxprom37
  %37 = load i32* %arrayidx38, align 4
  %38 = load i32* @postpass_partition_size, align 4
  %call39 = call i32 @FindNumPartitions(i32 %37, i32 %38)
  store i32 %call39, i32* %num_partitions, align 4
  %39 = load i32* %j, align 4
  store i32 %39, i32* %current, align 4
  store i32 0, i32* %piece, align 4
  br label %for.cond.40

for.cond.40:                                      ; preds = %for.inc.63, %if.then
  %40 = load i32* %piece, align 4
  %41 = load i32* %num_partitions, align 4
  %cmp41 = icmp slt i32 %40, %41
  br i1 %cmp41, label %for.body.43, label %for.end.65

for.body.43:                                      ; preds = %for.cond.40
  %42 = load i32* %j, align 4
  %idxprom44 = sext i32 %42 to i64
  %43 = load i32** @node, align 8
  %arrayidx45 = getelementptr inbounds i32* %43, i64 %idxprom44
  %44 = load i32* %arrayidx45, align 4
  %45 = load i32* %piece, align 4
  %add46 = add nsw i32 %45, 1
  %mul47 = mul nsw i32 %44, %add46
  %46 = load i32* %num_partitions, align 4
  %div = sdiv i32 %mul47, %46
  %47 = load i32* %j, align 4
  %idxprom48 = sext i32 %47 to i64
  %48 = load i32** @node, align 8
  %arrayidx49 = getelementptr inbounds i32* %48, i64 %idxprom48
  %49 = load i32* %arrayidx49, align 4
  %50 = load i32* %piece, align 4
  %mul50 = mul nsw i32 %49, %50
  %51 = load i32* %num_partitions, align 4
  %div51 = sdiv i32 %mul50, %51
  %sub = sub nsw i32 %div, %div51
  store i32 %sub, i32* %piece_size, align 4
  %52 = load i32* %current, align 4
  store i32 %52, i32* %k, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.59, %for.body.43
  %53 = load i32* %k, align 4
  %54 = load i32* %current, align 4
  %55 = load i32* %piece_size, align 4
  %add53 = add nsw i32 %54, %55
  %cmp54 = icmp slt i32 %53, %add53
  br i1 %cmp54, label %for.body.56, label %for.end.61

for.body.56:                                      ; preds = %for.cond.52
  %56 = load i32* %current, align 4
  %57 = load i32* %k, align 4
  %idxprom57 = sext i32 %57 to i64
  %58 = load i32** %partition.addr, align 8
  %arrayidx58 = getelementptr inbounds i32* %58, i64 %idxprom57
  store i32 %56, i32* %arrayidx58, align 4
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.56
  %59 = load i32* %k, align 4
  %inc60 = add nsw i32 %59, 1
  store i32 %inc60, i32* %k, align 4
  br label %for.cond.52

for.end.61:                                       ; preds = %for.cond.52
  %60 = load i32* %piece_size, align 4
  %61 = load i32* %current, align 4
  %add62 = add nsw i32 %61, %60
  store i32 %add62, i32* %current, align 4
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.end.61
  %62 = load i32* %piece, align 4
  %inc64 = add nsw i32 %62, 1
  store i32 %inc64, i32* %piece, align 4
  br label %for.cond.40

for.end.65:                                       ; preds = %for.cond.40
  br label %if.end

if.end:                                           ; preds = %for.end.65, %for.body.34
  br label %for.inc.66

for.inc.66:                                       ; preds = %if.end
  %63 = load i32* %j, align 4
  %idxprom67 = sext i32 %63 to i64
  %64 = load i32** @node, align 8
  %arrayidx68 = getelementptr inbounds i32* %64, i64 %idxprom67
  %65 = load i32* %arrayidx68, align 4
  %66 = load i32* %j, align 4
  %add69 = add nsw i32 %66, %65
  store i32 %add69, i32* %j, align 4
  br label %for.cond.30

for.end.70:                                       ; preds = %for.cond.30
  store i32 0, i32* %j, align 4
  store i32 0, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  store i32 0, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.114, %for.end.70
  %67 = load i32* %j, align 4
  %n71 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %68 = load i32* %n71, align 4
  %cmp72 = icmp slt i32 %67, %68
  br i1 %cmp72, label %while.body, label %while.end.115

while.body:                                       ; preds = %while.cond
  %69 = load i32* %j, align 4
  %idxprom74 = sext i32 %69 to i64
  %70 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx75 = getelementptr inbounds i32* %70, i64 %idxprom74
  %71 = load i32* %arrayidx75, align 4
  %tobool76 = icmp ne i32 %71, 0
  br i1 %tobool76, label %if.then.77, label %if.else

if.then.77:                                       ; preds = %while.body
  %72 = load i32* %j, align 4
  %idxprom78 = sext i32 %72 to i64
  %73 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx79 = getelementptr inbounds i32* %73, i64 %idxprom78
  store i32 1, i32* %arrayidx79, align 4
  %74 = load i32* %j, align 4
  %inc80 = add nsw i32 %74, 1
  store i32 %inc80, i32* %j, align 4
  br label %if.end.114

if.else:                                          ; preds = %while.body
  %75 = load i32* %j, align 4
  store i32 %75, i32* %k, align 4
  br label %while.cond.81

while.cond.81:                                    ; preds = %while.body.89, %if.else
  %76 = load i32* %k, align 4
  %idxprom82 = sext i32 %76 to i64
  %77 = load i32** %partition.addr, align 8
  %arrayidx83 = getelementptr inbounds i32* %77, i64 %idxprom82
  %78 = load i32* %arrayidx83, align 4
  %79 = load i32* %j, align 4
  %cmp84 = icmp eq i32 %78, %79
  br i1 %cmp84, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.81
  %80 = load i32* %k, align 4
  %n86 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %81 = load i32* %n86, align 4
  %cmp87 = icmp slt i32 %80, %81
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.81
  %82 = phi i1 [ false, %while.cond.81 ], [ %cmp87, %land.rhs ]
  br i1 %82, label %while.body.89, label %while.end

while.body.89:                                    ; preds = %land.end
  %83 = load i32* %k, align 4
  %inc90 = add nsw i32 %83, 1
  store i32 %inc90, i32* %k, align 4
  br label %while.cond.81

while.end:                                        ; preds = %land.end
  %84 = load i32* %k, align 4
  %85 = load i32* %j, align 4
  %sub91 = sub nsw i32 %84, %85
  %86 = load i32* %j, align 4
  %idxprom92 = sext i32 %86 to i64
  %87 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx93 = getelementptr inbounds i32* %87, i64 %idxprom92
  store i32 %sub91, i32* %arrayidx93, align 4
  %88 = load i32* %j, align 4
  %add94 = add nsw i32 %88, 1
  store i32 %add94, i32* %i, align 4
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.102, %while.end
  %89 = load i32* %i, align 4
  %90 = load i32* %k, align 4
  %cmp96 = icmp slt i32 %89, %90
  br i1 %cmp96, label %for.body.98, label %for.end.104

for.body.98:                                      ; preds = %for.cond.95
  %91 = load i32* %j, align 4
  %92 = load i32* %i, align 4
  %sub99 = sub nsw i32 %91, %92
  %93 = load i32* %i, align 4
  %idxprom100 = sext i32 %93 to i64
  %94 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx101 = getelementptr inbounds i32* %94, i64 %idxprom100
  store i32 %sub99, i32* %arrayidx101, align 4
  br label %for.inc.102

for.inc.102:                                      ; preds = %for.body.98
  %95 = load i32* %i, align 4
  %inc103 = add nsw i32 %95, 1
  store i32 %inc103, i32* %i, align 4
  br label %for.cond.95

for.end.104:                                      ; preds = %for.cond.95
  %96 = load i32* %j, align 4
  %idxprom105 = sext i32 %96 to i64
  %97 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx106 = getelementptr inbounds i32* %97, i64 %idxprom105
  %98 = load i32* %arrayidx106, align 4
  %99 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  %cmp107 = icmp sgt i32 %98, %99
  br i1 %cmp107, label %if.then.109, label %if.end.112

if.then.109:                                      ; preds = %for.end.104
  %100 = load i32* %j, align 4
  %idxprom110 = sext i32 %100 to i64
  %101 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx111 = getelementptr inbounds i32* %101, i64 %idxprom110
  %102 = load i32* %arrayidx111, align 4
  store i32 %102, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.109, %for.end.104
  %103 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %inc113 = add nsw i32 %103, 1
  store i32 %inc113, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %104 = load i32* %k, align 4
  store i32 %104, i32* %j, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.112, %if.then.77
  br label %while.cond

while.end.115:                                    ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.116

for.cond.116:                                     ; preds = %for.inc.123, %while.end.115
  %105 = load i32* %j, align 4
  %106 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp117 = icmp slt i32 %105, %106
  br i1 %cmp117, label %for.body.119, label %for.end.125

for.body.119:                                     ; preds = %for.cond.116
  %107 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %108 = load i32* %j, align 4
  %add120 = add nsw i32 %107, %108
  %idxprom121 = sext i32 %add120 to i64
  %109 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx122 = getelementptr inbounds i32* %109, i64 %idxprom121
  store i32 1, i32* %arrayidx122, align 4
  br label %for.inc.123

for.inc.123:                                      ; preds = %for.body.119
  %110 = load i32* %j, align 4
  %inc124 = add nsw i32 %110, 1
  store i32 %inc124, i32* %j, align 4
  br label %for.cond.116

for.end.125:                                      ; preds = %for.cond.116
  %111 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp126 = icmp eq i32 %111, 0
  br i1 %cmp126, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %for.end.125
  store i32 1, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.128, %for.end.125
  %112 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %113 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %add130 = add nsw i32 %112, %113
  %conv131 = sext i32 %add130 to i64
  %mul132 = mul i64 %conv131, 4
  %conv133 = trunc i64 %mul132 to i32
  %call134 = call i8* @MyMalloc(i32 %conv133, i32 888)
  %114 = bitcast i8* %call134 to i32*
  store i32* %114, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %115 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %call135 = call i32 @ComputePartitionNumbering(i32* %115)
  store i32 0, i32* %j, align 4
  br label %for.cond.136

for.cond.136:                                     ; preds = %for.inc.143, %if.end.129
  %116 = load i32* %j, align 4
  %117 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp137 = icmp slt i32 %116, %117
  br i1 %cmp137, label %for.body.139, label %for.end.145

for.body.139:                                     ; preds = %for.cond.136
  %118 = load i32* %j, align 4
  %119 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %rem = srem i32 %118, %119
  %120 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %121 = load i32* %j, align 4
  %add140 = add nsw i32 %120, %121
  %idxprom141 = sext i32 %add140 to i64
  %122 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx142 = getelementptr inbounds i32* %122, i64 %idxprom141
  store i32 %rem, i32* %arrayidx142, align 4
  br label %for.inc.143

for.inc.143:                                      ; preds = %for.body.139
  %123 = load i32* %j, align 4
  %inc144 = add nsw i32 %123, 1
  store i32 %inc144, i32* %j, align 4
  br label %for.cond.136

for.end.145:                                      ; preds = %for.cond.136
  %124 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv146 = sext i32 %124 to i64
  %mul147 = mul i64 %conv146, 4
  %conv148 = trunc i64 %mul147 to i32
  %call149 = call i8* @MyMalloc(i32 %conv148, i32 888)
  %125 = bitcast i8* %call149 to i32*
  store i32* %125, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 8), align 8
  %126 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv150 = sext i32 %126 to i64
  %mul151 = mul i64 %conv150, 4
  %conv152 = trunc i64 %mul151 to i32
  %call153 = call i8* @MyMalloc(i32 %conv152, i32 888)
  %127 = bitcast i8* %call153 to i32*
  store i32* %127, i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 9), align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.154

for.cond.154:                                     ; preds = %for.inc.162, %for.end.145
  %128 = load i32* %i, align 4
  %129 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp155 = icmp slt i32 %128, %129
  br i1 %cmp155, label %for.body.157, label %for.end.164

for.body.157:                                     ; preds = %for.cond.154
  %130 = load i32* %i, align 4
  %131 = load i32* %i, align 4
  %idxprom158 = sext i32 %131 to i64
  %132 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 9), align 8
  %arrayidx159 = getelementptr inbounds i32* %132, i64 %idxprom158
  store i32 %130, i32* %arrayidx159, align 4
  %133 = load i32* %i, align 4
  %idxprom160 = sext i32 %133 to i64
  %134 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 8), align 8
  %arrayidx161 = getelementptr inbounds i32* %134, i64 %idxprom160
  store i32 %130, i32* %arrayidx161, align 4
  br label %for.inc.162

for.inc.162:                                      ; preds = %for.body.157
  %135 = load i32* %i, align 4
  %inc163 = add nsw i32 %135, 1
  store i32 %inc163, i32* %i, align 4
  br label %for.cond.154

for.end.164:                                      ; preds = %for.cond.154
  %call165 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([19 x i8]* @.str.11, i32 0, i32 0))
  %call166 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([9 x i8]* @.str.1.12, i32 0, i32 0))
  %136 = load i32** %domain.addr, align 8
  %137 = load i32** @node, align 8
  %call167 = call i32 @DumpSizes(%struct.BMatrix* byval align 8 @LB, i32* %136, i32* %137)
  %call168 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([9 x i8]* @.str.2.13, i32 0, i32 0))
  %138 = load i32** %domain.addr, align 8
  %139 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %call169 = call i32 @DumpSizes(%struct.BMatrix* byval align 8 @LB, i32* %138, i32* %139)
  %140 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %call170 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.3.14, i32 0, i32 0), i32 %140)
  %n171 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %141 = load i32* %n171, align 4
  %conv172 = sext i32 %141 to i64
  %mul173 = mul i64 %conv172, 4
  %call174 = call i8* @malloc(i64 %mul173)
  %142 = bitcast i8* %call174 to i32*
  store i32* %142, i32** %structure, align 8
  %n175 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %143 = load i32* %n175, align 4
  %conv176 = sext i32 %143 to i64
  %mul177 = mul i64 %conv176, 4
  %call178 = call i8* @malloc(i64 %mul177)
  %144 = bitcast i8* %call178 to i32*
  store i32* %144, i32** %nz, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.179

for.cond.179:                                     ; preds = %for.inc.186, %for.end.164
  %145 = load i32* %i, align 4
  %n180 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %146 = load i32* %n180, align 4
  %cmp181 = icmp slt i32 %145, %146
  br i1 %cmp181, label %for.body.183, label %for.end.188

for.body.183:                                     ; preds = %for.cond.179
  %147 = load i32* %i, align 4
  %idxprom184 = sext i32 %147 to i64
  %148 = load i32** %structure, align 8
  %arrayidx185 = getelementptr inbounds i32* %148, i64 %idxprom184
  store i32 0, i32* %arrayidx185, align 4
  br label %for.inc.186

for.inc.186:                                      ; preds = %for.body.183
  %149 = load i32* %i, align 4
  %inc187 = add nsw i32 %149, 1
  store i32 %inc187, i32* %i, align 4
  br label %for.cond.179

for.end.188:                                      ; preds = %for.cond.179
  %150 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx189 = getelementptr inbounds i32* %150, i64 0
  store i32 0, i32* %arrayidx189, align 4
  store i32 0, i32* %super, align 4
  br label %for.cond.190

for.cond.190:                                     ; preds = %for.inc.231, %for.end.188
  %151 = load i32* %super, align 4
  %152 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp191 = icmp slt i32 %151, %152
  br i1 %cmp191, label %for.body.193, label %for.end.235

for.body.193:                                     ; preds = %for.cond.190
  %153 = load i32* %super, align 4
  %idxprom194 = sext i32 %153 to i64
  %154 = load i32** %domain.addr, align 8
  %arrayidx195 = getelementptr inbounds i32* %154, i64 %idxprom194
  %155 = load i32* %arrayidx195, align 4
  %tobool196 = icmp ne i32 %155, 0
  br i1 %tobool196, label %if.then.197, label %if.else.200

if.then.197:                                      ; preds = %for.body.193
  %156 = load i32* %super, align 4
  %157 = load i32** %PERM.addr, align 8
  %158 = load i32** %INVP.addr, align 8
  %159 = load i32** %firstchild.addr, align 8
  %160 = load i32** %child.addr, align 8
  %161 = load i32** %structure, align 8
  %162 = load i32** %nz, align 8
  %call198 = call i32 @FindSuperStructure(%struct.SMatrix* byval align 8 %M, i32 %156, i32* %157, i32* %158, i32* %159, i32* %160, i32* %161, i32* %162, i32* %n_nz)
  %163 = load i32* %super, align 4
  %164 = load i32** %nz, align 8
  %165 = load i32* %n_nz, align 4
  %call199 = call i32 @FindDomStructure(i32 %163, i32* %164, i32 %165)
  br label %if.end.230

if.else.200:                                      ; preds = %for.body.193
  %166 = load i32* %super, align 4
  store i32 %166, i32* %j, align 4
  br label %for.cond.201

for.cond.201:                                     ; preds = %for.inc.225, %if.else.200
  %167 = load i32* %j, align 4
  %168 = load i32* %super, align 4
  %169 = load i32* %super, align 4
  %idxprom202 = sext i32 %169 to i64
  %170 = load i32** @node, align 8
  %arrayidx203 = getelementptr inbounds i32* %170, i64 %idxprom202
  %171 = load i32* %arrayidx203, align 4
  %add204 = add nsw i32 %168, %171
  %cmp205 = icmp slt i32 %167, %add204
  br i1 %cmp205, label %for.body.207, label %for.end.229

for.body.207:                                     ; preds = %for.cond.201
  %172 = load i32* %j, align 4
  %173 = load i32** %PERM.addr, align 8
  %174 = load i32** %INVP.addr, align 8
  %175 = load i32** %firstchild.addr, align 8
  %176 = load i32** %child.addr, align 8
  %177 = load i32** %structure, align 8
  %178 = load i32** %nz, align 8
  %call208 = call i32 @FindBlStructure(%struct.SMatrix* byval align 8 %M, i32 %172, i32* %173, i32* %174, i32* %175, i32* %176, i32* %177, i32* %178)
  %179 = load i32* %j, align 4
  %add209 = add nsw i32 %179, 1
  store i32 %add209, i32* %i, align 4
  br label %for.cond.210

for.cond.210:                                     ; preds = %for.inc.222, %for.body.207
  %180 = load i32* %i, align 4
  %181 = load i32* %j, align 4
  %182 = load i32* %j, align 4
  %idxprom211 = sext i32 %182 to i64
  %183 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx212 = getelementptr inbounds i32* %183, i64 %idxprom211
  %184 = load i32* %arrayidx212, align 4
  %add213 = add nsw i32 %181, %184
  %cmp214 = icmp slt i32 %180, %add213
  br i1 %cmp214, label %for.body.216, label %for.end.224

for.body.216:                                     ; preds = %for.cond.210
  %185 = load i32* %i, align 4
  %idxprom217 = sext i32 %185 to i64
  %186 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx218 = getelementptr inbounds i32* %186, i64 %idxprom217
  %187 = load i32* %arrayidx218, align 4
  %188 = load i32* %i, align 4
  %add219 = add nsw i32 %188, 1
  %idxprom220 = sext i32 %add219 to i64
  %189 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx221 = getelementptr inbounds i32* %189, i64 %idxprom220
  store i32 %187, i32* %arrayidx221, align 4
  br label %for.inc.222

for.inc.222:                                      ; preds = %for.body.216
  %190 = load i32* %i, align 4
  %inc223 = add nsw i32 %190, 1
  store i32 %inc223, i32* %i, align 4
  br label %for.cond.210

for.end.224:                                      ; preds = %for.cond.210
  br label %for.inc.225

for.inc.225:                                      ; preds = %for.end.224
  %191 = load i32* %j, align 4
  %idxprom226 = sext i32 %191 to i64
  %192 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx227 = getelementptr inbounds i32* %192, i64 %idxprom226
  %193 = load i32* %arrayidx227, align 4
  %194 = load i32* %j, align 4
  %add228 = add nsw i32 %194, %193
  store i32 %add228, i32* %j, align 4
  br label %for.cond.201

for.end.229:                                      ; preds = %for.cond.201
  br label %if.end.230

if.end.230:                                       ; preds = %for.end.229, %if.then.197
  br label %for.inc.231

for.inc.231:                                      ; preds = %if.end.230
  %195 = load i32* %super, align 4
  %idxprom232 = sext i32 %195 to i64
  %196 = load i32** @node, align 8
  %arrayidx233 = getelementptr inbounds i32* %196, i64 %idxprom232
  %197 = load i32* %arrayidx233, align 4
  %198 = load i32* %super, align 4
  %add234 = add nsw i32 %198, %197
  store i32 %add234, i32* %super, align 4
  br label %for.cond.190

for.end.235:                                      ; preds = %for.cond.190
  store i32 0, i32* %j, align 4
  br label %for.cond.236

for.cond.236:                                     ; preds = %for.inc.241, %for.end.235
  %199 = load i32* %j, align 4
  %200 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp237 = icmp slt i32 %199, %200
  br i1 %cmp237, label %for.body.239, label %for.end.243

for.body.239:                                     ; preds = %for.cond.236
  %201 = load i32* %j, align 4
  %call240 = call i32 @FindDummyDomainStructure(i32 %201)
  br label %for.inc.241

for.inc.241:                                      ; preds = %for.body.239
  %202 = load i32* %j, align 4
  %inc242 = add nsw i32 %202, 1
  store i32 %inc242, i32* %j, align 4
  br label %for.cond.236

for.end.243:                                      ; preds = %for.cond.236
  %203 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %204 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %add244 = add nsw i32 %203, %204
  %idxprom245 = sext i32 %add244 to i64
  %205 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx246 = getelementptr inbounds i32* %205, i64 %idxprom245
  %206 = load i32* %arrayidx246, align 4
  store i32 %206, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 4), align 4
  %207 = load i32** %structure, align 8
  %call247 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %207)
  %208 = load i32** %nz, align 8
  %call248 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %208)
  %209 = load i32* @P, align 4
  %call249 = call i32 (i32, ...) *bitcast (i32 (i32)* @PlaceDomains to i32 (i32, ...)*)(i32 %209)
  store i32 0, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.250

for.cond.250:                                     ; preds = %for.inc.266, %for.end.243
  %210 = load i32* %j, align 4
  %211 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp251 = icmp slt i32 %210, %211
  br i1 %cmp251, label %for.body.253, label %for.end.270

for.body.253:                                     ; preds = %for.cond.250
  %212 = load i32* %j, align 4
  %idxprom254 = sext i32 %212 to i64
  %213 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx255 = getelementptr inbounds i32* %213, i64 %idxprom254
  %214 = load i32* %arrayidx255, align 4
  %tobool256 = icmp ne i32 %214, 0
  br i1 %tobool256, label %if.end.265, label %if.then.257

if.then.257:                                      ; preds = %for.body.253
  %215 = load i32* %j, align 4
  %add258 = add nsw i32 %215, 1
  %idxprom259 = sext i32 %add258 to i64
  %216 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx260 = getelementptr inbounds i32* %216, i64 %idxprom259
  %217 = load i32* %arrayidx260, align 4
  %218 = load i32* %j, align 4
  %idxprom261 = sext i32 %218 to i64
  %219 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx262 = getelementptr inbounds i32* %219, i64 %idxprom261
  %220 = load i32* %arrayidx262, align 4
  %sub263 = sub nsw i32 %217, %220
  %221 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  %add264 = add nsw i32 %221, %sub263
  store i32 %add264, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  br label %if.end.265

if.end.265:                                       ; preds = %if.then.257, %for.body.253
  br label %for.inc.266

for.inc.266:                                      ; preds = %if.end.265
  %222 = load i32* %j, align 4
  %idxprom267 = sext i32 %222 to i64
  %223 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx268 = getelementptr inbounds i32* %223, i64 %idxprom267
  %224 = load i32* %arrayidx268, align 4
  %225 = load i32* %j, align 4
  %add269 = add nsw i32 %225, %224
  store i32 %add269, i32* %j, align 4
  br label %for.cond.250

for.end.270:                                      ; preds = %for.cond.250
  store i32 0, i32* %j, align 4
  br label %for.cond.271

for.cond.271:                                     ; preds = %for.inc.284, %for.end.270
  %226 = load i32* %j, align 4
  %227 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp272 = icmp slt i32 %226, %227
  br i1 %cmp272, label %for.body.274, label %for.end.286

for.body.274:                                     ; preds = %for.cond.271
  %228 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %229 = load i32* %j, align 4
  %add275 = add nsw i32 %228, %229
  %add276 = add nsw i32 %add275, 1
  %idxprom277 = sext i32 %add276 to i64
  %230 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx278 = getelementptr inbounds i32* %230, i64 %idxprom277
  %231 = load i32* %arrayidx278, align 4
  %232 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %233 = load i32* %j, align 4
  %add279 = add nsw i32 %232, %233
  %idxprom280 = sext i32 %add279 to i64
  %234 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx281 = getelementptr inbounds i32* %234, i64 %idxprom280
  %235 = load i32* %arrayidx281, align 4
  %sub282 = sub nsw i32 %231, %235
  %236 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  %add283 = add nsw i32 %236, %sub282
  store i32 %add283, i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  br label %for.inc.284

for.inc.284:                                      ; preds = %for.body.274
  %237 = load i32* %j, align 4
  %inc285 = add nsw i32 %237, 1
  store i32 %inc285, i32* %j, align 4
  br label %for.cond.271

for.end.286:                                      ; preds = %for.cond.271
  %238 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %239 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  %call287 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.4, i32 0, i32 0), i32 %238, i32 %239)
  %240 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 3), align 4
  %conv288 = sext i32 %240 to i64
  %mul289 = mul i64 %conv288, 80
  %conv290 = trunc i64 %mul289 to i32
  %call291 = call i8* @MyMalloc(i32 %conv290, i32 888)
  %241 = bitcast i8* %call291 to %struct.Block*
  store %struct.Block* %241, %struct.Block** %blocks, align 8
  store i32 0, i32* %which, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.292

for.cond.292:                                     ; preds = %for.inc.353, %for.end.286
  %242 = load i32* %j, align 4
  %243 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp293 = icmp slt i32 %242, %243
  br i1 %cmp293, label %for.body.295, label %for.end.357

for.body.295:                                     ; preds = %for.cond.292
  %244 = load i32* %j, align 4
  %idxprom296 = sext i32 %244 to i64
  %245 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx297 = getelementptr inbounds i32* %245, i64 %idxprom296
  %246 = load i32* %arrayidx297, align 4
  %tobool298 = icmp ne i32 %246, 0
  br i1 %tobool298, label %if.end.352, label %if.then.299

if.then.299:                                      ; preds = %for.body.295
  %247 = load i32* %j, align 4
  %idxprom300 = sext i32 %247 to i64
  %248 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx301 = getelementptr inbounds i32* %248, i64 %idxprom300
  %249 = load i32* %arrayidx301, align 4
  store i32 %249, i32* %i, align 4
  br label %for.cond.302

for.cond.302:                                     ; preds = %for.inc.349, %if.then.299
  %250 = load i32* %i, align 4
  %251 = load i32* %j, align 4
  %add303 = add nsw i32 %251, 1
  %idxprom304 = sext i32 %add303 to i64
  %252 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx305 = getelementptr inbounds i32* %252, i64 %idxprom304
  %253 = load i32* %arrayidx305, align 4
  %cmp306 = icmp slt i32 %250, %253
  br i1 %cmp306, label %for.body.308, label %for.end.351

for.body.308:                                     ; preds = %for.cond.302
  %254 = load i32* %which, align 4
  %idxprom309 = sext i32 %254 to i64
  %255 = load %struct.Block** %blocks, align 8
  %arrayidx310 = getelementptr inbounds %struct.Block* %255, i64 %idxprom309
  %256 = load i32* %i, align 4
  %idxprom311 = sext i32 %256 to i64
  %257 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx312 = getelementptr inbounds %union.Entry* %257, i64 %idxprom311
  %block = bitcast %union.Entry* %arrayidx312 to %struct.Block**
  store %struct.Block* %arrayidx310, %struct.Block** %block, align 8
  %258 = load i32* %i, align 4
  %idxprom313 = sext i32 %258 to i64
  %259 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx314 = getelementptr inbounds i32* %259, i64 %idxprom313
  %260 = load i32* %arrayidx314, align 4
  %261 = load i32* %i, align 4
  %idxprom315 = sext i32 %261 to i64
  %262 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx316 = getelementptr inbounds %union.Entry* %262, i64 %idxprom315
  %block317 = bitcast %union.Entry* %arrayidx316 to %struct.Block**
  %263 = load %struct.Block** %block317, align 8
  %i318 = getelementptr inbounds %struct.Block* %263, i32 0, i32 0
  store i32 %260, i32* %i318, align 4
  %264 = load i32* %j, align 4
  %265 = load i32* %i, align 4
  %idxprom319 = sext i32 %265 to i64
  %266 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx320 = getelementptr inbounds %union.Entry* %266, i64 %idxprom319
  %block321 = bitcast %union.Entry* %arrayidx320 to %struct.Block**
  %267 = load %struct.Block** %block321, align 8
  %j322 = getelementptr inbounds %struct.Block* %267, i32 0, i32 1
  store i32 %264, i32* %j322, align 4
  %268 = load i32* %i, align 4
  %idxprom323 = sext i32 %268 to i64
  %269 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx324 = getelementptr inbounds %union.Entry* %269, i64 %idxprom323
  %block325 = bitcast %union.Entry* %arrayidx324 to %struct.Block**
  %270 = load %struct.Block** %block325, align 8
  %i326 = getelementptr inbounds %struct.Block* %270, i32 0, i32 0
  %271 = load i32* %i326, align 4
  %idxprom327 = sext i32 %271 to i64
  %272 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx328 = getelementptr inbounds i32* %272, i64 %idxprom327
  %273 = load i32* %arrayidx328, align 4
  %cmp329 = icmp slt i32 %273, 0
  br i1 %cmp329, label %if.then.339, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.308
  %274 = load i32* %i, align 4
  %idxprom331 = sext i32 %274 to i64
  %275 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx332 = getelementptr inbounds %union.Entry* %275, i64 %idxprom331
  %block333 = bitcast %union.Entry* %arrayidx332 to %struct.Block**
  %276 = load %struct.Block** %block333, align 8
  %j334 = getelementptr inbounds %struct.Block* %276, i32 0, i32 1
  %277 = load i32* %j334, align 4
  %idxprom335 = sext i32 %277 to i64
  %278 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx336 = getelementptr inbounds i32* %278, i64 %idxprom335
  %279 = load i32* %arrayidx336, align 4
  %cmp337 = icmp slt i32 %279, 0
  br i1 %cmp337, label %if.then.339, label %if.end.341

if.then.339:                                      ; preds = %lor.lhs.false, %for.body.308
  %call340 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.5, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

if.end.341:                                       ; preds = %lor.lhs.false
  %280 = load i32* %i, align 4
  %idxprom342 = sext i32 %280 to i64
  %281 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx343 = getelementptr inbounds %union.Entry* %281, i64 %idxprom342
  %block344 = bitcast %union.Entry* %arrayidx343 to %struct.Block**
  %282 = load %struct.Block** %block344, align 8
  %done = getelementptr inbounds %struct.Block* %282, i32 0, i32 8
  store volatile i32 0, i32* %done, align 4
  %283 = load i32* %i, align 4
  %idxprom345 = sext i32 %283 to i64
  %284 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx346 = getelementptr inbounds %union.Entry* %284, i64 %idxprom345
  %block347 = bitcast %union.Entry* %arrayidx346 to %struct.Block**
  %285 = load %struct.Block** %block347, align 8
  %pair = getelementptr inbounds %struct.Block* %285, i32 0, i32 12
  store %struct.Pair* null, %struct.Pair** %pair, align 8
  %286 = load i32* %which, align 4
  %inc348 = add nsw i32 %286, 1
  store i32 %inc348, i32* %which, align 4
  br label %for.inc.349

for.inc.349:                                      ; preds = %if.end.341
  %287 = load i32* %i, align 4
  %inc350 = add nsw i32 %287, 1
  store i32 %inc350, i32* %i, align 4
  br label %for.cond.302

for.end.351:                                      ; preds = %for.cond.302
  br label %if.end.352

if.end.352:                                       ; preds = %for.end.351, %for.body.295
  br label %for.inc.353

for.inc.353:                                      ; preds = %if.end.352
  %288 = load i32* %j, align 4
  %idxprom354 = sext i32 %288 to i64
  %289 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx355 = getelementptr inbounds i32* %289, i64 %idxprom354
  %290 = load i32* %arrayidx355, align 4
  %291 = load i32* %j, align 4
  %add356 = add nsw i32 %291, %290
  store i32 %add356, i32* %j, align 4
  br label %for.cond.292

for.end.357:                                      ; preds = %for.cond.292
  store i32 0, i32* %p, align 4
  br label %for.cond.358

for.cond.358:                                     ; preds = %for.inc.420, %for.end.357
  %292 = load i32* %p, align 4
  %293 = load i32* @P, align 4
  %cmp359 = icmp slt i32 %292, %293
  br i1 %cmp359, label %for.body.361, label %for.end.422

for.body.361:                                     ; preds = %for.cond.358
  %294 = load i32* %p, align 4
  %idxprom362 = sext i32 %294 to i64
  %295 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx363 = getelementptr inbounds i32* %295, i64 %idxprom362
  %296 = load i32* %arrayidx363, align 4
  store i32 %296, i32* %j, align 4
  br label %for.cond.364

for.cond.364:                                     ; preds = %for.inc.417, %for.body.361
  %297 = load i32* %j, align 4
  %298 = load i32* %p, align 4
  %add365 = add nsw i32 %298, 1
  %idxprom366 = sext i32 %add365 to i64
  %299 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx367 = getelementptr inbounds i32* %299, i64 %idxprom366
  %300 = load i32* %arrayidx367, align 4
  %cmp368 = icmp slt i32 %297, %300
  br i1 %cmp368, label %for.body.370, label %for.end.419

for.body.370:                                     ; preds = %for.cond.364
  %301 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %302 = load i32* %j, align 4
  %add371 = add nsw i32 %301, %302
  %idxprom372 = sext i32 %add371 to i64
  %303 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx373 = getelementptr inbounds i32* %303, i64 %idxprom372
  %304 = load i32* %arrayidx373, align 4
  store i32 %304, i32* %i, align 4
  br label %for.cond.374

for.cond.374:                                     ; preds = %for.inc.414, %for.body.370
  %305 = load i32* %i, align 4
  %306 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %307 = load i32* %j, align 4
  %add375 = add nsw i32 %306, %307
  %add376 = add nsw i32 %add375, 1
  %idxprom377 = sext i32 %add376 to i64
  %308 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx378 = getelementptr inbounds i32* %308, i64 %idxprom377
  %309 = load i32* %arrayidx378, align 4
  %cmp379 = icmp slt i32 %305, %309
  br i1 %cmp379, label %for.body.381, label %for.end.416

for.body.381:                                     ; preds = %for.cond.374
  %310 = load i32* %which, align 4
  %idxprom382 = sext i32 %310 to i64
  %311 = load %struct.Block** %blocks, align 8
  %arrayidx383 = getelementptr inbounds %struct.Block* %311, i64 %idxprom382
  %312 = load i32* %i, align 4
  %idxprom384 = sext i32 %312 to i64
  %313 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx385 = getelementptr inbounds %union.Entry* %313, i64 %idxprom384
  %block386 = bitcast %union.Entry* %arrayidx385 to %struct.Block**
  store %struct.Block* %arrayidx383, %struct.Block** %block386, align 8
  %314 = load i32* %i, align 4
  %idxprom387 = sext i32 %314 to i64
  %315 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx388 = getelementptr inbounds i32* %315, i64 %idxprom387
  %316 = load i32* %arrayidx388, align 4
  %317 = load i32* %i, align 4
  %idxprom389 = sext i32 %317 to i64
  %318 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx390 = getelementptr inbounds %union.Entry* %318, i64 %idxprom389
  %block391 = bitcast %union.Entry* %arrayidx390 to %struct.Block**
  %319 = load %struct.Block** %block391, align 8
  %i392 = getelementptr inbounds %struct.Block* %319, i32 0, i32 0
  store i32 %316, i32* %i392, align 4
  %320 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %321 = load i32* %j, align 4
  %add393 = add nsw i32 %320, %321
  %322 = load i32* %i, align 4
  %idxprom394 = sext i32 %322 to i64
  %323 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx395 = getelementptr inbounds %union.Entry* %323, i64 %idxprom394
  %block396 = bitcast %union.Entry* %arrayidx395 to %struct.Block**
  %324 = load %struct.Block** %block396, align 8
  %j397 = getelementptr inbounds %struct.Block* %324, i32 0, i32 1
  store i32 %add393, i32* %j397, align 4
  %325 = load i32* %i, align 4
  %idxprom398 = sext i32 %325 to i64
  %326 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx399 = getelementptr inbounds %union.Entry* %326, i64 %idxprom398
  %block400 = bitcast %union.Entry* %arrayidx399 to %struct.Block**
  %327 = load %struct.Block** %block400, align 8
  %nz401 = getelementptr inbounds %struct.Block* %327, i32 0, i32 11
  store double* null, double** %nz401, align 8
  %328 = load i32* %p, align 4
  %329 = load i32* %i, align 4
  %idxprom402 = sext i32 %329 to i64
  %330 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx403 = getelementptr inbounds %union.Entry* %330, i64 %idxprom402
  %block404 = bitcast %union.Entry* %arrayidx403 to %struct.Block**
  %331 = load %struct.Block** %block404, align 8
  %owner = getelementptr inbounds %struct.Block* %331, i32 0, i32 2
  store i32 %328, i32* %owner, align 4
  %332 = load i32* %i, align 4
  %idxprom405 = sext i32 %332 to i64
  %333 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx406 = getelementptr inbounds %union.Entry* %333, i64 %idxprom405
  %block407 = bitcast %union.Entry* %arrayidx406 to %struct.Block**
  %334 = load %struct.Block** %block407, align 8
  %done408 = getelementptr inbounds %struct.Block* %334, i32 0, i32 8
  store volatile i32 0, i32* %done408, align 4
  %335 = load i32* %i, align 4
  %idxprom409 = sext i32 %335 to i64
  %336 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx410 = getelementptr inbounds %union.Entry* %336, i64 %idxprom409
  %block411 = bitcast %union.Entry* %arrayidx410 to %struct.Block**
  %337 = load %struct.Block** %block411, align 8
  %pair412 = getelementptr inbounds %struct.Block* %337, i32 0, i32 12
  store %struct.Pair* null, %struct.Pair** %pair412, align 8
  %338 = load i32* %which, align 4
  %inc413 = add nsw i32 %338, 1
  store i32 %inc413, i32* %which, align 4
  br label %for.inc.414

for.inc.414:                                      ; preds = %for.body.381
  %339 = load i32* %i, align 4
  %inc415 = add nsw i32 %339, 1
  store i32 %inc415, i32* %i, align 4
  br label %for.cond.374

for.end.416:                                      ; preds = %for.cond.374
  br label %for.inc.417

for.inc.417:                                      ; preds = %for.end.416
  %340 = load i32* %j, align 4
  %inc418 = add nsw i32 %340, 1
  store i32 %inc418, i32* %j, align 4
  br label %for.cond.364

for.end.419:                                      ; preds = %for.cond.364
  br label %for.inc.420

for.inc.420:                                      ; preds = %for.end.419
  %341 = load i32* %p, align 4
  %inc421 = add nsw i32 %341, 1
  store i32 %inc421, i32* %p, align 4
  br label %for.cond.358

for.end.422:                                      ; preds = %for.cond.358
  %342 = load i32** %T.addr, align 8
  %call423 = call i32 @ComputeBlockParents(i32* %342)
  %343 = load i32* %retval
  ret i32 %343
}

; Function Attrs: noreturn
declare void @exit(i32)

; Function Attrs: nounwind uwtable
define internal i32 @FindNumPartitions(i32 %set_size, i32 %piece_size) {
entry:
  %set_size.addr = alloca i32, align 4
  %piece_size.addr = alloca i32, align 4
  %num_partitions = alloca i32, align 4
  store i32 %set_size, i32* %set_size.addr, align 4
  store i32 %piece_size, i32* %piece_size.addr, align 4
  %0 = load i32* %set_size.addr, align 4
  %1 = load i32* %piece_size.addr, align 4
  %mul = mul nsw i32 4, %1
  %div = sdiv i32 %mul, 3
  %cmp = icmp sle i32 %0, %div
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %num_partitions, align 4
  br label %if.end.9

if.else:                                          ; preds = %entry
  %2 = load i32* %set_size.addr, align 4
  %3 = load i32* %piece_size.addr, align 4
  %add = add nsw i32 %2, %3
  %sub = sub nsw i32 %add, 1
  %4 = load i32* %piece_size.addr, align 4
  %div1 = sdiv i32 %sub, %4
  store i32 %div1, i32* %num_partitions, align 4
  %5 = load i32* %piece_size.addr, align 4
  %6 = load i32* %set_size.addr, align 4
  %7 = load i32* %num_partitions, align 4
  %div2 = sdiv i32 %6, %7
  %sub3 = sub nsw i32 %5, %div2
  %8 = load i32* %set_size.addr, align 4
  %9 = load i32* %num_partitions, align 4
  %sub4 = sub nsw i32 %9, 1
  %div5 = sdiv i32 %8, %sub4
  %10 = load i32* %piece_size.addr, align 4
  %sub6 = sub nsw i32 %div5, %10
  %cmp7 = icmp sgt i32 %sub3, %sub6
  br i1 %cmp7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.else
  %11 = load i32* %num_partitions, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %num_partitions, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %12 = load i32* %num_partitions, align 4
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeBlockParents(i32* %T) {
entry:
  %retval = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %parent_col = alloca i32, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.49, %entry
  %0 = load i32* %b, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.53

for.body:                                         ; preds = %for.cond
  %2 = load i32* %b, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.48, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %b, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %8 = load i32* %i, align 4
  %9 = load i32* %b, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %b, align 4
  %13 = load i32* %b, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx9 = getelementptr inbounds i32* %14, i64 %idxprom8
  %15 = load i32* %arrayidx9, align 4
  %add10 = add nsw i32 %12, %15
  %sub = sub nsw i32 %add10, 1
  %idxprom11 = sext i32 %sub to i64
  %16 = load i32** %T.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %16, i64 %idxprom11
  %17 = load i32* %arrayidx12, align 4
  store i32 %17, i32* %parent_col, align 4
  %18 = load i32* %parent_col, align 4
  %19 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp13 = icmp eq i32 %18, %19
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %for.body.7
  %20 = load i32* %i, align 4
  %idxprom15 = sext i32 %20 to i64
  %21 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx16 = getelementptr inbounds %union.Entry* %21, i64 %idxprom15
  %block = bitcast %union.Entry* %arrayidx16 to %struct.Block**
  %22 = load %struct.Block** %block, align 8
  %parent = getelementptr inbounds %struct.Block* %22, i32 0, i32 6
  store i32 -1, i32* %parent, align 4
  br label %if.end.47

if.else:                                          ; preds = %for.body.7
  %23 = load i32* %i, align 4
  %idxprom17 = sext i32 %23 to i64
  %24 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx18 = getelementptr inbounds %union.Entry* %24, i64 %idxprom17
  %block19 = bitcast %union.Entry* %arrayidx18 to %struct.Block**
  %25 = load %struct.Block** %block19, align 8
  %i20 = getelementptr inbounds %struct.Block* %25, i32 0, i32 0
  %26 = load i32* %i20, align 4
  %27 = load i32* %i, align 4
  %idxprom21 = sext i32 %27 to i64
  %28 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx22 = getelementptr inbounds %union.Entry* %28, i64 %idxprom21
  %block23 = bitcast %union.Entry* %arrayidx22 to %struct.Block**
  %29 = load %struct.Block** %block23, align 8
  %j = getelementptr inbounds %struct.Block* %29, i32 0, i32 1
  %30 = load i32* %j, align 4
  %cmp24 = icmp sle i32 %26, %30
  br i1 %cmp24, label %if.then.25, label %if.else.30

if.then.25:                                       ; preds = %if.else
  %31 = load i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %32 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx27 = getelementptr inbounds %union.Entry* %32, i64 %idxprom26
  %block28 = bitcast %union.Entry* %arrayidx27 to %struct.Block**
  %33 = load %struct.Block** %block28, align 8
  %parent29 = getelementptr inbounds %struct.Block* %33, i32 0, i32 6
  store i32 -1, i32* %parent29, align 4
  br label %if.end.46

if.else.30:                                       ; preds = %if.else
  %34 = load i32* %i, align 4
  %idxprom31 = sext i32 %34 to i64
  %35 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx32 = getelementptr inbounds %union.Entry* %35, i64 %idxprom31
  %block33 = bitcast %union.Entry* %arrayidx32 to %struct.Block**
  %36 = load %struct.Block** %block33, align 8
  %i34 = getelementptr inbounds %struct.Block* %36, i32 0, i32 0
  %37 = load i32* %i34, align 4
  %38 = load i32* %parent_col, align 4
  %call = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %37, i32 %38)
  %39 = load i32* %i, align 4
  %idxprom35 = sext i32 %39 to i64
  %40 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx36 = getelementptr inbounds %union.Entry* %40, i64 %idxprom35
  %block37 = bitcast %union.Entry* %arrayidx36 to %struct.Block**
  %41 = load %struct.Block** %block37, align 8
  %parent38 = getelementptr inbounds %struct.Block* %41, i32 0, i32 6
  store i32 %call, i32* %parent38, align 4
  %42 = load i32* %i, align 4
  %idxprom39 = sext i32 %42 to i64
  %43 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx40 = getelementptr inbounds %union.Entry* %43, i64 %idxprom39
  %block41 = bitcast %union.Entry* %arrayidx40 to %struct.Block**
  %44 = load %struct.Block** %block41, align 8
  %parent42 = getelementptr inbounds %struct.Block* %44, i32 0, i32 6
  %45 = load i32* %parent42, align 4
  %cmp43 = icmp eq i32 %45, -1
  br i1 %cmp43, label %if.then.44, label %if.end

if.then.44:                                       ; preds = %if.else.30
  %call45 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.44, %if.else.30
  br label %if.end.46

if.end.46:                                        ; preds = %if.end, %if.then.25
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.14
  br label %for.inc

for.inc:                                          ; preds = %if.end.47
  %46 = load i32* %i, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %if.end.48

if.end.48:                                        ; preds = %for.end, %for.body
  br label %for.inc.49

for.inc.49:                                       ; preds = %if.end.48
  %47 = load i32* %b, align 4
  %idxprom50 = sext i32 %47 to i64
  %48 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx51 = getelementptr inbounds i32* %48, i64 %idxprom50
  %49 = load i32* %arrayidx51, align 4
  %50 = load i32* %b, align 4
  %add52 = add nsw i32 %50, %49
  store i32 %add52, i32* %b, align 4
  br label %for.cond

for.end.53:                                       ; preds = %for.cond
  store i32 0, i32* %b, align 4
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.83, %for.end.53
  %51 = load i32* %b, align 4
  %52 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp55 = icmp slt i32 %51, %52
  br i1 %cmp55, label %for.body.56, label %for.end.85

for.body.56:                                      ; preds = %for.cond.54
  %53 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %54 = load i32* %b, align 4
  %add57 = add nsw i32 %53, %54
  %idxprom58 = sext i32 %add57 to i64
  %55 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx59 = getelementptr inbounds i32* %55, i64 %idxprom58
  %56 = load i32* %arrayidx59, align 4
  store i32 %56, i32* %i, align 4
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.80, %for.body.56
  %57 = load i32* %i, align 4
  %58 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %59 = load i32* %b, align 4
  %add61 = add nsw i32 %58, %59
  %add62 = add nsw i32 %add61, 1
  %idxprom63 = sext i32 %add62 to i64
  %60 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx64 = getelementptr inbounds i32* %60, i64 %idxprom63
  %61 = load i32* %arrayidx64, align 4
  %cmp65 = icmp slt i32 %57, %61
  br i1 %cmp65, label %for.body.66, label %for.end.82

for.body.66:                                      ; preds = %for.cond.60
  %62 = load i32* %b, align 4
  %idxprom67 = sext i32 %62 to i64
  %63 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx68 = getelementptr inbounds i32* %63, i64 %idxprom67
  %64 = load i32* %arrayidx68, align 4
  %idxprom69 = sext i32 %64 to i64
  %65 = load i32** %T.addr, align 8
  %arrayidx70 = getelementptr inbounds i32* %65, i64 %idxprom69
  %66 = load i32* %arrayidx70, align 4
  store i32 %66, i32* %parent_col, align 4
  %67 = load i32* %i, align 4
  %idxprom71 = sext i32 %67 to i64
  %68 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx72 = getelementptr inbounds %union.Entry* %68, i64 %idxprom71
  %block73 = bitcast %union.Entry* %arrayidx72 to %struct.Block**
  %69 = load %struct.Block** %block73, align 8
  %i74 = getelementptr inbounds %struct.Block* %69, i32 0, i32 0
  %70 = load i32* %i74, align 4
  %71 = load i32* %parent_col, align 4
  %call75 = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %70, i32 %71)
  %72 = load i32* %i, align 4
  %idxprom76 = sext i32 %72 to i64
  %73 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx77 = getelementptr inbounds %union.Entry* %73, i64 %idxprom76
  %block78 = bitcast %union.Entry* %arrayidx77 to %struct.Block**
  %74 = load %struct.Block** %block78, align 8
  %parent79 = getelementptr inbounds %struct.Block* %74, i32 0, i32 6
  store i32 %call75, i32* %parent79, align 4
  br label %for.inc.80

for.inc.80:                                       ; preds = %for.body.66
  %75 = load i32* %i, align 4
  %inc81 = add nsw i32 %75, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond.60

for.end.82:                                       ; preds = %for.cond.60
  br label %for.inc.83

for.inc.83:                                       ; preds = %for.end.82
  %76 = load i32* %b, align 4
  %inc84 = add nsw i32 %76, 1
  store i32 %inc84, i32* %b, align 4
  br label %for.cond.54

for.end.85:                                       ; preds = %for.cond.54
  %77 = load i32* %retval
  ret i32 %77
}

; Function Attrs: nounwind uwtable
define internal i32 @FillInStructure(%struct.SMatrix* byval align 8 %M, i32* %firstchild, i32* %child, i32* %PERM, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %firstchild.addr = alloca i32*, align 8
  %child.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %col = alloca i32, align 4
  %super = alloca i32, align 4
  %structure = alloca i32*, align 8
  %nz = alloca i32*, align 8
  %n_nz = alloca i32, align 4
  store i32* %firstchild, i32** %firstchild.addr, align 8
  store i32* %child, i32** %child.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %structure, align 8
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %2 = load i32* %n1, align 4
  %conv2 = sext i32 %2 to i64
  %mul3 = mul i64 %conv2, 4
  %call4 = call i8* @malloc(i64 %mul3)
  %3 = bitcast i8* %call4 to i32*
  store i32* %3, i32** %nz, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %i, align 4
  %n5 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %5 = load i32* %n5, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32** %structure, align 8
  %arrayidx = getelementptr inbounds i32* %7, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc.41, %for.end
  %9 = load i32* %j, align 4
  %10 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 12), align 4
  %cmp8 = icmp slt i32 %9, %10
  br i1 %cmp8, label %for.body.10, label %for.end.43

for.body.10:                                      ; preds = %for.cond.7
  %11 = load i32* %j, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx12 = getelementptr inbounds i32* %12, i64 %idxprom11
  %13 = load i32* %arrayidx12, align 4
  store i32 %13, i32* %col, align 4
  %14 = load i32* %col, align 4
  %idxprom13 = sext i32 %14 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx14 = getelementptr inbounds i32* %15, i64 %idxprom13
  %16 = load i32* %arrayidx14, align 4
  %add = add nsw i32 %16, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.29, %for.body.10
  %17 = load i32* %i, align 4
  %18 = load i32* %col, align 4
  %add16 = add nsw i32 %18, 1
  %idxprom17 = sext i32 %add16 to i64
  %19 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx18 = getelementptr inbounds i32* %19, i64 %idxprom17
  %20 = load i32* %arrayidx18, align 4
  %cmp19 = icmp slt i32 %17, %20
  br i1 %cmp19, label %for.body.21, label %for.end.31

for.body.21:                                      ; preds = %for.cond.15
  %21 = load i32* %i, align 4
  %idxprom22 = sext i32 %21 to i64
  %22 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx23 = getelementptr inbounds i32* %22, i64 %idxprom22
  %23 = load i32* %arrayidx23, align 4
  %24 = load i32* %i, align 4
  %25 = load i32* %col, align 4
  %idxprom24 = sext i32 %25 to i64
  %26 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx25 = getelementptr inbounds i32* %26, i64 %idxprom24
  %27 = load i32* %arrayidx25, align 4
  %sub = sub nsw i32 %24, %27
  %sub26 = sub nsw i32 %sub, 1
  %idxprom27 = sext i32 %sub26 to i64
  %28 = load i32** %nz, align 8
  %arrayidx28 = getelementptr inbounds i32* %28, i64 %idxprom27
  store i32 %23, i32* %arrayidx28, align 4
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.body.21
  %29 = load i32* %i, align 4
  %inc30 = add nsw i32 %29, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond.15

for.end.31:                                       ; preds = %for.cond.15
  %30 = load i32* %col, align 4
  %add32 = add nsw i32 %30, 1
  %idxprom33 = sext i32 %add32 to i64
  %31 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx34 = getelementptr inbounds i32* %31, i64 %idxprom33
  %32 = load i32* %arrayidx34, align 4
  %33 = load i32* %col, align 4
  %idxprom35 = sext i32 %33 to i64
  %34 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx36 = getelementptr inbounds i32* %34, i64 %idxprom35
  %35 = load i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %32, %35
  %sub38 = sub nsw i32 %sub37, 1
  store i32 %sub38, i32* %n_nz, align 4
  %36 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %37 = load i32* %j, align 4
  %add39 = add nsw i32 %36, %37
  %38 = load i32** %structure, align 8
  %39 = load i32** %nz, align 8
  %40 = load i32* %n_nz, align 4
  %call40 = call i32 @FindDetailedStructure(i32 %add39, i32* %38, i32* %39, i32 %40)
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.end.31
  %41 = load i32* %j, align 4
  %inc42 = add nsw i32 %41, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond.7

for.end.43:                                       ; preds = %for.cond.7
  store i32 0, i32* %super, align 4
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.64, %for.end.43
  %42 = load i32* %super, align 4
  %43 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp45 = icmp slt i32 %42, %43
  br i1 %cmp45, label %for.body.47, label %for.end.68

for.body.47:                                      ; preds = %for.cond.44
  %44 = load i32* %super, align 4
  %45 = load i32** %PERM.addr, align 8
  %46 = load i32** %INVP.addr, align 8
  %47 = load i32** %firstchild.addr, align 8
  %48 = load i32** %child.addr, align 8
  %49 = load i32** %structure, align 8
  %50 = load i32** %nz, align 8
  %call48 = call i32 @FindSuperStructure(%struct.SMatrix* byval align 8 %M, i32 %44, i32* %45, i32* %46, i32* %47, i32* %48, i32* %49, i32* %50, i32* %n_nz)
  %51 = load i32* %super, align 4
  %idxprom49 = sext i32 %51 to i64
  %52 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx50 = getelementptr inbounds i32* %52, i64 %idxprom49
  %53 = load i32* %arrayidx50, align 4
  %tobool = icmp ne i32 %53, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body.47
  %54 = load i32* %super, align 4
  store i32 %54, i32* %j, align 4
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.59, %if.then
  %55 = load i32* %j, align 4
  %56 = load i32* %super, align 4
  %57 = load i32* %super, align 4
  %idxprom52 = sext i32 %57 to i64
  %58 = load i32** @node, align 8
  %arrayidx53 = getelementptr inbounds i32* %58, i64 %idxprom52
  %59 = load i32* %arrayidx53, align 4
  %add54 = add nsw i32 %56, %59
  %cmp55 = icmp slt i32 %55, %add54
  br i1 %cmp55, label %for.body.57, label %for.end.63

for.body.57:                                      ; preds = %for.cond.51
  %60 = load i32* %j, align 4
  %61 = load i32** %structure, align 8
  %62 = load i32** %nz, align 8
  %63 = load i32* %n_nz, align 4
  %call58 = call i32 @FindDetailedStructure(i32 %60, i32* %61, i32* %62, i32 %63)
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.57
  %64 = load i32* %j, align 4
  %idxprom60 = sext i32 %64 to i64
  %65 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx61 = getelementptr inbounds i32* %65, i64 %idxprom60
  %66 = load i32* %arrayidx61, align 4
  %67 = load i32* %j, align 4
  %add62 = add nsw i32 %67, %66
  store i32 %add62, i32* %j, align 4
  br label %for.cond.51

for.end.63:                                       ; preds = %for.cond.51
  br label %if.end

if.end:                                           ; preds = %for.end.63, %for.body.47
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end
  %68 = load i32* %super, align 4
  %idxprom65 = sext i32 %68 to i64
  %69 = load i32** @node, align 8
  %arrayidx66 = getelementptr inbounds i32* %69, i64 %idxprom65
  %70 = load i32* %arrayidx66, align 4
  %71 = load i32* %super, align 4
  %add67 = add nsw i32 %71, %70
  store i32 %add67, i32* %super, align 4
  br label %for.cond.44

for.end.68:                                       ; preds = %for.cond.44
  %72 = load i32** %structure, align 8
  %call69 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %72)
  %73 = load i32** %nz, align 8
  %call70 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %73)
  %74 = load i32* %retval
  ret i32 %74
}

; Function Attrs: nounwind uwtable
define internal i32 @FillInNZ(%struct.SMatrix* byval align 8 %M, i32* %PERM, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %scatter = alloca double*, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to double*
  store double* %1, double** %scatter, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %j, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %j, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load double** %scatter, align 8
  %arrayidx = getelementptr inbounds double* %5, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %j, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.8, %for.end
  %7 = load i32* %j, align 4
  %8 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp4 = icmp slt i32 %7, %8
  br i1 %cmp4, label %for.body.6, label %for.end.11

for.body.6:                                       ; preds = %for.cond.3
  %9 = load i32* %j, align 4
  %10 = load i32** %PERM.addr, align 8
  %11 = load i32** %INVP.addr, align 8
  %12 = load double** %scatter, align 8
  %call7 = call i32 @FillIn(%struct.SMatrix* byval align 8 %M, i32 %9, i32* %10, i32* %11, double* %12)
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.body.6
  %13 = load i32* %j, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx10 = getelementptr inbounds i32* %14, i64 %idxprom9
  %15 = load i32* %arrayidx10, align 4
  %16 = load i32* %j, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %j, align 4
  br label %for.cond.3

for.end.11:                                       ; preds = %for.cond.3
  %17 = load double** %scatter, align 8
  %call12 = call i32 (double*, ...) *bitcast (i32 (...)* @free to i32 (double*, ...)*)(double* %17)
  %18 = load i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i32 @FindDomStructure(i32 %super, i32* %nz, i32 %n_nz) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %nz.addr = alloca i32*, align 8
  %n_nz.addr = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32* %nz, i32** %nz.addr, align 8
  store i32 %n_nz, i32* %n_nz.addr, align 4
  %0 = load i32* %super.addr, align 4
  store i32 %0, i32* %col, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.25, %entry
  %1 = load i32* %col, align 4
  %2 = load i32* %super.addr, align 4
  %3 = load i32* %super.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %add = add nsw i32 %2, %5
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end.27

for.body:                                         ; preds = %for.cond
  %6 = load i32* %col, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  %9 = load i32* %n_nz.addr, align 4
  %add3 = add nsw i32 %8, %9
  %10 = load i32* %col, align 4
  %11 = load i32* %super.addr, align 4
  %sub = sub nsw i32 %10, %11
  %sub4 = sub nsw i32 %add3, %sub
  %12 = load i32* %col, align 4
  %add5 = add nsw i32 %12, 1
  %idxprom6 = sext i32 %add5 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %13, i64 %idxprom6
  store i32 %sub4, i32* %arrayidx7, align 4
  %14 = load i32* %col, align 4
  %add8 = add nsw i32 %14, 1
  %idxprom9 = sext i32 %add8 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx10 = getelementptr inbounds i32* %15, i64 %idxprom9
  %16 = load i32* %arrayidx10, align 4
  %17 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %cmp11 = icmp sgt i32 %16, %17
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.7, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

if.end:                                           ; preds = %for.body
  %18 = load i32* %col, align 4
  %19 = load i32* %super.addr, align 4
  %sub12 = sub nsw i32 %18, %19
  store i32 %sub12, i32* %i, align 4
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc, %if.end
  %20 = load i32* %i, align 4
  %21 = load i32* %n_nz.addr, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body.15, label %for.end

for.body.15:                                      ; preds = %for.cond.13
  %22 = load i32* %i, align 4
  %idxprom16 = sext i32 %22 to i64
  %23 = load i32** %nz.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %23, i64 %idxprom16
  %24 = load i32* %arrayidx17, align 4
  %25 = load i32* %col, align 4
  %idxprom18 = sext i32 %25 to i64
  %26 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx19 = getelementptr inbounds i32* %26, i64 %idxprom18
  %27 = load i32* %arrayidx19, align 4
  %28 = load i32* %i, align 4
  %add20 = add nsw i32 %27, %28
  %29 = load i32* %col, align 4
  %30 = load i32* %super.addr, align 4
  %sub21 = sub nsw i32 %29, %30
  %sub22 = sub nsw i32 %add20, %sub21
  %idxprom23 = sext i32 %sub22 to i64
  %31 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx24 = getelementptr inbounds i32* %31, i64 %idxprom23
  store i32 %24, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.15
  %32 = load i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.13

for.end:                                          ; preds = %for.cond.13
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.end
  %33 = load i32* %col, align 4
  %inc26 = add nsw i32 %33, 1
  store i32 %inc26, i32* %col, align 4
  br label %for.cond

for.end.27:                                       ; preds = %for.cond
  %34 = load i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @FindDummyDomainStructure(i32 %which_domain) {
entry:
  %retval = alloca i32, align 4
  %which_domain.addr = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %current_block = alloca i32, align 4
  %current_block_last = alloca i32, align 4
  store i32 %which_domain, i32* %which_domain.addr, align 4
  %0 = load i32* %which_domain.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %col, align 4
  store i32 -1, i32* %current_block_last, align 4
  store i32 -1, i32* %current_block, align 4
  %3 = load i32* %col, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %4, i64 %idxprom1
  %5 = load i32* %arrayidx2, align 4
  %add = add nsw i32 %5, 1
  store i32 %add, i32* %row, align 4
  %6 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %7 = load i32* %which_domain.addr, align 4
  %add3 = add nsw i32 %6, %7
  %idxprom4 = sext i32 %add3 to i64
  %8 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %8, i64 %idxprom4
  %9 = load i32* %arrayidx5, align 4
  %10 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %11 = load i32* %which_domain.addr, align 4
  %add6 = add nsw i32 %10, %11
  %add7 = add nsw i32 %add6, 1
  %idxprom8 = sext i32 %add7 to i64
  %12 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx9 = getelementptr inbounds i32* %12, i64 %idxprom8
  store i32 %9, i32* %arrayidx9, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %13 = load i32* %row, align 4
  %14 = load i32* %col, align 4
  %add10 = add nsw i32 %14, 1
  %idxprom11 = sext i32 %add10 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx12 = getelementptr inbounds i32* %15, i64 %idxprom11
  %16 = load i32* %arrayidx12, align 4
  %cmp = icmp slt i32 %13, %16
  br i1 %cmp, label %while.body, label %while.end.47

while.body:                                       ; preds = %while.cond
  %17 = load i32* %row, align 4
  %idxprom13 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx14 = getelementptr inbounds i32* %18, i64 %idxprom13
  %19 = load i32* %arrayidx14, align 4
  store i32 %19, i32* %current_block, align 4
  %20 = load i32* %current_block, align 4
  %idxprom15 = sext i32 %20 to i64
  %21 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx16 = getelementptr inbounds i32* %21, i64 %idxprom15
  %22 = load i32* %arrayidx16, align 4
  %cmp17 = icmp slt i32 %22, 0
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %23 = load i32* %current_block, align 4
  %idxprom18 = sext i32 %23 to i64
  %24 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx19 = getelementptr inbounds i32* %24, i64 %idxprom18
  %25 = load i32* %arrayidx19, align 4
  %26 = load i32* %current_block, align 4
  %add20 = add nsw i32 %26, %25
  store i32 %add20, i32* %current_block, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %27 = load i32* %current_block, align 4
  %28 = load i32* %current_block, align 4
  %idxprom21 = sext i32 %28 to i64
  %29 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx22 = getelementptr inbounds i32* %29, i64 %idxprom21
  %30 = load i32* %arrayidx22, align 4
  %add23 = add nsw i32 %27, %30
  store i32 %add23, i32* %current_block_last, align 4
  %31 = load i32* %current_block, align 4
  %32 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %33 = load i32* %which_domain.addr, align 4
  %add24 = add nsw i32 %32, %33
  %add25 = add nsw i32 %add24, 1
  %idxprom26 = sext i32 %add25 to i64
  %34 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx27 = getelementptr inbounds i32* %34, i64 %idxprom26
  %35 = load i32* %arrayidx27, align 4
  %idxprom28 = sext i32 %35 to i64
  %36 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx29 = getelementptr inbounds i32* %36, i64 %idxprom28
  store i32 %31, i32* %arrayidx29, align 4
  %37 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %38 = load i32* %which_domain.addr, align 4
  %add30 = add nsw i32 %37, %38
  %add31 = add nsw i32 %add30, 1
  %idxprom32 = sext i32 %add31 to i64
  %39 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx33 = getelementptr inbounds i32* %39, i64 %idxprom32
  %40 = load i32* %arrayidx33, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %arrayidx33, align 4
  br label %while.cond.34

while.cond.34:                                    ; preds = %while.body.45, %if.end
  %41 = load i32* %row, align 4
  %idxprom35 = sext i32 %41 to i64
  %42 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx36 = getelementptr inbounds i32* %42, i64 %idxprom35
  %43 = load i32* %arrayidx36, align 4
  %44 = load i32* %current_block, align 4
  %cmp37 = icmp sge i32 %43, %44
  br i1 %cmp37, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond.34
  %45 = load i32* %row, align 4
  %idxprom38 = sext i32 %45 to i64
  %46 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx39 = getelementptr inbounds i32* %46, i64 %idxprom38
  %47 = load i32* %arrayidx39, align 4
  %48 = load i32* %current_block_last, align 4
  %cmp40 = icmp slt i32 %47, %48
  br i1 %cmp40, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %49 = load i32* %row, align 4
  %50 = load i32* %col, align 4
  %add41 = add nsw i32 %50, 1
  %idxprom42 = sext i32 %add41 to i64
  %51 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx43 = getelementptr inbounds i32* %51, i64 %idxprom42
  %52 = load i32* %arrayidx43, align 4
  %cmp44 = icmp slt i32 %49, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond.34
  %53 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond.34 ], [ %cmp44, %land.rhs ]
  br i1 %53, label %while.body.45, label %while.end

while.body.45:                                    ; preds = %land.end
  %54 = load i32* %row, align 4
  %inc46 = add nsw i32 %54, 1
  store i32 %inc46, i32* %row, align 4
  br label %while.cond.34

while.end:                                        ; preds = %land.end
  br label %while.cond

while.end.47:                                     ; preds = %while.cond
  %55 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %56 = load i32* %which_domain.addr, align 4
  %add48 = add nsw i32 %55, %56
  %add49 = add nsw i32 %add48, 1
  %idxprom50 = sext i32 %add49 to i64
  %57 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx51 = getelementptr inbounds i32* %57, i64 %idxprom50
  %58 = load i32* %arrayidx51, align 4
  %59 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %cmp52 = icmp sgt i32 %58, %59
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %while.end.47
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([12 x i8]* @.str.8, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

if.end.54:                                        ; preds = %while.end.47
  %60 = load i32* %retval
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define internal i32 @CheckColLength(i32 %col, i32 %n_nz) {
entry:
  %retval = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %n_nz.addr = alloca i32, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %n_nz, i32* %n_nz.addr, align 4
  %0 = load i32* %n_nz.addr, align 4
  %1 = load i32* %col.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32** @nz, align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  %cmp = icmp ne i32 %0, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %col.addr, align 4
  %5 = load i32* %n_nz.addr, align 4
  %6 = load i32* %col.addr, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** @nz, align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.9, i32 0, i32 0), i32 %4, i32 %5, i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @FindBlStructure(%struct.SMatrix* byval align 8 %M, i32 %super, i32* %PERM, i32* %INVP, i32* %firstchild, i32* %child, i32* %structure, i32* %nz) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %firstchild.addr = alloca i32*, align 8
  %child.addr = alloca i32*, align 8
  %structure.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %truecol = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %col = alloca i32, align 4
  %the_child = alloca i32, align 4
  %bl = alloca i32, align 4
  %n_nz = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store i32* %firstchild, i32** %firstchild.addr, align 8
  store i32* %child, i32** %child.addr, align 8
  store i32* %structure, i32** %structure.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32 0, i32* %n_nz, align 4
  %0 = load i32* %super.addr, align 4
  store i32 %0, i32* %col, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.33, %entry
  %1 = load i32* %col, align 4
  %2 = load i32* %super.addr, align 4
  %3 = load i32* %super.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %add = add nsw i32 %2, %5
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end.35

for.body:                                         ; preds = %for.cond
  %6 = load i32* %col, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** %PERM.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  store i32 %8, i32* %truecol, align 4
  %9 = load i32* %truecol, align 4
  %idxprom3 = sext i32 %9 to i64
  %col4 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %10 = load i32** %col4, align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom3
  %11 = load i32* %arrayidx5, align 4
  store i32 %11, i32* %i, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %for.body
  %12 = load i32* %i, align 4
  %13 = load i32* %truecol, align 4
  %add7 = add nsw i32 %13, 1
  %idxprom8 = sext i32 %add7 to i64
  %col9 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %14 = load i32** %col9, align 8
  %arrayidx10 = getelementptr inbounds i32* %14, i64 %idxprom8
  %15 = load i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %12, %15
  br i1 %cmp11, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.6
  %16 = load i32* %i, align 4
  %idxprom13 = sext i32 %16 to i64
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %17 = load i32** %row, align 8
  %arrayidx14 = getelementptr inbounds i32* %17, i64 %idxprom13
  %18 = load i32* %arrayidx14, align 4
  %idxprom15 = sext i32 %18 to i64
  %19 = load i32** %INVP.addr, align 8
  %arrayidx16 = getelementptr inbounds i32* %19, i64 %idxprom15
  %20 = load i32* %arrayidx16, align 4
  store i32 %20, i32* %bl, align 4
  %21 = load i32* %bl, align 4
  %idxprom17 = sext i32 %21 to i64
  %22 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx18 = getelementptr inbounds i32* %22, i64 %idxprom17
  %23 = load i32* %arrayidx18, align 4
  %cmp19 = icmp slt i32 %23, 0
  br i1 %cmp19, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.12
  %24 = load i32* %bl, align 4
  %idxprom20 = sext i32 %24 to i64
  %25 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx21 = getelementptr inbounds i32* %25, i64 %idxprom20
  %26 = load i32* %arrayidx21, align 4
  %27 = load i32* %bl, align 4
  %add22 = add nsw i32 %27, %26
  store i32 %add22, i32* %bl, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.12
  %28 = load i32* %bl, align 4
  %29 = load i32* %super.addr, align 4
  %cmp23 = icmp sge i32 %28, %29
  br i1 %cmp23, label %land.lhs.true, label %if.end.31

land.lhs.true:                                    ; preds = %if.end
  %30 = load i32* %bl, align 4
  %idxprom24 = sext i32 %30 to i64
  %31 = load i32** %structure.addr, align 8
  %arrayidx25 = getelementptr inbounds i32* %31, i64 %idxprom24
  %32 = load i32* %arrayidx25, align 4
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.end.31, label %if.then.26

if.then.26:                                       ; preds = %land.lhs.true
  %33 = load i32* %bl, align 4
  %idxprom27 = sext i32 %33 to i64
  %34 = load i32** %structure.addr, align 8
  %arrayidx28 = getelementptr inbounds i32* %34, i64 %idxprom27
  store i32 1, i32* %arrayidx28, align 4
  %35 = load i32* %bl, align 4
  %36 = load i32* %n_nz, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %n_nz, align 4
  %idxprom29 = sext i32 %36 to i64
  %37 = load i32** %nz.addr, align 8
  %arrayidx30 = getelementptr inbounds i32* %37, i64 %idxprom29
  store i32 %35, i32* %arrayidx30, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.26, %land.lhs.true, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.31
  %38 = load i32* %i, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  br label %for.inc.33

for.inc.33:                                       ; preds = %for.end
  %39 = load i32* %col, align 4
  %inc34 = add nsw i32 %39, 1
  store i32 %inc34, i32* %col, align 4
  br label %for.cond

for.end.35:                                       ; preds = %for.cond
  %40 = load i32* %super.addr, align 4
  %idxprom36 = sext i32 %40 to i64
  %41 = load i32** %firstchild.addr, align 8
  %arrayidx37 = getelementptr inbounds i32* %41, i64 %idxprom36
  %42 = load i32* %arrayidx37, align 4
  store i32 %42, i32* %c, align 4
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.87, %for.end.35
  %43 = load i32* %c, align 4
  %44 = load i32* %super.addr, align 4
  %add39 = add nsw i32 %44, 1
  %idxprom40 = sext i32 %add39 to i64
  %45 = load i32** %firstchild.addr, align 8
  %arrayidx41 = getelementptr inbounds i32* %45, i64 %idxprom40
  %46 = load i32* %arrayidx41, align 4
  %cmp42 = icmp slt i32 %43, %46
  br i1 %cmp42, label %for.body.43, label %for.end.89

for.body.43:                                      ; preds = %for.cond.38
  %47 = load i32* %c, align 4
  %idxprom44 = sext i32 %47 to i64
  %48 = load i32** %child.addr, align 8
  %arrayidx45 = getelementptr inbounds i32* %48, i64 %idxprom44
  %49 = load i32* %arrayidx45, align 4
  store i32 %49, i32* %the_child, align 4
  %50 = load i32* %the_child, align 4
  %idxprom46 = sext i32 %50 to i64
  %51 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx47 = getelementptr inbounds i32* %51, i64 %idxprom46
  %52 = load i32* %arrayidx47, align 4
  %cmp48 = icmp slt i32 %52, 0
  br i1 %cmp48, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %for.body.43
  %53 = load i32* %the_child, align 4
  %idxprom50 = sext i32 %53 to i64
  %54 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx51 = getelementptr inbounds i32* %54, i64 %idxprom50
  %55 = load i32* %arrayidx51, align 4
  %56 = load i32* %the_child, align 4
  %add52 = add nsw i32 %56, %55
  store i32 %add52, i32* %the_child, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %for.body.43
  %57 = load i32* %the_child, align 4
  %idxprom54 = sext i32 %57 to i64
  %58 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx55 = getelementptr inbounds i32* %58, i64 %idxprom54
  %59 = load i32* %arrayidx55, align 4
  store i32 %59, i32* %i, align 4
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.84, %if.end.53
  %60 = load i32* %i, align 4
  %61 = load i32* %the_child, align 4
  %add57 = add nsw i32 %61, 1
  %idxprom58 = sext i32 %add57 to i64
  %62 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx59 = getelementptr inbounds i32* %62, i64 %idxprom58
  %63 = load i32* %arrayidx59, align 4
  %cmp60 = icmp slt i32 %60, %63
  br i1 %cmp60, label %for.body.61, label %for.end.86

for.body.61:                                      ; preds = %for.cond.56
  %64 = load i32* %i, align 4
  %idxprom62 = sext i32 %64 to i64
  %65 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx63 = getelementptr inbounds i32* %65, i64 %idxprom62
  %66 = load i32* %arrayidx63, align 4
  store i32 %66, i32* %bl, align 4
  %67 = load i32* %bl, align 4
  %idxprom64 = sext i32 %67 to i64
  %68 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx65 = getelementptr inbounds i32* %68, i64 %idxprom64
  %69 = load i32* %arrayidx65, align 4
  %cmp66 = icmp slt i32 %69, 0
  br i1 %cmp66, label %if.then.67, label %if.end.71

if.then.67:                                       ; preds = %for.body.61
  %70 = load i32* %bl, align 4
  %idxprom68 = sext i32 %70 to i64
  %71 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx69 = getelementptr inbounds i32* %71, i64 %idxprom68
  %72 = load i32* %arrayidx69, align 4
  %73 = load i32* %bl, align 4
  %add70 = add nsw i32 %73, %72
  store i32 %add70, i32* %bl, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.67, %for.body.61
  %74 = load i32* %bl, align 4
  %75 = load i32* %super.addr, align 4
  %cmp72 = icmp sge i32 %74, %75
  br i1 %cmp72, label %land.lhs.true.73, label %if.end.83

land.lhs.true.73:                                 ; preds = %if.end.71
  %76 = load i32* %bl, align 4
  %idxprom74 = sext i32 %76 to i64
  %77 = load i32** %structure.addr, align 8
  %arrayidx75 = getelementptr inbounds i32* %77, i64 %idxprom74
  %78 = load i32* %arrayidx75, align 4
  %tobool76 = icmp ne i32 %78, 0
  br i1 %tobool76, label %if.end.83, label %if.then.77

if.then.77:                                       ; preds = %land.lhs.true.73
  %79 = load i32* %bl, align 4
  %idxprom78 = sext i32 %79 to i64
  %80 = load i32** %structure.addr, align 8
  %arrayidx79 = getelementptr inbounds i32* %80, i64 %idxprom78
  store i32 1, i32* %arrayidx79, align 4
  %81 = load i32* %bl, align 4
  %82 = load i32* %n_nz, align 4
  %inc80 = add nsw i32 %82, 1
  store i32 %inc80, i32* %n_nz, align 4
  %idxprom81 = sext i32 %82 to i64
  %83 = load i32** %nz.addr, align 8
  %arrayidx82 = getelementptr inbounds i32* %83, i64 %idxprom81
  store i32 %81, i32* %arrayidx82, align 4
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.77, %land.lhs.true.73, %if.end.71
  br label %for.inc.84

for.inc.84:                                       ; preds = %if.end.83
  %84 = load i32* %i, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %i, align 4
  br label %for.cond.56

for.end.86:                                       ; preds = %for.cond.56
  br label %for.inc.87

for.inc.87:                                       ; preds = %for.end.86
  %85 = load i32* %c, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %c, align 4
  br label %for.cond.38

for.end.89:                                       ; preds = %for.cond.38
  store i32 0, i32* %i, align 4
  br label %for.cond.90

for.cond.90:                                      ; preds = %for.inc.97, %for.end.89
  %86 = load i32* %i, align 4
  %87 = load i32* %n_nz, align 4
  %cmp91 = icmp slt i32 %86, %87
  br i1 %cmp91, label %for.body.92, label %for.end.99

for.body.92:                                      ; preds = %for.cond.90
  %88 = load i32* %i, align 4
  %idxprom93 = sext i32 %88 to i64
  %89 = load i32** %nz.addr, align 8
  %arrayidx94 = getelementptr inbounds i32* %89, i64 %idxprom93
  %90 = load i32* %arrayidx94, align 4
  %idxprom95 = sext i32 %90 to i64
  %91 = load i32** %structure.addr, align 8
  %arrayidx96 = getelementptr inbounds i32* %91, i64 %idxprom95
  store i32 0, i32* %arrayidx96, align 4
  br label %for.inc.97

for.inc.97:                                       ; preds = %for.body.92
  %92 = load i32* %i, align 4
  %inc98 = add nsw i32 %92, 1
  store i32 %inc98, i32* %i, align 4
  br label %for.cond.90

for.end.99:                                       ; preds = %for.cond.90
  %93 = load i32** %nz.addr, align 8
  %94 = load i32* %n_nz, align 4
  %call = call i32 @InsSort(i32* %93, i32 %94)
  %95 = load i32* %super.addr, align 4
  %idxprom100 = sext i32 %95 to i64
  %96 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx101 = getelementptr inbounds i32* %96, i64 %idxprom100
  %97 = load i32* %arrayidx101, align 4
  %98 = load i32* %n_nz, align 4
  %add102 = add nsw i32 %97, %98
  %99 = load i32* %super.addr, align 4
  %add103 = add nsw i32 %99, 1
  %idxprom104 = sext i32 %add103 to i64
  %100 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx105 = getelementptr inbounds i32* %100, i64 %idxprom104
  store i32 %add102, i32* %arrayidx105, align 4
  %101 = load i32* %super.addr, align 4
  %add106 = add nsw i32 %101, 1
  %idxprom107 = sext i32 %add106 to i64
  %102 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx108 = getelementptr inbounds i32* %102, i64 %idxprom107
  %103 = load i32* %arrayidx108, align 4
  %104 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 5), align 4
  %cmp109 = icmp sgt i32 %103, %104
  br i1 %cmp109, label %if.then.110, label %if.end.112

if.then.110:                                      ; preds = %for.end.99
  %call111 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.7, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

if.end.112:                                       ; preds = %for.end.99
  store i32 0, i32* %i, align 4
  br label %for.cond.113

for.cond.113:                                     ; preds = %for.inc.123, %if.end.112
  %105 = load i32* %i, align 4
  %106 = load i32* %n_nz, align 4
  %cmp114 = icmp slt i32 %105, %106
  br i1 %cmp114, label %for.body.115, label %for.end.125

for.body.115:                                     ; preds = %for.cond.113
  %107 = load i32* %i, align 4
  %idxprom116 = sext i32 %107 to i64
  %108 = load i32** %nz.addr, align 8
  %arrayidx117 = getelementptr inbounds i32* %108, i64 %idxprom116
  %109 = load i32* %arrayidx117, align 4
  %110 = load i32* %super.addr, align 4
  %idxprom118 = sext i32 %110 to i64
  %111 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx119 = getelementptr inbounds i32* %111, i64 %idxprom118
  %112 = load i32* %arrayidx119, align 4
  %113 = load i32* %i, align 4
  %add120 = add nsw i32 %112, %113
  %idxprom121 = sext i32 %add120 to i64
  %114 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx122 = getelementptr inbounds i32* %114, i64 %idxprom121
  store i32 %109, i32* %arrayidx122, align 4
  br label %for.inc.123

for.inc.123:                                      ; preds = %for.body.115
  %115 = load i32* %i, align 4
  %inc124 = add nsw i32 %115, 1
  store i32 %inc124, i32* %i, align 4
  br label %for.cond.113

for.end.125:                                      ; preds = %for.cond.113
  %116 = load i32* %retval
  ret i32 %116
}

; Function Attrs: nounwind uwtable
define internal i32 @FindSuperStructure(%struct.SMatrix* byval align 8 %M, i32 %super, i32* %PERM, i32* %INVP, i32* %firstchild, i32* %child, i32* %structure, i32* %nz, i32* %n_nz) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %firstchild.addr = alloca i32*, align 8
  %child.addr = alloca i32*, align 8
  %structure.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %n_nz.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %truecol = alloca i32, align 4
  %current = alloca i32, align 4
  %bl = alloca i32, align 4
  %c = alloca i32, align 4
  %the_child = alloca i32, align 4
  %row = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store i32* %firstchild, i32** %firstchild.addr, align 8
  store i32* %child, i32** %child.addr, align 8
  store i32* %structure, i32** %structure.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %n_nz, i32** %n_nz.addr, align 8
  %0 = load i32** %n_nz.addr, align 8
  store i32 0, i32* %0, align 4
  %1 = load i32* %super.addr, align 4
  store i32 %1, i32* %current, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.25, %entry
  %2 = load i32* %current, align 4
  %3 = load i32* %super.addr, align 4
  %4 = load i32* %super.addr, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  %add = add nsw i32 %3, %6
  %cmp = icmp slt i32 %2, %add
  br i1 %cmp, label %for.body, label %for.end.27

for.body:                                         ; preds = %for.cond
  %7 = load i32* %current, align 4
  %idxprom1 = sext i32 %7 to i64
  %8 = load i32** %PERM.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %8, i64 %idxprom1
  %9 = load i32* %arrayidx2, align 4
  store i32 %9, i32* %truecol, align 4
  %10 = load i32* %truecol, align 4
  %idxprom3 = sext i32 %10 to i64
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %11 = load i32** %col, align 8
  %arrayidx4 = getelementptr inbounds i32* %11, i64 %idxprom3
  %12 = load i32* %arrayidx4, align 4
  store i32 %12, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %13 = load i32* %i, align 4
  %14 = load i32* %truecol, align 4
  %add6 = add nsw i32 %14, 1
  %idxprom7 = sext i32 %add6 to i64
  %col8 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %15 = load i32** %col8, align 8
  %arrayidx9 = getelementptr inbounds i32* %15, i64 %idxprom7
  %16 = load i32* %arrayidx9, align 4
  %cmp10 = icmp slt i32 %13, %16
  br i1 %cmp10, label %for.body.11, label %for.end

for.body.11:                                      ; preds = %for.cond.5
  %17 = load i32* %i, align 4
  %idxprom12 = sext i32 %17 to i64
  %row13 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %18 = load i32** %row13, align 8
  %arrayidx14 = getelementptr inbounds i32* %18, i64 %idxprom12
  %19 = load i32* %arrayidx14, align 4
  %idxprom15 = sext i32 %19 to i64
  %20 = load i32** %INVP.addr, align 8
  %arrayidx16 = getelementptr inbounds i32* %20, i64 %idxprom15
  %21 = load i32* %arrayidx16, align 4
  store i32 %21, i32* %row, align 4
  %22 = load i32* %row, align 4
  %23 = load i32* %super.addr, align 4
  %cmp17 = icmp sge i32 %22, %23
  br i1 %cmp17, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.11
  %24 = load i32* %row, align 4
  %idxprom18 = sext i32 %24 to i64
  %25 = load i32** %structure.addr, align 8
  %arrayidx19 = getelementptr inbounds i32* %25, i64 %idxprom18
  %26 = load i32* %arrayidx19, align 4
  %tobool = icmp ne i32 %26, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %27 = load i32* %row, align 4
  %idxprom20 = sext i32 %27 to i64
  %28 = load i32** %structure.addr, align 8
  %arrayidx21 = getelementptr inbounds i32* %28, i64 %idxprom20
  store i32 1, i32* %arrayidx21, align 4
  %29 = load i32* %row, align 4
  %30 = load i32** %n_nz.addr, align 8
  %31 = load i32* %30, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %30, align 4
  %idxprom22 = sext i32 %31 to i64
  %32 = load i32** %nz.addr, align 8
  %arrayidx23 = getelementptr inbounds i32* %32, i64 %idxprom22
  store i32 %29, i32* %arrayidx23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.11
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %33 = load i32* %i, align 4
  %inc24 = add nsw i32 %33, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.end
  %34 = load i32* %current, align 4
  %inc26 = add nsw i32 %34, 1
  store i32 %inc26, i32* %current, align 4
  br label %for.cond

for.end.27:                                       ; preds = %for.cond
  %35 = load i32* %super.addr, align 4
  %idxprom28 = sext i32 %35 to i64
  %36 = load i32** %firstchild.addr, align 8
  %arrayidx29 = getelementptr inbounds i32* %36, i64 %idxprom28
  %37 = load i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.127, %for.end.27
  %38 = load i32* %c, align 4
  %39 = load i32* %super.addr, align 4
  %add31 = add nsw i32 %39, 1
  %idxprom32 = sext i32 %add31 to i64
  %40 = load i32** %firstchild.addr, align 8
  %arrayidx33 = getelementptr inbounds i32* %40, i64 %idxprom32
  %41 = load i32* %arrayidx33, align 4
  %cmp34 = icmp slt i32 %38, %41
  br i1 %cmp34, label %for.body.35, label %for.end.129

for.body.35:                                      ; preds = %for.cond.30
  %42 = load i32* %c, align 4
  %idxprom36 = sext i32 %42 to i64
  %43 = load i32** %child.addr, align 8
  %arrayidx37 = getelementptr inbounds i32* %43, i64 %idxprom36
  %44 = load i32* %arrayidx37, align 4
  store i32 %44, i32* %the_child, align 4
  %45 = load i32* %the_child, align 4
  %idxprom38 = sext i32 %45 to i64
  %46 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx39 = getelementptr inbounds i32* %46, i64 %idxprom38
  %47 = load i32* %arrayidx39, align 4
  %cmp40 = icmp slt i32 %47, 0
  br i1 %cmp40, label %if.then.41, label %if.end.45

if.then.41:                                       ; preds = %for.body.35
  %48 = load i32* %the_child, align 4
  %idxprom42 = sext i32 %48 to i64
  %49 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx43 = getelementptr inbounds i32* %49, i64 %idxprom42
  %50 = load i32* %arrayidx43, align 4
  %51 = load i32* %the_child, align 4
  %add44 = add nsw i32 %51, %50
  store i32 %add44, i32* %the_child, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.41, %for.body.35
  %52 = load i32* %the_child, align 4
  %idxprom46 = sext i32 %52 to i64
  %53 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx47 = getelementptr inbounds i32* %53, i64 %idxprom46
  %54 = load i32* %arrayidx47, align 4
  %tobool48 = icmp ne i32 %54, 0
  br i1 %tobool48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %if.end.45
  %55 = load i32* %the_child, align 4
  %idxprom50 = sext i32 %55 to i64
  %56 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx51 = getelementptr inbounds i32* %56, i64 %idxprom50
  %57 = load i32* %arrayidx51, align 4
  store i32 %57, i32* %i, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.72, %if.then.49
  %58 = load i32* %i, align 4
  %59 = load i32* %the_child, align 4
  %add53 = add nsw i32 %59, 1
  %idxprom54 = sext i32 %add53 to i64
  %60 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx55 = getelementptr inbounds i32* %60, i64 %idxprom54
  %61 = load i32* %arrayidx55, align 4
  %cmp56 = icmp slt i32 %58, %61
  br i1 %cmp56, label %for.body.57, label %for.end.74

for.body.57:                                      ; preds = %for.cond.52
  %62 = load i32* %i, align 4
  %idxprom58 = sext i32 %62 to i64
  %63 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx59 = getelementptr inbounds i32* %63, i64 %idxprom58
  %64 = load i32* %arrayidx59, align 4
  store i32 %64, i32* %row, align 4
  %65 = load i32* %row, align 4
  %66 = load i32* %super.addr, align 4
  %cmp60 = icmp sge i32 %65, %66
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.71

land.lhs.true.61:                                 ; preds = %for.body.57
  %67 = load i32* %row, align 4
  %idxprom62 = sext i32 %67 to i64
  %68 = load i32** %structure.addr, align 8
  %arrayidx63 = getelementptr inbounds i32* %68, i64 %idxprom62
  %69 = load i32* %arrayidx63, align 4
  %tobool64 = icmp ne i32 %69, 0
  br i1 %tobool64, label %if.end.71, label %if.then.65

if.then.65:                                       ; preds = %land.lhs.true.61
  %70 = load i32* %row, align 4
  %idxprom66 = sext i32 %70 to i64
  %71 = load i32** %structure.addr, align 8
  %arrayidx67 = getelementptr inbounds i32* %71, i64 %idxprom66
  store i32 1, i32* %arrayidx67, align 4
  %72 = load i32* %row, align 4
  %73 = load i32** %n_nz.addr, align 8
  %74 = load i32* %73, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %73, align 4
  %idxprom69 = sext i32 %74 to i64
  %75 = load i32** %nz.addr, align 8
  %arrayidx70 = getelementptr inbounds i32* %75, i64 %idxprom69
  store i32 %72, i32* %arrayidx70, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.65, %land.lhs.true.61, %for.body.57
  br label %for.inc.72

for.inc.72:                                       ; preds = %if.end.71
  %76 = load i32* %i, align 4
  %inc73 = add nsw i32 %76, 1
  store i32 %inc73, i32* %i, align 4
  br label %for.cond.52

for.end.74:                                       ; preds = %for.cond.52
  br label %if.end.126

if.else:                                          ; preds = %if.end.45
  %77 = load i32* %the_child, align 4
  %idxprom75 = sext i32 %77 to i64
  %78 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx76 = getelementptr inbounds i32* %78, i64 %idxprom75
  %79 = load i32* %arrayidx76, align 4
  store i32 %79, i32* %i, align 4
  br label %for.cond.77

for.cond.77:                                      ; preds = %for.inc.123, %if.else
  %80 = load i32* %i, align 4
  %81 = load i32* %the_child, align 4
  %add78 = add nsw i32 %81, 1
  %idxprom79 = sext i32 %add78 to i64
  %82 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx80 = getelementptr inbounds i32* %82, i64 %idxprom79
  %83 = load i32* %arrayidx80, align 4
  %cmp81 = icmp slt i32 %80, %83
  br i1 %cmp81, label %for.body.82, label %for.end.125

for.body.82:                                      ; preds = %for.cond.77
  store i32 0, i32* %bl, align 4
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.120, %for.body.82
  %84 = load i32* %bl, align 4
  %85 = load i32* %i, align 4
  %idxprom84 = sext i32 %85 to i64
  %86 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx85 = getelementptr inbounds %union.Entry* %86, i64 %idxprom84
  %block = bitcast %union.Entry* %arrayidx85 to %struct.Block**
  %87 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %87, i32 0, i32 5
  %88 = load i32* %length, align 4
  %cmp86 = icmp slt i32 %84, %88
  br i1 %cmp86, label %for.body.87, label %for.end.122

for.body.87:                                      ; preds = %for.cond.83
  %89 = load i32* %i, align 4
  %idxprom88 = sext i32 %89 to i64
  %90 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx89 = getelementptr inbounds %union.Entry* %90, i64 %idxprom88
  %block90 = bitcast %union.Entry* %arrayidx89 to %struct.Block**
  %91 = load %struct.Block** %block90, align 8
  %structure91 = getelementptr inbounds %struct.Block* %91, i32 0, i32 9
  %92 = load i32** %structure91, align 8
  %tobool92 = icmp ne i32* %92, null
  br i1 %tobool92, label %if.then.93, label %if.else.103

if.then.93:                                       ; preds = %for.body.87
  %93 = load i32* %i, align 4
  %idxprom94 = sext i32 %93 to i64
  %94 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx95 = getelementptr inbounds i32* %94, i64 %idxprom94
  %95 = load i32* %arrayidx95, align 4
  %96 = load i32* %bl, align 4
  %idxprom96 = sext i32 %96 to i64
  %97 = load i32* %i, align 4
  %idxprom97 = sext i32 %97 to i64
  %98 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx98 = getelementptr inbounds %union.Entry* %98, i64 %idxprom97
  %block99 = bitcast %union.Entry* %arrayidx98 to %struct.Block**
  %99 = load %struct.Block** %block99, align 8
  %structure100 = getelementptr inbounds %struct.Block* %99, i32 0, i32 9
  %100 = load i32** %structure100, align 8
  %arrayidx101 = getelementptr inbounds i32* %100, i64 %idxprom96
  %101 = load i32* %arrayidx101, align 4
  %add102 = add nsw i32 %95, %101
  store i32 %add102, i32* %row, align 4
  br label %if.end.107

if.else.103:                                      ; preds = %for.body.87
  %102 = load i32* %i, align 4
  %idxprom104 = sext i32 %102 to i64
  %103 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx105 = getelementptr inbounds i32* %103, i64 %idxprom104
  %104 = load i32* %arrayidx105, align 4
  %105 = load i32* %bl, align 4
  %add106 = add nsw i32 %104, %105
  store i32 %add106, i32* %row, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.103, %if.then.93
  %106 = load i32* %row, align 4
  %107 = load i32* %super.addr, align 4
  %cmp108 = icmp sge i32 %106, %107
  br i1 %cmp108, label %land.lhs.true.109, label %if.end.119

land.lhs.true.109:                                ; preds = %if.end.107
  %108 = load i32* %row, align 4
  %idxprom110 = sext i32 %108 to i64
  %109 = load i32** %structure.addr, align 8
  %arrayidx111 = getelementptr inbounds i32* %109, i64 %idxprom110
  %110 = load i32* %arrayidx111, align 4
  %tobool112 = icmp ne i32 %110, 0
  br i1 %tobool112, label %if.end.119, label %if.then.113

if.then.113:                                      ; preds = %land.lhs.true.109
  %111 = load i32* %row, align 4
  %idxprom114 = sext i32 %111 to i64
  %112 = load i32** %structure.addr, align 8
  %arrayidx115 = getelementptr inbounds i32* %112, i64 %idxprom114
  store i32 1, i32* %arrayidx115, align 4
  %113 = load i32* %row, align 4
  %114 = load i32** %n_nz.addr, align 8
  %115 = load i32* %114, align 4
  %inc116 = add nsw i32 %115, 1
  store i32 %inc116, i32* %114, align 4
  %idxprom117 = sext i32 %115 to i64
  %116 = load i32** %nz.addr, align 8
  %arrayidx118 = getelementptr inbounds i32* %116, i64 %idxprom117
  store i32 %113, i32* %arrayidx118, align 4
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.113, %land.lhs.true.109, %if.end.107
  br label %for.inc.120

for.inc.120:                                      ; preds = %if.end.119
  %117 = load i32* %bl, align 4
  %inc121 = add nsw i32 %117, 1
  store i32 %inc121, i32* %bl, align 4
  br label %for.cond.83

for.end.122:                                      ; preds = %for.cond.83
  br label %for.inc.123

for.inc.123:                                      ; preds = %for.end.122
  %118 = load i32* %i, align 4
  %inc124 = add nsw i32 %118, 1
  store i32 %inc124, i32* %i, align 4
  br label %for.cond.77

for.end.125:                                      ; preds = %for.cond.77
  br label %if.end.126

if.end.126:                                       ; preds = %for.end.125, %for.end.74
  br label %for.inc.127

for.inc.127:                                      ; preds = %if.end.126
  %119 = load i32* %c, align 4
  %inc128 = add nsw i32 %119, 1
  store i32 %inc128, i32* %c, align 4
  br label %for.cond.30

for.end.129:                                      ; preds = %for.cond.30
  store i32 0, i32* %i, align 4
  br label %for.cond.130

for.cond.130:                                     ; preds = %for.inc.137, %for.end.129
  %120 = load i32* %i, align 4
  %121 = load i32** %n_nz.addr, align 8
  %122 = load i32* %121, align 4
  %cmp131 = icmp slt i32 %120, %122
  br i1 %cmp131, label %for.body.132, label %for.end.139

for.body.132:                                     ; preds = %for.cond.130
  %123 = load i32* %i, align 4
  %idxprom133 = sext i32 %123 to i64
  %124 = load i32** %nz.addr, align 8
  %arrayidx134 = getelementptr inbounds i32* %124, i64 %idxprom133
  %125 = load i32* %arrayidx134, align 4
  %idxprom135 = sext i32 %125 to i64
  %126 = load i32** %structure.addr, align 8
  %arrayidx136 = getelementptr inbounds i32* %126, i64 %idxprom135
  store i32 0, i32* %arrayidx136, align 4
  br label %for.inc.137

for.inc.137:                                      ; preds = %for.body.132
  %127 = load i32* %i, align 4
  %inc138 = add nsw i32 %127, 1
  store i32 %inc138, i32* %i, align 4
  br label %for.cond.130

for.end.139:                                      ; preds = %for.cond.130
  %128 = load i32** %nz.addr, align 8
  %129 = load i32** %n_nz.addr, align 8
  %130 = load i32* %129, align 4
  %call = call i32 @InsSort(i32* %128, i32 %130)
  %131 = load i32* %super.addr, align 4
  %132 = load i32** %n_nz.addr, align 8
  %133 = load i32* %132, align 4
  %call140 = call i32 @CheckColLength(i32 %131, i32 %133)
  %134 = load i32* %retval
  ret i32 %134
}

; Function Attrs: nounwind uwtable
define internal i32 @FindDetailedStructure(i32 %col, i32* %structure, i32* %nz, i32 %n_nz) {
entry:
  %retval = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %structure.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %n_nz.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %row = alloca i32, align 4
  %n = alloca i32, align 4
  %owner = alloca i32, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32* %structure, i32** %structure.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32 %n_nz, i32* %n_nz.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n_nz.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %nz.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %idxprom1 = sext i32 %4 to i64
  %5 = load i32** %structure.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %5, i64 %idxprom1
  store i32 1, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32* %col.addr, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %8, i64 %idxprom3
  %9 = load i32* %arrayidx4, align 4
  store i32 %9, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.75, %for.end
  %10 = load i32* %i, align 4
  %11 = load i32* %col.addr, align 4
  %add = add nsw i32 %11, 1
  %idxprom6 = sext i32 %add to i64
  %12 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %12, i64 %idxprom6
  %13 = load i32* %arrayidx7, align 4
  %cmp8 = icmp slt i32 %10, %13
  br i1 %cmp8, label %for.body.9, label %for.end.77

for.body.9:                                       ; preds = %for.cond.5
  store i32 0, i32* %n, align 4
  %14 = load i32* %i, align 4
  %idxprom10 = sext i32 %14 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx11 = getelementptr inbounds i32* %15, i64 %idxprom10
  %16 = load i32* %arrayidx11, align 4
  store i32 %16, i32* %row, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc.21, %for.body.9
  %17 = load i32* %j, align 4
  %18 = load i32* %row, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx14 = getelementptr inbounds i32* %19, i64 %idxprom13
  %20 = load i32* %arrayidx14, align 4
  %cmp15 = icmp slt i32 %17, %20
  br i1 %cmp15, label %for.body.16, label %for.end.23

for.body.16:                                      ; preds = %for.cond.12
  %21 = load i32* %row, align 4
  %22 = load i32* %j, align 4
  %add17 = add nsw i32 %21, %22
  %idxprom18 = sext i32 %add17 to i64
  %23 = load i32** %structure.addr, align 8
  %arrayidx19 = getelementptr inbounds i32* %23, i64 %idxprom18
  %24 = load i32* %arrayidx19, align 4
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.16
  %25 = load i32* %n, align 4
  %inc20 = add nsw i32 %25, 1
  store i32 %inc20, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.16
  br label %for.inc.21

for.inc.21:                                       ; preds = %if.end
  %26 = load i32* %j, align 4
  %inc22 = add nsw i32 %26, 1
  store i32 %inc22, i32* %j, align 4
  br label %for.cond.12

for.end.23:                                       ; preds = %for.cond.12
  %27 = load i32* %n, align 4
  %28 = load i32* %i, align 4
  %idxprom24 = sext i32 %28 to i64
  %29 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx25 = getelementptr inbounds %union.Entry* %29, i64 %idxprom24
  %block = bitcast %union.Entry* %arrayidx25 to %struct.Block**
  %30 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %30, i32 0, i32 5
  store i32 %27, i32* %length, align 4
  %31 = load i32* %n, align 4
  %32 = load i32* %row, align 4
  %idxprom26 = sext i32 %32 to i64
  %33 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx27 = getelementptr inbounds i32* %33, i64 %idxprom26
  %34 = load i32* %arrayidx27, align 4
  %cmp28 = icmp eq i32 %31, %34
  br i1 %cmp28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %for.end.23
  %35 = load i32* %i, align 4
  %idxprom30 = sext i32 %35 to i64
  %36 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx31 = getelementptr inbounds %union.Entry* %36, i64 %idxprom30
  %block32 = bitcast %union.Entry* %arrayidx31 to %struct.Block**
  %37 = load %struct.Block** %block32, align 8
  %structure33 = getelementptr inbounds %struct.Block* %37, i32 0, i32 9
  store i32* null, i32** %structure33, align 8
  br label %if.end.74

if.else:                                          ; preds = %for.end.23
  %38 = load i32* %i, align 4
  %call = call i32 @EmbeddedOwner(i32 %38)
  store i32 %call, i32* %owner, align 4
  %39 = load i32* %owner, align 4
  %cmp34 = icmp slt i32 %39, 0
  br i1 %cmp34, label %if.then.35, label %if.end.45

if.then.35:                                       ; preds = %if.else
  %40 = load i32* %i, align 4
  %idxprom36 = sext i32 %40 to i64
  %41 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx37 = getelementptr inbounds %union.Entry* %41, i64 %idxprom36
  %block38 = bitcast %union.Entry* %arrayidx37 to %struct.Block**
  %42 = load %struct.Block** %block38, align 8
  %i39 = getelementptr inbounds %struct.Block* %42, i32 0, i32 0
  %43 = load i32* %i39, align 4
  %44 = load i32* %i, align 4
  %idxprom40 = sext i32 %44 to i64
  %45 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx41 = getelementptr inbounds %union.Entry* %45, i64 %idxprom40
  %block42 = bitcast %union.Entry* %arrayidx41 to %struct.Block**
  %46 = load %struct.Block** %block42, align 8
  %j43 = getelementptr inbounds %struct.Block* %46, i32 0, i32 1
  %47 = load i32* %j43, align 4
  %48 = load i32* %owner, align 4
  %call44 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([11 x i8]* @.str.10, i32 0, i32 0), i32 %43, i32 %47, i32 %48)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.35, %if.else
  %49 = load i32* %n, align 4
  %conv = sext i32 %49 to i64
  %mul = mul i64 %conv, 4
  %conv46 = trunc i64 %mul to i32
  %50 = load i32* %owner, align 4
  %call47 = call i8* @MyMalloc(i32 %conv46, i32 %50)
  %51 = bitcast i8* %call47 to i32*
  %52 = load i32* %i, align 4
  %idxprom48 = sext i32 %52 to i64
  %53 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx49 = getelementptr inbounds %union.Entry* %53, i64 %idxprom48
  %block50 = bitcast %union.Entry* %arrayidx49 to %struct.Block**
  %54 = load %struct.Block** %block50, align 8
  %structure51 = getelementptr inbounds %struct.Block* %54, i32 0, i32 9
  store i32* %51, i32** %structure51, align 8
  store i32 0, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.71, %if.end.45
  %55 = load i32* %j, align 4
  %56 = load i32* %row, align 4
  %idxprom53 = sext i32 %56 to i64
  %57 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx54 = getelementptr inbounds i32* %57, i64 %idxprom53
  %58 = load i32* %arrayidx54, align 4
  %cmp55 = icmp slt i32 %55, %58
  br i1 %cmp55, label %for.body.57, label %for.end.73

for.body.57:                                      ; preds = %for.cond.52
  %59 = load i32* %row, align 4
  %60 = load i32* %j, align 4
  %add58 = add nsw i32 %59, %60
  %idxprom59 = sext i32 %add58 to i64
  %61 = load i32** %structure.addr, align 8
  %arrayidx60 = getelementptr inbounds i32* %61, i64 %idxprom59
  %62 = load i32* %arrayidx60, align 4
  %tobool61 = icmp ne i32 %62, 0
  br i1 %tobool61, label %if.then.62, label %if.end.70

if.then.62:                                       ; preds = %for.body.57
  %63 = load i32* %j, align 4
  %64 = load i32* %n, align 4
  %inc63 = add nsw i32 %64, 1
  store i32 %inc63, i32* %n, align 4
  %idxprom64 = sext i32 %64 to i64
  %65 = load i32* %i, align 4
  %idxprom65 = sext i32 %65 to i64
  %66 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx66 = getelementptr inbounds %union.Entry* %66, i64 %idxprom65
  %block67 = bitcast %union.Entry* %arrayidx66 to %struct.Block**
  %67 = load %struct.Block** %block67, align 8
  %structure68 = getelementptr inbounds %struct.Block* %67, i32 0, i32 9
  %68 = load i32** %structure68, align 8
  %arrayidx69 = getelementptr inbounds i32* %68, i64 %idxprom64
  store i32 %63, i32* %arrayidx69, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.62, %for.body.57
  br label %for.inc.71

for.inc.71:                                       ; preds = %if.end.70
  %69 = load i32* %j, align 4
  %inc72 = add nsw i32 %69, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond.52

for.end.73:                                       ; preds = %for.cond.52
  br label %if.end.74

if.end.74:                                        ; preds = %for.end.73, %if.then.29
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %70 = load i32* %i, align 4
  %inc76 = add nsw i32 %70, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond.5

for.end.77:                                       ; preds = %for.cond.5
  store i32 0, i32* %i, align 4
  br label %for.cond.78

for.cond.78:                                      ; preds = %for.inc.86, %for.end.77
  %71 = load i32* %i, align 4
  %72 = load i32* %n_nz.addr, align 4
  %cmp79 = icmp slt i32 %71, %72
  br i1 %cmp79, label %for.body.81, label %for.end.88

for.body.81:                                      ; preds = %for.cond.78
  %73 = load i32* %i, align 4
  %idxprom82 = sext i32 %73 to i64
  %74 = load i32** %nz.addr, align 8
  %arrayidx83 = getelementptr inbounds i32* %74, i64 %idxprom82
  %75 = load i32* %arrayidx83, align 4
  %idxprom84 = sext i32 %75 to i64
  %76 = load i32** %structure.addr, align 8
  %arrayidx85 = getelementptr inbounds i32* %76, i64 %idxprom84
  store i32 0, i32* %arrayidx85, align 4
  br label %for.inc.86

for.inc.86:                                       ; preds = %for.body.81
  %77 = load i32* %i, align 4
  %inc87 = add nsw i32 %77, 1
  store i32 %inc87, i32* %i, align 4
  br label %for.cond.78

for.end.88:                                       ; preds = %for.cond.78
  %78 = load i32* %retval
  ret i32 %78
}

; Function Attrs: nounwind uwtable
define internal i32 @AllocateNZ() {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca i32, align 4
  %size = alloca i32, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.33, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.37

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %j, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %b, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.30, %if.then
  %8 = load i32* %b, align 4
  %9 = load i32* %j, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end.32

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %j, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx9 = getelementptr inbounds i32* %13, i64 %idxprom8
  %14 = load i32* %arrayidx9, align 4
  %15 = load i32* %b, align 4
  %idxprom10 = sext i32 %15 to i64
  %16 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx11 = getelementptr inbounds %union.Entry* %16, i64 %idxprom10
  %block = bitcast %union.Entry* %arrayidx11 to %struct.Block**
  %17 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %17, i32 0, i32 5
  %18 = load i32* %length, align 4
  %mul = mul nsw i32 %14, %18
  store i32 %mul, i32* %size, align 4
  %19 = load i32* %size, align 4
  %conv = sext i32 %19 to i64
  %mul12 = mul i64 %conv, 8
  %conv13 = trunc i64 %mul12 to i32
  %20 = load i32* %b, align 4
  %idxprom14 = sext i32 %20 to i64
  %21 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx15 = getelementptr inbounds %union.Entry* %21, i64 %idxprom14
  %block16 = bitcast %union.Entry* %arrayidx15 to %struct.Block**
  %22 = load %struct.Block** %block16, align 8
  %owner = getelementptr inbounds %struct.Block* %22, i32 0, i32 2
  %23 = load i32* %owner, align 4
  %call = call i8* @MyMalloc(i32 %conv13, i32 %23)
  %24 = bitcast i8* %call to double*
  %25 = load i32* %b, align 4
  %idxprom17 = sext i32 %25 to i64
  %26 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx18 = getelementptr inbounds %union.Entry* %26, i64 %idxprom17
  %block19 = bitcast %union.Entry* %arrayidx18 to %struct.Block**
  %27 = load %struct.Block** %block19, align 8
  %nz = getelementptr inbounds %struct.Block* %27, i32 0, i32 11
  store double* %24, double** %nz, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc, %for.body.7
  %28 = load i32* %i, align 4
  %29 = load i32* %size, align 4
  %cmp21 = icmp slt i32 %28, %29
  br i1 %cmp21, label %for.body.23, label %for.end

for.body.23:                                      ; preds = %for.cond.20
  %30 = load i32* %i, align 4
  %idxprom24 = sext i32 %30 to i64
  %31 = load i32* %b, align 4
  %idxprom25 = sext i32 %31 to i64
  %32 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx26 = getelementptr inbounds %union.Entry* %32, i64 %idxprom25
  %block27 = bitcast %union.Entry* %arrayidx26 to %struct.Block**
  %33 = load %struct.Block** %block27, align 8
  %nz28 = getelementptr inbounds %struct.Block* %33, i32 0, i32 11
  %34 = load double** %nz28, align 8
  %arrayidx29 = getelementptr inbounds double* %34, i64 %idxprom24
  store double 0.000000e+00, double* %arrayidx29, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.23
  %35 = load i32* %i, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.20

for.end:                                          ; preds = %for.cond.20
  br label %for.inc.30

for.inc.30:                                       ; preds = %for.end
  %36 = load i32* %b, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %b, align 4
  br label %for.cond.3

for.end.32:                                       ; preds = %for.cond.3
  br label %if.end

if.end:                                           ; preds = %for.end.32, %for.body
  br label %for.inc.33

for.inc.33:                                       ; preds = %if.end
  %37 = load i32* %j, align 4
  %idxprom34 = sext i32 %37 to i64
  %38 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx35 = getelementptr inbounds i32* %38, i64 %idxprom34
  %39 = load i32* %arrayidx35, align 4
  %40 = load i32* %j, align 4
  %add36 = add nsw i32 %40, %39
  store i32 %add36, i32* %j, align 4
  br label %for.cond

for.end.37:                                       ; preds = %for.cond
  %41 = load i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal i32 @FillIn(%struct.SMatrix* byval align 8 %M, i32 %col, i32* %PERM, i32* %INVP, double* %scatter) {
entry:
  %retval = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %scatter.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %b = alloca i32, align 4
  %j1 = alloca i32, align 4
  %row = alloca i32, align 4
  %truecol = alloca i32, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store double* %scatter, double** %scatter.addr, align 8
  %0 = load i32* %col.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** %PERM.addr, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %truecol, align 4
  %3 = load i32* %col.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx2 = getelementptr inbounds i32* %4, i64 %idxprom1
  %5 = load i32* %arrayidx2, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.else.51

if.then:                                          ; preds = %entry
  %6 = load i32* %truecol, align 4
  %idxprom3 = sext i32 %6 to i64
  %col4 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %7 = load i32** %col4, align 8
  %arrayidx5 = getelementptr inbounds i32* %7, i64 %idxprom3
  %8 = load i32* %arrayidx5, align 4
  store i32 %8, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i32* %i, align 4
  %10 = load i32* %truecol, align 4
  %add = add nsw i32 %10, 1
  %idxprom6 = sext i32 %add to i64
  %col7 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %11 = load i32** %col7, align 8
  %arrayidx8 = getelementptr inbounds i32* %11, i64 %idxprom6
  %12 = load i32* %arrayidx8, align 4
  %cmp = icmp slt i32 %9, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32* %i, align 4
  %idxprom9 = sext i32 %13 to i64
  %row10 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %14 = load i32** %row10, align 8
  %arrayidx11 = getelementptr inbounds i32* %14, i64 %idxprom9
  %15 = load i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %15 to i64
  %16 = load i32** %INVP.addr, align 8
  %arrayidx13 = getelementptr inbounds i32* %16, i64 %idxprom12
  %17 = load i32* %arrayidx13, align 4
  store i32 %17, i32* %row, align 4
  %18 = load i32* %row, align 4
  %19 = load i32* %col.addr, align 4
  %cmp14 = icmp sge i32 %18, %19
  br i1 %cmp14, label %if.then.15, label %if.end.28

if.then.15:                                       ; preds = %for.body
  %nz = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %20 = load double** %nz, align 8
  %tobool16 = icmp ne double* %20, null
  br i1 %tobool16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.15
  %21 = load i32* %i, align 4
  %idxprom18 = sext i32 %21 to i64
  %nz19 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %22 = load double** %nz19, align 8
  %arrayidx20 = getelementptr inbounds double* %22, i64 %idxprom18
  %23 = load double* %arrayidx20, align 8
  %24 = load i32* %row, align 4
  %idxprom21 = sext i32 %24 to i64
  %25 = load double** %scatter.addr, align 8
  %arrayidx22 = getelementptr inbounds double* %25, i64 %idxprom21
  store double %23, double* %arrayidx22, align 8
  br label %if.end

if.else:                                          ; preds = %if.then.15
  %26 = load i32* %i, align 4
  %idxprom23 = sext i32 %26 to i64
  %row24 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %27 = load i32** %row24, align 8
  %arrayidx25 = getelementptr inbounds i32* %27, i64 %idxprom23
  %28 = load i32* %arrayidx25, align 4
  %29 = load i32* %truecol, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %30 = load i32* %n, align 4
  %call = call double (i32, i32, i32, ...) *bitcast (double (i32, i32, i32)* @Value to double (i32, i32, i32, ...)*)(i32 %28, i32 %29, i32 %30)
  %31 = load i32* %row, align 4
  %idxprom26 = sext i32 %31 to i64
  %32 = load double** %scatter.addr, align 8
  %arrayidx27 = getelementptr inbounds double* %32, i64 %idxprom26
  store double %call, double* %arrayidx27, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.17
  br label %if.end.28

if.end.28:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %33 = load i32* %i, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load i32* %col.addr, align 4
  %idxprom29 = sext i32 %34 to i64
  %35 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx30 = getelementptr inbounds i32* %35, i64 %idxprom29
  %36 = load i32* %arrayidx30, align 4
  store i32 %36, i32* %i, align 4
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.48, %for.end
  %37 = load i32* %i, align 4
  %38 = load i32* %col.addr, align 4
  %add32 = add nsw i32 %38, 1
  %idxprom33 = sext i32 %add32 to i64
  %39 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx34 = getelementptr inbounds i32* %39, i64 %idxprom33
  %40 = load i32* %arrayidx34, align 4
  %cmp35 = icmp slt i32 %37, %40
  br i1 %cmp35, label %for.body.36, label %for.end.50

for.body.36:                                      ; preds = %for.cond.31
  %41 = load i32* %i, align 4
  %idxprom37 = sext i32 %41 to i64
  %42 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx38 = getelementptr inbounds i32* %42, i64 %idxprom37
  %43 = load i32* %arrayidx38, align 4
  %idxprom39 = sext i32 %43 to i64
  %44 = load double** %scatter.addr, align 8
  %arrayidx40 = getelementptr inbounds double* %44, i64 %idxprom39
  %45 = load double* %arrayidx40, align 8
  %46 = load i32* %i, align 4
  %idxprom41 = sext i32 %46 to i64
  %47 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx42 = getelementptr inbounds %union.Entry* %47, i64 %idxprom41
  %nz43 = bitcast %union.Entry* %arrayidx42 to double*
  store double %45, double* %nz43, align 8
  %48 = load i32* %i, align 4
  %idxprom44 = sext i32 %48 to i64
  %49 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx45 = getelementptr inbounds i32* %49, i64 %idxprom44
  %50 = load i32* %arrayidx45, align 4
  %idxprom46 = sext i32 %50 to i64
  %51 = load double** %scatter.addr, align 8
  %arrayidx47 = getelementptr inbounds double* %51, i64 %idxprom46
  store double 0.000000e+00, double* %arrayidx47, align 8
  br label %for.inc.48

for.inc.48:                                       ; preds = %for.body.36
  %52 = load i32* %i, align 4
  %inc49 = add nsw i32 %52, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond.31

for.end.50:                                       ; preds = %for.cond.31
  br label %if.end.155

if.else.51:                                       ; preds = %entry
  store i32 0, i32* %j1, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.152, %if.else.51
  %53 = load i32* %j1, align 4
  %54 = load i32* %col.addr, align 4
  %idxprom53 = sext i32 %54 to i64
  %55 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx54 = getelementptr inbounds i32* %55, i64 %idxprom53
  %56 = load i32* %arrayidx54, align 4
  %cmp55 = icmp slt i32 %53, %56
  br i1 %cmp55, label %for.body.56, label %for.end.154

for.body.56:                                      ; preds = %for.cond.52
  %57 = load i32* %col.addr, align 4
  %58 = load i32* %j1, align 4
  %add57 = add nsw i32 %57, %58
  %idxprom58 = sext i32 %add57 to i64
  %59 = load i32** %PERM.addr, align 8
  %arrayidx59 = getelementptr inbounds i32* %59, i64 %idxprom58
  %60 = load i32* %arrayidx59, align 4
  store i32 %60, i32* %truecol, align 4
  %61 = load i32* %truecol, align 4
  %idxprom60 = sext i32 %61 to i64
  %col61 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %62 = load i32** %col61, align 8
  %arrayidx62 = getelementptr inbounds i32* %62, i64 %idxprom60
  %63 = load i32* %arrayidx62, align 4
  store i32 %63, i32* %i, align 4
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.96, %for.body.56
  %64 = load i32* %i, align 4
  %65 = load i32* %truecol, align 4
  %add64 = add nsw i32 %65, 1
  %idxprom65 = sext i32 %add64 to i64
  %col66 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %66 = load i32** %col66, align 8
  %arrayidx67 = getelementptr inbounds i32* %66, i64 %idxprom65
  %67 = load i32* %arrayidx67, align 4
  %cmp68 = icmp slt i32 %64, %67
  br i1 %cmp68, label %for.body.69, label %for.end.98

for.body.69:                                      ; preds = %for.cond.63
  %68 = load i32* %i, align 4
  %idxprom70 = sext i32 %68 to i64
  %row71 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %69 = load i32** %row71, align 8
  %arrayidx72 = getelementptr inbounds i32* %69, i64 %idxprom70
  %70 = load i32* %arrayidx72, align 4
  %idxprom73 = sext i32 %70 to i64
  %71 = load i32** %INVP.addr, align 8
  %arrayidx74 = getelementptr inbounds i32* %71, i64 %idxprom73
  %72 = load i32* %arrayidx74, align 4
  store i32 %72, i32* %row, align 4
  %73 = load i32* %row, align 4
  %74 = load i32* %col.addr, align 4
  %75 = load i32* %j1, align 4
  %add75 = add nsw i32 %74, %75
  %cmp76 = icmp sge i32 %73, %add75
  br i1 %cmp76, label %if.then.77, label %if.end.95

if.then.77:                                       ; preds = %for.body.69
  %nz78 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %76 = load double** %nz78, align 8
  %tobool79 = icmp ne double* %76, null
  br i1 %tobool79, label %if.then.80, label %if.else.86

if.then.80:                                       ; preds = %if.then.77
  %77 = load i32* %i, align 4
  %idxprom81 = sext i32 %77 to i64
  %nz82 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %78 = load double** %nz82, align 8
  %arrayidx83 = getelementptr inbounds double* %78, i64 %idxprom81
  %79 = load double* %arrayidx83, align 8
  %80 = load i32* %row, align 4
  %idxprom84 = sext i32 %80 to i64
  %81 = load double** %scatter.addr, align 8
  %arrayidx85 = getelementptr inbounds double* %81, i64 %idxprom84
  store double %79, double* %arrayidx85, align 8
  br label %if.end.94

if.else.86:                                       ; preds = %if.then.77
  %82 = load i32* %i, align 4
  %idxprom87 = sext i32 %82 to i64
  %row88 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %83 = load i32** %row88, align 8
  %arrayidx89 = getelementptr inbounds i32* %83, i64 %idxprom87
  %84 = load i32* %arrayidx89, align 4
  %85 = load i32* %truecol, align 4
  %n90 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %86 = load i32* %n90, align 4
  %call91 = call double (i32, i32, i32, ...) *bitcast (double (i32, i32, i32)* @Value to double (i32, i32, i32, ...)*)(i32 %84, i32 %85, i32 %86)
  %87 = load i32* %row, align 4
  %idxprom92 = sext i32 %87 to i64
  %88 = load double** %scatter.addr, align 8
  %arrayidx93 = getelementptr inbounds double* %88, i64 %idxprom92
  store double %call91, double* %arrayidx93, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.86, %if.then.80
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %for.body.69
  br label %for.inc.96

for.inc.96:                                       ; preds = %if.end.95
  %89 = load i32* %i, align 4
  %inc97 = add nsw i32 %89, 1
  store i32 %inc97, i32* %i, align 4
  br label %for.cond.63

for.end.98:                                       ; preds = %for.cond.63
  %90 = load i32* %col.addr, align 4
  %idxprom99 = sext i32 %90 to i64
  %91 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx100 = getelementptr inbounds i32* %91, i64 %idxprom99
  %92 = load i32* %arrayidx100, align 4
  store i32 %92, i32* %b, align 4
  br label %for.cond.101

for.cond.101:                                     ; preds = %for.inc.149, %for.end.98
  %93 = load i32* %b, align 4
  %94 = load i32* %col.addr, align 4
  %add102 = add nsw i32 %94, 1
  %idxprom103 = sext i32 %add102 to i64
  %95 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx104 = getelementptr inbounds i32* %95, i64 %idxprom103
  %96 = load i32* %arrayidx104, align 4
  %cmp105 = icmp slt i32 %93, %96
  br i1 %cmp105, label %for.body.106, label %for.end.151

for.body.106:                                     ; preds = %for.cond.101
  store i32 0, i32* %i, align 4
  br label %for.cond.107

for.cond.107:                                     ; preds = %for.inc.146, %for.body.106
  %97 = load i32* %i, align 4
  %98 = load i32* %b, align 4
  %idxprom108 = sext i32 %98 to i64
  %99 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx109 = getelementptr inbounds %union.Entry* %99, i64 %idxprom108
  %block = bitcast %union.Entry* %arrayidx109 to %struct.Block**
  %100 = load %struct.Block** %block, align 8
  %length = getelementptr inbounds %struct.Block* %100, i32 0, i32 5
  %101 = load i32* %length, align 4
  %cmp110 = icmp slt i32 %97, %101
  br i1 %cmp110, label %for.body.111, label %for.end.148

for.body.111:                                     ; preds = %for.cond.107
  %102 = load i32* %b, align 4
  %idxprom112 = sext i32 %102 to i64
  %103 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx113 = getelementptr inbounds %union.Entry* %103, i64 %idxprom112
  %block114 = bitcast %union.Entry* %arrayidx113 to %struct.Block**
  %104 = load %struct.Block** %block114, align 8
  %structure = getelementptr inbounds %struct.Block* %104, i32 0, i32 9
  %105 = load i32** %structure, align 8
  %tobool115 = icmp ne i32* %105, null
  br i1 %tobool115, label %if.then.116, label %if.else.126

if.then.116:                                      ; preds = %for.body.111
  %106 = load i32* %b, align 4
  %idxprom117 = sext i32 %106 to i64
  %107 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx118 = getelementptr inbounds i32* %107, i64 %idxprom117
  %108 = load i32* %arrayidx118, align 4
  %109 = load i32* %i, align 4
  %idxprom119 = sext i32 %109 to i64
  %110 = load i32* %b, align 4
  %idxprom120 = sext i32 %110 to i64
  %111 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx121 = getelementptr inbounds %union.Entry* %111, i64 %idxprom120
  %block122 = bitcast %union.Entry* %arrayidx121 to %struct.Block**
  %112 = load %struct.Block** %block122, align 8
  %structure123 = getelementptr inbounds %struct.Block* %112, i32 0, i32 9
  %113 = load i32** %structure123, align 8
  %arrayidx124 = getelementptr inbounds i32* %113, i64 %idxprom119
  %114 = load i32* %arrayidx124, align 4
  %add125 = add nsw i32 %108, %114
  store i32 %add125, i32* %row, align 4
  br label %if.end.130

if.else.126:                                      ; preds = %for.body.111
  %115 = load i32* %b, align 4
  %idxprom127 = sext i32 %115 to i64
  %116 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx128 = getelementptr inbounds i32* %116, i64 %idxprom127
  %117 = load i32* %arrayidx128, align 4
  %118 = load i32* %i, align 4
  %add129 = add nsw i32 %117, %118
  store i32 %add129, i32* %row, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.126, %if.then.116
  %119 = load i32* %row, align 4
  %idxprom131 = sext i32 %119 to i64
  %120 = load double** %scatter.addr, align 8
  %arrayidx132 = getelementptr inbounds double* %120, i64 %idxprom131
  %121 = load double* %arrayidx132, align 8
  %122 = load i32* %i, align 4
  %123 = load i32* %j1, align 4
  %124 = load i32* %b, align 4
  %idxprom133 = sext i32 %124 to i64
  %125 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx134 = getelementptr inbounds %union.Entry* %125, i64 %idxprom133
  %block135 = bitcast %union.Entry* %arrayidx134 to %struct.Block**
  %126 = load %struct.Block** %block135, align 8
  %length136 = getelementptr inbounds %struct.Block* %126, i32 0, i32 5
  %127 = load i32* %length136, align 4
  %mul = mul nsw i32 %123, %127
  %add137 = add nsw i32 %122, %mul
  %idxprom138 = sext i32 %add137 to i64
  %128 = load i32* %b, align 4
  %idxprom139 = sext i32 %128 to i64
  %129 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx140 = getelementptr inbounds %union.Entry* %129, i64 %idxprom139
  %block141 = bitcast %union.Entry* %arrayidx140 to %struct.Block**
  %130 = load %struct.Block** %block141, align 8
  %nz142 = getelementptr inbounds %struct.Block* %130, i32 0, i32 11
  %131 = load double** %nz142, align 8
  %arrayidx143 = getelementptr inbounds double* %131, i64 %idxprom138
  store double %121, double* %arrayidx143, align 8
  %132 = load i32* %row, align 4
  %idxprom144 = sext i32 %132 to i64
  %133 = load double** %scatter.addr, align 8
  %arrayidx145 = getelementptr inbounds double* %133, i64 %idxprom144
  store double 0.000000e+00, double* %arrayidx145, align 8
  br label %for.inc.146

for.inc.146:                                      ; preds = %if.end.130
  %134 = load i32* %i, align 4
  %inc147 = add nsw i32 %134, 1
  store i32 %inc147, i32* %i, align 4
  br label %for.cond.107

for.end.148:                                      ; preds = %for.cond.107
  br label %for.inc.149

for.inc.149:                                      ; preds = %for.end.148
  %135 = load i32* %b, align 4
  %inc150 = add nsw i32 %135, 1
  store i32 %inc150, i32* %b, align 4
  br label %for.cond.101

for.end.151:                                      ; preds = %for.cond.101
  br label %for.inc.152

for.inc.152:                                      ; preds = %for.end.151
  %136 = load i32* %j1, align 4
  %inc153 = add nsw i32 %136, 1
  store i32 %inc153, i32* %j1, align 4
  br label %for.cond.52

for.end.154:                                      ; preds = %for.cond.52
  br label %if.end.155

if.end.155:                                       ; preds = %for.end.154, %for.end.50
  %137 = load i32* %retval
  ret i32 %137
}

; Function Attrs: nounwind uwtable
define internal i32 @InsSort(i32* %nz, i32 %n) {
entry:
  %retval = alloca i32, align 4
  %nz.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32* %nz, i32** %nz.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  store i32 %2, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32* %j, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i32* %j, align 4
  %sub = sub nsw i32 %4, 1
  %idxprom = sext i32 %sub to i64
  %5 = load i32** %nz.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  %7 = load i32* %j, align 4
  %idxprom2 = sext i32 %7 to i64
  %8 = load i32** %nz.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %8, i64 %idxprom2
  %9 = load i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %6, %9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i32* %j, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load i32** %nz.addr, align 8
  %arrayidx6 = getelementptr inbounds i32* %12, i64 %idxprom5
  %13 = load i32* %arrayidx6, align 4
  store i32 %13, i32* %tmp, align 4
  %14 = load i32* %j, align 4
  %sub7 = sub nsw i32 %14, 1
  %idxprom8 = sext i32 %sub7 to i64
  %15 = load i32** %nz.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %15, i64 %idxprom8
  %16 = load i32* %arrayidx9, align 4
  %17 = load i32* %j, align 4
  %idxprom10 = sext i32 %17 to i64
  %18 = load i32** %nz.addr, align 8
  %arrayidx11 = getelementptr inbounds i32* %18, i64 %idxprom10
  store i32 %16, i32* %arrayidx11, align 4
  %19 = load i32* %tmp, align 4
  %20 = load i32* %j, align 4
  %sub12 = sub nsw i32 %20, 1
  %idxprom13 = sext i32 %sub12 to i64
  %21 = load i32** %nz.addr, align 8
  %arrayidx14 = getelementptr inbounds i32* %21, i64 %idxprom13
  store i32 %19, i32* %arrayidx14, align 4
  %22 = load i32* %j, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %23 = load i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32* %retval
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal i32 @BlDepth(i32 %col) {
entry:
  %col.addr = alloca i32, align 4
  %current = alloca i32, align 4
  %depth = alloca i32, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 0, i32* %depth, align 4
  %0 = load i32* %col.addr, align 4
  store i32 %0, i32* %current, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32* %current, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32** @T, align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  %4 = load i32* %current, align 4
  %cmp = icmp ne i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32* %current, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** @T, align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %current, align 4
  %8 = load i32* %depth, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %depth, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i32* %depth, align 4
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @SortByKey(i32 %n, i32* %blocks, i32* %keys) {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %blocks.addr = alloca i32*, align 8
  %keys.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %blocki = alloca i32, align 4
  %keyi = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %blocks, i32** %blocks.addr, align 8
  store i32* %keys, i32** %keys.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %blocks.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  store i32 %4, i32* %blocki, align 4
  %5 = load i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** %keys.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %keyi, align 4
  %8 = load i32* %i, align 4
  store i32 %8, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %9 = load i32* %j, align 4
  %cmp3 = icmp sgt i32 %9, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32* %j, align 4
  %sub = sub nsw i32 %10, 1
  %idxprom4 = sext i32 %sub to i64
  %11 = load i32** %keys.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %11, i64 %idxprom4
  %12 = load i32* %arrayidx5, align 4
  %13 = load i32* %keyi, align 4
  %cmp6 = icmp sgt i32 %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp6, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32* %j, align 4
  %sub7 = sub nsw i32 %15, 1
  %idxprom8 = sext i32 %sub7 to i64
  %16 = load i32** %blocks.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %16, i64 %idxprom8
  %17 = load i32* %arrayidx9, align 4
  %18 = load i32* %j, align 4
  %idxprom10 = sext i32 %18 to i64
  %19 = load i32** %blocks.addr, align 8
  %arrayidx11 = getelementptr inbounds i32* %19, i64 %idxprom10
  store i32 %17, i32* %arrayidx11, align 4
  %20 = load i32* %j, align 4
  %sub12 = sub nsw i32 %20, 1
  %idxprom13 = sext i32 %sub12 to i64
  %21 = load i32** %keys.addr, align 8
  %arrayidx14 = getelementptr inbounds i32* %21, i64 %idxprom13
  %22 = load i32* %arrayidx14, align 4
  %23 = load i32* %j, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i32** %keys.addr, align 8
  %arrayidx16 = getelementptr inbounds i32* %24, i64 %idxprom15
  store i32 %22, i32* %arrayidx16, align 4
  %25 = load i32* %j, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %26 = load i32* %blocki, align 4
  %27 = load i32* %j, align 4
  %idxprom17 = sext i32 %27 to i64
  %28 = load i32** %blocks.addr, align 8
  %arrayidx18 = getelementptr inbounds i32* %28, i64 %idxprom17
  store i32 %26, i32* %arrayidx18, align 4
  %29 = load i32* %keyi, align 4
  %30 = load i32* %j, align 4
  %idxprom19 = sext i32 %30 to i64
  %31 = load i32** %keys.addr, align 8
  %arrayidx20 = getelementptr inbounds i32* %31, i64 %idxprom19
  store i32 %29, i32* %arrayidx20, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %32 = load i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @DumpSizes(%struct.BMatrix* byval align 8 %LB, i32* %domain, i32* %sizes) {
entry:
  %retval = alloca i32, align 4
  %domain.addr = alloca i32*, align 8
  %sizes.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %buckets = alloca i32*, align 8
  %maxm = alloca i32, align 4
  store i32* %domain, i32** %domain.addr, align 8
  store i32* %sizes, i32** %sizes.addr, align 8
  store i32 0, i32* %maxm, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %n = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %1 = load i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %domain.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** %sizes.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  %8 = load i32* %maxm, align 4
  %cmp3 = icmp sgt i32 %7, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32* %i, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load i32** %sizes.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  store i32 %11, i32* %maxm, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i32** %sizes.addr, align 8
  %arrayidx7 = getelementptr inbounds i32* %13, i64 %idxprom6
  %14 = load i32* %arrayidx7, align 4
  %15 = load i32* %i, align 4
  %add = add nsw i32 %15, %14
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32* %maxm, align 4
  %add8 = add nsw i32 %16, 1
  %conv = sext i32 %add8 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %17 = bitcast i8* %call to i32*
  store i32* %17, i32** %buckets, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc.15, %for.end
  %18 = load i32* %i, align 4
  %19 = load i32* %maxm, align 4
  %cmp10 = icmp sle i32 %18, %19
  br i1 %cmp10, label %for.body.12, label %for.end.16

for.body.12:                                      ; preds = %for.cond.9
  %20 = load i32* %i, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i32** %buckets, align 8
  %arrayidx14 = getelementptr inbounds i32* %21, i64 %idxprom13
  store i32 0, i32* %arrayidx14, align 4
  br label %for.inc.15

for.inc.15:                                       ; preds = %for.body.12
  %22 = load i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.9

for.end.16:                                       ; preds = %for.cond.9
  store i32 0, i32* %i, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.32, %for.end.16
  %23 = load i32* %i, align 4
  %n18 = getelementptr inbounds %struct.BMatrix* %LB, i32 0, i32 0
  %24 = load i32* %n18, align 4
  %cmp19 = icmp slt i32 %23, %24
  br i1 %cmp19, label %for.body.21, label %for.end.36

for.body.21:                                      ; preds = %for.cond.17
  %25 = load i32* %i, align 4
  %idxprom22 = sext i32 %25 to i64
  %26 = load i32** %domain.addr, align 8
  %arrayidx23 = getelementptr inbounds i32* %26, i64 %idxprom22
  %27 = load i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %27, 0
  br i1 %tobool24, label %if.end.31, label %if.then.25

if.then.25:                                       ; preds = %for.body.21
  %28 = load i32* %i, align 4
  %idxprom26 = sext i32 %28 to i64
  %29 = load i32** %sizes.addr, align 8
  %arrayidx27 = getelementptr inbounds i32* %29, i64 %idxprom26
  %30 = load i32* %arrayidx27, align 4
  %idxprom28 = sext i32 %30 to i64
  %31 = load i32** %buckets, align 8
  %arrayidx29 = getelementptr inbounds i32* %31, i64 %idxprom28
  %32 = load i32* %arrayidx29, align 4
  %inc30 = add nsw i32 %32, 1
  store i32 %inc30, i32* %arrayidx29, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.25, %for.body.21
  br label %for.inc.32

for.inc.32:                                       ; preds = %if.end.31
  %33 = load i32* %i, align 4
  %idxprom33 = sext i32 %33 to i64
  %34 = load i32** %sizes.addr, align 8
  %arrayidx34 = getelementptr inbounds i32* %34, i64 %idxprom33
  %35 = load i32* %arrayidx34, align 4
  %36 = load i32* %i, align 4
  %add35 = add nsw i32 %36, %35
  store i32 %add35, i32* %i, align 4
  br label %for.cond.17

for.end.36:                                       ; preds = %for.cond.17
  store i32 0, i32* %i, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.50, %for.end.36
  %37 = load i32* %i, align 4
  %38 = load i32* %maxm, align 4
  %cmp38 = icmp sle i32 %37, %38
  br i1 %cmp38, label %for.body.40, label %for.end.52

for.body.40:                                      ; preds = %for.cond.37
  %39 = load i32* %i, align 4
  %idxprom41 = sext i32 %39 to i64
  %40 = load i32** %buckets, align 8
  %arrayidx42 = getelementptr inbounds i32* %40, i64 %idxprom41
  %41 = load i32* %arrayidx42, align 4
  %cmp43 = icmp eq i32 %41, 0
  br i1 %cmp43, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %for.body.40
  br label %if.end.49

if.else:                                          ; preds = %for.body.40
  %42 = load i32* %i, align 4
  %43 = load i32* %i, align 4
  %idxprom46 = sext i32 %43 to i64
  %44 = load i32** %buckets, align 8
  %arrayidx47 = getelementptr inbounds i32* %44, i64 %idxprom46
  %45 = load i32* %arrayidx47, align 4
  %call48 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([9 x i8]* @.str.11.15, i32 0, i32 0), i32 %42, i32 %45)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else, %if.then.45
  br label %for.inc.50

for.inc.50:                                       ; preds = %if.end.49
  %46 = load i32* %i, align 4
  %inc51 = add nsw i32 %46, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond.37

for.end.52:                                       ; preds = %for.cond.37
  %call53 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.12, i32 0, i32 0))
  %47 = load i32** %buckets, align 8
  %call54 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %47)
  %48 = load i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputePartitionNumbering(i32* %numbering) {
entry:
  %retval = alloca i32, align 4
  %numbering.addr = alloca i32*, align 8
  %j = alloca i32, align 4
  %which = alloca i32, align 4
  store i32* %numbering, i32** %numbering.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %numbering.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %j, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %which, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.9, %for.end
  %5 = load i32* %j, align 4
  %6 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.12

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32* %j, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx5 = getelementptr inbounds i32* %8, i64 %idxprom4
  %9 = load i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body.3
  %10 = load i32* %which, align 4
  %inc6 = add nsw i32 %10, 1
  store i32 %inc6, i32* %which, align 4
  %11 = load i32* %j, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i32** %numbering.addr, align 8
  %arrayidx8 = getelementptr inbounds i32* %12, i64 %idxprom7
  store i32 %10, i32* %arrayidx8, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  br label %for.inc.9

for.inc.9:                                        ; preds = %if.end
  %13 = load i32* %j, align 4
  %idxprom10 = sext i32 %13 to i64
  %14 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx11 = getelementptr inbounds i32* %14, i64 %idxprom10
  %15 = load i32* %arrayidx11, align 4
  %16 = load i32* %j, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %j, align 4
  br label %for.cond.1

for.end.12:                                       ; preds = %for.cond.1
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @FindMachineDimensions(i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %try = alloca i32, align 4
  %div = alloca i32, align 4
  store i32 %P, i32* %P.addr, align 4
  %0 = load i32* %P.addr, align 4
  %conv = sitofp i32 %0 to double
  %call = call double @sqrt(double %conv)
  %conv1 = fptosi double %call to i32
  store i32 %conv1, i32* %try, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32* %try, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %P.addr, align 4
  %3 = load i32* %try, align 4
  %div3 = sdiv i32 %2, %3
  store i32 %div3, i32* %div, align 4
  %4 = load i32* %div, align 4
  %5 = load i32* %try, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32* %P.addr, align 4
  %cmp4 = icmp eq i32 %mul, %6
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32* %try, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %try, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load i32* %div, align 4
  store i32 %8, i32* @P_dimi, align 4
  %9 = load i32* %try, align 4
  store i32 %9, i32* @P_dimj, align 4
  %10 = load i32* @P_dimi, align 4
  %11 = load i32* @P_dimj, align 4
  %call6 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([29 x i8]* @.str.13, i32 0, i32 0), i32 %10, i32 %11)
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @EmbeddedOwner(i32 %block) {
entry:
  %block.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 %block, i32* %block.addr, align 4
  %0 = load i32* %block.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block1 = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block1, align 8
  %i = getelementptr inbounds %struct.Block* %2, i32 0, i32 0
  %3 = load i32* %i, align 4
  %idxprom2 = sext i32 %3 to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx3 = getelementptr inbounds i32* %4, i64 %idxprom2
  %5 = load i32* %arrayidx3, align 4
  %idxprom4 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 8), align 8
  %arrayidx5 = getelementptr inbounds i32* %6, i64 %idxprom4
  %7 = load i32* %arrayidx5, align 4
  %8 = load i32* @P_dimi, align 4
  %rem = srem i32 %7, %8
  store i32 %rem, i32* %row, align 4
  %9 = load i32* %block.addr, align 4
  %idxprom6 = sext i32 %9 to i64
  %10 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx7 = getelementptr inbounds %union.Entry* %10, i64 %idxprom6
  %block8 = bitcast %union.Entry* %arrayidx7 to %struct.Block**
  %11 = load %struct.Block** %block8, align 8
  %j = getelementptr inbounds %struct.Block* %11, i32 0, i32 1
  %12 = load i32* %j, align 4
  %idxprom9 = sext i32 %12 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx10 = getelementptr inbounds i32* %13, i64 %idxprom9
  %14 = load i32* %arrayidx10, align 4
  %idxprom11 = sext i32 %14 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 9), align 8
  %arrayidx12 = getelementptr inbounds i32* %15, i64 %idxprom11
  %16 = load i32* %arrayidx12, align 4
  %17 = load i32* @P_dimj, align 4
  %rem13 = srem i32 %16, %17
  store i32 %rem13, i32* %col, align 4
  %18 = load i32* %row, align 4
  %19 = load i32* %col, align 4
  %20 = load i32* @P_dimi, align 4
  %mul = mul nsw i32 %19, %20
  %add = add nsw i32 %18, %mul
  ret i32 %add
}

; Function Attrs: nounwind uwtable
define internal i32 @PreProcessFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %MyNum.addr, align 4
  %1 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @InitRemainingFO(i32 %0, %struct.LocalCopies* %1)
  %2 = load i32* %MyNum.addr, align 4
  %3 = load %struct.LocalCopies** %lc.addr, align 8
  %call1 = call i32 @InitReceivedFO(i32 %2, %struct.LocalCopies* %3)
  %4 = load i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @InitRemainingFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.20, %entry
  %0 = load i32* %k, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.22

for.body:                                         ; preds = %for.cond
  %2 = load i32* %k, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.19, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %k, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %8 = load i32* %i, align 4
  %9 = load i32* %k, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %MyNum.addr, align 4
  %cmp8 = icmp eq i32 %12, -1
  br i1 %cmp8, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.7
  %13 = load i32* %i, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx10 = getelementptr inbounds %union.Entry* %14, i64 %idxprom9
  %block = bitcast %union.Entry* %arrayidx10 to %struct.Block**
  %15 = load %struct.Block** %block, align 8
  %owner = getelementptr inbounds %struct.Block* %15, i32 0, i32 2
  %16 = load i32* %owner, align 4
  %17 = load i32* %MyNum.addr, align 4
  %cmp11 = icmp eq i32 %16, %17
  br i1 %cmp11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %lor.lhs.false, %for.body.7
  %18 = load i32* %i, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx14 = getelementptr inbounds %union.Entry* %19, i64 %idxprom13
  %block15 = bitcast %union.Entry* %arrayidx14 to %struct.Block**
  %20 = load %struct.Block** %block15, align 8
  %nmod = getelementptr inbounds %struct.Block* %20, i32 0, i32 4
  %21 = load i32* %nmod, align 4
  %22 = load i32* %i, align 4
  %idxprom16 = sext i32 %22 to i64
  %23 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx17 = getelementptr inbounds %union.Entry* %23, i64 %idxprom16
  %block18 = bitcast %union.Entry* %arrayidx17 to %struct.Block**
  %24 = load %struct.Block** %block18, align 8
  %remaining = getelementptr inbounds %struct.Block* %24, i32 0, i32 3
  store i32 %21, i32* %remaining, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.12, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %if.end.19

if.end.19:                                        ; preds = %for.end, %for.body
  br label %for.inc.20

for.inc.20:                                       ; preds = %if.end.19
  %26 = load i32* %k, align 4
  %inc21 = add nsw i32 %26, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond

for.end.22:                                       ; preds = %for.cond
  %27 = load i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define internal i32 @InitReceivedFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32* %MyNum.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load i32*** @ToReceive, align 8
  %arrayidx = getelementptr inbounds i32** %4, i64 %idxprom1
  %5 = load i32** %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx2, align 4
  %7 = load i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32* %MyNum.addr, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i32*** @NReceived, align 8
  %arrayidx5 = getelementptr inbounds i32** %9, i64 %idxprom4
  %10 = load i32** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds i32* %10, i64 %idxprom3
  store i32 %6, i32* %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @PreAllocate1FO() {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %0 = load i32* @P, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv1, i32 888)
  %1 = bitcast i8* %call to %struct.BlockList***
  store %struct.BlockList*** %1, %struct.BlockList**** @AllBlocks, align 8
  %2 = load i32* @P, align 4
  %conv2 = sext i32 %2 to i64
  %mul3 = mul i64 %conv2, 8
  %conv4 = trunc i64 %mul3 to i32
  %call5 = call i8* @MyMalloc(i32 %conv4, i32 888)
  %3 = bitcast i8* %call5 to %struct.BlockList***
  store %struct.BlockList*** %3, %struct.BlockList**** @DiagBlock, align 8
  %4 = load i32* @P, align 4
  %conv6 = sext i32 %4 to i64
  %mul7 = mul i64 %conv6, 8
  %conv8 = trunc i64 %mul7 to i32
  %call9 = call i8* @MyMalloc(i32 %conv8, i32 888)
  %5 = bitcast i8* %call9 to i32**
  store i32** %5, i32*** @ToReceive, align 8
  %6 = load i32* @P, align 4
  %conv10 = sext i32 %6 to i64
  %mul11 = mul i64 %conv10, 8
  %conv12 = trunc i64 %mul11 to i32
  %call13 = call i8* @MyMalloc(i32 %conv12, i32 888)
  %7 = bitcast i8* %call13 to i32**
  store i32** %7, i32*** @NReceived, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32* %i, align 4
  %9 = load i32* @P, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv15 = sext i32 %10 to i64
  %mul16 = mul i64 %conv15, 4
  %conv17 = trunc i64 %mul16 to i32
  %11 = load i32* %i, align 4
  %call18 = call i8* @MyMalloc(i32 %conv17, i32 %11)
  %12 = bitcast i8* %call18 to i32*
  %13 = load i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load i32*** @ToReceive, align 8
  %arrayidx = getelementptr inbounds i32** %14, i64 %idxprom
  store i32* %12, i32** %arrayidx, align 8
  %15 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv19 = sext i32 %15 to i64
  %mul20 = mul i64 %conv19, 4
  %conv21 = trunc i64 %mul20 to i32
  %16 = load i32* %i, align 4
  %call22 = call i8* @MyMalloc(i32 %conv21, i32 %16)
  %17 = bitcast i8* %call22 to i32*
  %18 = load i32* %i, align 4
  %idxprom23 = sext i32 %18 to i64
  %19 = load i32*** @NReceived, align 8
  %arrayidx24 = getelementptr inbounds i32** %19, i64 %idxprom23
  store i32* %17, i32** %arrayidx24, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @PreAllocateFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %stor_size = alloca i32, align 4
  %root = alloca i32, align 4
  %update_size = alloca i32, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %conv1 = trunc i64 %mul to i32
  %1 = load i32* %MyNum.addr, align 4
  %call = call i8* @MyMalloc(i32 %conv1, i32 %1)
  %2 = bitcast i8* %call to i32*
  %3 = load %struct.LocalCopies** %lc.addr, align 8
  %link = getelementptr inbounds %struct.LocalCopies* %3, i32 0, i32 2
  store i32* %2, i32** %link, align 8
  %4 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %conv2 = sext i32 %4 to i64
  %mul3 = mul i64 %conv2, 4
  %conv4 = trunc i64 %mul3 to i32
  %5 = load i32* %MyNum.addr, align 4
  %call5 = call i8* @MyMalloc(i32 %conv4, i32 %5)
  %6 = bitcast i8* %call5 to i32*
  %7 = load %struct.LocalCopies** %lc.addr, align 8
  %first = getelementptr inbounds %struct.LocalCopies* %7, i32 0, i32 3
  store i32* %6, i32** %first, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32* %i, align 4
  %9 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %11 = load %struct.LocalCopies** %lc.addr, align 8
  %link7 = getelementptr inbounds %struct.LocalCopies* %11, i32 0, i32 2
  %12 = load i32** %link7, align 8
  %arrayidx = getelementptr inbounds i32* %12, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %13 = load i32* %i, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load %struct.LocalCopies** %lc.addr, align 8
  %first9 = getelementptr inbounds %struct.LocalCopies* %14, i32 0, i32 3
  %15 = load i32** %first9, align 8
  %arrayidx10 = getelementptr inbounds i32* %15, i64 %idxprom8
  store i32 0, i32* %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel = getelementptr inbounds %struct.LocalCopies* %17, i32 0, i32 1
  store i32 0, i32* %max_panel, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.58, %for.end
  %18 = load i32* %i, align 4
  %19 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp12 = icmp slt i32 %18, %19
  br i1 %cmp12, label %for.body.14, label %for.end.62

for.body.14:                                      ; preds = %for.cond.11
  %20 = load i32* %i, align 4
  %idxprom15 = sext i32 %20 to i64
  %21 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx16 = getelementptr inbounds i32* %21, i64 %idxprom15
  %22 = load i32* %arrayidx16, align 4
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then, label %if.end.57

if.then:                                          ; preds = %for.body.14
  %23 = load i32* %i, align 4
  %24 = load i32* %i, align 4
  %idxprom17 = sext i32 %24 to i64
  %25 = load i32** @node, align 8
  %arrayidx18 = getelementptr inbounds i32* %25, i64 %idxprom17
  %26 = load i32* %arrayidx18, align 4
  %add19 = add nsw i32 %23, %26
  %idxprom20 = sext i32 %add19 to i64
  %27 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx21 = getelementptr inbounds i32* %27, i64 %idxprom20
  %28 = load i32* %arrayidx21, align 4
  %29 = load i32* %i, align 4
  %idxprom22 = sext i32 %29 to i64
  %30 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx23 = getelementptr inbounds i32* %30, i64 %idxprom22
  %31 = load i32* %arrayidx23, align 4
  %sub = sub nsw i32 %28, %31
  %32 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel24 = getelementptr inbounds %struct.LocalCopies* %32, i32 0, i32 1
  %33 = load i32* %max_panel24, align 4
  %cmp25 = icmp sgt i32 %sub, %33
  br i1 %cmp25, label %if.then.27, label %if.end

if.then.27:                                       ; preds = %if.then
  %34 = load i32* %i, align 4
  %35 = load i32* %i, align 4
  %idxprom28 = sext i32 %35 to i64
  %36 = load i32** @node, align 8
  %arrayidx29 = getelementptr inbounds i32* %36, i64 %idxprom28
  %37 = load i32* %arrayidx29, align 4
  %add30 = add nsw i32 %34, %37
  %idxprom31 = sext i32 %add30 to i64
  %38 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx32 = getelementptr inbounds i32* %38, i64 %idxprom31
  %39 = load i32* %arrayidx32, align 4
  %40 = load i32* %i, align 4
  %idxprom33 = sext i32 %40 to i64
  %41 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx34 = getelementptr inbounds i32* %41, i64 %idxprom33
  %42 = load i32* %arrayidx34, align 4
  %sub35 = sub nsw i32 %39, %42
  %43 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel36 = getelementptr inbounds %struct.LocalCopies* %43, i32 0, i32 1
  store i32 %sub35, i32* %max_panel36, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.27, %if.then
  %44 = load i32* %i, align 4
  %add37 = add nsw i32 %44, 1
  %idxprom38 = sext i32 %add37 to i64
  %45 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx39 = getelementptr inbounds i32* %45, i64 %idxprom38
  %46 = load i32* %arrayidx39, align 4
  %47 = load i32* %i, align 4
  %idxprom40 = sext i32 %47 to i64
  %48 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx41 = getelementptr inbounds i32* %48, i64 %idxprom40
  %49 = load i32* %arrayidx41, align 4
  %sub42 = sub nsw i32 %46, %49
  %50 = load i32* %i, align 4
  %idxprom43 = sext i32 %50 to i64
  %51 = load i32** @node, align 8
  %arrayidx44 = getelementptr inbounds i32* %51, i64 %idxprom43
  %52 = load i32* %arrayidx44, align 4
  %sub45 = sub nsw i32 %sub42, %52
  store i32 %sub45, i32* %j, align 4
  %53 = load i32* %j, align 4
  %54 = load i32* %j, align 4
  %add46 = add nsw i32 %54, 1
  %mul47 = mul nsw i32 %53, %add46
  %div = sdiv i32 %mul47, 2
  %55 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel48 = getelementptr inbounds %struct.LocalCopies* %55, i32 0, i32 1
  %56 = load i32* %max_panel48, align 4
  %cmp49 = icmp sgt i32 %div, %56
  br i1 %cmp49, label %if.then.51, label %if.end.56

if.then.51:                                       ; preds = %if.end
  %57 = load i32* %j, align 4
  %58 = load i32* %j, align 4
  %add52 = add nsw i32 %58, 1
  %mul53 = mul nsw i32 %57, %add52
  %div54 = sdiv i32 %mul53, 2
  %59 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel55 = getelementptr inbounds %struct.LocalCopies* %59, i32 0, i32 1
  store i32 %div54, i32* %max_panel55, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.51, %if.end
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %for.body.14
  br label %for.inc.58

for.inc.58:                                       ; preds = %if.end.57
  %60 = load i32* %i, align 4
  %idxprom59 = sext i32 %60 to i64
  %61 = load i32** @node, align 8
  %arrayidx60 = getelementptr inbounds i32* %61, i64 %idxprom59
  %62 = load i32* %arrayidx60, align 4
  %63 = load i32* %i, align 4
  %add61 = add nsw i32 %63, %62
  store i32 %add61, i32* %i, align 4
  br label %for.cond.11

for.end.62:                                       ; preds = %for.cond.11
  %64 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  %65 = load i32* @BS, align 4
  %cmp63 = icmp sgt i32 %64, %65
  br i1 %cmp63, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %for.end.62
  %66 = load i32* @BS, align 4
  %67 = load i32* @BS, align 4
  %mul66 = mul nsw i32 %66, %67
  store i32 %mul66, i32* %stor_size, align 4
  %68 = load i32* %stor_size, align 4
  %conv67 = sext i32 %68 to i64
  %mul68 = mul i64 %conv67, 8
  %conv69 = trunc i64 %mul68 to i32
  %69 = load i32* %MyNum.addr, align 4
  %call70 = call i8* @MyMalloc(i32 %conv69, i32 %69)
  %70 = bitcast i8* %call70 to double*
  %71 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp = getelementptr inbounds %struct.LocalCopies* %71, i32 0, i32 0
  store double* %70, double** %blktmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.78, %if.then.65
  %72 = load i32* %i, align 4
  %73 = load i32* %stor_size, align 4
  %cmp72 = icmp slt i32 %72, %73
  br i1 %cmp72, label %for.body.74, label %for.end.80

for.body.74:                                      ; preds = %for.cond.71
  %74 = load i32* %i, align 4
  %idxprom75 = sext i32 %74 to i64
  %75 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp76 = getelementptr inbounds %struct.LocalCopies* %75, i32 0, i32 0
  %76 = load double** %blktmp76, align 8
  %arrayidx77 = getelementptr inbounds double* %76, i64 %idxprom75
  store double 0.000000e+00, double* %arrayidx77, align 8
  br label %for.inc.78

for.inc.78:                                       ; preds = %for.body.74
  %77 = load i32* %i, align 4
  %inc79 = add nsw i32 %77, 1
  store i32 %inc79, i32* %i, align 4
  br label %for.cond.71

for.end.80:                                       ; preds = %for.cond.71
  br label %if.end.82

if.else:                                          ; preds = %for.end.62
  %78 = load %struct.LocalCopies** %lc.addr, align 8
  %blktmp81 = getelementptr inbounds %struct.LocalCopies* %78, i32 0, i32 0
  store double* null, double** %blktmp81, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.else, %for.end.80
  %79 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  %80 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  %mul83 = mul nsw i32 %79, %80
  store i32 %mul83, i32* %stor_size, align 4
  %81 = load i32* %stor_size, align 4
  %conv84 = sext i32 %81 to i64
  %mul85 = mul i64 %conv84, 8
  %conv86 = trunc i64 %mul85 to i32
  %82 = load i32* %MyNum.addr, align 4
  %call87 = call i8* @MyMalloc(i32 %conv86, i32 %82)
  %83 = bitcast i8* %call87 to double*
  %84 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp = getelementptr inbounds %struct.LocalCopies* %84, i32 0, i32 5
  store double* %83, double** %updatetmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.88

for.cond.88:                                      ; preds = %for.inc.95, %if.end.82
  %85 = load i32* %i, align 4
  %86 = load i32* %stor_size, align 4
  %cmp89 = icmp slt i32 %85, %86
  br i1 %cmp89, label %for.body.91, label %for.end.97

for.body.91:                                      ; preds = %for.cond.88
  %87 = load i32* %i, align 4
  %idxprom92 = sext i32 %87 to i64
  %88 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp93 = getelementptr inbounds %struct.LocalCopies* %88, i32 0, i32 5
  %89 = load double** %updatetmp93, align 8
  %arrayidx94 = getelementptr inbounds double* %89, i64 %idxprom92
  store double 0.000000e+00, double* %arrayidx94, align 8
  br label %for.inc.95

for.inc.95:                                       ; preds = %for.body.91
  %90 = load i32* %i, align 4
  %inc96 = add nsw i32 %90, 1
  store i32 %inc96, i32* %i, align 4
  br label %for.cond.88

for.end.97:                                       ; preds = %for.cond.88
  %91 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 15), align 4
  %conv98 = sext i32 %91 to i64
  %mul99 = mul i64 %conv98, 4
  %conv100 = trunc i64 %mul99 to i32
  %92 = load i32* %MyNum.addr, align 4
  %call101 = call i8* @MyMalloc(i32 %conv100, i32 %92)
  %93 = bitcast i8* %call101 to i32*
  %94 = load %struct.LocalCopies** %lc.addr, align 8
  %relative = getelementptr inbounds %struct.LocalCopies* %94, i32 0, i32 6
  store i32* %93, i32** %relative, align 8
  %95 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv102 = sext i32 %95 to i64
  %mul103 = mul i64 %conv102, 8
  %conv104 = trunc i64 %mul103 to i32
  %96 = load i32* %MyNum.addr, align 4
  %call105 = call i8* @MyMalloc(i32 %conv104, i32 %96)
  %97 = bitcast i8* %call105 to %struct.BlockList**
  %98 = load i32* %MyNum.addr, align 4
  %idxprom106 = sext i32 %98 to i64
  %99 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx107 = getelementptr inbounds %struct.BlockList*** %99, i64 %idxprom106
  store %struct.BlockList** %97, %struct.BlockList*** %arrayidx107, align 8
  %100 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %conv108 = sext i32 %100 to i64
  %mul109 = mul i64 %conv108, 8
  %conv110 = trunc i64 %mul109 to i32
  %101 = load i32* %MyNum.addr, align 4
  %call111 = call i8* @MyMalloc(i32 %conv110, i32 %101)
  %102 = bitcast i8* %call111 to %struct.BlockList**
  %103 = load i32* %MyNum.addr, align 4
  %idxprom112 = sext i32 %103 to i64
  %104 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx113 = getelementptr inbounds %struct.BlockList*** %104, i64 %idxprom112
  store %struct.BlockList** %102, %struct.BlockList*** %arrayidx113, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.114

for.cond.114:                                     ; preds = %for.inc.126, %for.end.97
  %105 = load i32* %i, align 4
  %106 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp115 = icmp slt i32 %105, %106
  br i1 %cmp115, label %for.body.117, label %for.end.128

for.body.117:                                     ; preds = %for.cond.114
  %107 = load i32* %i, align 4
  %idxprom118 = sext i32 %107 to i64
  %108 = load i32* %MyNum.addr, align 4
  %idxprom119 = sext i32 %108 to i64
  %109 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx120 = getelementptr inbounds %struct.BlockList*** %109, i64 %idxprom119
  %110 = load %struct.BlockList*** %arrayidx120, align 8
  %arrayidx121 = getelementptr inbounds %struct.BlockList** %110, i64 %idxprom118
  store %struct.BlockList* null, %struct.BlockList** %arrayidx121, align 8
  %111 = load i32* %i, align 4
  %idxprom122 = sext i32 %111 to i64
  %112 = load i32* %MyNum.addr, align 4
  %idxprom123 = sext i32 %112 to i64
  %113 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx124 = getelementptr inbounds %struct.BlockList*** %113, i64 %idxprom123
  %114 = load %struct.BlockList*** %arrayidx124, align 8
  %arrayidx125 = getelementptr inbounds %struct.BlockList** %114, i64 %idxprom122
  store %struct.BlockList* null, %struct.BlockList** %arrayidx125, align 8
  br label %for.inc.126

for.inc.126:                                      ; preds = %for.body.117
  %115 = load i32* %i, align 4
  %inc127 = add nsw i32 %115, 1
  store i32 %inc127, i32* %i, align 4
  br label %for.cond.114

for.end.128:                                      ; preds = %for.cond.114
  %116 = load i32* %MyNum.addr, align 4
  %idxprom129 = sext i32 %116 to i64
  %117 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx130 = getelementptr inbounds i32* %117, i64 %idxprom129
  %118 = load i32* %arrayidx130, align 4
  store i32 %118, i32* %i, align 4
  br label %for.cond.131

for.cond.131:                                     ; preds = %for.inc.173, %for.end.128
  %119 = load i32* %i, align 4
  %120 = load i32* %MyNum.addr, align 4
  %add132 = add nsw i32 %120, 1
  %idxprom133 = sext i32 %add132 to i64
  %121 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx134 = getelementptr inbounds i32* %121, i64 %idxprom133
  %122 = load i32* %arrayidx134, align 4
  %cmp135 = icmp slt i32 %119, %122
  br i1 %cmp135, label %for.body.137, label %for.end.175

for.body.137:                                     ; preds = %for.cond.131
  %123 = load i32* %i, align 4
  %idxprom138 = sext i32 %123 to i64
  %124 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx139 = getelementptr inbounds i32* %124, i64 %idxprom138
  %125 = load i32* %arrayidx139, align 4
  store i32 %125, i32* %root, align 4
  %126 = load i32* %root, align 4
  %add140 = add nsw i32 %126, 1
  %idxprom141 = sext i32 %add140 to i64
  %127 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx142 = getelementptr inbounds i32* %127, i64 %idxprom141
  %128 = load i32* %arrayidx142, align 4
  %129 = load i32* %root, align 4
  %idxprom143 = sext i32 %129 to i64
  %130 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx144 = getelementptr inbounds i32* %130, i64 %idxprom143
  %131 = load i32* %arrayidx144, align 4
  %sub145 = sub nsw i32 %128, %131
  %sub146 = sub nsw i32 %sub145, 1
  store i32 %sub146, i32* %update_size, align 4
  %132 = load i32* %update_size, align 4
  %133 = load i32* %update_size, align 4
  %add147 = add nsw i32 %133, 1
  %mul148 = mul nsw i32 %132, %add147
  %div149 = sdiv i32 %mul148, 2
  store i32 %div149, i32* %update_size, align 4
  %134 = load i32* %update_size, align 4
  %tobool150 = icmp ne i32 %134, 0
  br i1 %tobool150, label %if.then.151, label %if.else.169

if.then.151:                                      ; preds = %for.body.137
  %135 = load i32* %update_size, align 4
  %conv152 = sext i32 %135 to i64
  %mul153 = mul i64 %conv152, 8
  %conv154 = trunc i64 %mul153 to i32
  %136 = load i32* %MyNum.addr, align 4
  %call155 = call i8* @MyMalloc(i32 %conv154, i32 %136)
  %137 = bitcast i8* %call155 to double*
  %138 = load i32* %i, align 4
  %idxprom156 = sext i32 %138 to i64
  %139 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx157 = getelementptr inbounds double** %139, i64 %idxprom156
  store double* %137, double** %arrayidx157, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond.158

for.cond.158:                                     ; preds = %for.inc.166, %if.then.151
  %140 = load i32* %j, align 4
  %141 = load i32* %update_size, align 4
  %cmp159 = icmp slt i32 %140, %141
  br i1 %cmp159, label %for.body.161, label %for.end.168

for.body.161:                                     ; preds = %for.cond.158
  %142 = load i32* %j, align 4
  %idxprom162 = sext i32 %142 to i64
  %143 = load i32* %i, align 4
  %idxprom163 = sext i32 %143 to i64
  %144 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx164 = getelementptr inbounds double** %144, i64 %idxprom163
  %145 = load double** %arrayidx164, align 8
  %arrayidx165 = getelementptr inbounds double* %145, i64 %idxprom162
  store double 0.000000e+00, double* %arrayidx165, align 8
  br label %for.inc.166

for.inc.166:                                      ; preds = %for.body.161
  %146 = load i32* %j, align 4
  %inc167 = add nsw i32 %146, 1
  store i32 %inc167, i32* %j, align 4
  br label %for.cond.158

for.end.168:                                      ; preds = %for.cond.158
  br label %if.end.172

if.else.169:                                      ; preds = %for.body.137
  %147 = load i32* %i, align 4
  %idxprom170 = sext i32 %147 to i64
  %148 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx171 = getelementptr inbounds double** %148, i64 %idxprom170
  store double* null, double** %arrayidx171, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.else.169, %for.end.168
  br label %for.inc.173

for.inc.173:                                      ; preds = %if.end.172
  %149 = load i32* %i, align 4
  %inc174 = add nsw i32 %149, 1
  store i32 %inc174, i32* %i, align 4
  br label %for.cond.131

for.end.175:                                      ; preds = %for.cond.131
  %150 = load i32* %retval
  ret i32 %150
}

; Function Attrs: nounwind uwtable
define internal i32 @BNumericSolveFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.LocalCopies** %lc.addr, align 8
  %link = getelementptr inbounds %struct.LocalCopies* %3, i32 0, i32 2
  %4 = load i32** %link, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel = getelementptr inbounds %struct.LocalCopies* %6, i32 0, i32 1
  %7 = load i32* %max_panel, align 4
  %conv = sext i32 %7 to i64
  %mul = mul i64 %conv, 8
  %conv1 = trunc i64 %mul to i32
  %8 = load i32* %MyNum.addr, align 4
  %call = call i8* @MyMalloc(i32 %conv1, i32 %8)
  %9 = bitcast i8* %call to double*
  %10 = load %struct.LocalCopies** %lc.addr, align 8
  %storage = getelementptr inbounds %struct.LocalCopies* %10, i32 0, i32 4
  store double* %9, double** %storage, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.10, %for.end
  %11 = load i32* %i, align 4
  %12 = load %struct.LocalCopies** %lc.addr, align 8
  %max_panel3 = getelementptr inbounds %struct.LocalCopies* %12, i32 0, i32 1
  %13 = load i32* %max_panel3, align 4
  %cmp4 = icmp slt i32 %11, %13
  br i1 %cmp4, label %for.body.6, label %for.end.12

for.body.6:                                       ; preds = %for.cond.2
  %14 = load i32* %i, align 4
  %idxprom7 = sext i32 %14 to i64
  %15 = load %struct.LocalCopies** %lc.addr, align 8
  %storage8 = getelementptr inbounds %struct.LocalCopies* %15, i32 0, i32 4
  %16 = load double** %storage8, align 8
  %arrayidx9 = getelementptr inbounds double* %16, i64 %idxprom7
  store double 0.000000e+00, double* %arrayidx9, align 8
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.body.6
  %17 = load i32* %i, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond.2

for.end.12:                                       ; preds = %for.cond.2
  %18 = load i32* %MyNum.addr, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx14 = getelementptr inbounds i32* %19, i64 %idxprom13
  %20 = load i32* %arrayidx14, align 4
  store i32 %20, i32* %i, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.22, %for.end.12
  %21 = load i32* %i, align 4
  %22 = load i32* %MyNum.addr, align 4
  %add = add nsw i32 %22, 1
  %idxprom16 = sext i32 %add to i64
  %23 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx17 = getelementptr inbounds i32* %23, i64 %idxprom16
  %24 = load i32* %arrayidx17, align 4
  %cmp18 = icmp slt i32 %21, %24
  br i1 %cmp18, label %for.body.20, label %for.end.24

for.body.20:                                      ; preds = %for.cond.15
  %25 = load i32* %i, align 4
  %26 = load i32* %MyNum.addr, align 4
  %27 = load %struct.LocalCopies** %lc.addr, align 8
  %call21 = call i32 @FactorLLDomain(i32 %25, i32 %26, %struct.LocalCopies* %27)
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.body.20
  %28 = load i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond.15

for.end.24:                                       ; preds = %for.cond.15
  %29 = load %struct.LocalCopies** %lc.addr, align 8
  %storage25 = getelementptr inbounds %struct.LocalCopies* %29, i32 0, i32 4
  %30 = load double** %storage25, align 8
  %call26 = call i32 (double*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (double*, ...)*)(double* %30)
  %31 = load %struct.LocalCopies** %lc.addr, align 8
  %storage27 = getelementptr inbounds %struct.LocalCopies* %31, i32 0, i32 4
  store double* null, double** %storage27, align 8
  %32 = load i32* %MyNum.addr, align 4
  %33 = load %struct.LocalCopies** %lc.addr, align 8
  %call28 = call i32 @DriveParallelFO(i32 %32, %struct.LocalCopies* %33)
  %34 = load i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @DriveParallelFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %some = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  store i32 0, i32* %some, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.15, label %if.then

if.then:                                          ; preds = %for.body
  store i32 1, i32* %some, align 4
  %5 = load i32* %j, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx4 = getelementptr inbounds %union.Entry* %8, i64 %idxprom3
  %block = bitcast %union.Entry* %arrayidx4 to %struct.Block**
  %9 = load %struct.Block** %block, align 8
  %owner = getelementptr inbounds %struct.Block* %9, i32 0, i32 2
  %10 = load i32* %owner, align 4
  %11 = load i32* %MyNum.addr, align 4
  %cmp5 = icmp eq i32 %10, %11
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %12 = load i32* %j, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %13, i64 %idxprom6
  %14 = load i32* %arrayidx7, align 4
  %idxprom8 = sext i32 %14 to i64
  %15 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx9 = getelementptr inbounds %union.Entry* %15, i64 %idxprom8
  %block10 = bitcast %union.Entry* %arrayidx9 to %struct.Block**
  %16 = load %struct.Block** %block10, align 8
  %remaining = getelementptr inbounds %struct.Block* %16, i32 0, i32 3
  %17 = load i32* %remaining, align 4
  %cmp11 = icmp eq i32 %17, 0
  br i1 %cmp11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %land.lhs.true
  %18 = load i32* %j, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx14 = getelementptr inbounds i32* %19, i64 %idxprom13
  %20 = load i32* %arrayidx14, align 4
  %21 = load i32* %MyNum.addr, align 4
  %22 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @BlockReadyFO(i32 %20, i32 %21, %struct.LocalCopies* %22)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %land.lhs.true, %if.then
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %23 = load i32* %j, align 4
  %idxprom16 = sext i32 %23 to i64
  %24 = load i32** @node, align 8
  %arrayidx17 = getelementptr inbounds i32* %24, i64 %idxprom16
  %25 = load i32* %arrayidx17, align 4
  %26 = load i32* %j, align 4
  %add = add nsw i32 %26, %25
  store i32 %add, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load i32* %some, align 4
  %tobool18 = icmp ne i32 %27, 0
  br i1 %tobool18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %for.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.19
  %28 = load i32* %MyNum.addr, align 4
  %29 = load %struct.LocalCopies** %lc.addr, align 8
  %call20 = call i32 @HandleTaskFO(i32 %28, %struct.LocalCopies* %29)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.22

if.end.22:                                        ; preds = %while.end, %for.end
  %30 = load i32* %MyNum.addr, align 4
  %31 = load %struct.LocalCopies** %lc.addr, align 8
  %call23 = call i32 @TaskWaiting(i32 %30, %struct.LocalCopies* %31)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end.22
  %call26 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.16, i32 0, i32 0))
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %if.end.22
  %32 = load i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal i32 @BlockReadyFO(i32 %block, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %block.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %column = alloca i32, align 4
  %diagbl = alloca %struct.BlockList*, align 8
  store i32 %block, i32* %block.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %block.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block1 = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block1, align 8
  %i = getelementptr inbounds %struct.Block* %2, i32 0, i32 0
  %3 = load i32* %i, align 4
  %4 = load i32* %block.addr, align 4
  %idxprom2 = sext i32 %4 to i64
  %5 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx3 = getelementptr inbounds %union.Entry* %5, i64 %idxprom2
  %block4 = bitcast %union.Entry* %arrayidx3 to %struct.Block**
  %6 = load %struct.Block** %block4, align 8
  %j = getelementptr inbounds %struct.Block* %6, i32 0, i32 1
  %7 = load i32* %j, align 4
  %cmp = icmp eq i32 %3, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i32* %block.addr, align 4
  %9 = load i32* %MyNum.addr, align 4
  %10 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @BFac(i32 %8, i32 %9, %struct.LocalCopies* %10)
  %11 = load i32* %block.addr, align 4
  %12 = load i32* %MyNum.addr, align 4
  %13 = load %struct.LocalCopies** %lc.addr, align 8
  %call5 = call i32 @BlockDoneFO(i32 %11, i32 %12, %struct.LocalCopies* %13)
  br label %if.end.37

if.else:                                          ; preds = %entry
  %14 = load i32* %block.addr, align 4
  %idxprom6 = sext i32 %14 to i64
  %15 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx7 = getelementptr inbounds %union.Entry* %15, i64 %idxprom6
  %block8 = bitcast %union.Entry* %arrayidx7 to %struct.Block**
  %16 = load %struct.Block** %block8, align 8
  %j9 = getelementptr inbounds %struct.Block* %16, i32 0, i32 1
  %17 = load i32* %j9, align 4
  %idxprom10 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx11 = getelementptr inbounds i32* %18, i64 %idxprom10
  %19 = load i32* %arrayidx11, align 4
  store i32 %19, i32* %column, align 4
  %20 = load i32* %column, align 4
  %idxprom12 = sext i32 %20 to i64
  %21 = load i32* %MyNum.addr, align 4
  %idxprom13 = sext i32 %21 to i64
  %22 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx14 = getelementptr inbounds %struct.BlockList*** %22, i64 %idxprom13
  %23 = load %struct.BlockList*** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds %struct.BlockList** %23, i64 %idxprom12
  %24 = load %struct.BlockList** %arrayidx15, align 8
  %tobool = icmp ne %struct.BlockList* %24, null
  br i1 %tobool, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %if.else
  %25 = load i32* %column, align 4
  %idxprom17 = sext i32 %25 to i64
  %26 = load i32* %MyNum.addr, align 4
  %idxprom18 = sext i32 %26 to i64
  %27 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx19 = getelementptr inbounds %struct.BlockList*** %27, i64 %idxprom18
  %28 = load %struct.BlockList*** %arrayidx19, align 8
  %arrayidx20 = getelementptr inbounds %struct.BlockList** %28, i64 %idxprom17
  %29 = load %struct.BlockList** %arrayidx20, align 8
  store %struct.BlockList* %29, %struct.BlockList** %diagbl, align 8
  %30 = load i32* %block.addr, align 4
  %idxprom21 = sext i32 %30 to i64
  %31 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx22 = getelementptr inbounds %union.Entry* %31, i64 %idxprom21
  %block23 = bitcast %union.Entry* %arrayidx22 to %struct.Block**
  %32 = load %struct.Block** %block23, align 8
  %j24 = getelementptr inbounds %struct.Block* %32, i32 0, i32 1
  %33 = load i32* %j24, align 4
  %idxprom25 = sext i32 %33 to i64
  %34 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx26 = getelementptr inbounds i32* %34, i64 %idxprom25
  %35 = load i32* %arrayidx26, align 4
  %36 = load i32* %block.addr, align 4
  %37 = load %struct.BlockList** %diagbl, align 8
  %length = getelementptr inbounds %struct.BlockList* %37, i32 0, i32 3
  %38 = load i32* %length, align 4
  %39 = load i32* %block.addr, align 4
  %idxprom27 = sext i32 %39 to i64
  %40 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx28 = getelementptr inbounds %union.Entry* %40, i64 %idxprom27
  %block29 = bitcast %union.Entry* %arrayidx28 to %struct.Block**
  %41 = load %struct.Block** %block29, align 8
  %length30 = getelementptr inbounds %struct.Block* %41, i32 0, i32 5
  %42 = load i32* %length30, align 4
  %43 = load %struct.BlockList** %diagbl, align 8
  %nz = getelementptr inbounds %struct.BlockList* %43, i32 0, i32 5
  %44 = load double** %nz, align 8
  %45 = load i32* %block.addr, align 4
  %idxprom31 = sext i32 %45 to i64
  %46 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx32 = getelementptr inbounds %union.Entry* %46, i64 %idxprom31
  %block33 = bitcast %union.Entry* %arrayidx32 to %struct.Block**
  %47 = load %struct.Block** %block33, align 8
  %nz34 = getelementptr inbounds %struct.Block* %47, i32 0, i32 11
  %48 = load double** %nz34, align 8
  %49 = load i32* %MyNum.addr, align 4
  %50 = load %struct.LocalCopies** %lc.addr, align 8
  %call35 = call i32 @BDiv(i32 %35, i32 %36, i32 %38, i32 %42, double* %44, double* %48, i32 %49, %struct.LocalCopies* %50)
  %51 = load i32* %block.addr, align 4
  %52 = load i32* %MyNum.addr, align 4
  %53 = load %struct.LocalCopies** %lc.addr, align 8
  %call36 = call i32 @BlockDoneFO(i32 %51, i32 %52, %struct.LocalCopies* %53)
  br label %if.end

if.end:                                           ; preds = %if.then.16, %if.else
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %if.then
  %54 = load i32* %retval
  ret i32 %54
}

; Function Attrs: nounwind uwtable
define internal i32 @HandleTaskFO(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %desti = alloca i32, align 4
  %destj = alloca i32, align 4
  %src = alloca i32, align 4
  %update = alloca %struct.Update*, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %MyNum.addr, align 4
  %1 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @GetBlock(i32* %desti, i32* %destj, i32* %src, %struct.Update** %update, i32 %0, %struct.LocalCopies* %1)
  %2 = load i32* %desti, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct.Update** %update, align 8
  %cmp1 = icmp eq %struct.Update* %3, inttoptr (i64 -19 to %struct.Update*)
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %4 = load i32* %src, align 4
  %5 = load i32* %desti, align 4
  %6 = load i32* %destj, align 4
  %7 = load i32* %MyNum.addr, align 4
  %8 = load %struct.LocalCopies** %lc.addr, align 8
  %call3 = call i32 @HandleUpdate2FO(i32 %4, i32 %5, i32 %6, i32 %7, %struct.LocalCopies* %8)
  br label %if.end.47

if.else.4:                                        ; preds = %if.else
  %9 = load %struct.Update** %update, align 8
  %cmp5 = icmp ne %struct.Update* %9, null
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %if.else.4
  br label %if.end.46

if.else.7:                                        ; preds = %if.else.4
  %10 = load i32* %src, align 4
  %idxprom = sext i32 %10 to i64
  %11 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %11, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %12 = load %struct.Block** %block, align 8
  %i = getelementptr inbounds %struct.Block* %12, i32 0, i32 0
  %13 = load i32* %i, align 4
  %14 = load i32* %src, align 4
  %idxprom8 = sext i32 %14 to i64
  %15 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx9 = getelementptr inbounds %union.Entry* %15, i64 %idxprom8
  %block10 = bitcast %union.Entry* %arrayidx9 to %struct.Block**
  %16 = load %struct.Block** %block10, align 8
  %j = getelementptr inbounds %struct.Block* %16, i32 0, i32 1
  %17 = load i32* %j, align 4
  %cmp11 = icmp eq i32 %13, %17
  br i1 %cmp11, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %if.else.7
  %18 = load i32* %src, align 4
  %19 = load i32* %MyNum.addr, align 4
  %20 = load %struct.LocalCopies** %lc.addr, align 8
  %call13 = call i32 @DiagReceived(i32 %18, i32 %19, %struct.LocalCopies* %20)
  br label %if.end

if.else.14:                                       ; preds = %if.else.7
  %21 = load i32* %src, align 4
  %22 = load i32* %MyNum.addr, align 4
  %23 = load %struct.LocalCopies** %lc.addr, align 8
  %call15 = call i32 @BlockReceived(i32 %21, i32 %22, %struct.LocalCopies* %23)
  br label %if.end

if.end:                                           ; preds = %if.else.14, %if.then.12
  %24 = load i32* %src, align 4
  %idxprom16 = sext i32 %24 to i64
  %25 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx17 = getelementptr inbounds %union.Entry* %25, i64 %idxprom16
  %block18 = bitcast %union.Entry* %arrayidx17 to %struct.Block**
  %26 = load %struct.Block** %block18, align 8
  %j19 = getelementptr inbounds %struct.Block* %26, i32 0, i32 1
  %27 = load i32* %j19, align 4
  %idxprom20 = sext i32 %27 to i64
  %28 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx21 = getelementptr inbounds i32* %28, i64 %idxprom20
  %29 = load i32* %arrayidx21, align 4
  %idxprom22 = sext i32 %29 to i64
  %30 = load i32* %MyNum.addr, align 4
  %idxprom23 = sext i32 %30 to i64
  %31 = load i32*** @NReceived, align 8
  %arrayidx24 = getelementptr inbounds i32** %31, i64 %idxprom23
  %32 = load i32** %arrayidx24, align 8
  %arrayidx25 = getelementptr inbounds i32* %32, i64 %idxprom22
  %33 = load i32* %arrayidx25, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %arrayidx25, align 4
  %34 = load i32* %src, align 4
  %idxprom26 = sext i32 %34 to i64
  %35 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx27 = getelementptr inbounds %union.Entry* %35, i64 %idxprom26
  %block28 = bitcast %union.Entry* %arrayidx27 to %struct.Block**
  %36 = load %struct.Block** %block28, align 8
  %j29 = getelementptr inbounds %struct.Block* %36, i32 0, i32 1
  %37 = load i32* %j29, align 4
  %idxprom30 = sext i32 %37 to i64
  %38 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx31 = getelementptr inbounds i32* %38, i64 %idxprom30
  %39 = load i32* %arrayidx31, align 4
  %idxprom32 = sext i32 %39 to i64
  %40 = load i32* %MyNum.addr, align 4
  %idxprom33 = sext i32 %40 to i64
  %41 = load i32*** @NReceived, align 8
  %arrayidx34 = getelementptr inbounds i32** %41, i64 %idxprom33
  %42 = load i32** %arrayidx34, align 8
  %arrayidx35 = getelementptr inbounds i32* %42, i64 %idxprom32
  %43 = load i32* %arrayidx35, align 4
  %cmp36 = icmp eq i32 %43, 0
  br i1 %cmp36, label %if.then.37, label %if.end.45

if.then.37:                                       ; preds = %if.end
  %44 = load i32* %MyNum.addr, align 4
  %45 = load i32* %src, align 4
  %idxprom38 = sext i32 %45 to i64
  %46 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx39 = getelementptr inbounds %union.Entry* %46, i64 %idxprom38
  %block40 = bitcast %union.Entry* %arrayidx39 to %struct.Block**
  %47 = load %struct.Block** %block40, align 8
  %j41 = getelementptr inbounds %struct.Block* %47, i32 0, i32 1
  %48 = load i32* %j41, align 4
  %idxprom42 = sext i32 %48 to i64
  %49 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx43 = getelementptr inbounds i32* %49, i64 %idxprom42
  %50 = load i32* %arrayidx43, align 4
  %call44 = call i32 @FreeColumnListFO(i32 %44, i32 %50)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.37, %if.end
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then.6
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.2
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.48, %if.then
  %51 = load i32* %retval
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define internal i32 @HandleUpdate2FO(i32 %which_domain, i32 %bli, i32 %blj, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %which_domain.addr = alloca i32, align 4
  %bli.addr = alloca i32, align 4
  %blj.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %dest_block = alloca i32, align 4
  %desti = alloca i32, align 4
  %destj = alloca i32, align 4
  %relative_i = alloca i32*, align 8
  %relative_j = alloca i32*, align 8
  %stride = alloca i32, align 4
  %update = alloca double*, align 8
  store i32 %which_domain, i32* %which_domain.addr, align 4
  store i32 %bli, i32* %bli.addr, align 4
  store i32 %blj, i32* %blj.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %bli.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block, align 8
  %i = getelementptr inbounds %struct.Block* %2, i32 0, i32 0
  %3 = load i32* %i, align 4
  store i32 %3, i32* %desti, align 4
  %4 = load i32* %blj.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %5 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %5, i64 %idxprom1
  %block3 = bitcast %union.Entry* %arrayidx2 to %struct.Block**
  %6 = load %struct.Block** %block3, align 8
  %i4 = getelementptr inbounds %struct.Block* %6, i32 0, i32 0
  %7 = load i32* %i4, align 4
  store i32 %7, i32* %destj, align 4
  %8 = load i32* %desti, align 4
  %9 = load i32* %destj, align 4
  %call = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %8, i32 %9)
  store i32 %call, i32* %dest_block, align 4
  %10 = load i32* %dest_block, align 4
  %cmp = icmp eq i32 %10, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %11 = load i32* %desti, align 4
  %12 = load i32* %destj, align 4
  %call5 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.2.17, i32 0, i32 0), i32 %11, i32 %12)
  br label %if.end.12

if.else:                                          ; preds = %entry
  %13 = load i32* %dest_block, align 4
  %idxprom6 = sext i32 %13 to i64
  %14 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx7 = getelementptr inbounds %union.Entry* %14, i64 %idxprom6
  %block8 = bitcast %union.Entry* %arrayidx7 to %struct.Block**
  %15 = load %struct.Block** %block8, align 8
  %owner = getelementptr inbounds %struct.Block* %15, i32 0, i32 2
  %16 = load i32* %owner, align 4
  %17 = load i32* %MyNum.addr, align 4
  %cmp9 = icmp ne i32 %16, %17
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.else
  %18 = load i32* %desti, align 4
  %19 = load i32* %destj, align 4
  %call11 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.3.18, i32 0, i32 0), i32 %18, i32 %19)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %20 = load i32* %which_domain.addr, align 4
  %21 = load i32* %bli.addr, align 4
  %22 = load i32* %blj.addr, align 4
  %23 = load i32* %MyNum.addr, align 4
  %24 = load %struct.LocalCopies** %lc.addr, align 8
  %call13 = call i32 (i32, i32, i32, double**, i32*, i32, %struct.LocalCopies*, ...) *bitcast (i32 (i32, i32, i32, double**, i32*)* @FindBlockUpdate to i32 (i32, i32, i32, double**, i32*, i32, %struct.LocalCopies*, ...)*)(i32 %20, i32 %21, i32 %22, double** %update, i32* %stride, i32 %23, %struct.LocalCopies* %24)
  %25 = load i32* %bli.addr, align 4
  %idxprom14 = sext i32 %25 to i64
  %26 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx15 = getelementptr inbounds %union.Entry* %26, i64 %idxprom14
  %block16 = bitcast %union.Entry* %arrayidx15 to %struct.Block**
  %27 = load %struct.Block** %block16, align 8
  %structure = getelementptr inbounds %struct.Block* %27, i32 0, i32 9
  %28 = load i32** %structure, align 8
  %tobool = icmp ne i32* %28, null
  br i1 %tobool, label %land.lhs.true, label %if.else.52

land.lhs.true:                                    ; preds = %if.end.12
  %29 = load i32* %dest_block, align 4
  %idxprom17 = sext i32 %29 to i64
  %30 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx18 = getelementptr inbounds %union.Entry* %30, i64 %idxprom17
  %block19 = bitcast %union.Entry* %arrayidx18 to %struct.Block**
  %31 = load %struct.Block** %block19, align 8
  %structure20 = getelementptr inbounds %struct.Block* %31, i32 0, i32 9
  %32 = load i32** %structure20, align 8
  %tobool21 = icmp ne i32* %32, null
  br i1 %tobool21, label %if.then.22, label %if.else.52

if.then.22:                                       ; preds = %land.lhs.true
  %33 = load i32* %bli.addr, align 4
  %idxprom23 = sext i32 %33 to i64
  %34 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx24 = getelementptr inbounds %union.Entry* %34, i64 %idxprom23
  %block25 = bitcast %union.Entry* %arrayidx24 to %struct.Block**
  %35 = load %struct.Block** %block25, align 8
  %length = getelementptr inbounds %struct.Block* %35, i32 0, i32 5
  %36 = load i32* %length, align 4
  %37 = load i32* %dest_block, align 4
  %idxprom26 = sext i32 %37 to i64
  %38 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx27 = getelementptr inbounds %union.Entry* %38, i64 %idxprom26
  %block28 = bitcast %union.Entry* %arrayidx27 to %struct.Block**
  %39 = load %struct.Block** %block28, align 8
  %length29 = getelementptr inbounds %struct.Block* %39, i32 0, i32 5
  %40 = load i32* %length29, align 4
  %cmp30 = icmp ne i32 %36, %40
  br i1 %cmp30, label %if.then.31, label %if.else.50

if.then.31:                                       ; preds = %if.then.22
  %41 = load i32* %bli.addr, align 4
  %idxprom32 = sext i32 %41 to i64
  %42 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx33 = getelementptr inbounds %union.Entry* %42, i64 %idxprom32
  %block34 = bitcast %union.Entry* %arrayidx33 to %struct.Block**
  %43 = load %struct.Block** %block34, align 8
  %structure35 = getelementptr inbounds %struct.Block* %43, i32 0, i32 9
  %44 = load i32** %structure35, align 8
  %45 = load i32* %bli.addr, align 4
  %idxprom36 = sext i32 %45 to i64
  %46 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx37 = getelementptr inbounds %union.Entry* %46, i64 %idxprom36
  %block38 = bitcast %union.Entry* %arrayidx37 to %struct.Block**
  %47 = load %struct.Block** %block38, align 8
  %length39 = getelementptr inbounds %struct.Block* %47, i32 0, i32 5
  %48 = load i32* %length39, align 4
  %49 = load i32* %dest_block, align 4
  %idxprom40 = sext i32 %49 to i64
  %50 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx41 = getelementptr inbounds %union.Entry* %50, i64 %idxprom40
  %block42 = bitcast %union.Entry* %arrayidx41 to %struct.Block**
  %51 = load %struct.Block** %block42, align 8
  %structure43 = getelementptr inbounds %struct.Block* %51, i32 0, i32 9
  %52 = load i32** %structure43, align 8
  %53 = load i32* %dest_block, align 4
  %idxprom44 = sext i32 %53 to i64
  %54 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx45 = getelementptr inbounds %union.Entry* %54, i64 %idxprom44
  %block46 = bitcast %union.Entry* %arrayidx45 to %struct.Block**
  %55 = load %struct.Block** %block46, align 8
  %length47 = getelementptr inbounds %struct.Block* %55, i32 0, i32 5
  %56 = load i32* %length47, align 4
  %57 = load %struct.LocalCopies** %lc.addr, align 8
  %relative = getelementptr inbounds %struct.LocalCopies* %57, i32 0, i32 6
  %58 = load i32** %relative, align 8
  %call48 = call i32 @FindRelativeIndices(i32* %44, i32 %48, i32* %52, i32 %56, i32* %58)
  %59 = load %struct.LocalCopies** %lc.addr, align 8
  %relative49 = getelementptr inbounds %struct.LocalCopies* %59, i32 0, i32 6
  %60 = load i32** %relative49, align 8
  store i32* %60, i32** %relative_i, align 8
  br label %if.end.51

if.else.50:                                       ; preds = %if.then.22
  store i32* null, i32** %relative_i, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.31
  br label %if.end.65

if.else.52:                                       ; preds = %land.lhs.true, %if.end.12
  %61 = load i32* %bli.addr, align 4
  %idxprom53 = sext i32 %61 to i64
  %62 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx54 = getelementptr inbounds %union.Entry* %62, i64 %idxprom53
  %block55 = bitcast %union.Entry* %arrayidx54 to %struct.Block**
  %63 = load %struct.Block** %block55, align 8
  %structure56 = getelementptr inbounds %struct.Block* %63, i32 0, i32 9
  %64 = load i32** %structure56, align 8
  %tobool57 = icmp ne i32* %64, null
  br i1 %tobool57, label %if.then.58, label %if.else.63

if.then.58:                                       ; preds = %if.else.52
  %65 = load i32* %bli.addr, align 4
  %idxprom59 = sext i32 %65 to i64
  %66 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx60 = getelementptr inbounds %union.Entry* %66, i64 %idxprom59
  %block61 = bitcast %union.Entry* %arrayidx60 to %struct.Block**
  %67 = load %struct.Block** %block61, align 8
  %structure62 = getelementptr inbounds %struct.Block* %67, i32 0, i32 9
  %68 = load i32** %structure62, align 8
  store i32* %68, i32** %relative_i, align 8
  br label %if.end.64

if.else.63:                                       ; preds = %if.else.52
  store i32* null, i32** %relative_i, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.63, %if.then.58
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.51
  %69 = load i32* %blj.addr, align 4
  %idxprom66 = sext i32 %69 to i64
  %70 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx67 = getelementptr inbounds %union.Entry* %70, i64 %idxprom66
  %block68 = bitcast %union.Entry* %arrayidx67 to %struct.Block**
  %71 = load %struct.Block** %block68, align 8
  %structure69 = getelementptr inbounds %struct.Block* %71, i32 0, i32 9
  %72 = load i32** %structure69, align 8
  %tobool70 = icmp ne i32* %72, null
  br i1 %tobool70, label %if.then.71, label %if.else.76

if.then.71:                                       ; preds = %if.end.65
  %73 = load i32* %blj.addr, align 4
  %idxprom72 = sext i32 %73 to i64
  %74 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx73 = getelementptr inbounds %union.Entry* %74, i64 %idxprom72
  %block74 = bitcast %union.Entry* %arrayidx73 to %struct.Block**
  %75 = load %struct.Block** %block74, align 8
  %structure75 = getelementptr inbounds %struct.Block* %75, i32 0, i32 9
  %76 = load i32** %structure75, align 8
  store i32* %76, i32** %relative_j, align 8
  br label %if.end.77

if.else.76:                                       ; preds = %if.end.65
  store i32* null, i32** %relative_j, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.76, %if.then.71
  %77 = load i32* %bli.addr, align 4
  %idxprom78 = sext i32 %77 to i64
  %78 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx79 = getelementptr inbounds %union.Entry* %78, i64 %idxprom78
  %block80 = bitcast %union.Entry* %arrayidx79 to %struct.Block**
  %79 = load %struct.Block** %block80, align 8
  %length81 = getelementptr inbounds %struct.Block* %79, i32 0, i32 5
  %80 = load i32* %length81, align 4
  %81 = load i32** %relative_i, align 8
  %82 = load i32* %blj.addr, align 4
  %idxprom82 = sext i32 %82 to i64
  %83 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx83 = getelementptr inbounds %union.Entry* %83, i64 %idxprom82
  %block84 = bitcast %union.Entry* %arrayidx83 to %struct.Block**
  %84 = load %struct.Block** %block84, align 8
  %length85 = getelementptr inbounds %struct.Block* %84, i32 0, i32 5
  %85 = load i32* %length85, align 4
  %86 = load i32** %relative_j, align 8
  %87 = load i32* %stride, align 4
  %88 = load i32* %dest_block, align 4
  %idxprom86 = sext i32 %88 to i64
  %89 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx87 = getelementptr inbounds %union.Entry* %89, i64 %idxprom86
  %block88 = bitcast %union.Entry* %arrayidx87 to %struct.Block**
  %90 = load %struct.Block** %block88, align 8
  %length89 = getelementptr inbounds %struct.Block* %90, i32 0, i32 5
  %91 = load i32* %length89, align 4
  %92 = load double** %update, align 8
  %93 = load i32* %dest_block, align 4
  %idxprom90 = sext i32 %93 to i64
  %94 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx91 = getelementptr inbounds %union.Entry* %94, i64 %idxprom90
  %block92 = bitcast %union.Entry* %arrayidx91 to %struct.Block**
  %95 = load %struct.Block** %block92, align 8
  %nz = getelementptr inbounds %struct.Block* %95, i32 0, i32 11
  %96 = load double** %nz, align 8
  %call93 = call i32 @ScatterUpdateFO2(i32 %80, i32* %81, i32 %85, i32* %86, i32 %87, i32 %91, double* %92, double* %96)
  %97 = load i32* %dest_block, align 4
  %98 = load i32* %MyNum.addr, align 4
  %99 = load %struct.LocalCopies** %lc.addr, align 8
  %call94 = call i32 @DecrementRemaining(i32 %97, i32 %98, %struct.LocalCopies* %99)
  %100 = load i32* %retval
  ret i32 %100
}

; Function Attrs: nounwind uwtable
define internal i32 @DiagReceived(i32 %diag, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %diag.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %column = alloca i32, align 4
  %diagbl = alloca %struct.BlockList*, align 8
  store i32 %diag, i32* %diag.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %diag.addr, align 4
  %1 = load i32* %MyNum.addr, align 4
  %2 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call %struct.BlockList* @CopyOneBlock(i32 %0, i32 %1, %struct.LocalCopies* %2)
  store %struct.BlockList* %call, %struct.BlockList** %diagbl, align 8
  %3 = load i32* %diag.addr, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %4, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %5 = load %struct.Block** %block, align 8
  %j = getelementptr inbounds %struct.Block* %5, i32 0, i32 1
  %6 = load i32* %j, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  store i32 %8, i32* %column, align 4
  %9 = load %struct.BlockList** %diagbl, align 8
  %next = getelementptr inbounds %struct.BlockList* %9, i32 0, i32 6
  store %struct.BlockList* null, %struct.BlockList** %next, align 8
  %10 = load %struct.BlockList** %diagbl, align 8
  %11 = load i32* %column, align 4
  %idxprom3 = sext i32 %11 to i64
  %12 = load i32* %MyNum.addr, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx5 = getelementptr inbounds %struct.BlockList*** %13, i64 %idxprom4
  %14 = load %struct.BlockList*** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds %struct.BlockList** %14, i64 %idxprom3
  store %struct.BlockList* %10, %struct.BlockList** %arrayidx6, align 8
  %15 = load i32* %diag.addr, align 4
  %idxprom7 = sext i32 %15 to i64
  %16 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx8 = getelementptr inbounds %union.Entry* %16, i64 %idxprom7
  %block9 = bitcast %union.Entry* %arrayidx8 to %struct.Block**
  %17 = load %struct.Block** %block9, align 8
  %j10 = getelementptr inbounds %struct.Block* %17, i32 0, i32 1
  %18 = load i32* %j10, align 4
  store i32 %18, i32* %column, align 4
  %19 = load i32* %column, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx12 = getelementptr inbounds i32* %20, i64 %idxprom11
  %21 = load i32* %arrayidx12, align 4
  %add = add nsw i32 %21, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load i32* %i, align 4
  %23 = load i32* %column, align 4
  %add13 = add nsw i32 %23, 1
  %idxprom14 = sext i32 %add13 to i64
  %24 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx15 = getelementptr inbounds i32* %24, i64 %idxprom14
  %25 = load i32* %arrayidx15, align 4
  %cmp = icmp slt i32 %22, %25
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32* %i, align 4
  %idxprom16 = sext i32 %26 to i64
  %27 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx17 = getelementptr inbounds %union.Entry* %27, i64 %idxprom16
  %block18 = bitcast %union.Entry* %arrayidx17 to %struct.Block**
  %28 = load %struct.Block** %block18, align 8
  %owner = getelementptr inbounds %struct.Block* %28, i32 0, i32 2
  %29 = load i32* %owner, align 4
  %30 = load i32* %MyNum.addr, align 4
  %cmp19 = icmp eq i32 %29, %30
  br i1 %cmp19, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32* %i, align 4
  %idxprom20 = sext i32 %31 to i64
  %32 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx21 = getelementptr inbounds %union.Entry* %32, i64 %idxprom20
  %block22 = bitcast %union.Entry* %arrayidx21 to %struct.Block**
  %33 = load %struct.Block** %block22, align 8
  %remaining = getelementptr inbounds %struct.Block* %33, i32 0, i32 3
  %34 = load i32* %remaining, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %35 = load i32* %diag.addr, align 4
  %36 = load i32* %i, align 4
  %37 = load %struct.BlockList** %diagbl, align 8
  %length = getelementptr inbounds %struct.BlockList* %37, i32 0, i32 3
  %38 = load i32* %length, align 4
  %39 = load i32* %i, align 4
  %idxprom24 = sext i32 %39 to i64
  %40 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx25 = getelementptr inbounds %union.Entry* %40, i64 %idxprom24
  %block26 = bitcast %union.Entry* %arrayidx25 to %struct.Block**
  %41 = load %struct.Block** %block26, align 8
  %length27 = getelementptr inbounds %struct.Block* %41, i32 0, i32 5
  %42 = load i32* %length27, align 4
  %43 = load %struct.BlockList** %diagbl, align 8
  %nz = getelementptr inbounds %struct.BlockList* %43, i32 0, i32 5
  %44 = load double** %nz, align 8
  %45 = load i32* %i, align 4
  %idxprom28 = sext i32 %45 to i64
  %46 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx29 = getelementptr inbounds %union.Entry* %46, i64 %idxprom28
  %block30 = bitcast %union.Entry* %arrayidx29 to %struct.Block**
  %47 = load %struct.Block** %block30, align 8
  %nz31 = getelementptr inbounds %struct.Block* %47, i32 0, i32 11
  %48 = load double** %nz31, align 8
  %49 = load i32* %MyNum.addr, align 4
  %50 = load %struct.LocalCopies** %lc.addr, align 8
  %call32 = call i32 @BDiv(i32 %35, i32 %36, i32 %38, i32 %42, double* %44, double* %48, i32 %49, %struct.LocalCopies* %50)
  %51 = load i32* %i, align 4
  %52 = load i32* %MyNum.addr, align 4
  %53 = load %struct.LocalCopies** %lc.addr, align 8
  %call33 = call i32 @BlockDoneFO(i32 %51, i32 %52, %struct.LocalCopies* %53)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %54 = load i32* %i, align 4
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %55 = load i32* %diag.addr, align 4
  %idxprom34 = sext i32 %55 to i64
  %56 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx35 = getelementptr inbounds %union.Entry* %56, i64 %idxprom34
  %block36 = bitcast %union.Entry* %arrayidx35 to %struct.Block**
  %57 = load %struct.Block** %block36, align 8
  %j37 = getelementptr inbounds %struct.Block* %57, i32 0, i32 1
  %58 = load i32* %j37, align 4
  %59 = load i32* %diag.addr, align 4
  %idxprom38 = sext i32 %59 to i64
  %60 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx39 = getelementptr inbounds %union.Entry* %60, i64 %idxprom38
  %block40 = bitcast %union.Entry* %arrayidx39 to %struct.Block**
  %61 = load %struct.Block** %block40, align 8
  %j41 = getelementptr inbounds %struct.Block* %61, i32 0, i32 1
  %62 = load i32* %j41, align 4
  %idxprom42 = sext i32 %62 to i64
  %63 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx43 = getelementptr inbounds i32* %63, i64 %idxprom42
  %64 = load i32* %arrayidx43, align 4
  %add44 = add nsw i32 %58, %64
  %65 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp45 = icmp eq i32 %add44, %65
  br i1 %cmp45, label %land.lhs.true.46, label %if.end.60

land.lhs.true.46:                                 ; preds = %for.end
  %66 = load i32* %diag.addr, align 4
  %idxprom47 = sext i32 %66 to i64
  %67 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx48 = getelementptr inbounds %union.Entry* %67, i64 %idxprom47
  %block49 = bitcast %union.Entry* %arrayidx48 to %struct.Block**
  %68 = load %struct.Block** %block49, align 8
  %owner50 = getelementptr inbounds %struct.Block* %68, i32 0, i32 2
  %69 = load i32* %owner50, align 4
  %70 = load i32* %MyNum.addr, align 4
  %cmp51 = icmp eq i32 %69, %70
  br i1 %cmp51, label %if.then.52, label %if.end.60

if.then.52:                                       ; preds = %land.lhs.true.46
  store i32 0, i32* %i, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.57, %if.then.52
  %71 = load i32* %i, align 4
  %72 = load i32* @P, align 4
  %cmp54 = icmp slt i32 %71, %72
  br i1 %cmp54, label %for.body.55, label %for.end.59

for.body.55:                                      ; preds = %for.cond.53
  %73 = load i32* %i, align 4
  %74 = load i32* %MyNum.addr, align 4
  %75 = load %struct.LocalCopies** %lc.addr, align 8
  %call56 = call i32 @Send(i32 -1, i32 -1, i32 -1, i32 -1, %struct.Update* null, i32 %73, i32 %74, %struct.LocalCopies* %75)
  br label %for.inc.57

for.inc.57:                                       ; preds = %for.body.55
  %76 = load i32* %i, align 4
  %inc58 = add nsw i32 %76, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond.53

for.end.59:                                       ; preds = %for.cond.53
  br label %if.end.60

if.end.60:                                        ; preds = %for.end.59, %land.lhs.true.46, %for.end
  %77 = load i32* %retval
  ret i32 %77
}

; Function Attrs: nounwind uwtable
define internal i32 @BlockReceived(i32 %block, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %block.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %column = alloca i32, align 4
  %thisbl = alloca %struct.BlockList*, align 8
  %bl = alloca %struct.BlockList*, align 8
  store i32 %block, i32* %block.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %block.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block1 = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block1, align 8
  %j = getelementptr inbounds %struct.Block* %2, i32 0, i32 1
  %3 = load i32* %j, align 4
  %idxprom2 = sext i32 %3 to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx3 = getelementptr inbounds i32* %4, i64 %idxprom2
  %5 = load i32* %arrayidx3, align 4
  store i32 %5, i32* %column, align 4
  %6 = load i32* %block.addr, align 4
  %7 = load i32* %MyNum.addr, align 4
  %8 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call %struct.BlockList* @CopyOneBlock(i32 %6, i32 %7, %struct.LocalCopies* %8)
  store %struct.BlockList* %call, %struct.BlockList** %thisbl, align 8
  %9 = load i32* %column, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load i32* %MyNum.addr, align 4
  %idxprom5 = sext i32 %10 to i64
  %11 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx6 = getelementptr inbounds %struct.BlockList*** %11, i64 %idxprom5
  %12 = load %struct.BlockList*** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds %struct.BlockList** %12, i64 %idxprom4
  %13 = load %struct.BlockList** %arrayidx7, align 8
  %14 = load %struct.BlockList** %thisbl, align 8
  %next = getelementptr inbounds %struct.BlockList* %14, i32 0, i32 6
  store %struct.BlockList* %13, %struct.BlockList** %next, align 8
  %15 = load %struct.BlockList** %thisbl, align 8
  %16 = load i32* %column, align 4
  %idxprom8 = sext i32 %16 to i64
  %17 = load i32* %MyNum.addr, align 4
  %idxprom9 = sext i32 %17 to i64
  %18 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx10 = getelementptr inbounds %struct.BlockList*** %18, i64 %idxprom9
  %19 = load %struct.BlockList*** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds %struct.BlockList** %19, i64 %idxprom8
  store %struct.BlockList* %15, %struct.BlockList** %arrayidx11, align 8
  %20 = load i32* %column, align 4
  %idxprom12 = sext i32 %20 to i64
  %21 = load i32* %MyNum.addr, align 4
  %idxprom13 = sext i32 %21 to i64
  %22 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx14 = getelementptr inbounds %struct.BlockList*** %22, i64 %idxprom13
  %23 = load %struct.BlockList*** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds %struct.BlockList** %23, i64 %idxprom12
  %24 = load %struct.BlockList** %arrayidx15, align 8
  %next16 = getelementptr inbounds %struct.BlockList* %24, i32 0, i32 6
  %25 = load %struct.BlockList** %next16, align 8
  store %struct.BlockList* %25, %struct.BlockList** %bl, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %26 = load %struct.BlockList** %bl, align 8
  %tobool = icmp ne %struct.BlockList* %26, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load i32* %block.addr, align 4
  %28 = load %struct.BlockList** %bl, align 8
  %theBlock = getelementptr inbounds %struct.BlockList* %28, i32 0, i32 0
  %29 = load i32* %theBlock, align 4
  %cmp = icmp slt i32 %27, %29
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %30 = load %struct.BlockList** %thisbl, align 8
  %31 = load %struct.BlockList** %bl, align 8
  %32 = load i32* %MyNum.addr, align 4
  %33 = load %struct.LocalCopies** %lc.addr, align 8
  %call17 = call i32 @PerformUpdate(%struct.BlockList* %30, %struct.BlockList* %31, i32 %32, %struct.LocalCopies* %33)
  br label %if.end

if.else:                                          ; preds = %while.body
  %34 = load %struct.BlockList** %bl, align 8
  %35 = load %struct.BlockList** %thisbl, align 8
  %36 = load i32* %MyNum.addr, align 4
  %37 = load %struct.LocalCopies** %lc.addr, align 8
  %call18 = call i32 @PerformUpdate(%struct.BlockList* %34, %struct.BlockList* %35, i32 %36, %struct.LocalCopies* %37)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %38 = load %struct.BlockList** %bl, align 8
  %next19 = getelementptr inbounds %struct.BlockList* %38, i32 0, i32 6
  %39 = load %struct.BlockList** %next19, align 8
  store %struct.BlockList* %39, %struct.BlockList** %bl, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %40 = load %struct.BlockList** %thisbl, align 8
  %41 = load %struct.BlockList** %thisbl, align 8
  %42 = load i32* %MyNum.addr, align 4
  %43 = load %struct.LocalCopies** %lc.addr, align 8
  %call20 = call i32 @PerformUpdate(%struct.BlockList* %40, %struct.BlockList* %41, i32 %42, %struct.LocalCopies* %43)
  %44 = load i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define internal %struct.BlockList* @CopyOneBlock(i32 %block, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %block.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %bl = alloca %struct.BlockList*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %num_nz = alloca i32, align 4
  %num_ind = alloca i32, align 4
  %copy_across = alloca i32, align 4
  store i32 %block, i32* %block.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %MyNum.addr, align 4
  %call = call i8* @MyMalloc(i32 40, i32 %0)
  %1 = bitcast i8* %call to %struct.BlockList*
  store %struct.BlockList* %1, %struct.BlockList** %bl, align 8
  %2 = load i32* %block.addr, align 4
  %3 = load %struct.BlockList** %bl, align 8
  %theBlock = getelementptr inbounds %struct.BlockList* %3, i32 0, i32 0
  store i32 %2, i32* %theBlock, align 4
  %4 = load i32* %block.addr, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %5, i64 %idxprom
  %block1 = bitcast %union.Entry* %arrayidx to %struct.Block**
  %6 = load %struct.Block** %block1, align 8
  %i2 = getelementptr inbounds %struct.Block* %6, i32 0, i32 0
  %7 = load i32* %i2, align 4
  %8 = load %struct.BlockList** %bl, align 8
  %row = getelementptr inbounds %struct.BlockList* %8, i32 0, i32 1
  store i32 %7, i32* %row, align 4
  %9 = load i32* %block.addr, align 4
  %idxprom3 = sext i32 %9 to i64
  %10 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx4 = getelementptr inbounds %union.Entry* %10, i64 %idxprom3
  %block5 = bitcast %union.Entry* %arrayidx4 to %struct.Block**
  %11 = load %struct.Block** %block5, align 8
  %j = getelementptr inbounds %struct.Block* %11, i32 0, i32 1
  %12 = load i32* %j, align 4
  %13 = load %struct.BlockList** %bl, align 8
  %col = getelementptr inbounds %struct.BlockList* %13, i32 0, i32 2
  store i32 %12, i32* %col, align 4
  %14 = load i32* %block.addr, align 4
  %idxprom6 = sext i32 %14 to i64
  %15 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx7 = getelementptr inbounds %union.Entry* %15, i64 %idxprom6
  %block8 = bitcast %union.Entry* %arrayidx7 to %struct.Block**
  %16 = load %struct.Block** %block8, align 8
  %length = getelementptr inbounds %struct.Block* %16, i32 0, i32 5
  %17 = load i32* %length, align 4
  %18 = load %struct.BlockList** %bl, align 8
  %length9 = getelementptr inbounds %struct.BlockList* %18, i32 0, i32 3
  store i32 %17, i32* %length9, align 4
  %19 = load i32* %block.addr, align 4
  %idxprom10 = sext i32 %19 to i64
  %20 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx11 = getelementptr inbounds %union.Entry* %20, i64 %idxprom10
  %block12 = bitcast %union.Entry* %arrayidx11 to %struct.Block**
  %21 = load %struct.Block** %block12, align 8
  %structure = getelementptr inbounds %struct.Block* %21, i32 0, i32 9
  %22 = load i32** %structure, align 8
  %23 = load %struct.BlockList** %bl, align 8
  %structure13 = getelementptr inbounds %struct.BlockList* %23, i32 0, i32 4
  store i32* %22, i32** %structure13, align 8
  %24 = load i32* %block.addr, align 4
  %idxprom14 = sext i32 %24 to i64
  %25 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx15 = getelementptr inbounds %union.Entry* %25, i64 %idxprom14
  %block16 = bitcast %union.Entry* %arrayidx15 to %struct.Block**
  %26 = load %struct.Block** %block16, align 8
  %nz = getelementptr inbounds %struct.Block* %26, i32 0, i32 11
  %27 = load double** %nz, align 8
  %28 = load %struct.BlockList** %bl, align 8
  %nz17 = getelementptr inbounds %struct.BlockList* %28, i32 0, i32 5
  store double* %27, double** %nz17, align 8
  %29 = load %struct.BlockList** %bl, align 8
  ret %struct.BlockList* %29
}

; Function Attrs: nounwind uwtable
define internal i32 @BlockDoneFO(i32 %block, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %block.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %P_row = alloca i32, align 4
  %P_col = alloca i32, align 4
  store i32 %block, i32* %block.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* @scatter_decomposition, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32* %block.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %2, i64 %idxprom
  %block1 = bitcast %union.Entry* %arrayidx to %struct.Block**
  %3 = load %struct.Block** %block1, align 8
  %i2 = getelementptr inbounds %struct.Block* %3, i32 0, i32 0
  %4 = load i32* %i2, align 4
  %idxprom3 = sext i32 %4 to i64
  %5 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx4 = getelementptr inbounds i32* %5, i64 %idxprom3
  %6 = load i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 8), align 8
  %arrayidx6 = getelementptr inbounds i32* %7, i64 %idxprom5
  %8 = load i32* %arrayidx6, align 4
  %9 = load i32* @P_dimi, align 4
  %rem = srem i32 %8, %9
  store i32 %rem, i32* %P_row, align 4
  %10 = load i32* %block.addr, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx8 = getelementptr inbounds %union.Entry* %11, i64 %idxprom7
  %block9 = bitcast %union.Entry* %arrayidx8 to %struct.Block**
  %12 = load %struct.Block** %block9, align 8
  %i10 = getelementptr inbounds %struct.Block* %12, i32 0, i32 0
  %13 = load i32* %i10, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx12 = getelementptr inbounds i32* %14, i64 %idxprom11
  %15 = load i32* %arrayidx12, align 4
  %idxprom13 = sext i32 %15 to i64
  %16 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 9), align 8
  %arrayidx14 = getelementptr inbounds i32* %16, i64 %idxprom13
  %17 = load i32* %arrayidx14, align 4
  %18 = load i32* @P_dimj, align 4
  %rem15 = srem i32 %17, %18
  store i32 %rem15, i32* %P_col, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %19 = load i32* %i, align 4
  %20 = load i32* @P_dimj, align 4
  %cmp = icmp slt i32 %19, %20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32* %block.addr, align 4
  %22 = load i32* %block.addr, align 4
  %23 = load i32* %P_row, align 4
  %24 = load i32* %i, align 4
  %25 = load i32* @P_dimi, align 4
  %mul = mul nsw i32 %24, %25
  %add = add nsw i32 %23, %mul
  %26 = load i32* %MyNum.addr, align 4
  %27 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @Send(i32 %21, i32 %22, i32 0, i32 0, %struct.Update* null, i32 %add, i32 %26, %struct.LocalCopies* %27)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %28 = load i32* %i, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.24, %for.end
  %29 = load i32* %i, align 4
  %30 = load i32* @P_dimi, align 4
  %cmp17 = icmp slt i32 %29, %30
  br i1 %cmp17, label %for.body.18, label %for.end.26

for.body.18:                                      ; preds = %for.cond.16
  %31 = load i32* %i, align 4
  %32 = load i32* %P_row, align 4
  %cmp19 = icmp ne i32 %31, %32
  br i1 %cmp19, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %for.body.18
  %33 = load i32* %block.addr, align 4
  %34 = load i32* %block.addr, align 4
  %35 = load i32* %i, align 4
  %36 = load i32* %P_col, align 4
  %37 = load i32* @P_dimi, align 4
  %mul21 = mul nsw i32 %36, %37
  %add22 = add nsw i32 %35, %mul21
  %38 = load i32* %MyNum.addr, align 4
  %39 = load %struct.LocalCopies** %lc.addr, align 8
  %call23 = call i32 @Send(i32 %33, i32 %34, i32 0, i32 0, %struct.Update* null, i32 %add22, i32 %38, %struct.LocalCopies* %39)
  br label %if.end

if.end:                                           ; preds = %if.then.20, %for.body.18
  br label %for.inc.24

for.inc.24:                                       ; preds = %if.end
  %40 = load i32* %i, align 4
  %inc25 = add nsw i32 %40, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.16

for.end.26:                                       ; preds = %for.cond.16
  br label %if.end.34

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.31, %if.else
  %41 = load i32* %i, align 4
  %42 = load i32* @P, align 4
  %cmp28 = icmp slt i32 %41, %42
  br i1 %cmp28, label %for.body.29, label %for.end.33

for.body.29:                                      ; preds = %for.cond.27
  %43 = load i32* %block.addr, align 4
  %44 = load i32* %block.addr, align 4
  %45 = load i32* %i, align 4
  %46 = load i32* %MyNum.addr, align 4
  %47 = load %struct.LocalCopies** %lc.addr, align 8
  %call30 = call i32 @Send(i32 %43, i32 %44, i32 0, i32 0, %struct.Update* null, i32 %45, i32 %46, %struct.LocalCopies* %47)
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.body.29
  %48 = load i32* %i, align 4
  %inc32 = add nsw i32 %48, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond.27

for.end.33:                                       ; preds = %for.cond.27
  br label %if.end.34

if.end.34:                                        ; preds = %for.end.33, %for.end.26
  %49 = load i32* %retval
  ret i32 %49
}

; Function Attrs: nounwind uwtable
define internal i32 @PerformUpdate(%struct.BlockList* %above_bl, %struct.BlockList* %below_bl, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %above_bl.addr = alloca %struct.BlockList*, align 8
  %below_bl.addr = alloca %struct.BlockList*, align 8
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %above = alloca i32, align 4
  %below = alloca i32, align 4
  %desti = alloca i32, align 4
  %destj = alloca i32, align 4
  %dest_block = alloca i32, align 4
  %is_diag = alloca i32, align 4
  %relative_i = alloca i32*, align 8
  %relative_j = alloca i32*, align 8
  %destination = alloca double*, align 8
  store %struct.BlockList* %above_bl, %struct.BlockList** %above_bl.addr, align 8
  store %struct.BlockList* %below_bl, %struct.BlockList** %below_bl.addr, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load %struct.BlockList** %above_bl.addr, align 8
  %theBlock = getelementptr inbounds %struct.BlockList* %0, i32 0, i32 0
  %1 = load i32* %theBlock, align 4
  store i32 %1, i32* %above, align 4
  %2 = load %struct.BlockList** %below_bl.addr, align 8
  %theBlock1 = getelementptr inbounds %struct.BlockList* %2, i32 0, i32 0
  %3 = load i32* %theBlock1, align 4
  store i32 %3, i32* %below, align 4
  %4 = load %struct.BlockList** %below_bl.addr, align 8
  %row = getelementptr inbounds %struct.BlockList* %4, i32 0, i32 1
  %5 = load i32* %row, align 4
  store i32 %5, i32* %desti, align 4
  %6 = load %struct.BlockList** %above_bl.addr, align 8
  %row2 = getelementptr inbounds %struct.BlockList* %6, i32 0, i32 1
  %7 = load i32* %row2, align 4
  store i32 %7, i32* %destj, align 4
  %8 = load i32* %desti, align 4
  %9 = load i32* %destj, align 4
  %cmp = icmp eq i32 %8, %9
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %is_diag, align 4
  %10 = load i32* %desti, align 4
  %11 = load i32* %destj, align 4
  %call = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %10, i32 %11)
  store i32 %call, i32* %dest_block, align 4
  %12 = load i32* %dest_block, align 4
  %cmp3 = icmp eq i32 %12, -1
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load i32* %desti, align 4
  %14 = load i32* %destj, align 4
  %call5 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.2.17, i32 0, i32 0), i32 %13, i32 %14)
  br label %if.end.9

if.else:                                          ; preds = %entry
  %15 = load i32* %dest_block, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %16, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %17 = load %struct.Block** %block, align 8
  %owner = getelementptr inbounds %struct.Block* %17, i32 0, i32 2
  %18 = load i32* %owner, align 4
  %19 = load i32* %MyNum.addr, align 4
  %cmp6 = icmp ne i32 %18, %19
  br i1 %cmp6, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %20 = load i32* %is_diag, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %if.then.10, label %if.else.41

if.then.10:                                       ; preds = %if.end.9
  %21 = load %struct.BlockList** %below_bl.addr, align 8
  %structure = getelementptr inbounds %struct.BlockList* %21, i32 0, i32 4
  %22 = load i32** %structure, align 8
  %tobool11 = icmp ne i32* %22, null
  br i1 %tobool11, label %if.else.16, label %if.then.12

if.then.12:                                       ; preds = %if.then.10
  %23 = load i32* %dest_block, align 4
  %idxprom13 = sext i32 %23 to i64
  %24 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx14 = getelementptr inbounds %union.Entry* %24, i64 %idxprom13
  %block15 = bitcast %union.Entry* %arrayidx14 to %struct.Block**
  %25 = load %struct.Block** %block15, align 8
  %nz = getelementptr inbounds %struct.Block* %25, i32 0, i32 11
  %26 = load double** %nz, align 8
  store double* %26, double** %destination, align 8
  br label %if.end.17

if.else.16:                                       ; preds = %if.then.10
  %27 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp = getelementptr inbounds %struct.LocalCopies* %27, i32 0, i32 5
  %28 = load double** %updatetmp, align 8
  store double* %28, double** %destination, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.16, %if.then.12
  %29 = load i32* %below, align 4
  %30 = load %struct.BlockList** %below_bl.addr, align 8
  %length = getelementptr inbounds %struct.BlockList* %30, i32 0, i32 3
  %31 = load i32* %length, align 4
  %32 = load %struct.BlockList** %below_bl.addr, align 8
  %col = getelementptr inbounds %struct.BlockList* %32, i32 0, i32 2
  %33 = load i32* %col, align 4
  %idxprom18 = sext i32 %33 to i64
  %34 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx19 = getelementptr inbounds i32* %34, i64 %idxprom18
  %35 = load i32* %arrayidx19, align 4
  %36 = load %struct.BlockList** %below_bl.addr, align 8
  %nz20 = getelementptr inbounds %struct.BlockList* %36, i32 0, i32 5
  %37 = load double** %nz20, align 8
  %38 = load double** %destination, align 8
  %39 = load i32* %MyNum.addr, align 4
  %40 = load %struct.LocalCopies** %lc.addr, align 8
  %call21 = call i32 @BLMod(i32 %29, i32 %31, i32 %35, double* %37, double* %38, i32 %39, %struct.LocalCopies* %40)
  %41 = load double** %destination, align 8
  %42 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp22 = getelementptr inbounds %struct.LocalCopies* %42, i32 0, i32 5
  %43 = load double** %updatetmp22, align 8
  %cmp23 = icmp eq double* %41, %43
  br i1 %cmp23, label %if.then.25, label %if.end.40

if.then.25:                                       ; preds = %if.end.17
  %44 = load %struct.BlockList** %below_bl.addr, align 8
  %length26 = getelementptr inbounds %struct.BlockList* %44, i32 0, i32 3
  %45 = load i32* %length26, align 4
  %46 = load %struct.BlockList** %below_bl.addr, align 8
  %structure27 = getelementptr inbounds %struct.BlockList* %46, i32 0, i32 4
  %47 = load i32** %structure27, align 8
  %48 = load %struct.BlockList** %below_bl.addr, align 8
  %length28 = getelementptr inbounds %struct.BlockList* %48, i32 0, i32 3
  %49 = load i32* %length28, align 4
  %50 = load %struct.BlockList** %below_bl.addr, align 8
  %structure29 = getelementptr inbounds %struct.BlockList* %50, i32 0, i32 4
  %51 = load i32** %structure29, align 8
  %52 = load i32* %dest_block, align 4
  %idxprom30 = sext i32 %52 to i64
  %53 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx31 = getelementptr inbounds %union.Entry* %53, i64 %idxprom30
  %block32 = bitcast %union.Entry* %arrayidx31 to %struct.Block**
  %54 = load %struct.Block** %block32, align 8
  %length33 = getelementptr inbounds %struct.Block* %54, i32 0, i32 5
  %55 = load i32* %length33, align 4
  %56 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp34 = getelementptr inbounds %struct.LocalCopies* %56, i32 0, i32 5
  %57 = load double** %updatetmp34, align 8
  %58 = load i32* %dest_block, align 4
  %idxprom35 = sext i32 %58 to i64
  %59 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx36 = getelementptr inbounds %union.Entry* %59, i64 %idxprom35
  %block37 = bitcast %union.Entry* %arrayidx36 to %struct.Block**
  %60 = load %struct.Block** %block37, align 8
  %nz38 = getelementptr inbounds %struct.Block* %60, i32 0, i32 11
  %61 = load double** %nz38, align 8
  %call39 = call i32 @ScatterUpdateFO(i32 %45, i32* %47, i32 %49, i32* %51, i32 %55, double* %57, double* %61)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.25, %if.end.17
  br label %if.end.114

if.else.41:                                       ; preds = %if.end.9
  %62 = load %struct.BlockList** %below_bl.addr, align 8
  %length42 = getelementptr inbounds %struct.BlockList* %62, i32 0, i32 3
  %63 = load i32* %length42, align 4
  %64 = load i32* %dest_block, align 4
  %idxprom43 = sext i32 %64 to i64
  %65 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx44 = getelementptr inbounds %union.Entry* %65, i64 %idxprom43
  %block45 = bitcast %union.Entry* %arrayidx44 to %struct.Block**
  %66 = load %struct.Block** %block45, align 8
  %length46 = getelementptr inbounds %struct.Block* %66, i32 0, i32 5
  %67 = load i32* %length46, align 4
  %cmp47 = icmp eq i32 %63, %67
  br i1 %cmp47, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %if.else.41
  store i32* null, i32** %relative_i, align 8
  br label %if.end.72

if.else.50:                                       ; preds = %if.else.41
  %68 = load i32* %dest_block, align 4
  %idxprom51 = sext i32 %68 to i64
  %69 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx52 = getelementptr inbounds %union.Entry* %69, i64 %idxprom51
  %block53 = bitcast %union.Entry* %arrayidx52 to %struct.Block**
  %70 = load %struct.Block** %block53, align 8
  %structure54 = getelementptr inbounds %struct.Block* %70, i32 0, i32 9
  %71 = load i32** %structure54, align 8
  %tobool55 = icmp ne i32* %71, null
  br i1 %tobool55, label %if.else.58, label %if.then.56

if.then.56:                                       ; preds = %if.else.50
  %72 = load %struct.BlockList** %below_bl.addr, align 8
  %structure57 = getelementptr inbounds %struct.BlockList* %72, i32 0, i32 4
  %73 = load i32** %structure57, align 8
  store i32* %73, i32** %relative_i, align 8
  br label %if.end.71

if.else.58:                                       ; preds = %if.else.50
  %74 = load %struct.BlockList** %below_bl.addr, align 8
  %structure59 = getelementptr inbounds %struct.BlockList* %74, i32 0, i32 4
  %75 = load i32** %structure59, align 8
  %76 = load %struct.BlockList** %below_bl.addr, align 8
  %length60 = getelementptr inbounds %struct.BlockList* %76, i32 0, i32 3
  %77 = load i32* %length60, align 4
  %78 = load i32* %dest_block, align 4
  %idxprom61 = sext i32 %78 to i64
  %79 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx62 = getelementptr inbounds %union.Entry* %79, i64 %idxprom61
  %block63 = bitcast %union.Entry* %arrayidx62 to %struct.Block**
  %80 = load %struct.Block** %block63, align 8
  %structure64 = getelementptr inbounds %struct.Block* %80, i32 0, i32 9
  %81 = load i32** %structure64, align 8
  %82 = load i32* %dest_block, align 4
  %idxprom65 = sext i32 %82 to i64
  %83 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx66 = getelementptr inbounds %union.Entry* %83, i64 %idxprom65
  %block67 = bitcast %union.Entry* %arrayidx66 to %struct.Block**
  %84 = load %struct.Block** %block67, align 8
  %length68 = getelementptr inbounds %struct.Block* %84, i32 0, i32 5
  %85 = load i32* %length68, align 4
  %86 = load %struct.LocalCopies** %lc.addr, align 8
  %relative = getelementptr inbounds %struct.LocalCopies* %86, i32 0, i32 6
  %87 = load i32** %relative, align 8
  %call69 = call i32 @FindRelativeIndices(i32* %75, i32 %77, i32* %81, i32 %85, i32* %87)
  %88 = load %struct.LocalCopies** %lc.addr, align 8
  %relative70 = getelementptr inbounds %struct.LocalCopies* %88, i32 0, i32 6
  %89 = load i32** %relative70, align 8
  store i32* %89, i32** %relative_i, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.58, %if.then.56
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.49
  %90 = load %struct.BlockList** %above_bl.addr, align 8
  %structure73 = getelementptr inbounds %struct.BlockList* %90, i32 0, i32 4
  %91 = load i32** %structure73, align 8
  %tobool74 = icmp ne i32* %91, null
  br i1 %tobool74, label %if.then.75, label %if.else.77

if.then.75:                                       ; preds = %if.end.72
  %92 = load %struct.BlockList** %above_bl.addr, align 8
  %structure76 = getelementptr inbounds %struct.BlockList* %92, i32 0, i32 4
  %93 = load i32** %structure76, align 8
  store i32* %93, i32** %relative_j, align 8
  br label %if.end.78

if.else.77:                                       ; preds = %if.end.72
  store i32* null, i32** %relative_j, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.77, %if.then.75
  %94 = load i32** %relative_i, align 8
  %tobool79 = icmp ne i32* %94, null
  br i1 %tobool79, label %if.else.86, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.78
  %95 = load i32** %relative_j, align 8
  %tobool80 = icmp ne i32* %95, null
  br i1 %tobool80, label %if.else.86, label %if.then.81

if.then.81:                                       ; preds = %land.lhs.true
  %96 = load i32* %dest_block, align 4
  %idxprom82 = sext i32 %96 to i64
  %97 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx83 = getelementptr inbounds %union.Entry* %97, i64 %idxprom82
  %block84 = bitcast %union.Entry* %arrayidx83 to %struct.Block**
  %98 = load %struct.Block** %block84, align 8
  %nz85 = getelementptr inbounds %struct.Block* %98, i32 0, i32 11
  %99 = load double** %nz85, align 8
  store double* %99, double** %destination, align 8
  br label %if.end.88

if.else.86:                                       ; preds = %land.lhs.true, %if.end.78
  %100 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp87 = getelementptr inbounds %struct.LocalCopies* %100, i32 0, i32 5
  %101 = load double** %updatetmp87, align 8
  store double* %101, double** %destination, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.86, %if.then.81
  %102 = load i32* %above, align 4
  %103 = load i32* %below, align 4
  %104 = load %struct.BlockList** %above_bl.addr, align 8
  %length89 = getelementptr inbounds %struct.BlockList* %104, i32 0, i32 3
  %105 = load i32* %length89, align 4
  %106 = load %struct.BlockList** %above_bl.addr, align 8
  %col90 = getelementptr inbounds %struct.BlockList* %106, i32 0, i32 2
  %107 = load i32* %col90, align 4
  %idxprom91 = sext i32 %107 to i64
  %108 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx92 = getelementptr inbounds i32* %108, i64 %idxprom91
  %109 = load i32* %arrayidx92, align 4
  %110 = load %struct.BlockList** %below_bl.addr, align 8
  %length93 = getelementptr inbounds %struct.BlockList* %110, i32 0, i32 3
  %111 = load i32* %length93, align 4
  %112 = load %struct.BlockList** %above_bl.addr, align 8
  %nz94 = getelementptr inbounds %struct.BlockList* %112, i32 0, i32 5
  %113 = load double** %nz94, align 8
  %114 = load %struct.BlockList** %below_bl.addr, align 8
  %nz95 = getelementptr inbounds %struct.BlockList* %114, i32 0, i32 5
  %115 = load double** %nz95, align 8
  %116 = load double** %destination, align 8
  %117 = load i32* %MyNum.addr, align 4
  %118 = load %struct.LocalCopies** %lc.addr, align 8
  %call96 = call i32 @BMod(i32 %102, i32 %103, i32 %105, i32 %109, i32 %111, double* %113, double* %115, double* %116, i32 %117, %struct.LocalCopies* %118)
  %119 = load double** %destination, align 8
  %120 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp97 = getelementptr inbounds %struct.LocalCopies* %120, i32 0, i32 5
  %121 = load double** %updatetmp97, align 8
  %cmp98 = icmp eq double* %119, %121
  br i1 %cmp98, label %if.then.100, label %if.end.113

if.then.100:                                      ; preds = %if.end.88
  %122 = load %struct.BlockList** %below_bl.addr, align 8
  %length101 = getelementptr inbounds %struct.BlockList* %122, i32 0, i32 3
  %123 = load i32* %length101, align 4
  %124 = load i32** %relative_i, align 8
  %125 = load %struct.BlockList** %above_bl.addr, align 8
  %length102 = getelementptr inbounds %struct.BlockList* %125, i32 0, i32 3
  %126 = load i32* %length102, align 4
  %127 = load i32** %relative_j, align 8
  %128 = load i32* %dest_block, align 4
  %idxprom103 = sext i32 %128 to i64
  %129 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx104 = getelementptr inbounds %union.Entry* %129, i64 %idxprom103
  %block105 = bitcast %union.Entry* %arrayidx104 to %struct.Block**
  %130 = load %struct.Block** %block105, align 8
  %length106 = getelementptr inbounds %struct.Block* %130, i32 0, i32 5
  %131 = load i32* %length106, align 4
  %132 = load %struct.LocalCopies** %lc.addr, align 8
  %updatetmp107 = getelementptr inbounds %struct.LocalCopies* %132, i32 0, i32 5
  %133 = load double** %updatetmp107, align 8
  %134 = load i32* %dest_block, align 4
  %idxprom108 = sext i32 %134 to i64
  %135 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx109 = getelementptr inbounds %union.Entry* %135, i64 %idxprom108
  %block110 = bitcast %union.Entry* %arrayidx109 to %struct.Block**
  %136 = load %struct.Block** %block110, align 8
  %nz111 = getelementptr inbounds %struct.Block* %136, i32 0, i32 11
  %137 = load double** %nz111, align 8
  %call112 = call i32 @ScatterUpdateFO(i32 %123, i32* %124, i32 %126, i32* %127, i32 %131, double* %133, double* %137)
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.100, %if.end.88
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.end.40
  %138 = load i32* %dest_block, align 4
  %139 = load i32* %MyNum.addr, align 4
  %140 = load %struct.LocalCopies** %lc.addr, align 8
  %call115 = call i32 @DecrementRemaining(i32 %138, i32 %139, %struct.LocalCopies* %140)
  br label %return

return:                                           ; preds = %if.end.114, %if.then.8
  %141 = load i32* %retval
  ret i32 %141
}

; Function Attrs: nounwind uwtable
define internal i32 @FreeColumnListFO(i32 %p, i32 %col) {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %bl = alloca %struct.BlockList*, align 8
  store i32 %p, i32* %p.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32* %col.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32* %p.addr, align 4
  %idxprom1 = sext i32 %1 to i64
  %2 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx = getelementptr inbounds %struct.BlockList*** %2, i64 %idxprom1
  %3 = load %struct.BlockList*** %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds %struct.BlockList** %3, i64 %idxprom
  %4 = load %struct.BlockList** %arrayidx2, align 8
  %tobool = icmp ne %struct.BlockList* %4, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32* %col.addr, align 4
  %idxprom3 = sext i32 %5 to i64
  %6 = load i32* %p.addr, align 4
  %idxprom4 = sext i32 %6 to i64
  %7 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx5 = getelementptr inbounds %struct.BlockList*** %7, i64 %idxprom4
  %8 = load %struct.BlockList*** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds %struct.BlockList** %8, i64 %idxprom3
  %9 = load %struct.BlockList** %arrayidx6, align 8
  store %struct.BlockList* %9, %struct.BlockList** %bl, align 8
  %10 = load %struct.BlockList** %bl, align 8
  %next = getelementptr inbounds %struct.BlockList* %10, i32 0, i32 6
  %11 = load %struct.BlockList** %next, align 8
  %12 = load i32* %col.addr, align 4
  %idxprom7 = sext i32 %12 to i64
  %13 = load i32* %p.addr, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx9 = getelementptr inbounds %struct.BlockList*** %14, i64 %idxprom8
  %15 = load %struct.BlockList*** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds %struct.BlockList** %15, i64 %idxprom7
  store %struct.BlockList* %11, %struct.BlockList** %arrayidx10, align 8
  %16 = load %struct.BlockList** %bl, align 8
  %call = call i32 (%struct.BlockList*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (%struct.BlockList*, ...)*)(%struct.BlockList* %16)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.11

while.cond.11:                                    ; preds = %while.body.17, %while.end
  %17 = load i32* %col.addr, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i32* %p.addr, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx14 = getelementptr inbounds %struct.BlockList*** %19, i64 %idxprom13
  %20 = load %struct.BlockList*** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds %struct.BlockList** %20, i64 %idxprom12
  %21 = load %struct.BlockList** %arrayidx15, align 8
  %tobool16 = icmp ne %struct.BlockList* %21, null
  br i1 %tobool16, label %while.body.17, label %while.end.28

while.body.17:                                    ; preds = %while.cond.11
  %22 = load i32* %col.addr, align 4
  %idxprom18 = sext i32 %22 to i64
  %23 = load i32* %p.addr, align 4
  %idxprom19 = sext i32 %23 to i64
  %24 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx20 = getelementptr inbounds %struct.BlockList*** %24, i64 %idxprom19
  %25 = load %struct.BlockList*** %arrayidx20, align 8
  %arrayidx21 = getelementptr inbounds %struct.BlockList** %25, i64 %idxprom18
  %26 = load %struct.BlockList** %arrayidx21, align 8
  store %struct.BlockList* %26, %struct.BlockList** %bl, align 8
  %27 = load %struct.BlockList** %bl, align 8
  %next22 = getelementptr inbounds %struct.BlockList* %27, i32 0, i32 6
  %28 = load %struct.BlockList** %next22, align 8
  %29 = load i32* %col.addr, align 4
  %idxprom23 = sext i32 %29 to i64
  %30 = load i32* %p.addr, align 4
  %idxprom24 = sext i32 %30 to i64
  %31 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx25 = getelementptr inbounds %struct.BlockList*** %31, i64 %idxprom24
  %32 = load %struct.BlockList*** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds %struct.BlockList** %32, i64 %idxprom23
  store %struct.BlockList* %28, %struct.BlockList** %arrayidx26, align 8
  %33 = load %struct.BlockList** %bl, align 8
  %call27 = call i32 (%struct.BlockList*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (%struct.BlockList*, ...)*)(%struct.BlockList* %33)
  br label %while.cond.11

while.end.28:                                     ; preds = %while.cond.11
  %34 = load i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @DecrementRemaining(i32 %dest_block, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %dest_block.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  store i32 %dest_block, i32* %dest_block.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %dest_block.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx = getelementptr inbounds %union.Entry* %1, i64 %idxprom
  %block = bitcast %union.Entry* %arrayidx to %struct.Block**
  %2 = load %struct.Block** %block, align 8
  %remaining = getelementptr inbounds %struct.Block* %2, i32 0, i32 3
  %3 = load i32* %remaining, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %remaining, align 4
  %4 = load i32* %dest_block.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %5 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %5, i64 %idxprom1
  %block3 = bitcast %union.Entry* %arrayidx2 to %struct.Block**
  %6 = load %struct.Block** %block3, align 8
  %remaining4 = getelementptr inbounds %struct.Block* %6, i32 0, i32 3
  %7 = load i32* %remaining4, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i32* %dest_block.addr, align 4
  %9 = load i32* %MyNum.addr, align 4
  %10 = load %struct.LocalCopies** %lc.addr, align 8
  %call = call i32 @BlockReadyFO(i32 %8, i32 %9, %struct.LocalCopies* %10)
  br label %if.end.12

if.else:                                          ; preds = %entry
  %11 = load i32* %dest_block.addr, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx6 = getelementptr inbounds %union.Entry* %12, i64 %idxprom5
  %block7 = bitcast %union.Entry* %arrayidx6 to %struct.Block**
  %13 = load %struct.Block** %block7, align 8
  %remaining8 = getelementptr inbounds %struct.Block* %13, i32 0, i32 3
  %14 = load i32* %remaining8, align 4
  %cmp9 = icmp eq i32 %14, -1
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.else
  %call11 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([19 x i8]* @.str.1.19, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %15 = load i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @DistributeUpdateFO(i32 %which_domain, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %which_domain.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %bi = alloca i32, align 4
  %bj = alloca i32, align 4
  %desti = alloca i32, align 4
  %destj = alloca i32, align 4
  %dest_block = alloca i32, align 4
  store i32 %which_domain, i32* %which_domain.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %1 = load i32* %which_domain.addr, align 4
  %add = add nsw i32 %0, %1
  %idxprom = sext i32 %add to i64
  %2 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  store i32 %3, i32* %bi, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.21, %entry
  %4 = load i32* %bi, align 4
  %5 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %6 = load i32* %which_domain.addr, align 4
  %add1 = add nsw i32 %5, %6
  %add2 = add nsw i32 %add1, 1
  %idxprom3 = sext i32 %add2 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %7, i64 %idxprom3
  %8 = load i32* %arrayidx4, align 4
  %cmp = icmp slt i32 %4, %8
  br i1 %cmp, label %for.body, label %for.end.23

for.body:                                         ; preds = %for.cond
  %9 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %10 = load i32* %which_domain.addr, align 4
  %add5 = add nsw i32 %9, %10
  %idxprom6 = sext i32 %add5 to i64
  %11 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %11, i64 %idxprom6
  %12 = load i32* %arrayidx7, align 4
  store i32 %12, i32* %bj, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc, %for.body
  %13 = load i32* %bj, align 4
  %14 = load i32* %bi, align 4
  %cmp9 = icmp sle i32 %13, %14
  br i1 %cmp9, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %for.cond.8
  %15 = load i32* %bi, align 4
  %idxprom11 = sext i32 %15 to i64
  %16 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx12 = getelementptr inbounds %union.Entry* %16, i64 %idxprom11
  %block = bitcast %union.Entry* %arrayidx12 to %struct.Block**
  %17 = load %struct.Block** %block, align 8
  %i = getelementptr inbounds %struct.Block* %17, i32 0, i32 0
  %18 = load i32* %i, align 4
  store i32 %18, i32* %desti, align 4
  %19 = load i32* %bj, align 4
  %idxprom13 = sext i32 %19 to i64
  %20 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx14 = getelementptr inbounds %union.Entry* %20, i64 %idxprom13
  %block15 = bitcast %union.Entry* %arrayidx14 to %struct.Block**
  %21 = load %struct.Block** %block15, align 8
  %i16 = getelementptr inbounds %struct.Block* %21, i32 0, i32 0
  %22 = load i32* %i16, align 4
  store i32 %22, i32* %destj, align 4
  %23 = load i32* %desti, align 4
  %24 = load i32* %destj, align 4
  %call = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %23, i32 %24)
  store i32 %call, i32* %dest_block, align 4
  %25 = load i32* %which_domain.addr, align 4
  %26 = load i32* %dest_block, align 4
  %27 = load i32* %bi, align 4
  %28 = load i32* %bj, align 4
  %29 = load i32* %dest_block, align 4
  %idxprom17 = sext i32 %29 to i64
  %30 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx18 = getelementptr inbounds %union.Entry* %30, i64 %idxprom17
  %block19 = bitcast %union.Entry* %arrayidx18 to %struct.Block**
  %31 = load %struct.Block** %block19, align 8
  %owner = getelementptr inbounds %struct.Block* %31, i32 0, i32 2
  %32 = load i32* %owner, align 4
  %33 = load i32* %MyNum.addr, align 4
  %34 = load %struct.LocalCopies** %lc.addr, align 8
  %call20 = call i32 @Send(i32 %25, i32 %26, i32 %27, i32 %28, %struct.Update* inttoptr (i64 -19 to %struct.Update*), i32 %32, i32 %33, %struct.LocalCopies* %34)
  br label %for.inc

for.inc:                                          ; preds = %for.body.10
  %35 = load i32* %bj, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %bj, align 4
  br label %for.cond.8

for.end:                                          ; preds = %for.cond.8
  br label %for.inc.21

for.inc.21:                                       ; preds = %for.end
  %36 = load i32* %bi, align 4
  %inc22 = add nsw i32 %36, 1
  store i32 %inc22, i32* %bi, align 4
  br label %for.cond

for.end.23:                                       ; preds = %for.cond
  %37 = load i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal i32 @FindRelativeIndices(i32* %src_structure, i32 %src_len, i32* %dest_structure, i32 %dest_len, i32* %relative) {
entry:
  %retval = alloca i32, align 4
  %src_structure.addr = alloca i32*, align 8
  %src_len.addr = alloca i32, align 4
  %dest_structure.addr = alloca i32*, align 8
  %dest_len.addr = alloca i32, align 4
  %relative.addr = alloca i32*, align 8
  %srci = alloca i32, align 4
  %desti = alloca i32, align 4
  %leftRow = alloca i32*, align 8
  %rightRow = alloca i32*, align 8
  %last = alloca i32*, align 8
  store i32* %src_structure, i32** %src_structure.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store i32* %dest_structure, i32** %dest_structure.addr, align 8
  store i32 %dest_len, i32* %dest_len.addr, align 4
  store i32* %relative, i32** %relative.addr, align 8
  %0 = load i32** %src_structure.addr, align 8
  store i32* %0, i32** %leftRow, align 8
  %1 = load i32** %dest_structure.addr, align 8
  store i32* %1, i32** %rightRow, align 8
  %2 = load i32* %src_len.addr, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %src_structure.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  store i32* %arrayidx, i32** %last, align 8
  store i32 0, i32* %desti, align 4
  store i32 0, i32* %srci, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %4 = load i32** %leftRow, align 8
  %5 = load i32** %last, align 8
  %cmp = icmp ne i32* %4, %5
  br i1 %cmp, label %while.body, label %while.end.10

while.body:                                       ; preds = %while.cond
  br label %while.cond.1

while.cond.1:                                     ; preds = %while.body.3, %while.body
  %6 = load i32** %rightRow, align 8
  %7 = load i32* %6, align 4
  %8 = load i32** %leftRow, align 8
  %9 = load i32* %8, align 4
  %cmp2 = icmp ne i32 %7, %9
  br i1 %cmp2, label %while.body.3, label %while.end

while.body.3:                                     ; preds = %while.cond.1
  %10 = load i32** %rightRow, align 8
  %incdec.ptr = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr, i32** %rightRow, align 8
  %11 = load i32* %desti, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %desti, align 4
  br label %while.cond.1

while.end:                                        ; preds = %while.cond.1
  %12 = load i32* %desti, align 4
  %13 = load i32* %srci, align 4
  %idxprom4 = sext i32 %13 to i64
  %14 = load i32** %relative.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %14, i64 %idxprom4
  store i32 %12, i32* %arrayidx5, align 4
  %15 = load i32** %leftRow, align 8
  %incdec.ptr6 = getelementptr inbounds i32* %15, i32 1
  store i32* %incdec.ptr6, i32** %leftRow, align 8
  %16 = load i32** %rightRow, align 8
  %incdec.ptr7 = getelementptr inbounds i32* %16, i32 1
  store i32* %incdec.ptr7, i32** %rightRow, align 8
  %17 = load i32* %srci, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %srci, align 4
  %18 = load i32* %desti, align 4
  %inc9 = add nsw i32 %18, 1
  store i32 %inc9, i32* %desti, align 4
  br label %while.cond

while.end.10:                                     ; preds = %while.cond
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @CheckRemaining() {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bogus = alloca i32, align 4
  store i32 0, i32* %bogus, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.13, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.17

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.12, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %j, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %8 = load i32* %i, align 4
  %9 = load i32* %j, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx9 = getelementptr inbounds %union.Entry* %13, i64 %idxprom8
  %block = bitcast %union.Entry* %arrayidx9 to %struct.Block**
  %14 = load %struct.Block** %block, align 8
  %remaining = getelementptr inbounds %struct.Block* %14, i32 0, i32 3
  %15 = load i32* %remaining, align 4
  %tobool10 = icmp ne i32 %15, 0
  br i1 %tobool10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %for.body.7
  store i32 1, i32* %bogus, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.11, %for.body.7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %if.end.12

if.end.12:                                        ; preds = %for.end, %for.body
  br label %for.inc.13

for.inc.13:                                       ; preds = %if.end.12
  %17 = load i32* %j, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx15 = getelementptr inbounds i32* %18, i64 %idxprom14
  %19 = load i32* %arrayidx15, align 4
  %20 = load i32* %j, align 4
  %add16 = add nsw i32 %20, %19
  store i32 %add16, i32* %j, align 4
  br label %for.cond

for.end.17:                                       ; preds = %for.cond
  %21 = load i32* %bogus, align 4
  %tobool18 = icmp ne i32 %21, 0
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %for.end.17
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.4.20, i32 0, i32 0))
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %for.end.17
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @CheckReceived() {
entry:
  %retval = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %bogus = alloca i32, align 4
  store i32 0, i32* %bogus, align 4
  store i32 0, i32* %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.13, %entry
  %0 = load i32* %p, align 4
  %1 = load i32* @P, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.15

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32* %i, align 4
  %3 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32* %p, align 4
  %idxprom4 = sext i32 %5 to i64
  %6 = load %struct.BlockList**** @AllBlocks, align 8
  %arrayidx = getelementptr inbounds %struct.BlockList*** %6, i64 %idxprom4
  %7 = load %struct.BlockList*** %arrayidx, align 8
  %arrayidx5 = getelementptr inbounds %struct.BlockList** %7, i64 %idxprom
  %8 = load %struct.BlockList** %arrayidx5, align 8
  %tobool = icmp ne %struct.BlockList* %8, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.3
  store i32 1, i32* %bogus, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  %9 = load i32* %i, align 4
  %idxprom6 = sext i32 %9 to i64
  %10 = load i32* %p, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load %struct.BlockList**** @DiagBlock, align 8
  %arrayidx8 = getelementptr inbounds %struct.BlockList*** %11, i64 %idxprom7
  %12 = load %struct.BlockList*** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds %struct.BlockList** %12, i64 %idxprom6
  %13 = load %struct.BlockList** %arrayidx9, align 8
  %tobool10 = icmp ne %struct.BlockList* %13, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end
  store i32 1, i32* %bogus, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %14 = load i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.end
  %15 = load i32* %p, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %p, align 4
  br label %for.cond

for.end.15:                                       ; preds = %for.cond
  %16 = load i32* %bogus, align 4
  %tobool16 = icmp ne i32 %16, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %for.end.15
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([14 x i8]* @.str.5.21, i32 0, i32 0))
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %for.end.15
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeRemainingFO() {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %desti = alloca i32, align 4
  %destj = alloca i32, align 4
  %dest_block = alloca i32, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.12

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32* %j, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %6, i64 %idxprom1
  %7 = load i32* %arrayidx2, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %8 = load i32* %i, align 4
  %9 = load i32* %j, align 4
  %add = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.3
  %12 = load i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx9 = getelementptr inbounds %union.Entry* %13, i64 %idxprom8
  %block = bitcast %union.Entry* %arrayidx9 to %struct.Block**
  %14 = load %struct.Block** %block, align 8
  %nmod = getelementptr inbounds %struct.Block* %14, i32 0, i32 4
  store i32 0, i32* %nmod, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.7
  %15 = load i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %if.end

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc.10

for.inc.10:                                       ; preds = %if.end
  %16 = load i32* %j, align 4
  %inc11 = add nsw i32 %16, 1
  store i32 %inc11, i32* %j, align 4
  br label %for.cond

for.end.12:                                       ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc.63, %for.end.12
  %17 = load i32* %k, align 4
  %18 = load i32* @P, align 4
  %idxprom14 = sext i32 %18 to i64
  %19 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx15 = getelementptr inbounds i32* %19, i64 %idxprom14
  %20 = load i32* %arrayidx15, align 4
  %cmp16 = icmp slt i32 %17, %20
  br i1 %cmp16, label %for.body.17, label %for.end.65

for.body.17:                                      ; preds = %for.cond.13
  %21 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %22 = load i32* %k, align 4
  %add18 = add nsw i32 %21, %22
  %idxprom19 = sext i32 %add18 to i64
  %23 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx20 = getelementptr inbounds i32* %23, i64 %idxprom19
  %24 = load i32* %arrayidx20, align 4
  store i32 %24, i32* %i, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.60, %for.body.17
  %25 = load i32* %i, align 4
  %26 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %27 = load i32* %k, align 4
  %add22 = add nsw i32 %26, %27
  %add23 = add nsw i32 %add22, 1
  %idxprom24 = sext i32 %add23 to i64
  %28 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx25 = getelementptr inbounds i32* %28, i64 %idxprom24
  %29 = load i32* %arrayidx25, align 4
  %cmp26 = icmp slt i32 %25, %29
  br i1 %cmp26, label %for.body.27, label %for.end.62

for.body.27:                                      ; preds = %for.cond.21
  %30 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %31 = load i32* %k, align 4
  %add28 = add nsw i32 %30, %31
  %idxprom29 = sext i32 %add28 to i64
  %32 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx30 = getelementptr inbounds i32* %32, i64 %idxprom29
  %33 = load i32* %arrayidx30, align 4
  store i32 %33, i32* %j, align 4
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.47, %for.body.27
  %34 = load i32* %j, align 4
  %35 = load i32* %i, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body.33, label %for.end.49

for.body.33:                                      ; preds = %for.cond.31
  %36 = load i32* %j, align 4
  %idxprom34 = sext i32 %36 to i64
  %37 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx35 = getelementptr inbounds %union.Entry* %37, i64 %idxprom34
  %block36 = bitcast %union.Entry* %arrayidx35 to %struct.Block**
  %38 = load %struct.Block** %block36, align 8
  %i37 = getelementptr inbounds %struct.Block* %38, i32 0, i32 0
  %39 = load i32* %i37, align 4
  store i32 %39, i32* %destj, align 4
  %40 = load i32* %i, align 4
  %idxprom38 = sext i32 %40 to i64
  %41 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx39 = getelementptr inbounds %union.Entry* %41, i64 %idxprom38
  %block40 = bitcast %union.Entry* %arrayidx39 to %struct.Block**
  %42 = load %struct.Block** %block40, align 8
  %i41 = getelementptr inbounds %struct.Block* %42, i32 0, i32 0
  %43 = load i32* %i41, align 4
  store i32 %43, i32* %desti, align 4
  %44 = load i32* %desti, align 4
  %45 = load i32* %destj, align 4
  %call = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %44, i32 %45)
  store i32 %call, i32* %dest_block, align 4
  %46 = load i32* %dest_block, align 4
  %idxprom42 = sext i32 %46 to i64
  %47 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx43 = getelementptr inbounds %union.Entry* %47, i64 %idxprom42
  %block44 = bitcast %union.Entry* %arrayidx43 to %struct.Block**
  %48 = load %struct.Block** %block44, align 8
  %nmod45 = getelementptr inbounds %struct.Block* %48, i32 0, i32 4
  %49 = load i32* %nmod45, align 4
  %inc46 = add nsw i32 %49, 1
  store i32 %inc46, i32* %nmod45, align 4
  br label %for.inc.47

for.inc.47:                                       ; preds = %for.body.33
  %50 = load i32* %j, align 4
  %inc48 = add nsw i32 %50, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond.31

for.end.49:                                       ; preds = %for.cond.31
  %51 = load i32* %i, align 4
  %idxprom50 = sext i32 %51 to i64
  %52 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx51 = getelementptr inbounds %union.Entry* %52, i64 %idxprom50
  %block52 = bitcast %union.Entry* %arrayidx51 to %struct.Block**
  %53 = load %struct.Block** %block52, align 8
  %i53 = getelementptr inbounds %struct.Block* %53, i32 0, i32 0
  %54 = load i32* %i53, align 4
  store i32 %54, i32* %desti, align 4
  %55 = load i32* %desti, align 4
  %56 = load i32* %desti, align 4
  %call54 = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %55, i32 %56)
  store i32 %call54, i32* %dest_block, align 4
  %57 = load i32* %dest_block, align 4
  %idxprom55 = sext i32 %57 to i64
  %58 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx56 = getelementptr inbounds %union.Entry* %58, i64 %idxprom55
  %block57 = bitcast %union.Entry* %arrayidx56 to %struct.Block**
  %59 = load %struct.Block** %block57, align 8
  %nmod58 = getelementptr inbounds %struct.Block* %59, i32 0, i32 4
  %60 = load i32* %nmod58, align 4
  %inc59 = add nsw i32 %60, 1
  store i32 %inc59, i32* %nmod58, align 4
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.end.49
  %61 = load i32* %i, align 4
  %inc61 = add nsw i32 %61, 1
  store i32 %inc61, i32* %i, align 4
  br label %for.cond.21

for.end.62:                                       ; preds = %for.cond.21
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.end.62
  %62 = load i32* %k, align 4
  %inc64 = add nsw i32 %62, 1
  store i32 %inc64, i32* %k, align 4
  br label %for.cond.13

for.end.65:                                       ; preds = %for.cond.13
  store i32 0, i32* %k, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.119, %for.end.65
  %63 = load i32* %k, align 4
  %64 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp67 = icmp slt i32 %63, %64
  br i1 %cmp67, label %for.body.68, label %for.end.121

for.body.68:                                      ; preds = %for.cond.66
  %65 = load i32* %k, align 4
  %idxprom69 = sext i32 %65 to i64
  %66 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx70 = getelementptr inbounds i32* %66, i64 %idxprom69
  %67 = load i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %67, 0
  br i1 %tobool71, label %if.end.118, label %if.then.72

if.then.72:                                       ; preds = %for.body.68
  %68 = load i32* %k, align 4
  %idxprom73 = sext i32 %68 to i64
  %69 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx74 = getelementptr inbounds i32* %69, i64 %idxprom73
  %70 = load i32* %arrayidx74, align 4
  %add75 = add nsw i32 %70, 1
  store i32 %add75, i32* %i, align 4
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.115, %if.then.72
  %71 = load i32* %i, align 4
  %72 = load i32* %k, align 4
  %add77 = add nsw i32 %72, 1
  %idxprom78 = sext i32 %add77 to i64
  %73 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx79 = getelementptr inbounds i32* %73, i64 %idxprom78
  %74 = load i32* %arrayidx79, align 4
  %cmp80 = icmp slt i32 %71, %74
  br i1 %cmp80, label %for.body.81, label %for.end.117

for.body.81:                                      ; preds = %for.cond.76
  %75 = load i32* %k, align 4
  %idxprom82 = sext i32 %75 to i64
  %76 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx83 = getelementptr inbounds i32* %76, i64 %idxprom82
  %77 = load i32* %arrayidx83, align 4
  %add84 = add nsw i32 %77, 1
  store i32 %add84, i32* %j, align 4
  br label %for.cond.85

for.cond.85:                                      ; preds = %for.inc.102, %for.body.81
  %78 = load i32* %j, align 4
  %79 = load i32* %i, align 4
  %cmp86 = icmp slt i32 %78, %79
  br i1 %cmp86, label %for.body.87, label %for.end.104

for.body.87:                                      ; preds = %for.cond.85
  %80 = load i32* %j, align 4
  %idxprom88 = sext i32 %80 to i64
  %81 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx89 = getelementptr inbounds %union.Entry* %81, i64 %idxprom88
  %block90 = bitcast %union.Entry* %arrayidx89 to %struct.Block**
  %82 = load %struct.Block** %block90, align 8
  %i91 = getelementptr inbounds %struct.Block* %82, i32 0, i32 0
  %83 = load i32* %i91, align 4
  store i32 %83, i32* %destj, align 4
  %84 = load i32* %i, align 4
  %idxprom92 = sext i32 %84 to i64
  %85 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx93 = getelementptr inbounds %union.Entry* %85, i64 %idxprom92
  %block94 = bitcast %union.Entry* %arrayidx93 to %struct.Block**
  %86 = load %struct.Block** %block94, align 8
  %i95 = getelementptr inbounds %struct.Block* %86, i32 0, i32 0
  %87 = load i32* %i95, align 4
  store i32 %87, i32* %desti, align 4
  %88 = load i32* %desti, align 4
  %89 = load i32* %destj, align 4
  %call96 = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %88, i32 %89)
  store i32 %call96, i32* %dest_block, align 4
  %90 = load i32* %dest_block, align 4
  %idxprom97 = sext i32 %90 to i64
  %91 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx98 = getelementptr inbounds %union.Entry* %91, i64 %idxprom97
  %block99 = bitcast %union.Entry* %arrayidx98 to %struct.Block**
  %92 = load %struct.Block** %block99, align 8
  %nmod100 = getelementptr inbounds %struct.Block* %92, i32 0, i32 4
  %93 = load i32* %nmod100, align 4
  %inc101 = add nsw i32 %93, 1
  store i32 %inc101, i32* %nmod100, align 4
  br label %for.inc.102

for.inc.102:                                      ; preds = %for.body.87
  %94 = load i32* %j, align 4
  %inc103 = add nsw i32 %94, 1
  store i32 %inc103, i32* %j, align 4
  br label %for.cond.85

for.end.104:                                      ; preds = %for.cond.85
  %95 = load i32* %i, align 4
  %idxprom105 = sext i32 %95 to i64
  %96 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx106 = getelementptr inbounds %union.Entry* %96, i64 %idxprom105
  %block107 = bitcast %union.Entry* %arrayidx106 to %struct.Block**
  %97 = load %struct.Block** %block107, align 8
  %i108 = getelementptr inbounds %struct.Block* %97, i32 0, i32 0
  %98 = load i32* %i108, align 4
  store i32 %98, i32* %desti, align 4
  %99 = load i32* %desti, align 4
  %100 = load i32* %desti, align 4
  %call109 = call i32 (i32, i32, ...) *bitcast (i32 (i32, i32)* @FindBlock to i32 (i32, i32, ...)*)(i32 %99, i32 %100)
  store i32 %call109, i32* %dest_block, align 4
  %101 = load i32* %dest_block, align 4
  %idxprom110 = sext i32 %101 to i64
  %102 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx111 = getelementptr inbounds %union.Entry* %102, i64 %idxprom110
  %block112 = bitcast %union.Entry* %arrayidx111 to %struct.Block**
  %103 = load %struct.Block** %block112, align 8
  %nmod113 = getelementptr inbounds %struct.Block* %103, i32 0, i32 4
  %104 = load i32* %nmod113, align 4
  %inc114 = add nsw i32 %104, 1
  store i32 %inc114, i32* %nmod113, align 4
  br label %for.inc.115

for.inc.115:                                      ; preds = %for.end.104
  %105 = load i32* %i, align 4
  %inc116 = add nsw i32 %105, 1
  store i32 %inc116, i32* %i, align 4
  br label %for.cond.76

for.end.117:                                      ; preds = %for.cond.76
  br label %if.end.118

if.end.118:                                       ; preds = %for.end.117, %for.body.68
  br label %for.inc.119

for.inc.119:                                      ; preds = %if.end.118
  %106 = load i32* %k, align 4
  %inc120 = add nsw i32 %106, 1
  store i32 %inc120, i32* %k, align 4
  br label %for.cond.66

for.end.121:                                      ; preds = %for.cond.66
  %107 = load i32* %retval
  ret i32 %107
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeReceivedFO() {
entry:
  %retval = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %block = alloca i32, align 4
  %P_row = alloca i32, align 4
  %P_col = alloca i32, align 4
  %destp = alloca i32, align 4
  store i32 0, i32* %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.6, %entry
  %0 = load i32* %p, align 4
  %1 = load i32* @P, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32* %i, align 4
  %3 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 14), align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32* %p, align 4
  %idxprom4 = sext i32 %5 to i64
  %6 = load i32*** @ToReceive, align 8
  %arrayidx = getelementptr inbounds i32** %6, i64 %idxprom4
  %7 = load i32** %arrayidx, align 8
  %arrayidx5 = getelementptr inbounds i32* %7, i64 %idxprom
  store i32 0, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.3
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.6

for.inc.6:                                        ; preds = %for.end
  %9 = load i32* %p, align 4
  %inc7 = add nsw i32 %9, 1
  store i32 %inc7, i32* %p, align 4
  br label %for.cond

for.end.8:                                        ; preds = %for.cond
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc.101, %for.end.8
  %10 = load i32* %k, align 4
  %11 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %cmp10 = icmp slt i32 %10, %11
  br i1 %cmp10, label %for.body.11, label %for.end.105

for.body.11:                                      ; preds = %for.cond.9
  %12 = load i32* %k, align 4
  %idxprom12 = sext i32 %12 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 10), align 8
  %arrayidx13 = getelementptr inbounds i32* %13, i64 %idxprom12
  %14 = load i32* %arrayidx13, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.end.100, label %if.then

if.then:                                          ; preds = %for.body.11
  %15 = load i32* %k, align 4
  %idxprom14 = sext i32 %15 to i64
  %16 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx15 = getelementptr inbounds i32* %16, i64 %idxprom14
  %17 = load i32* %arrayidx15, align 4
  store i32 %17, i32* %block, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.97, %if.then
  %18 = load i32* %block, align 4
  %19 = load i32* %k, align 4
  %add = add nsw i32 %19, 1
  %idxprom17 = sext i32 %add to i64
  %20 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx18 = getelementptr inbounds i32* %20, i64 %idxprom17
  %21 = load i32* %arrayidx18, align 4
  %cmp19 = icmp slt i32 %18, %21
  br i1 %cmp19, label %for.body.20, label %for.end.99

for.body.20:                                      ; preds = %for.cond.16
  %22 = load i32* @scatter_decomposition, align 4
  %tobool21 = icmp ne i32 %22, 0
  br i1 %tobool21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %for.body.20
  %23 = load i32* %block, align 4
  %idxprom23 = sext i32 %23 to i64
  %24 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx24 = getelementptr inbounds %union.Entry* %24, i64 %idxprom23
  %block25 = bitcast %union.Entry* %arrayidx24 to %struct.Block**
  %25 = load %struct.Block** %block25, align 8
  %i26 = getelementptr inbounds %struct.Block* %25, i32 0, i32 0
  %26 = load i32* %i26, align 4
  %idxprom27 = sext i32 %26 to i64
  %27 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx28 = getelementptr inbounds i32* %27, i64 %idxprom27
  %28 = load i32* %arrayidx28, align 4
  %idxprom29 = sext i32 %28 to i64
  %29 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 8), align 8
  %arrayidx30 = getelementptr inbounds i32* %29, i64 %idxprom29
  %30 = load i32* %arrayidx30, align 4
  %31 = load i32* @P_dimi, align 4
  %rem = srem i32 %30, %31
  store i32 %rem, i32* %P_row, align 4
  %32 = load i32* %block, align 4
  %idxprom31 = sext i32 %32 to i64
  %33 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx32 = getelementptr inbounds %union.Entry* %33, i64 %idxprom31
  %block33 = bitcast %union.Entry* %arrayidx32 to %struct.Block**
  %34 = load %struct.Block** %block33, align 8
  %i34 = getelementptr inbounds %struct.Block* %34, i32 0, i32 0
  %35 = load i32* %i34, align 4
  %idxprom35 = sext i32 %35 to i64
  %36 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx36 = getelementptr inbounds i32* %36, i64 %idxprom35
  %37 = load i32* %arrayidx36, align 4
  %idxprom37 = sext i32 %37 to i64
  %38 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 9), align 8
  %arrayidx38 = getelementptr inbounds i32* %38, i64 %idxprom37
  %39 = load i32* %arrayidx38, align 4
  %40 = load i32* @P_dimj, align 4
  %rem39 = srem i32 %39, %40
  store i32 %rem39, i32* %P_col, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.40

for.cond.40:                                      ; preds = %for.inc.55, %if.then.22
  %41 = load i32* %i, align 4
  %42 = load i32* @P_dimj, align 4
  %cmp41 = icmp slt i32 %41, %42
  br i1 %cmp41, label %for.body.42, label %for.end.57

for.body.42:                                      ; preds = %for.cond.40
  %43 = load i32* %P_row, align 4
  %44 = load i32* %i, align 4
  %45 = load i32* @P_dimi, align 4
  %mul = mul nsw i32 %44, %45
  %add43 = add nsw i32 %43, %mul
  store i32 %add43, i32* %destp, align 4
  %46 = load i32* %block, align 4
  %idxprom44 = sext i32 %46 to i64
  %47 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx45 = getelementptr inbounds %union.Entry* %47, i64 %idxprom44
  %block46 = bitcast %union.Entry* %arrayidx45 to %struct.Block**
  %48 = load %struct.Block** %block46, align 8
  %j47 = getelementptr inbounds %struct.Block* %48, i32 0, i32 1
  %49 = load i32* %j47, align 4
  %idxprom48 = sext i32 %49 to i64
  %50 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx49 = getelementptr inbounds i32* %50, i64 %idxprom48
  %51 = load i32* %arrayidx49, align 4
  %idxprom50 = sext i32 %51 to i64
  %52 = load i32* %destp, align 4
  %idxprom51 = sext i32 %52 to i64
  %53 = load i32*** @ToReceive, align 8
  %arrayidx52 = getelementptr inbounds i32** %53, i64 %idxprom51
  %54 = load i32** %arrayidx52, align 8
  %arrayidx53 = getelementptr inbounds i32* %54, i64 %idxprom50
  %55 = load i32* %arrayidx53, align 4
  %inc54 = add nsw i32 %55, 1
  store i32 %inc54, i32* %arrayidx53, align 4
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.body.42
  %56 = load i32* %i, align 4
  %inc56 = add nsw i32 %56, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond.40

for.end.57:                                       ; preds = %for.cond.40
  store i32 0, i32* %i, align 4
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.76, %for.end.57
  %57 = load i32* %i, align 4
  %58 = load i32* @P_dimi, align 4
  %cmp59 = icmp slt i32 %57, %58
  br i1 %cmp59, label %for.body.60, label %for.end.78

for.body.60:                                      ; preds = %for.cond.58
  %59 = load i32* %i, align 4
  %60 = load i32* %P_row, align 4
  %cmp61 = icmp ne i32 %59, %60
  br i1 %cmp61, label %if.then.62, label %if.end

if.then.62:                                       ; preds = %for.body.60
  %61 = load i32* %i, align 4
  %62 = load i32* %P_col, align 4
  %63 = load i32* @P_dimi, align 4
  %mul63 = mul nsw i32 %62, %63
  %add64 = add nsw i32 %61, %mul63
  store i32 %add64, i32* %destp, align 4
  %64 = load i32* %block, align 4
  %idxprom65 = sext i32 %64 to i64
  %65 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx66 = getelementptr inbounds %union.Entry* %65, i64 %idxprom65
  %block67 = bitcast %union.Entry* %arrayidx66 to %struct.Block**
  %66 = load %struct.Block** %block67, align 8
  %j68 = getelementptr inbounds %struct.Block* %66, i32 0, i32 1
  %67 = load i32* %j68, align 4
  %idxprom69 = sext i32 %67 to i64
  %68 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx70 = getelementptr inbounds i32* %68, i64 %idxprom69
  %69 = load i32* %arrayidx70, align 4
  %idxprom71 = sext i32 %69 to i64
  %70 = load i32* %destp, align 4
  %idxprom72 = sext i32 %70 to i64
  %71 = load i32*** @ToReceive, align 8
  %arrayidx73 = getelementptr inbounds i32** %71, i64 %idxprom72
  %72 = load i32** %arrayidx73, align 8
  %arrayidx74 = getelementptr inbounds i32* %72, i64 %idxprom71
  %73 = load i32* %arrayidx74, align 4
  %inc75 = add nsw i32 %73, 1
  store i32 %inc75, i32* %arrayidx74, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.62, %for.body.60
  br label %for.inc.76

for.inc.76:                                       ; preds = %if.end
  %74 = load i32* %i, align 4
  %inc77 = add nsw i32 %74, 1
  store i32 %inc77, i32* %i, align 4
  br label %for.cond.58

for.end.78:                                       ; preds = %for.cond.58
  br label %if.end.96

if.else:                                          ; preds = %for.body.20
  store i32 0, i32* %i, align 4
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.93, %if.else
  %75 = load i32* %i, align 4
  %76 = load i32* @P, align 4
  %cmp80 = icmp slt i32 %75, %76
  br i1 %cmp80, label %for.body.81, label %for.end.95

for.body.81:                                      ; preds = %for.cond.79
  %77 = load i32* %block, align 4
  %idxprom82 = sext i32 %77 to i64
  %78 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx83 = getelementptr inbounds %union.Entry* %78, i64 %idxprom82
  %block84 = bitcast %union.Entry* %arrayidx83 to %struct.Block**
  %79 = load %struct.Block** %block84, align 8
  %j85 = getelementptr inbounds %struct.Block* %79, i32 0, i32 1
  %80 = load i32* %j85, align 4
  %idxprom86 = sext i32 %80 to i64
  %81 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 7), align 8
  %arrayidx87 = getelementptr inbounds i32* %81, i64 %idxprom86
  %82 = load i32* %arrayidx87, align 4
  %idxprom88 = sext i32 %82 to i64
  %83 = load i32* %i, align 4
  %idxprom89 = sext i32 %83 to i64
  %84 = load i32*** @ToReceive, align 8
  %arrayidx90 = getelementptr inbounds i32** %84, i64 %idxprom89
  %85 = load i32** %arrayidx90, align 8
  %arrayidx91 = getelementptr inbounds i32* %85, i64 %idxprom88
  %86 = load i32* %arrayidx91, align 4
  %inc92 = add nsw i32 %86, 1
  store i32 %inc92, i32* %arrayidx91, align 4
  br label %for.inc.93

for.inc.93:                                       ; preds = %for.body.81
  %87 = load i32* %i, align 4
  %inc94 = add nsw i32 %87, 1
  store i32 %inc94, i32* %i, align 4
  br label %for.cond.79

for.end.95:                                       ; preds = %for.cond.79
  br label %if.end.96

if.end.96:                                        ; preds = %for.end.95, %for.end.78
  br label %for.inc.97

for.inc.97:                                       ; preds = %if.end.96
  %88 = load i32* %block, align 4
  %inc98 = add nsw i32 %88, 1
  store i32 %inc98, i32* %block, align 4
  br label %for.cond.16

for.end.99:                                       ; preds = %for.cond.16
  br label %if.end.100

if.end.100:                                       ; preds = %for.end.99, %for.body.11
  br label %for.inc.101

for.inc.101:                                      ; preds = %if.end.100
  %89 = load i32* %k, align 4
  %idxprom102 = sext i32 %89 to i64
  %90 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 6), align 8
  %arrayidx103 = getelementptr inbounds i32* %90, i64 %idxprom102
  %91 = load i32* %arrayidx103, align 4
  %92 = load i32* %k, align 4
  %add104 = add nsw i32 %92, %91
  store i32 %add104, i32* %k, align 4
  br label %for.cond.9

for.end.105:                                      ; preds = %for.cond.9
  %93 = load i32* %retval
  ret i32 %93
}

; Function Attrs: nounwind uwtable
define internal i32 @ScatterUpdateFO(i32 %dimi, i32* %structi, i32 %dimj, i32* %structj, i32 %destdim, double* %oldupdate, double* %newupdate) {
entry:
  %retval = alloca i32, align 4
  %dimi.addr = alloca i32, align 4
  %structi.addr = alloca i32*, align 8
  %dimj.addr = alloca i32, align 4
  %structj.addr = alloca i32*, align 8
  %destdim.addr = alloca i32, align 4
  %oldupdate.addr = alloca double*, align 8
  %newupdate.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %top_of_destcol = alloca i32, align 4
  %srccol = alloca double*, align 8
  %destcol = alloca double*, align 8
  store i32 %dimi, i32* %dimi.addr, align 4
  store i32* %structi, i32** %structi.addr, align 8
  store i32 %dimj, i32* %dimj.addr, align 4
  store i32* %structj, i32** %structj.addr, align 8
  store i32 %destdim, i32* %destdim.addr, align 4
  store double* %oldupdate, double** %oldupdate.addr, align 8
  store double* %newupdate, double** %newupdate.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.37, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %dimj.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.39

for.body:                                         ; preds = %for.cond
  %2 = load i32** %structj.addr, align 8
  %tobool = icmp ne i32* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** %structj.addr, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %6 = load i32* %destdim.addr, align 4
  %mul = mul nsw i32 %5, %6
  %idxprom1 = sext i32 %mul to i64
  %7 = load double** %newupdate.addr, align 8
  %arrayidx2 = getelementptr inbounds double* %7, i64 %idxprom1
  store double* %arrayidx2, double** %destcol, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32* %j, align 4
  %9 = load i32* %destdim.addr, align 4
  %mul3 = mul nsw i32 %8, %9
  %idxprom4 = sext i32 %mul3 to i64
  %10 = load double** %newupdate.addr, align 8
  %arrayidx5 = getelementptr inbounds double* %10, i64 %idxprom4
  store double* %arrayidx5, double** %destcol, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load i32* %j, align 4
  %12 = load i32* %dimi.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %idxprom7 = sext i32 %mul6 to i64
  %13 = load double** %oldupdate.addr, align 8
  %arrayidx8 = getelementptr inbounds double* %13, i64 %idxprom7
  store double* %arrayidx8, double** %srccol, align 8
  %14 = load i32** %structi.addr, align 8
  %tobool9 = icmp ne i32* %14, null
  br i1 %tobool9, label %if.then.10, label %if.else.22

if.then.10:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc, %if.then.10
  %15 = load i32* %i, align 4
  %16 = load i32* %dimi.addr, align 4
  %cmp12 = icmp slt i32 %15, %16
  br i1 %cmp12, label %for.body.13, label %for.end

for.body.13:                                      ; preds = %for.cond.11
  %17 = load i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load double** %srccol, align 8
  %arrayidx15 = getelementptr inbounds double* %18, i64 %idxprom14
  %19 = load double* %arrayidx15, align 8
  %20 = load i32* %i, align 4
  %idxprom16 = sext i32 %20 to i64
  %21 = load i32** %structi.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %21, i64 %idxprom16
  %22 = load i32* %arrayidx17, align 4
  %idxprom18 = sext i32 %22 to i64
  %23 = load double** %destcol, align 8
  %arrayidx19 = getelementptr inbounds double* %23, i64 %idxprom18
  %24 = load double* %arrayidx19, align 8
  %add = fadd double %24, %19
  store double %add, double* %arrayidx19, align 8
  %25 = load i32* %i, align 4
  %idxprom20 = sext i32 %25 to i64
  %26 = load double** %srccol, align 8
  %arrayidx21 = getelementptr inbounds double* %26, i64 %idxprom20
  store double 0.000000e+00, double* %arrayidx21, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.13
  %27 = load i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.11

for.end:                                          ; preds = %for.cond.11
  br label %if.end.36

if.else.22:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.33, %if.else.22
  %28 = load i32* %i, align 4
  %29 = load i32* %dimi.addr, align 4
  %cmp24 = icmp slt i32 %28, %29
  br i1 %cmp24, label %for.body.25, label %for.end.35

for.body.25:                                      ; preds = %for.cond.23
  %30 = load i32* %i, align 4
  %idxprom26 = sext i32 %30 to i64
  %31 = load double** %srccol, align 8
  %arrayidx27 = getelementptr inbounds double* %31, i64 %idxprom26
  %32 = load double* %arrayidx27, align 8
  %33 = load i32* %i, align 4
  %idxprom28 = sext i32 %33 to i64
  %34 = load double** %destcol, align 8
  %arrayidx29 = getelementptr inbounds double* %34, i64 %idxprom28
  %35 = load double* %arrayidx29, align 8
  %add30 = fadd double %35, %32
  store double %add30, double* %arrayidx29, align 8
  %36 = load i32* %i, align 4
  %idxprom31 = sext i32 %36 to i64
  %37 = load double** %srccol, align 8
  %arrayidx32 = getelementptr inbounds double* %37, i64 %idxprom31
  store double 0.000000e+00, double* %arrayidx32, align 8
  br label %for.inc.33

for.inc.33:                                       ; preds = %for.body.25
  %38 = load i32* %i, align 4
  %inc34 = add nsw i32 %38, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond.23

for.end.35:                                       ; preds = %for.cond.23
  br label %if.end.36

if.end.36:                                        ; preds = %for.end.35, %for.end
  br label %for.inc.37

for.inc.37:                                       ; preds = %if.end.36
  %39 = load i32* %j, align 4
  %inc38 = add nsw i32 %39, 1
  store i32 %inc38, i32* %j, align 4
  br label %for.cond

for.end.39:                                       ; preds = %for.cond
  %40 = load i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @ScatterUpdateFO2(i32 %dimi, i32* %structi, i32 %dimj, i32* %structj, i32 %stride, i32 %destdim, double* %oldupdate, double* %newupdate) {
entry:
  %retval = alloca i32, align 4
  %dimi.addr = alloca i32, align 4
  %structi.addr = alloca i32*, align 8
  %dimj.addr = alloca i32, align 4
  %structj.addr = alloca i32*, align 8
  %stride.addr = alloca i32, align 4
  %destdim.addr = alloca i32, align 4
  %oldupdate.addr = alloca double*, align 8
  %newupdate.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %top_of_srccol = alloca i32, align 4
  %top_of_destcol = alloca i32, align 4
  store i32 %dimi, i32* %dimi.addr, align 4
  store i32* %structi, i32** %structi.addr, align 8
  store i32 %dimj, i32* %dimj.addr, align 4
  store i32* %structj, i32** %structj.addr, align 8
  store i32 %stride, i32* %stride.addr, align 4
  store i32 %destdim, i32* %destdim.addr, align 4
  store double* %oldupdate, double** %oldupdate.addr, align 8
  store double* %newupdate, double** %newupdate.addr, align 8
  store i32 0, i32* %top_of_srccol, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.31, %entry
  %0 = load i32* %j, align 4
  %1 = load i32* %dimj.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.33

for.body:                                         ; preds = %for.cond
  %2 = load i32** %structj.addr, align 8
  %tobool = icmp ne i32* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** %structj.addr, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %6 = load i32* %destdim.addr, align 4
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %top_of_destcol, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %7 = load i32* %j, align 4
  %8 = load i32* %destdim.addr, align 4
  %mul1 = mul nsw i32 %7, %8
  store i32 %mul1, i32* %top_of_destcol, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32** %structi.addr, align 8
  %tobool2 = icmp ne i32* %9, null
  br i1 %tobool2, label %if.then.3, label %if.else.15

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %if.then.3
  %10 = load i32* %i, align 4
  %11 = load i32* %dimi.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body.6, label %for.end

for.body.6:                                       ; preds = %for.cond.4
  %12 = load i32* %i, align 4
  %13 = load i32* %top_of_srccol, align 4
  %add = add nsw i32 %12, %13
  %idxprom7 = sext i32 %add to i64
  %14 = load double** %oldupdate.addr, align 8
  %arrayidx8 = getelementptr inbounds double* %14, i64 %idxprom7
  %15 = load double* %arrayidx8, align 8
  %16 = load i32* %i, align 4
  %idxprom9 = sext i32 %16 to i64
  %17 = load i32** %structi.addr, align 8
  %arrayidx10 = getelementptr inbounds i32* %17, i64 %idxprom9
  %18 = load i32* %arrayidx10, align 4
  %19 = load i32* %top_of_destcol, align 4
  %add11 = add nsw i32 %18, %19
  %idxprom12 = sext i32 %add11 to i64
  %20 = load double** %newupdate.addr, align 8
  %arrayidx13 = getelementptr inbounds double* %20, i64 %idxprom12
  %21 = load double* %arrayidx13, align 8
  %add14 = fadd double %21, %15
  store double %add14, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.6
  %22 = load i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %if.end.29

if.else.15:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.26, %if.else.15
  %23 = load i32* %i, align 4
  %24 = load i32* %dimi.addr, align 4
  %cmp17 = icmp slt i32 %23, %24
  br i1 %cmp17, label %for.body.18, label %for.end.28

for.body.18:                                      ; preds = %for.cond.16
  %25 = load i32* %i, align 4
  %26 = load i32* %top_of_srccol, align 4
  %add19 = add nsw i32 %25, %26
  %idxprom20 = sext i32 %add19 to i64
  %27 = load double** %oldupdate.addr, align 8
  %arrayidx21 = getelementptr inbounds double* %27, i64 %idxprom20
  %28 = load double* %arrayidx21, align 8
  %29 = load i32* %i, align 4
  %30 = load i32* %top_of_destcol, align 4
  %add22 = add nsw i32 %29, %30
  %idxprom23 = sext i32 %add22 to i64
  %31 = load double** %newupdate.addr, align 8
  %arrayidx24 = getelementptr inbounds double* %31, i64 %idxprom23
  %32 = load double* %arrayidx24, align 8
  %add25 = fadd double %32, %28
  store double %add25, double* %arrayidx24, align 8
  br label %for.inc.26

for.inc.26:                                       ; preds = %for.body.18
  %33 = load i32* %i, align 4
  %inc27 = add nsw i32 %33, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond.16

for.end.28:                                       ; preds = %for.cond.16
  br label %if.end.29

if.end.29:                                        ; preds = %for.end.28, %for.end
  %34 = load i32* %stride.addr, align 4
  %35 = load i32* %j, align 4
  %sub = sub nsw i32 %34, %35
  %36 = load i32* %top_of_srccol, align 4
  %add30 = add nsw i32 %36, %sub
  store i32 %add30, i32* %top_of_srccol, align 4
  br label %for.inc.31

for.inc.31:                                       ; preds = %if.end.29
  %37 = load i32* %j, align 4
  %inc32 = add nsw i32 %37, 1
  store i32 %inc32, i32* %j, align 4
  br label %for.cond

for.end.33:                                       ; preds = %for.cond
  %38 = load i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define internal i32 @InitTaskQueues(i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %P, i32* %P.addr, align 4
  %0 = load i32* %P.addr, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 72
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv1, i32 888)
  %1 = bitcast i8* %call to %struct.taskQ*
  store %struct.taskQ* %1, %struct.taskQ** @tasks, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %P.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.taskQ** @tasks, align 8
  %arrayidx = getelementptr inbounds %struct.taskQ* %5, i64 %idxprom
  %taskLock = getelementptr inbounds %struct.taskQ* %arrayidx, i32 0, i32 0
  %call3 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %taskLock, %union.pthread_mutexattr_t* null)
  %6 = load i32* %i, align 4
  %idxprom4 = sext i32 %6 to i64
  %7 = load %struct.taskQ** @tasks, align 8
  %arrayidx5 = getelementptr inbounds %struct.taskQ* %7, i64 %idxprom4
  %taskQ = getelementptr inbounds %struct.taskQ* %arrayidx5, i32 0, i32 1
  store volatile %struct.Task* null, %struct.Task** %taskQ, align 8
  %8 = load i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load %struct.taskQ** @tasks, align 8
  %arrayidx7 = getelementptr inbounds %struct.taskQ* %9, i64 %idxprom6
  %taskQlast = getelementptr inbounds %struct.taskQ* %arrayidx7, i32 0, i32 2
  store volatile %struct.Task* null, %struct.Task** %taskQlast, align 8
  %10 = load i32* %i, align 4
  %idxprom8 = sext i32 %10 to i64
  %11 = load %struct.taskQ** @tasks, align 8
  %arrayidx9 = getelementptr inbounds %struct.taskQ* %11, i64 %idxprom8
  %probeQ = getelementptr inbounds %struct.taskQ* %arrayidx9, i32 0, i32 3
  store volatile %struct.Task* null, %struct.Task** %probeQ, align 8
  %12 = load i32* %i, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load %struct.taskQ** @tasks, align 8
  %arrayidx11 = getelementptr inbounds %struct.taskQ* %13, i64 %idxprom10
  %probeQlast = getelementptr inbounds %struct.taskQ* %arrayidx11, i32 0, i32 4
  store volatile %struct.Task* null, %struct.Task** %probeQlast, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*)

; Function Attrs: nounwind uwtable
define internal i32 @FindBlock(i32 %i, i32 %j) {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %probe = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = load i32* %j.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %lo, align 4
  %3 = load i32* %j.addr, align 4
  %add = add nsw i32 %3, 1
  %idxprom1 = sext i32 %add to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %4, i64 %idxprom1
  %5 = load i32* %arrayidx2, align 4
  store i32 %5, i32* %hi, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end.15, %entry
  %6 = load i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %cmp = icmp eq i32 %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %8 = load i32* %lo, align 4
  %9 = load i32* %hi, align 4
  %add3 = add nsw i32 %8, %9
  %div = sdiv i32 %add3, 2
  store i32 %div, i32* %probe, align 4
  %10 = load i32* %probe, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx5 = getelementptr inbounds i32* %11, i64 %idxprom4
  %12 = load i32* %arrayidx5, align 4
  %13 = load i32* %i.addr, align 4
  %cmp6 = icmp eq i32 %12, %13
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  br label %for.end

if.else:                                          ; preds = %if.end
  %14 = load i32* %probe, align 4
  %idxprom8 = sext i32 %14 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx9 = getelementptr inbounds i32* %15, i64 %idxprom8
  %16 = load i32* %arrayidx9, align 4
  %17 = load i32* %i.addr, align 4
  %cmp10 = icmp sgt i32 %16, %17
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.else
  %18 = load i32* %probe, align 4
  store i32 %18, i32* %hi, align 4
  br label %if.end.14

if.else.12:                                       ; preds = %if.else
  %19 = load i32* %probe, align 4
  %add13 = add nsw i32 %19, 1
  store i32 %add13, i32* %lo, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.12, %if.then.11
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14
  br label %for.cond

for.end:                                          ; preds = %if.then.7, %if.then
  %20 = load i32* %probe, align 4
  %idxprom16 = sext i32 %20 to i64
  %21 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx17 = getelementptr inbounds i32* %21, i64 %idxprom16
  %22 = load i32* %arrayidx17, align 4
  %23 = load i32* %i.addr, align 4
  %cmp18 = icmp eq i32 %22, %23
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %for.end
  %24 = load i32* %probe, align 4
  store i32 %24, i32* %retval
  br label %return

if.else.20:                                       ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.else.20, %if.then.19
  %25 = load i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i32 @Send(i32 %src_block, i32 %dest_block, i32 %desti, i32 %destj, %struct.Update* %update, i32 %p, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %src_block.addr = alloca i32, align 4
  %dest_block.addr = alloca i32, align 4
  %desti.addr = alloca i32, align 4
  %destj.addr = alloca i32, align 4
  %update.addr = alloca %struct.Update*, align 8
  %p.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %procnum = alloca i32, align 4
  %is_probe = alloca i32, align 4
  %t = alloca %struct.Task*, align 8
  store i32 %src_block, i32* %src_block.addr, align 4
  store i32 %dest_block, i32* %dest_block.addr, align 4
  store i32 %desti, i32* %desti.addr, align 4
  store i32 %destj, i32* %destj.addr, align 4
  store %struct.Update* %update, %struct.Update** %update.addr, align 8
  store i32 %p, i32* %p.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %p.addr, align 4
  store i32 %0, i32* %procnum, align 4
  %1 = load i32* %dest_block.addr, align 4
  %cmp = icmp eq i32 %1, -2
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %is_probe, align 4
  %2 = load %struct.LocalCopies** %lc.addr, align 8
  %freeTask = getelementptr inbounds %struct.LocalCopies* %2, i32 0, i32 8
  %3 = load %struct.Task** %freeTask, align 8
  %tobool = icmp ne %struct.Task* %3, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.LocalCopies** %lc.addr, align 8
  %freeTask1 = getelementptr inbounds %struct.LocalCopies* %4, i32 0, i32 8
  %5 = load %struct.Task** %freeTask1, align 8
  store %struct.Task* %5, %struct.Task** %t, align 8
  %6 = load %struct.Task** %t, align 8
  %next = getelementptr inbounds %struct.Task* %6, i32 0, i32 5
  %7 = load %struct.Task** %next, align 8
  %8 = load %struct.LocalCopies** %lc.addr, align 8
  %freeTask2 = getelementptr inbounds %struct.LocalCopies* %8, i32 0, i32 8
  store %struct.Task* %7, %struct.Task** %freeTask2, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load i32* %MyNum.addr, align 4
  %call = call i8* @MyMalloc(i32 32, i32 %9)
  %10 = bitcast i8* %call to %struct.Task*
  store %struct.Task* %10, %struct.Task** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load i32* %dest_block.addr, align 4
  %12 = load %struct.Task** %t, align 8
  %block_num = getelementptr inbounds %struct.Task* %12, i32 0, i32 0
  store i32 %11, i32* %block_num, align 4
  %13 = load i32* %desti.addr, align 4
  %14 = load %struct.Task** %t, align 8
  %desti3 = getelementptr inbounds %struct.Task* %14, i32 0, i32 1
  store i32 %13, i32* %desti3, align 4
  %15 = load i32* %destj.addr, align 4
  %16 = load %struct.Task** %t, align 8
  %destj4 = getelementptr inbounds %struct.Task* %16, i32 0, i32 2
  store i32 %15, i32* %destj4, align 4
  %17 = load i32* %src_block.addr, align 4
  %18 = load %struct.Task** %t, align 8
  %src = getelementptr inbounds %struct.Task* %18, i32 0, i32 3
  store i32 %17, i32* %src, align 4
  %19 = load %struct.Update** %update.addr, align 8
  %20 = load %struct.Task** %t, align 8
  %update5 = getelementptr inbounds %struct.Task* %20, i32 0, i32 4
  store %struct.Update* %19, %struct.Update** %update5, align 8
  %21 = load %struct.Task** %t, align 8
  %next6 = getelementptr inbounds %struct.Task* %21, i32 0, i32 5
  store %struct.Task* null, %struct.Task** %next6, align 8
  %22 = load i32* %procnum, align 4
  %idxprom = sext i32 %22 to i64
  %23 = load %struct.taskQ** @tasks, align 8
  %arrayidx = getelementptr inbounds %struct.taskQ* %23, i64 %idxprom
  %taskLock = getelementptr inbounds %struct.taskQ* %arrayidx, i32 0, i32 0
  %call7 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %taskLock)
  %24 = load i32* %is_probe, align 4
  %tobool8 = icmp ne i32 %24, 0
  br i1 %tobool8, label %if.then.9, label %if.else.25

if.then.9:                                        ; preds = %if.end
  %25 = load i32* %procnum, align 4
  %idxprom10 = sext i32 %25 to i64
  %26 = load %struct.taskQ** @tasks, align 8
  %arrayidx11 = getelementptr inbounds %struct.taskQ* %26, i64 %idxprom10
  %probeQlast = getelementptr inbounds %struct.taskQ* %arrayidx11, i32 0, i32 4
  %27 = load volatile %struct.Task** %probeQlast, align 8
  %tobool12 = icmp ne %struct.Task* %27, null
  br i1 %tobool12, label %if.then.13, label %if.else.18

if.then.13:                                       ; preds = %if.then.9
  %28 = load %struct.Task** %t, align 8
  %29 = load i32* %procnum, align 4
  %idxprom14 = sext i32 %29 to i64
  %30 = load %struct.taskQ** @tasks, align 8
  %arrayidx15 = getelementptr inbounds %struct.taskQ* %30, i64 %idxprom14
  %probeQlast16 = getelementptr inbounds %struct.taskQ* %arrayidx15, i32 0, i32 4
  %31 = load volatile %struct.Task** %probeQlast16, align 8
  %next17 = getelementptr inbounds %struct.Task* %31, i32 0, i32 5
  store %struct.Task* %28, %struct.Task** %next17, align 8
  br label %if.end.21

if.else.18:                                       ; preds = %if.then.9
  %32 = load %struct.Task** %t, align 8
  %33 = load i32* %procnum, align 4
  %idxprom19 = sext i32 %33 to i64
  %34 = load %struct.taskQ** @tasks, align 8
  %arrayidx20 = getelementptr inbounds %struct.taskQ* %34, i64 %idxprom19
  %probeQ = getelementptr inbounds %struct.taskQ* %arrayidx20, i32 0, i32 3
  store volatile %struct.Task* %32, %struct.Task** %probeQ, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.13
  %35 = load %struct.Task** %t, align 8
  %36 = load i32* %procnum, align 4
  %idxprom22 = sext i32 %36 to i64
  %37 = load %struct.taskQ** @tasks, align 8
  %arrayidx23 = getelementptr inbounds %struct.taskQ* %37, i64 %idxprom22
  %probeQlast24 = getelementptr inbounds %struct.taskQ* %arrayidx23, i32 0, i32 4
  store volatile %struct.Task* %35, %struct.Task** %probeQlast24, align 8
  br label %if.end.41

if.else.25:                                       ; preds = %if.end
  %38 = load i32* %procnum, align 4
  %idxprom26 = sext i32 %38 to i64
  %39 = load %struct.taskQ** @tasks, align 8
  %arrayidx27 = getelementptr inbounds %struct.taskQ* %39, i64 %idxprom26
  %taskQlast = getelementptr inbounds %struct.taskQ* %arrayidx27, i32 0, i32 2
  %40 = load volatile %struct.Task** %taskQlast, align 8
  %tobool28 = icmp ne %struct.Task* %40, null
  br i1 %tobool28, label %if.then.29, label %if.else.34

if.then.29:                                       ; preds = %if.else.25
  %41 = load %struct.Task** %t, align 8
  %42 = load i32* %procnum, align 4
  %idxprom30 = sext i32 %42 to i64
  %43 = load %struct.taskQ** @tasks, align 8
  %arrayidx31 = getelementptr inbounds %struct.taskQ* %43, i64 %idxprom30
  %taskQlast32 = getelementptr inbounds %struct.taskQ* %arrayidx31, i32 0, i32 2
  %44 = load volatile %struct.Task** %taskQlast32, align 8
  %next33 = getelementptr inbounds %struct.Task* %44, i32 0, i32 5
  store %struct.Task* %41, %struct.Task** %next33, align 8
  br label %if.end.37

if.else.34:                                       ; preds = %if.else.25
  %45 = load %struct.Task** %t, align 8
  %46 = load i32* %procnum, align 4
  %idxprom35 = sext i32 %46 to i64
  %47 = load %struct.taskQ** @tasks, align 8
  %arrayidx36 = getelementptr inbounds %struct.taskQ* %47, i64 %idxprom35
  %taskQ = getelementptr inbounds %struct.taskQ* %arrayidx36, i32 0, i32 1
  store volatile %struct.Task* %45, %struct.Task** %taskQ, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.29
  %48 = load %struct.Task** %t, align 8
  %49 = load i32* %procnum, align 4
  %idxprom38 = sext i32 %49 to i64
  %50 = load %struct.taskQ** @tasks, align 8
  %arrayidx39 = getelementptr inbounds %struct.taskQ* %50, i64 %idxprom38
  %taskQlast40 = getelementptr inbounds %struct.taskQ* %arrayidx39, i32 0, i32 2
  store volatile %struct.Task* %48, %struct.Task** %taskQlast40, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.37, %if.end.21
  %51 = load i32* %procnum, align 4
  %idxprom42 = sext i32 %51 to i64
  %52 = load %struct.taskQ** @tasks, align 8
  %arrayidx43 = getelementptr inbounds %struct.taskQ* %52, i64 %idxprom42
  %taskLock44 = getelementptr inbounds %struct.taskQ* %arrayidx43, i32 0, i32 0
  %call45 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %taskLock44)
  %53 = load i32* %retval
  ret i32 %53
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*)

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*)

; Function Attrs: nounwind uwtable
define internal i32 @TaskWaiting(i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* %MyNum.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.taskQ** @tasks, align 8
  %arrayidx = getelementptr inbounds %struct.taskQ* %1, i64 %idxprom
  %taskQ = getelementptr inbounds %struct.taskQ* %arrayidx, i32 0, i32 1
  %2 = load volatile %struct.Task** %taskQ, align 8
  %cmp = icmp ne %struct.Task* %2, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal i32 @GetBlock(i32* %desti, i32* %destj, i32* %src, %struct.Update** %update, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %desti.addr = alloca i32*, align 8
  %destj.addr = alloca i32*, align 8
  %src.addr = alloca i32*, align 8
  %update.addr = alloca %struct.Update**, align 8
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %t = alloca %struct.Task*, align 8
  store i32* %desti, i32** %desti.addr, align 8
  store i32* %destj, i32** %destj.addr, align 8
  store i32* %src, i32** %src.addr, align 8
  store %struct.Update** %update, %struct.Update*** %update.addr, align 8
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.58, %entry
  %0 = load i32* %MyNum.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.taskQ** @tasks, align 8
  %arrayidx = getelementptr inbounds %struct.taskQ* %1, i64 %idxprom
  %taskQ = getelementptr inbounds %struct.taskQ* %arrayidx, i32 0, i32 1
  %2 = load volatile %struct.Task** %taskQ, align 8
  %tobool = icmp ne %struct.Task* %2, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %3 = load i32* %MyNum.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load %struct.taskQ** @tasks, align 8
  %arrayidx2 = getelementptr inbounds %struct.taskQ* %4, i64 %idxprom1
  %probeQ = getelementptr inbounds %struct.taskQ* %arrayidx2, i32 0, i32 3
  %5 = load volatile %struct.Task** %probeQ, align 8
  %tobool3 = icmp ne %struct.Task* %5, null
  br i1 %tobool3, label %if.then, label %if.else.49

if.then:                                          ; preds = %lor.lhs.false, %for.cond
  %6 = load i32* %MyNum.addr, align 4
  %idxprom4 = sext i32 %6 to i64
  %7 = load %struct.taskQ** @tasks, align 8
  %arrayidx5 = getelementptr inbounds %struct.taskQ* %7, i64 %idxprom4
  %taskLock = getelementptr inbounds %struct.taskQ* %arrayidx5, i32 0, i32 0
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %taskLock)
  store %struct.Task* null, %struct.Task** %t, align 8
  %8 = load i32* %MyNum.addr, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load %struct.taskQ** @tasks, align 8
  %arrayidx7 = getelementptr inbounds %struct.taskQ* %9, i64 %idxprom6
  %probeQ8 = getelementptr inbounds %struct.taskQ* %arrayidx7, i32 0, i32 3
  %10 = load volatile %struct.Task** %probeQ8, align 8
  %tobool9 = icmp ne %struct.Task* %10, null
  br i1 %tobool9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.then
  %11 = load i32* %MyNum.addr, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load %struct.taskQ** @tasks, align 8
  %arrayidx12 = getelementptr inbounds %struct.taskQ* %12, i64 %idxprom11
  %probeQ13 = getelementptr inbounds %struct.taskQ* %arrayidx12, i32 0, i32 3
  %13 = load volatile %struct.Task** %probeQ13, align 8
  store %struct.Task* %13, %struct.Task** %t, align 8
  %14 = load %struct.Task** %t, align 8
  %next = getelementptr inbounds %struct.Task* %14, i32 0, i32 5
  %15 = load %struct.Task** %next, align 8
  %16 = load i32* %MyNum.addr, align 4
  %idxprom14 = sext i32 %16 to i64
  %17 = load %struct.taskQ** @tasks, align 8
  %arrayidx15 = getelementptr inbounds %struct.taskQ* %17, i64 %idxprom14
  %probeQ16 = getelementptr inbounds %struct.taskQ* %arrayidx15, i32 0, i32 3
  store volatile %struct.Task* %15, %struct.Task** %probeQ16, align 8
  %18 = load %struct.Task** %t, align 8
  %next17 = getelementptr inbounds %struct.Task* %18, i32 0, i32 5
  %19 = load %struct.Task** %next17, align 8
  %tobool18 = icmp ne %struct.Task* %19, null
  br i1 %tobool18, label %if.end, label %if.then.19

if.then.19:                                       ; preds = %if.then.10
  %20 = load i32* %MyNum.addr, align 4
  %idxprom20 = sext i32 %20 to i64
  %21 = load %struct.taskQ** @tasks, align 8
  %arrayidx21 = getelementptr inbounds %struct.taskQ* %21, i64 %idxprom20
  %probeQlast = getelementptr inbounds %struct.taskQ* %arrayidx21, i32 0, i32 4
  store volatile %struct.Task* null, %struct.Task** %probeQlast, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.19, %if.then.10
  br label %if.end.41

if.else:                                          ; preds = %if.then
  %22 = load i32* %MyNum.addr, align 4
  %idxprom22 = sext i32 %22 to i64
  %23 = load %struct.taskQ** @tasks, align 8
  %arrayidx23 = getelementptr inbounds %struct.taskQ* %23, i64 %idxprom22
  %taskQ24 = getelementptr inbounds %struct.taskQ* %arrayidx23, i32 0, i32 1
  %24 = load volatile %struct.Task** %taskQ24, align 8
  %tobool25 = icmp ne %struct.Task* %24, null
  br i1 %tobool25, label %if.then.26, label %if.end.40

if.then.26:                                       ; preds = %if.else
  %25 = load i32* %MyNum.addr, align 4
  %idxprom27 = sext i32 %25 to i64
  %26 = load %struct.taskQ** @tasks, align 8
  %arrayidx28 = getelementptr inbounds %struct.taskQ* %26, i64 %idxprom27
  %taskQ29 = getelementptr inbounds %struct.taskQ* %arrayidx28, i32 0, i32 1
  %27 = load volatile %struct.Task** %taskQ29, align 8
  store %struct.Task* %27, %struct.Task** %t, align 8
  %28 = load %struct.Task** %t, align 8
  %next30 = getelementptr inbounds %struct.Task* %28, i32 0, i32 5
  %29 = load %struct.Task** %next30, align 8
  %30 = load i32* %MyNum.addr, align 4
  %idxprom31 = sext i32 %30 to i64
  %31 = load %struct.taskQ** @tasks, align 8
  %arrayidx32 = getelementptr inbounds %struct.taskQ* %31, i64 %idxprom31
  %taskQ33 = getelementptr inbounds %struct.taskQ* %arrayidx32, i32 0, i32 1
  store volatile %struct.Task* %29, %struct.Task** %taskQ33, align 8
  %32 = load %struct.Task** %t, align 8
  %next34 = getelementptr inbounds %struct.Task* %32, i32 0, i32 5
  %33 = load %struct.Task** %next34, align 8
  %tobool35 = icmp ne %struct.Task* %33, null
  br i1 %tobool35, label %if.end.39, label %if.then.36

if.then.36:                                       ; preds = %if.then.26
  %34 = load i32* %MyNum.addr, align 4
  %idxprom37 = sext i32 %34 to i64
  %35 = load %struct.taskQ** @tasks, align 8
  %arrayidx38 = getelementptr inbounds %struct.taskQ* %35, i64 %idxprom37
  %taskQlast = getelementptr inbounds %struct.taskQ* %arrayidx38, i32 0, i32 2
  store volatile %struct.Task* null, %struct.Task** %taskQlast, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.36, %if.then.26
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.else
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end
  %36 = load i32* %MyNum.addr, align 4
  %idxprom42 = sext i32 %36 to i64
  %37 = load %struct.taskQ** @tasks, align 8
  %arrayidx43 = getelementptr inbounds %struct.taskQ* %37, i64 %idxprom42
  %taskLock44 = getelementptr inbounds %struct.taskQ* %arrayidx43, i32 0, i32 0
  %call45 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %taskLock44)
  %38 = load %struct.Task** %t, align 8
  %tobool46 = icmp ne %struct.Task* %38, null
  br i1 %tobool46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.41
  br label %for.end

if.end.48:                                        ; preds = %if.end.41
  br label %if.end.58

if.else.49:                                       ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else.49
  %39 = load i32* %MyNum.addr, align 4
  %idxprom50 = sext i32 %39 to i64
  %40 = load %struct.taskQ** @tasks, align 8
  %arrayidx51 = getelementptr inbounds %struct.taskQ* %40, i64 %idxprom50
  %taskQ52 = getelementptr inbounds %struct.taskQ* %arrayidx51, i32 0, i32 1
  %41 = load volatile %struct.Task** %taskQ52, align 8
  %tobool53 = icmp ne %struct.Task* %41, null
  br i1 %tobool53, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %42 = load i32* %MyNum.addr, align 4
  %idxprom54 = sext i32 %42 to i64
  %43 = load %struct.taskQ** @tasks, align 8
  %arrayidx55 = getelementptr inbounds %struct.taskQ* %43, i64 %idxprom54
  %probeQ56 = getelementptr inbounds %struct.taskQ* %arrayidx55, i32 0, i32 3
  %44 = load volatile %struct.Task** %probeQ56, align 8
  %tobool57 = icmp ne %struct.Task* %44, null
  %lnot = xor i1 %tobool57, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %45 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %45, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end.58

if.end.58:                                        ; preds = %while.end, %if.end.48
  br label %for.cond

for.end:                                          ; preds = %if.then.47
  %46 = load %struct.Task** %t, align 8
  %desti59 = getelementptr inbounds %struct.Task* %46, i32 0, i32 1
  %47 = load i32* %desti59, align 4
  %48 = load i32** %desti.addr, align 8
  store i32 %47, i32* %48, align 4
  %49 = load %struct.Task** %t, align 8
  %destj60 = getelementptr inbounds %struct.Task* %49, i32 0, i32 2
  %50 = load i32* %destj60, align 4
  %51 = load i32** %destj.addr, align 8
  store i32 %50, i32* %51, align 4
  %52 = load %struct.Task** %t, align 8
  %src61 = getelementptr inbounds %struct.Task* %52, i32 0, i32 3
  %53 = load i32* %src61, align 4
  %54 = load i32** %src.addr, align 8
  store i32 %53, i32* %54, align 4
  %55 = load %struct.Task** %t, align 8
  %update62 = getelementptr inbounds %struct.Task* %55, i32 0, i32 4
  %56 = load %struct.Update** %update62, align 8
  %57 = load %struct.Update*** %update.addr, align 8
  store %struct.Update* %56, %struct.Update** %57, align 8
  %58 = load %struct.LocalCopies** %lc.addr, align 8
  %freeTask = getelementptr inbounds %struct.LocalCopies* %58, i32 0, i32 8
  %59 = load %struct.Task** %freeTask, align 8
  %60 = load %struct.Task** %t, align 8
  %next63 = getelementptr inbounds %struct.Task* %60, i32 0, i32 5
  store %struct.Task* %59, %struct.Task** %next63, align 8
  %61 = load %struct.Task** %t, align 8
  %62 = load %struct.LocalCopies** %lc.addr, align 8
  %freeTask64 = getelementptr inbounds %struct.LocalCopies* %62, i32 0, i32 8
  store %struct.Task* %61, %struct.Task** %freeTask64, align 8
  %63 = load i32* %retval
  ret i32 %63
}

; Function Attrs: nounwind uwtable
define internal i32 @FactorLLDomain(i32 %which_domain, i32 %MyNum, %struct.LocalCopies* %lc) {
entry:
  %retval = alloca i32, align 4
  %which_domain.addr = alloca i32, align 4
  %MyNum.addr = alloca i32, align 4
  %lc.addr = alloca %struct.LocalCopies*, align 8
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %root = alloca i32, align 4
  %j = alloca i32, align 4
  %j_last = alloca i32, align 4
  %j_len = alloca i32, align 4
  %dest_super = alloca i32, align 4
  %k = alloca i32, align 4
  %k_length = alloca i32, align 4
  %update_size = alloca i32, align 4
  %theFirst = alloca i32, align 4
  %theLast = alloca i32, align 4
  %relative = alloca i32*, align 8
  %indices = alloca i32*, align 8
  %domain_update = alloca double*, align 8
  %s = alloca i32, align 4
  %n = alloca i32, align 4
  %s196 = alloca i32, align 4
  %n197 = alloca i32, align 4
  store i32 %which_domain, i32* %which_domain.addr, align 4
  store i32 %MyNum, i32* %MyNum.addr, align 4
  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8
  %0 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %conv1 = trunc i64 %mul to i32
  %1 = load i32* %MyNum.addr, align 4
  %call = call i8* @MyMalloc(i32 %conv1, i32 %1)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %relative, align 8
  %3 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %conv2 = sext i32 %3 to i64
  %mul3 = mul i64 %conv2, 4
  %conv4 = trunc i64 %mul3 to i32
  %4 = load i32* %MyNum.addr, align 4
  %call5 = call i8* @MyMalloc(i32 %conv4, i32 %4)
  %5 = bitcast i8* %call5 to i32*
  store i32* %5, i32** %indices, align 8
  %6 = load i32* %which_domain.addr, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx = getelementptr inbounds i32* %7, i64 %idxprom
  %8 = load i32* %arrayidx, align 4
  store i32 %8, i32* %root, align 4
  %9 = load i32* %root, align 4
  store i32 %9, i32* %start, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i32* %start, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i32** @firstchild, align 8
  %arrayidx7 = getelementptr inbounds i32* %11, i64 %idxprom6
  %12 = load i32* %arrayidx7, align 4
  %13 = load i32* %start, align 4
  %add = add nsw i32 %13, 1
  %idxprom8 = sext i32 %add to i64
  %14 = load i32** @firstchild, align 8
  %arrayidx9 = getelementptr inbounds i32* %14, i64 %idxprom8
  %15 = load i32* %arrayidx9, align 4
  %cmp = icmp ne i32 %12, %15
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32* %start, align 4
  %idxprom11 = sext i32 %16 to i64
  %17 = load i32** @firstchild, align 8
  %arrayidx12 = getelementptr inbounds i32* %17, i64 %idxprom11
  %18 = load i32* %arrayidx12, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load i32** @child, align 8
  %arrayidx14 = getelementptr inbounds i32* %19, i64 %idxprom13
  %20 = load i32* %arrayidx14, align 4
  store i32 %20, i32* %start, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i32* %root, align 4
  %add15 = add nsw i32 %21, 1
  %idxprom16 = sext i32 %add15 to i64
  %22 = load %struct.LocalCopies** %lc.addr, align 8
  %link = getelementptr inbounds %struct.LocalCopies* %22, i32 0, i32 2
  %23 = load i32** %link, align 8
  %arrayidx17 = getelementptr inbounds i32* %23, i64 %idxprom16
  store i32 -1, i32* %arrayidx17, align 4
  %24 = load i32* %start, align 4
  store i32 %24, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %25 = load i32* %j, align 4
  %26 = load i32* %root, align 4
  %cmp18 = icmp sle i32 %25, %26
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load i32* %j, align 4
  %28 = load i32* %j, align 4
  %idxprom20 = sext i32 %28 to i64
  %29 = load i32** @node, align 8
  %arrayidx21 = getelementptr inbounds i32* %29, i64 %idxprom20
  %30 = load i32* %arrayidx21, align 4
  %add22 = add nsw i32 %27, %30
  store i32 %add22, i32* %j_last, align 4
  %31 = load i32* %j, align 4
  %add23 = add nsw i32 %31, 1
  %idxprom24 = sext i32 %add23 to i64
  %32 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx25 = getelementptr inbounds i32* %32, i64 %idxprom24
  %33 = load i32* %arrayidx25, align 4
  %34 = load i32* %j, align 4
  %idxprom26 = sext i32 %34 to i64
  %35 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx27 = getelementptr inbounds i32* %35, i64 %idxprom26
  %36 = load i32* %arrayidx27, align 4
  %sub = sub nsw i32 %33, %36
  store i32 %sub, i32* %j_len, align 4
  %37 = load i32* %j, align 4
  %38 = load i32** %indices, align 8
  %call28 = call i32 @SetDestIndices(i32 %37, i32* %38)
  br label %while.cond.29

while.cond.29:                                    ; preds = %if.end.159, %for.body
  %39 = load i32* %j, align 4
  %idxprom30 = sext i32 %39 to i64
  %40 = load %struct.LocalCopies** %lc.addr, align 8
  %link31 = getelementptr inbounds %struct.LocalCopies* %40, i32 0, i32 2
  %41 = load i32** %link31, align 8
  %arrayidx32 = getelementptr inbounds i32* %41, i64 %idxprom30
  %42 = load i32* %arrayidx32, align 4
  %cmp33 = icmp ne i32 %42, -1
  br i1 %cmp33, label %while.body.35, label %while.end.160

while.body.35:                                    ; preds = %while.cond.29
  %43 = load i32* %j, align 4
  %idxprom36 = sext i32 %43 to i64
  %44 = load %struct.LocalCopies** %lc.addr, align 8
  %link37 = getelementptr inbounds %struct.LocalCopies* %44, i32 0, i32 2
  %45 = load i32** %link37, align 8
  %arrayidx38 = getelementptr inbounds i32* %45, i64 %idxprom36
  %46 = load i32* %arrayidx38, align 4
  store i32 %46, i32* %k, align 4
  %47 = load i32* %k, align 4
  %idxprom39 = sext i32 %47 to i64
  %48 = load %struct.LocalCopies** %lc.addr, align 8
  %link40 = getelementptr inbounds %struct.LocalCopies* %48, i32 0, i32 2
  %49 = load i32** %link40, align 8
  %arrayidx41 = getelementptr inbounds i32* %49, i64 %idxprom39
  %50 = load i32* %arrayidx41, align 4
  %51 = load i32* %j, align 4
  %idxprom42 = sext i32 %51 to i64
  %52 = load %struct.LocalCopies** %lc.addr, align 8
  %link43 = getelementptr inbounds %struct.LocalCopies* %52, i32 0, i32 2
  %53 = load i32** %link43, align 8
  %arrayidx44 = getelementptr inbounds i32* %53, i64 %idxprom42
  store i32 %50, i32* %arrayidx44, align 4
  %54 = load i32* %k, align 4
  %add45 = add nsw i32 %54, 1
  %idxprom46 = sext i32 %add45 to i64
  %55 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx47 = getelementptr inbounds i32* %55, i64 %idxprom46
  %56 = load i32* %arrayidx47, align 4
  %57 = load i32* %k, align 4
  %idxprom48 = sext i32 %57 to i64
  %58 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx49 = getelementptr inbounds i32* %58, i64 %idxprom48
  %59 = load i32* %arrayidx49, align 4
  %sub50 = sub nsw i32 %56, %59
  store i32 %sub50, i32* %k_length, align 4
  %60 = load i32* %k, align 4
  %idxprom51 = sext i32 %60 to i64
  %61 = load %struct.LocalCopies** %lc.addr, align 8
  %first = getelementptr inbounds %struct.LocalCopies* %61, i32 0, i32 3
  %62 = load i32** %first, align 8
  %arrayidx52 = getelementptr inbounds i32* %62, i64 %idxprom51
  %63 = load i32* %arrayidx52, align 4
  store i32 %63, i32* %theFirst, align 4
  %64 = load i32* %theFirst, align 4
  %add53 = add nsw i32 %64, 1
  store i32 %add53, i32* %theLast, align 4
  br label %while.cond.54

while.cond.54:                                    ; preds = %while.body.64, %while.body.35
  %65 = load i32* %theLast, align 4
  %66 = load i32* %k_length, align 4
  %cmp55 = icmp slt i32 %65, %66
  br i1 %cmp55, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.54
  %67 = load i32* %k, align 4
  %idxprom57 = sext i32 %67 to i64
  %68 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx58 = getelementptr inbounds i32* %68, i64 %idxprom57
  %69 = load i32* %arrayidx58, align 4
  %70 = load i32* %theLast, align 4
  %add59 = add nsw i32 %69, %70
  %idxprom60 = sext i32 %add59 to i64
  %71 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx61 = getelementptr inbounds i32* %71, i64 %idxprom60
  %72 = load i32* %arrayidx61, align 4
  %73 = load i32* %j_last, align 4
  %cmp62 = icmp slt i32 %72, %73
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.54
  %74 = phi i1 [ false, %while.cond.54 ], [ %cmp62, %land.rhs ]
  br i1 %74, label %while.body.64, label %while.end.65

while.body.64:                                    ; preds = %land.end
  %75 = load i32* %theLast, align 4
  %inc = add nsw i32 %75, 1
  store i32 %inc, i32* %theLast, align 4
  br label %while.cond.54

while.end.65:                                     ; preds = %land.end
  %76 = load i32* %theLast, align 4
  %77 = load i32* %theFirst, align 4
  %sub66 = sub nsw i32 %76, %77
  %78 = load i32* %j, align 4
  %idxprom67 = sext i32 %78 to i64
  %79 = load i32** @node, align 8
  %arrayidx68 = getelementptr inbounds i32* %79, i64 %idxprom67
  %80 = load i32* %arrayidx68, align 4
  %cmp69 = icmp eq i32 %sub66, %80
  br i1 %cmp69, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.end.65
  %81 = load i32* %k_length, align 4
  %82 = load i32* %theFirst, align 4
  %sub71 = sub nsw i32 %81, %82
  %83 = load i32* %j_len, align 4
  %cmp72 = icmp eq i32 %sub71, %83
  br i1 %cmp72, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %84 = load i32* %k, align 4
  %85 = load i32* %theFirst, align 4
  %86 = load i32* %theLast, align 4
  %87 = load i32* %k_length, align 4
  %88 = load i32* %j, align 4
  %idxprom74 = sext i32 %88 to i64
  %89 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx75 = getelementptr inbounds i32* %89, i64 %idxprom74
  %90 = load i32* %arrayidx75, align 4
  %idxprom76 = sext i32 %90 to i64
  %91 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx77 = getelementptr inbounds %union.Entry* %91, i64 %idxprom76
  %nz = bitcast %union.Entry* %arrayidx77 to double*
  %call78 = call i32 @ModifySuperBySuper(i32 %84, i32 %85, i32 %86, i32 %87, double* %nz)
  br label %if.end.123

if.else:                                          ; preds = %land.lhs.true, %while.end.65
  %92 = load i32* %k, align 4
  %idxprom79 = sext i32 %92 to i64
  %93 = load i32** @node, align 8
  %arrayidx80 = getelementptr inbounds i32* %93, i64 %idxprom79
  %94 = load i32* %arrayidx80, align 4
  %cmp81 = icmp sgt i32 %94, 1
  br i1 %cmp81, label %if.then.83, label %if.else.101

if.then.83:                                       ; preds = %if.else
  %95 = load i32* %k, align 4
  %96 = load i32* %theFirst, align 4
  %97 = load i32* %theLast, align 4
  %98 = load i32* %k_length, align 4
  %99 = load %struct.LocalCopies** %lc.addr, align 8
  %storage = getelementptr inbounds %struct.LocalCopies* %99, i32 0, i32 4
  %100 = load double** %storage, align 8
  %call84 = call i32 @ModifySuperBySuper(i32 %95, i32 %96, i32 %97, i32 %98, double* %100)
  %101 = load i32* %k, align 4
  %idxprom85 = sext i32 %101 to i64
  %102 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx86 = getelementptr inbounds i32* %102, i64 %idxprom85
  %103 = load i32* %arrayidx86, align 4
  %104 = load i32* %theFirst, align 4
  %add87 = add nsw i32 %103, %104
  %idxprom88 = sext i32 %add87 to i64
  %105 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx89 = getelementptr inbounds i32* %105, i64 %idxprom88
  %106 = load i32* %k_length, align 4
  %107 = load i32* %theFirst, align 4
  %sub90 = sub nsw i32 %106, %107
  %108 = load i32** %indices, align 8
  %109 = load i32** %relative, align 8
  %call91 = call i32 @FindRelativeIndicesLeft(i32* %arrayidx89, i32 %sub90, i32 0, i32* %108, i32* %109)
  %110 = load %struct.LocalCopies** %lc.addr, align 8
  %storage92 = getelementptr inbounds %struct.LocalCopies* %110, i32 0, i32 4
  %111 = load double** %storage92, align 8
  %112 = load i32* %theLast, align 4
  %113 = load i32* %theFirst, align 4
  %sub93 = sub nsw i32 %112, %113
  %114 = load i32* %k_length, align 4
  %115 = load i32* %theFirst, align 4
  %sub94 = sub nsw i32 %114, %115
  %116 = load i32* %j, align 4
  %idxprom95 = sext i32 %116 to i64
  %117 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx96 = getelementptr inbounds i32* %117, i64 %idxprom95
  %118 = load i32* %arrayidx96, align 4
  %idxprom97 = sext i32 %118 to i64
  %119 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx98 = getelementptr inbounds %union.Entry* %119, i64 %idxprom97
  %nz99 = bitcast %union.Entry* %arrayidx98 to double*
  %120 = load i32* %j_len, align 4
  %121 = load i32** %relative, align 8
  %call100 = call i32 @ScatterSuperUpdate(double* %111, i32 %sub93, i32 %sub94, double* %nz99, i32 %120, i32* %121)
  br label %if.end

if.else.101:                                      ; preds = %if.else
  %122 = load i32* %k, align 4
  %idxprom102 = sext i32 %122 to i64
  %123 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx103 = getelementptr inbounds i32* %123, i64 %idxprom102
  %124 = load i32* %arrayidx103, align 4
  %125 = load i32* %theFirst, align 4
  %add104 = add nsw i32 %124, %125
  %idxprom105 = sext i32 %add104 to i64
  %126 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx106 = getelementptr inbounds i32* %126, i64 %idxprom105
  %127 = load i32* %k_length, align 4
  %128 = load i32* %theFirst, align 4
  %sub107 = sub nsw i32 %127, %128
  %129 = load i32** %indices, align 8
  %130 = load i32** %relative, align 8
  %call108 = call i32 @FindRelativeIndicesLeft(i32* %arrayidx106, i32 %sub107, i32 0, i32* %129, i32* %130)
  %131 = load i32* %k, align 4
  %idxprom109 = sext i32 %131 to i64
  %132 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx110 = getelementptr inbounds i32* %132, i64 %idxprom109
  %133 = load i32* %arrayidx110, align 4
  %134 = load i32* %theFirst, align 4
  %add111 = add nsw i32 %133, %134
  %idxprom112 = sext i32 %add111 to i64
  %135 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx113 = getelementptr inbounds %union.Entry* %135, i64 %idxprom112
  %nz114 = bitcast %union.Entry* %arrayidx113 to double*
  %136 = load i32* %theLast, align 4
  %137 = load i32* %theFirst, align 4
  %sub115 = sub nsw i32 %136, %137
  %138 = load i32* %k_length, align 4
  %139 = load i32* %theFirst, align 4
  %sub116 = sub nsw i32 %138, %139
  %140 = load i32* %j, align 4
  %idxprom117 = sext i32 %140 to i64
  %141 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx118 = getelementptr inbounds i32* %141, i64 %idxprom117
  %142 = load i32* %arrayidx118, align 4
  %idxprom119 = sext i32 %142 to i64
  %143 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx120 = getelementptr inbounds %union.Entry* %143, i64 %idxprom119
  %nz121 = bitcast %union.Entry* %arrayidx120 to double*
  %144 = load i32* %j_len, align 4
  %145 = load i32** %relative, align 8
  %call122 = call i32 @ModifySuperByColumn(double* %nz114, i32 %sub115, i32 %sub116, double* %nz121, i32 %144, i32* %145)
  br label %if.end

if.end:                                           ; preds = %if.else.101, %if.then.83
  br label %if.end.123

if.end.123:                                       ; preds = %if.end, %if.then
  %146 = load i32* %theLast, align 4
  %147 = load i32* %k, align 4
  %idxprom124 = sext i32 %147 to i64
  %148 = load %struct.LocalCopies** %lc.addr, align 8
  %first125 = getelementptr inbounds %struct.LocalCopies* %148, i32 0, i32 3
  %149 = load i32** %first125, align 8
  %arrayidx126 = getelementptr inbounds i32* %149, i64 %idxprom124
  store i32 %146, i32* %arrayidx126, align 4
  %150 = load i32* %theLast, align 4
  %151 = load i32* %k_length, align 4
  %cmp127 = icmp slt i32 %150, %151
  br i1 %cmp127, label %if.then.129, label %if.end.159

if.then.129:                                      ; preds = %if.end.123
  %152 = load i32* %k, align 4
  %idxprom130 = sext i32 %152 to i64
  %153 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx131 = getelementptr inbounds i32* %153, i64 %idxprom130
  %154 = load i32* %arrayidx131, align 4
  %155 = load i32* %theLast, align 4
  %add132 = add nsw i32 %154, %155
  %idxprom133 = sext i32 %add132 to i64
  %156 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx134 = getelementptr inbounds i32* %156, i64 %idxprom133
  %157 = load i32* %arrayidx134, align 4
  store i32 %157, i32* %dest_super, align 4
  %158 = load i32* %dest_super, align 4
  %159 = load i32* %root, align 4
  %cmp135 = icmp sgt i32 %158, %159
  br i1 %cmp135, label %if.then.137, label %if.else.139

if.then.137:                                      ; preds = %if.then.129
  %160 = load i32* %root, align 4
  %add138 = add nsw i32 %160, 1
  store i32 %add138, i32* %dest_super, align 4
  br label %if.end.149

if.else.139:                                      ; preds = %if.then.129
  %161 = load i32* %dest_super, align 4
  %idxprom140 = sext i32 %161 to i64
  %162 = load i32** @node, align 8
  %arrayidx141 = getelementptr inbounds i32* %162, i64 %idxprom140
  %163 = load i32* %arrayidx141, align 4
  %cmp142 = icmp slt i32 %163, 0
  br i1 %cmp142, label %if.then.144, label %if.end.148

if.then.144:                                      ; preds = %if.else.139
  %164 = load i32* %dest_super, align 4
  %idxprom145 = sext i32 %164 to i64
  %165 = load i32** @node, align 8
  %arrayidx146 = getelementptr inbounds i32* %165, i64 %idxprom145
  %166 = load i32* %arrayidx146, align 4
  %167 = load i32* %dest_super, align 4
  %add147 = add nsw i32 %167, %166
  store i32 %add147, i32* %dest_super, align 4
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.144, %if.else.139
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.137
  %168 = load i32* %dest_super, align 4
  store i32 %168, i32* %s, align 4
  %169 = load i32* %k, align 4
  store i32 %169, i32* %n, align 4
  %170 = load i32* %s, align 4
  %idxprom150 = sext i32 %170 to i64
  %171 = load %struct.LocalCopies** %lc.addr, align 8
  %link151 = getelementptr inbounds %struct.LocalCopies* %171, i32 0, i32 2
  %172 = load i32** %link151, align 8
  %arrayidx152 = getelementptr inbounds i32* %172, i64 %idxprom150
  %173 = load i32* %arrayidx152, align 4
  %174 = load i32* %n, align 4
  %idxprom153 = sext i32 %174 to i64
  %175 = load %struct.LocalCopies** %lc.addr, align 8
  %link154 = getelementptr inbounds %struct.LocalCopies* %175, i32 0, i32 2
  %176 = load i32** %link154, align 8
  %arrayidx155 = getelementptr inbounds i32* %176, i64 %idxprom153
  store i32 %173, i32* %arrayidx155, align 4
  %177 = load i32* %n, align 4
  %178 = load i32* %s, align 4
  %idxprom156 = sext i32 %178 to i64
  %179 = load %struct.LocalCopies** %lc.addr, align 8
  %link157 = getelementptr inbounds %struct.LocalCopies* %179, i32 0, i32 2
  %180 = load i32** %link157, align 8
  %arrayidx158 = getelementptr inbounds i32* %180, i64 %idxprom156
  store i32 %177, i32* %arrayidx158, align 4
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.149, %if.end.123
  br label %while.cond.29

while.end.160:                                    ; preds = %while.cond.29
  %181 = load i32* %j, align 4
  %call161 = call i32 @CompleteSupernodeB(i32 %181)
  %182 = load i32* %j, align 4
  %idxprom162 = sext i32 %182 to i64
  %183 = load i32** @node, align 8
  %arrayidx163 = getelementptr inbounds i32* %183, i64 %idxprom162
  %184 = load i32* %arrayidx163, align 4
  %185 = load i32* %j, align 4
  %idxprom164 = sext i32 %185 to i64
  %186 = load %struct.LocalCopies** %lc.addr, align 8
  %first165 = getelementptr inbounds %struct.LocalCopies* %186, i32 0, i32 3
  %187 = load i32** %first165, align 8
  %arrayidx166 = getelementptr inbounds i32* %187, i64 %idxprom164
  store i32 %184, i32* %arrayidx166, align 4
  %188 = load i32* %j, align 4
  %idxprom167 = sext i32 %188 to i64
  %189 = load %struct.LocalCopies** %lc.addr, align 8
  %first168 = getelementptr inbounds %struct.LocalCopies* %189, i32 0, i32 3
  %190 = load i32** %first168, align 8
  %arrayidx169 = getelementptr inbounds i32* %190, i64 %idxprom167
  %191 = load i32* %arrayidx169, align 4
  %192 = load i32* %j_len, align 4
  %cmp170 = icmp slt i32 %191, %192
  br i1 %cmp170, label %if.then.172, label %if.end.207

if.then.172:                                      ; preds = %while.end.160
  %193 = load i32* %j, align 4
  %idxprom173 = sext i32 %193 to i64
  %194 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx174 = getelementptr inbounds i32* %194, i64 %idxprom173
  %195 = load i32* %arrayidx174, align 4
  %196 = load i32* %j, align 4
  %idxprom175 = sext i32 %196 to i64
  %197 = load %struct.LocalCopies** %lc.addr, align 8
  %first176 = getelementptr inbounds %struct.LocalCopies* %197, i32 0, i32 3
  %198 = load i32** %first176, align 8
  %arrayidx177 = getelementptr inbounds i32* %198, i64 %idxprom175
  %199 = load i32* %arrayidx177, align 4
  %add178 = add nsw i32 %195, %199
  %idxprom179 = sext i32 %add178 to i64
  %200 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx180 = getelementptr inbounds i32* %200, i64 %idxprom179
  %201 = load i32* %arrayidx180, align 4
  store i32 %201, i32* %dest_super, align 4
  %202 = load i32* %dest_super, align 4
  %203 = load i32* %root, align 4
  %cmp181 = icmp sgt i32 %202, %203
  br i1 %cmp181, label %if.then.183, label %if.else.185

if.then.183:                                      ; preds = %if.then.172
  %204 = load i32* %root, align 4
  %add184 = add nsw i32 %204, 1
  store i32 %add184, i32* %dest_super, align 4
  br label %if.end.195

if.else.185:                                      ; preds = %if.then.172
  %205 = load i32* %dest_super, align 4
  %idxprom186 = sext i32 %205 to i64
  %206 = load i32** @node, align 8
  %arrayidx187 = getelementptr inbounds i32* %206, i64 %idxprom186
  %207 = load i32* %arrayidx187, align 4
  %cmp188 = icmp slt i32 %207, 0
  br i1 %cmp188, label %if.then.190, label %if.end.194

if.then.190:                                      ; preds = %if.else.185
  %208 = load i32* %dest_super, align 4
  %idxprom191 = sext i32 %208 to i64
  %209 = load i32** @node, align 8
  %arrayidx192 = getelementptr inbounds i32* %209, i64 %idxprom191
  %210 = load i32* %arrayidx192, align 4
  %211 = load i32* %dest_super, align 4
  %add193 = add nsw i32 %211, %210
  store i32 %add193, i32* %dest_super, align 4
  br label %if.end.194

if.end.194:                                       ; preds = %if.then.190, %if.else.185
  br label %if.end.195

if.end.195:                                       ; preds = %if.end.194, %if.then.183
  %212 = load i32* %dest_super, align 4
  store i32 %212, i32* %s196, align 4
  %213 = load i32* %j, align 4
  store i32 %213, i32* %n197, align 4
  %214 = load i32* %s196, align 4
  %idxprom198 = sext i32 %214 to i64
  %215 = load %struct.LocalCopies** %lc.addr, align 8
  %link199 = getelementptr inbounds %struct.LocalCopies* %215, i32 0, i32 2
  %216 = load i32** %link199, align 8
  %arrayidx200 = getelementptr inbounds i32* %216, i64 %idxprom198
  %217 = load i32* %arrayidx200, align 4
  %218 = load i32* %n197, align 4
  %idxprom201 = sext i32 %218 to i64
  %219 = load %struct.LocalCopies** %lc.addr, align 8
  %link202 = getelementptr inbounds %struct.LocalCopies* %219, i32 0, i32 2
  %220 = load i32** %link202, align 8
  %arrayidx203 = getelementptr inbounds i32* %220, i64 %idxprom201
  store i32 %217, i32* %arrayidx203, align 4
  %221 = load i32* %n197, align 4
  %222 = load i32* %s196, align 4
  %idxprom204 = sext i32 %222 to i64
  %223 = load %struct.LocalCopies** %lc.addr, align 8
  %link205 = getelementptr inbounds %struct.LocalCopies* %223, i32 0, i32 2
  %224 = load i32** %link205, align 8
  %arrayidx206 = getelementptr inbounds i32* %224, i64 %idxprom204
  store i32 %221, i32* %arrayidx206, align 4
  br label %if.end.207

if.end.207:                                       ; preds = %if.end.195, %while.end.160
  br label %for.inc

for.inc:                                          ; preds = %if.end.207
  %225 = load i32* %j, align 4
  %idxprom208 = sext i32 %225 to i64
  %226 = load i32** @node, align 8
  %arrayidx209 = getelementptr inbounds i32* %226, i64 %idxprom208
  %227 = load i32* %arrayidx209, align 4
  %228 = load i32* %j, align 4
  %add210 = add nsw i32 %228, %227
  store i32 %add210, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %229 = load i32* %root, align 4
  %add211 = add nsw i32 %229, 1
  %idxprom212 = sext i32 %add211 to i64
  %230 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx213 = getelementptr inbounds i32* %230, i64 %idxprom212
  %231 = load i32* %arrayidx213, align 4
  %232 = load i32* %root, align 4
  %idxprom214 = sext i32 %232 to i64
  %233 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx215 = getelementptr inbounds i32* %233, i64 %idxprom214
  %234 = load i32* %arrayidx215, align 4
  %sub216 = sub nsw i32 %231, %234
  %sub217 = sub nsw i32 %sub216, 1
  store i32 %sub217, i32* %j_len, align 4
  %235 = load i32* %j_len, align 4
  %236 = load i32* %j_len, align 4
  %add218 = add nsw i32 %236, 1
  %mul219 = mul nsw i32 %235, %add218
  %div = sdiv i32 %mul219, 2
  store i32 %div, i32* %update_size, align 4
  %237 = load i32* %update_size, align 4
  %cmp220 = icmp eq i32 %237, 0
  br i1 %cmp220, label %if.then.222, label %if.else.223

if.then.222:                                      ; preds = %for.end
  store double* null, double** %domain_update, align 8
  br label %if.end.237

if.else.223:                                      ; preds = %for.end
  %238 = load i32* %which_domain.addr, align 4
  %idxprom224 = sext i32 %238 to i64
  %239 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx225 = getelementptr inbounds double** %239, i64 %idxprom224
  %240 = load double** %arrayidx225, align 8
  %tobool = icmp ne double* %240, null
  br i1 %tobool, label %if.then.226, label %if.else.229

if.then.226:                                      ; preds = %if.else.223
  %241 = load i32* %which_domain.addr, align 4
  %idxprom227 = sext i32 %241 to i64
  %242 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx228 = getelementptr inbounds double** %242, i64 %idxprom227
  %243 = load double** %arrayidx228, align 8
  store double* %243, double** %domain_update, align 8
  br label %if.end.236

if.else.229:                                      ; preds = %if.else.223
  %244 = load i32* %update_size, align 4
  %conv230 = sext i32 %244 to i64
  %mul231 = mul i64 %conv230, 8
  %conv232 = trunc i64 %mul231 to i32
  %245 = load i32* %MyNum.addr, align 4
  %call233 = call i8* @MyMalloc(i32 %conv232, i32 %245)
  %246 = bitcast i8* %call233 to double*
  store double* %246, double** %domain_update, align 8
  %247 = load double** %domain_update, align 8
  %248 = load i32* %which_domain.addr, align 4
  %idxprom234 = sext i32 %248 to i64
  %249 = load double*** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 16), align 8
  %arrayidx235 = getelementptr inbounds double** %249, i64 %idxprom234
  store double* %247, double** %arrayidx235, align 8
  br label %if.end.236

if.end.236:                                       ; preds = %if.else.229, %if.then.226
  br label %if.end.237

if.end.237:                                       ; preds = %if.end.236, %if.then.222
  store i32 0, i32* %i, align 4
  br label %for.cond.238

for.cond.238:                                     ; preds = %for.inc.244, %if.end.237
  %250 = load i32* %i, align 4
  %251 = load i32* %update_size, align 4
  %cmp239 = icmp slt i32 %250, %251
  br i1 %cmp239, label %for.body.241, label %for.end.246

for.body.241:                                     ; preds = %for.cond.238
  %252 = load i32* %i, align 4
  %idxprom242 = sext i32 %252 to i64
  %253 = load double** %domain_update, align 8
  %arrayidx243 = getelementptr inbounds double* %253, i64 %idxprom242
  store double 0.000000e+00, double* %arrayidx243, align 8
  br label %for.inc.244

for.inc.244:                                      ; preds = %for.body.241
  %254 = load i32* %i, align 4
  %inc245 = add nsw i32 %254, 1
  store i32 %inc245, i32* %i, align 4
  br label %for.cond.238

for.end.246:                                      ; preds = %for.cond.238
  %255 = load i32* %root, align 4
  %256 = load i32** %indices, align 8
  %call247 = call i32 @SetDomainIndices(i32 %255, i32* %256)
  br label %while.cond.248

while.cond.248:                                   ; preds = %if.end.318, %for.end.246
  %257 = load i32* %root, align 4
  %add249 = add nsw i32 %257, 1
  %idxprom250 = sext i32 %add249 to i64
  %258 = load %struct.LocalCopies** %lc.addr, align 8
  %link251 = getelementptr inbounds %struct.LocalCopies* %258, i32 0, i32 2
  %259 = load i32** %link251, align 8
  %arrayidx252 = getelementptr inbounds i32* %259, i64 %idxprom250
  %260 = load i32* %arrayidx252, align 4
  %cmp253 = icmp ne i32 %260, -1
  br i1 %cmp253, label %while.body.255, label %while.end.319

while.body.255:                                   ; preds = %while.cond.248
  %261 = load i32* %root, align 4
  %add256 = add nsw i32 %261, 1
  %idxprom257 = sext i32 %add256 to i64
  %262 = load %struct.LocalCopies** %lc.addr, align 8
  %link258 = getelementptr inbounds %struct.LocalCopies* %262, i32 0, i32 2
  %263 = load i32** %link258, align 8
  %arrayidx259 = getelementptr inbounds i32* %263, i64 %idxprom257
  %264 = load i32* %arrayidx259, align 4
  store i32 %264, i32* %k, align 4
  %265 = load i32* %k, align 4
  %idxprom260 = sext i32 %265 to i64
  %266 = load %struct.LocalCopies** %lc.addr, align 8
  %link261 = getelementptr inbounds %struct.LocalCopies* %266, i32 0, i32 2
  %267 = load i32** %link261, align 8
  %arrayidx262 = getelementptr inbounds i32* %267, i64 %idxprom260
  %268 = load i32* %arrayidx262, align 4
  %269 = load i32* %root, align 4
  %add263 = add nsw i32 %269, 1
  %idxprom264 = sext i32 %add263 to i64
  %270 = load %struct.LocalCopies** %lc.addr, align 8
  %link265 = getelementptr inbounds %struct.LocalCopies* %270, i32 0, i32 2
  %271 = load i32** %link265, align 8
  %arrayidx266 = getelementptr inbounds i32* %271, i64 %idxprom264
  store i32 %268, i32* %arrayidx266, align 4
  %272 = load i32* %k, align 4
  %add267 = add nsw i32 %272, 1
  %idxprom268 = sext i32 %add267 to i64
  %273 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx269 = getelementptr inbounds i32* %273, i64 %idxprom268
  %274 = load i32* %arrayidx269, align 4
  %275 = load i32* %k, align 4
  %idxprom270 = sext i32 %275 to i64
  %276 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx271 = getelementptr inbounds i32* %276, i64 %idxprom270
  %277 = load i32* %arrayidx271, align 4
  %sub272 = sub nsw i32 %274, %277
  store i32 %sub272, i32* %k_length, align 4
  %278 = load i32* %k, align 4
  %idxprom273 = sext i32 %278 to i64
  %279 = load %struct.LocalCopies** %lc.addr, align 8
  %first274 = getelementptr inbounds %struct.LocalCopies* %279, i32 0, i32 3
  %280 = load i32** %first274, align 8
  %arrayidx275 = getelementptr inbounds i32* %280, i64 %idxprom273
  %281 = load i32* %arrayidx275, align 4
  store i32 %281, i32* %theFirst, align 4
  %282 = load i32* %k_length, align 4
  store i32 %282, i32* %theLast, align 4
  %283 = load i32* %theLast, align 4
  %284 = load i32* %theFirst, align 4
  %sub276 = sub nsw i32 %283, %284
  %285 = load i32* %j_len, align 4
  %cmp277 = icmp eq i32 %sub276, %285
  br i1 %cmp277, label %if.then.279, label %if.else.281

if.then.279:                                      ; preds = %while.body.255
  %286 = load i32* %k, align 4
  %287 = load i32* %theFirst, align 4
  %288 = load i32* %theLast, align 4
  %289 = load i32* %k_length, align 4
  %290 = load double** %domain_update, align 8
  %call280 = call i32 @ModifySuperBySuper(i32 %286, i32 %287, i32 %288, i32 %289, double* %290)
  br label %if.end.318

if.else.281:                                      ; preds = %while.body.255
  %291 = load i32* %k, align 4
  %idxprom282 = sext i32 %291 to i64
  %292 = load i32** @node, align 8
  %arrayidx283 = getelementptr inbounds i32* %292, i64 %idxprom282
  %293 = load i32* %arrayidx283, align 4
  %cmp284 = icmp sgt i32 %293, 1
  br i1 %cmp284, label %if.then.286, label %if.else.300

if.then.286:                                      ; preds = %if.else.281
  %294 = load i32* %k, align 4
  %295 = load i32* %theFirst, align 4
  %296 = load i32* %theLast, align 4
  %297 = load i32* %k_length, align 4
  %298 = load %struct.LocalCopies** %lc.addr, align 8
  %storage287 = getelementptr inbounds %struct.LocalCopies* %298, i32 0, i32 4
  %299 = load double** %storage287, align 8
  %call288 = call i32 @ModifySuperBySuper(i32 %294, i32 %295, i32 %296, i32 %297, double* %299)
  %300 = load i32* %k, align 4
  %idxprom289 = sext i32 %300 to i64
  %301 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx290 = getelementptr inbounds i32* %301, i64 %idxprom289
  %302 = load i32* %arrayidx290, align 4
  %303 = load i32* %theFirst, align 4
  %add291 = add nsw i32 %302, %303
  %idxprom292 = sext i32 %add291 to i64
  %304 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx293 = getelementptr inbounds i32* %304, i64 %idxprom292
  %305 = load i32* %k_length, align 4
  %306 = load i32* %theFirst, align 4
  %sub294 = sub nsw i32 %305, %306
  %307 = load i32** %indices, align 8
  %308 = load i32** %relative, align 8
  %call295 = call i32 @FindRelativeIndicesLeft(i32* %arrayidx293, i32 %sub294, i32 0, i32* %307, i32* %308)
  %309 = load %struct.LocalCopies** %lc.addr, align 8
  %storage296 = getelementptr inbounds %struct.LocalCopies* %309, i32 0, i32 4
  %310 = load double** %storage296, align 8
  %311 = load i32* %k_length, align 4
  %312 = load i32* %theFirst, align 4
  %sub297 = sub nsw i32 %311, %312
  %313 = load i32* %k_length, align 4
  %314 = load i32* %theFirst, align 4
  %sub298 = sub nsw i32 %313, %314
  %315 = load double** %domain_update, align 8
  %316 = load i32* %j_len, align 4
  %317 = load i32** %relative, align 8
  %call299 = call i32 @ScatterSuperUpdate(double* %310, i32 %sub297, i32 %sub298, double* %315, i32 %316, i32* %317)
  br label %if.end.317

if.else.300:                                      ; preds = %if.else.281
  %318 = load i32* %k, align 4
  %idxprom301 = sext i32 %318 to i64
  %319 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx302 = getelementptr inbounds i32* %319, i64 %idxprom301
  %320 = load i32* %arrayidx302, align 4
  %321 = load i32* %theFirst, align 4
  %add303 = add nsw i32 %320, %321
  %idxprom304 = sext i32 %add303 to i64
  %322 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx305 = getelementptr inbounds i32* %322, i64 %idxprom304
  %323 = load i32* %k_length, align 4
  %324 = load i32* %theFirst, align 4
  %sub306 = sub nsw i32 %323, %324
  %325 = load i32** %indices, align 8
  %326 = load i32** %relative, align 8
  %call307 = call i32 @FindRelativeIndicesLeft(i32* %arrayidx305, i32 %sub306, i32 0, i32* %325, i32* %326)
  %327 = load i32* %k, align 4
  %idxprom308 = sext i32 %327 to i64
  %328 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx309 = getelementptr inbounds i32* %328, i64 %idxprom308
  %329 = load i32* %arrayidx309, align 4
  %330 = load i32* %theFirst, align 4
  %add310 = add nsw i32 %329, %330
  %idxprom311 = sext i32 %add310 to i64
  %331 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx312 = getelementptr inbounds %union.Entry* %331, i64 %idxprom311
  %nz313 = bitcast %union.Entry* %arrayidx312 to double*
  %332 = load i32* %theLast, align 4
  %333 = load i32* %theFirst, align 4
  %sub314 = sub nsw i32 %332, %333
  %334 = load i32* %k_length, align 4
  %335 = load i32* %theFirst, align 4
  %sub315 = sub nsw i32 %334, %335
  %336 = load double** %domain_update, align 8
  %337 = load i32* %j_len, align 4
  %338 = load i32** %relative, align 8
  %call316 = call i32 @ModifySuperByColumn(double* %nz313, i32 %sub314, i32 %sub315, double* %336, i32 %337, i32* %338)
  br label %if.end.317

if.end.317:                                       ; preds = %if.else.300, %if.then.286
  br label %if.end.318

if.end.318:                                       ; preds = %if.end.317, %if.then.279
  br label %while.cond.248

while.end.319:                                    ; preds = %while.cond.248
  %339 = load double** %domain_update, align 8
  %tobool320 = icmp ne double* %339, null
  br i1 %tobool320, label %if.then.321, label %if.end.323

if.then.321:                                      ; preds = %while.end.319
  %340 = load i32* %which_domain.addr, align 4
  %341 = load i32* %MyNum.addr, align 4
  %342 = load %struct.LocalCopies** %lc.addr, align 8
  %call322 = call i32 @DistributeUpdateFO(i32 %340, i32 %341, %struct.LocalCopies* %342)
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.321, %while.end.319
  %343 = load i32** %relative, align 8
  %call324 = call i32 (i32*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (i32*, ...)*)(i32* %343)
  %344 = load i32** %indices, align 8
  %call325 = call i32 (i32*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (i32*, ...)*)(i32* %344)
  %345 = load i32* %retval
  ret i32 %345
}

; Function Attrs: nounwind uwtable
define internal i32 @CompleteSupernodeB(i32 %super) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %fits = alloca i32, align 4
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  %0 = load i32* %super.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32* %super.addr, align 4
  %call = call i32 @CompleteColumnB(i32 %3)
  store i32 0, i32* %retval
  br label %while.end

if.end:                                           ; preds = %entry
  %4 = load i32* %super.addr, align 4
  %add = add nsw i32 %4, 1
  %idxprom1 = sext i32 %add to i64
  %5 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx2 = getelementptr inbounds i32* %5, i64 %idxprom1
  %6 = load i32* %arrayidx2, align 4
  %7 = load i32* %super.addr, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %8, i64 %idxprom3
  %9 = load i32* %arrayidx4, align 4
  %sub = sub nsw i32 %6, %9
  store i32 %sub, i32* %length, align 4
  %10 = load i32* %length, align 4
  %div = sdiv i32 2048, %10
  store i32 %div, i32* %fits, align 4
  %11 = load i32* %fits, align 4
  %cmp5 = icmp sgt i32 %11, 4
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %12 = load i32* %fits, align 4
  %and = and i32 %12, -4
  store i32 %and, i32* %fits, align 4
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %13 = load i32* %fits, align 4
  %cmp7 = icmp slt i32 %13, 2
  br i1 %cmp7, label %if.then.8, label %if.end.11

if.then.8:                                        ; preds = %if.else
  %14 = load i32* %super.addr, align 4
  %idxprom9 = sext i32 %14 to i64
  %15 = load i32** @node, align 8
  %arrayidx10 = getelementptr inbounds i32* %15, i64 %idxprom9
  %16 = load i32* %arrayidx10, align 4
  store i32 %16, i32* %fits, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.8, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.then.6
  %17 = load i32* %super.addr, align 4
  store i32 %17, i32* %first, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end.104, %if.end.12
  %18 = load i32* %first, align 4
  %19 = load i32* %super.addr, align 4
  %20 = load i32* %super.addr, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i32** @node, align 8
  %arrayidx14 = getelementptr inbounds i32* %21, i64 %idxprom13
  %22 = load i32* %arrayidx14, align 4
  %add15 = add nsw i32 %19, %22
  %cmp16 = icmp slt i32 %18, %add15
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %23 = load i32* %first, align 4
  %24 = load i32* %fits, align 4
  %add17 = add nsw i32 %23, %24
  store i32 %add17, i32* %last, align 4
  %25 = load i32* %last, align 4
  %26 = load i32* %super.addr, align 4
  %27 = load i32* %super.addr, align 4
  %idxprom18 = sext i32 %27 to i64
  %28 = load i32** @node, align 8
  %arrayidx19 = getelementptr inbounds i32* %28, i64 %idxprom18
  %29 = load i32* %arrayidx19, align 4
  %add20 = add nsw i32 %26, %29
  %cmp21 = icmp sgt i32 %25, %add20
  br i1 %cmp21, label %if.then.22, label %if.end.26

if.then.22:                                       ; preds = %while.body
  %30 = load i32* %super.addr, align 4
  %31 = load i32* %super.addr, align 4
  %idxprom23 = sext i32 %31 to i64
  %32 = load i32** @node, align 8
  %arrayidx24 = getelementptr inbounds i32* %32, i64 %idxprom23
  %33 = load i32* %arrayidx24, align 4
  %add25 = add nsw i32 %30, %33
  store i32 %add25, i32* %last, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.22, %while.body
  %34 = load i32* %first, align 4
  store i32 %34, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.26
  %35 = load i32* %i, align 4
  %36 = load i32* %last, align 4
  %sub27 = sub nsw i32 %36, 1
  %cmp28 = icmp slt i32 %35, %sub27
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load i32* %first, align 4
  %38 = load i32* %i, align 4
  %39 = load i32* %i, align 4
  %40 = load i32* %first, align 4
  %sub29 = sub nsw i32 %39, %40
  %41 = load i32* %i, align 4
  %idxprom30 = sext i32 %41 to i64
  %42 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx31 = getelementptr inbounds i32* %42, i64 %idxprom30
  %43 = load i32* %arrayidx31, align 4
  %idxprom32 = sext i32 %43 to i64
  %44 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx33 = getelementptr inbounds %union.Entry* %44, i64 %idxprom32
  %nz = bitcast %union.Entry* %arrayidx33 to double*
  %45 = load i32* %i, align 4
  %add34 = add nsw i32 %45, 1
  %idxprom35 = sext i32 %add34 to i64
  %46 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx36 = getelementptr inbounds i32* %46, i64 %idxprom35
  %47 = load i32* %arrayidx36, align 4
  %idxprom37 = sext i32 %47 to i64
  %48 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx38 = getelementptr inbounds %union.Entry* %48, i64 %idxprom37
  %nz39 = bitcast %union.Entry* %arrayidx38 to double*
  %call40 = call i32 @ModifyTwoBySupernodeB(i32 %37, i32 %38, i32 %sub29, double* %nz, double* %nz39)
  %49 = load i32* %i, align 4
  %call41 = call i32 @CompleteColumnB(i32 %49)
  %50 = load i32* %i, align 4
  %51 = load i32* %i, align 4
  %add42 = add nsw i32 %51, 1
  %52 = load i32* %i, align 4
  %add43 = add nsw i32 %52, 1
  %idxprom44 = sext i32 %add43 to i64
  %53 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx45 = getelementptr inbounds i32* %53, i64 %idxprom44
  %54 = load i32* %arrayidx45, align 4
  %idxprom46 = sext i32 %54 to i64
  %55 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx47 = getelementptr inbounds %union.Entry* %55, i64 %idxprom46
  %nz48 = bitcast %union.Entry* %arrayidx47 to double*
  %call49 = call i32 @ModifyBySupernodeB(i32 %50, i32 %add42, i32 1, double* %nz48)
  %56 = load i32* %i, align 4
  %add50 = add nsw i32 %56, 1
  %call51 = call i32 @CompleteColumnB(i32 %add50)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %57 = load i32* %i, align 4
  %add52 = add nsw i32 %57, 2
  store i32 %add52, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.64, %for.end
  %58 = load i32* %i, align 4
  %59 = load i32* %last, align 4
  %cmp54 = icmp slt i32 %58, %59
  br i1 %cmp54, label %for.body.55, label %for.end.65

for.body.55:                                      ; preds = %for.cond.53
  %60 = load i32* %first, align 4
  %61 = load i32* %i, align 4
  %62 = load i32* %i, align 4
  %63 = load i32* %first, align 4
  %sub56 = sub nsw i32 %62, %63
  %64 = load i32* %i, align 4
  %idxprom57 = sext i32 %64 to i64
  %65 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx58 = getelementptr inbounds i32* %65, i64 %idxprom57
  %66 = load i32* %arrayidx58, align 4
  %idxprom59 = sext i32 %66 to i64
  %67 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx60 = getelementptr inbounds %union.Entry* %67, i64 %idxprom59
  %nz61 = bitcast %union.Entry* %arrayidx60 to double*
  %call62 = call i32 @ModifyBySupernodeB(i32 %60, i32 %61, i32 %sub56, double* %nz61)
  %68 = load i32* %i, align 4
  %call63 = call i32 @CompleteColumnB(i32 %68)
  br label %for.inc.64

for.inc.64:                                       ; preds = %for.body.55
  %69 = load i32* %i, align 4
  %inc = add nsw i32 %69, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.53

for.end.65:                                       ; preds = %for.cond.53
  %70 = load i32* %last, align 4
  store i32 %70, i32* %i, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.86, %for.end.65
  %71 = load i32* %i, align 4
  %72 = load i32* %super.addr, align 4
  %73 = load i32* %super.addr, align 4
  %idxprom67 = sext i32 %73 to i64
  %74 = load i32** @node, align 8
  %arrayidx68 = getelementptr inbounds i32* %74, i64 %idxprom67
  %75 = load i32* %arrayidx68, align 4
  %add69 = add nsw i32 %72, %75
  %sub70 = sub nsw i32 %add69, 1
  %cmp71 = icmp slt i32 %71, %sub70
  br i1 %cmp71, label %for.body.72, label %for.end.88

for.body.72:                                      ; preds = %for.cond.66
  %76 = load i32* %first, align 4
  %77 = load i32* %last, align 4
  %78 = load i32* %i, align 4
  %79 = load i32* %first, align 4
  %sub73 = sub nsw i32 %78, %79
  %80 = load i32* %i, align 4
  %idxprom74 = sext i32 %80 to i64
  %81 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx75 = getelementptr inbounds i32* %81, i64 %idxprom74
  %82 = load i32* %arrayidx75, align 4
  %idxprom76 = sext i32 %82 to i64
  %83 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx77 = getelementptr inbounds %union.Entry* %83, i64 %idxprom76
  %nz78 = bitcast %union.Entry* %arrayidx77 to double*
  %84 = load i32* %i, align 4
  %add79 = add nsw i32 %84, 1
  %idxprom80 = sext i32 %add79 to i64
  %85 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx81 = getelementptr inbounds i32* %85, i64 %idxprom80
  %86 = load i32* %arrayidx81, align 4
  %idxprom82 = sext i32 %86 to i64
  %87 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx83 = getelementptr inbounds %union.Entry* %87, i64 %idxprom82
  %nz84 = bitcast %union.Entry* %arrayidx83 to double*
  %call85 = call i32 @ModifyTwoBySupernodeB(i32 %76, i32 %77, i32 %sub73, double* %nz78, double* %nz84)
  br label %for.inc.86

for.inc.86:                                       ; preds = %for.body.72
  %88 = load i32* %i, align 4
  %add87 = add nsw i32 %88, 2
  store i32 %add87, i32* %i, align 4
  br label %for.cond.66

for.end.88:                                       ; preds = %for.cond.66
  br label %for.cond.89

for.cond.89:                                      ; preds = %for.inc.102, %for.end.88
  %89 = load i32* %i, align 4
  %90 = load i32* %super.addr, align 4
  %91 = load i32* %super.addr, align 4
  %idxprom90 = sext i32 %91 to i64
  %92 = load i32** @node, align 8
  %arrayidx91 = getelementptr inbounds i32* %92, i64 %idxprom90
  %93 = load i32* %arrayidx91, align 4
  %add92 = add nsw i32 %90, %93
  %cmp93 = icmp slt i32 %89, %add92
  br i1 %cmp93, label %for.body.94, label %for.end.104

for.body.94:                                      ; preds = %for.cond.89
  %94 = load i32* %first, align 4
  %95 = load i32* %last, align 4
  %96 = load i32* %i, align 4
  %97 = load i32* %first, align 4
  %sub95 = sub nsw i32 %96, %97
  %98 = load i32* %i, align 4
  %idxprom96 = sext i32 %98 to i64
  %99 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx97 = getelementptr inbounds i32* %99, i64 %idxprom96
  %100 = load i32* %arrayidx97, align 4
  %idxprom98 = sext i32 %100 to i64
  %101 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx99 = getelementptr inbounds %union.Entry* %101, i64 %idxprom98
  %nz100 = bitcast %union.Entry* %arrayidx99 to double*
  %call101 = call i32 @ModifyBySupernodeB(i32 %94, i32 %95, i32 %sub95, double* %nz100)
  br label %for.inc.102

for.inc.102:                                      ; preds = %for.body.94
  %102 = load i32* %i, align 4
  %inc103 = add nsw i32 %102, 1
  store i32 %inc103, i32* %i, align 4
  br label %for.cond.89

for.end.104:                                      ; preds = %for.cond.89
  %103 = load i32* %last, align 4
  store i32 %103, i32* %first, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond, %if.then
  %104 = load i32* %retval
  ret i32 %104
}

; Function Attrs: nounwind uwtable
define internal i32 @CompleteColumnB(i32 %j) {
entry:
  %retval = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %recip = alloca double, align 8
  %diag = alloca double, align 8
  %theNZ = alloca double*, align 8
  %last = alloca double*, align 8
  store i32 %j, i32* %j.addr, align 4
  %0 = load i32* %j.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  %idxprom1 = sext i32 %2 to i64
  %3 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %3, i64 %idxprom1
  %nz = bitcast %union.Entry* %arrayidx2 to double*
  store double* %nz, double** %theNZ, align 8
  %4 = load i32* %j.addr, align 4
  %add = add nsw i32 %4, 1
  %idxprom3 = sext i32 %add to i64
  %5 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %5, i64 %idxprom3
  %6 = load i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx6 = getelementptr inbounds %union.Entry* %7, i64 %idxprom5
  %nz7 = bitcast %union.Entry* %arrayidx6 to double*
  store double* %nz7, double** %last, align 8
  %8 = load double** %theNZ, align 8
  %9 = load double* %8, align 8
  store double %9, double* %diag, align 8
  %10 = load double* %diag, align 8
  %cmp = fcmp ole double %10, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32* %j.addr, align 4
  %12 = load double* %diag, align 8
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.32, i32 0, i32 0), i32 %11, double %12)
  call void @exit(i32 0)
  unreachable

if.end:                                           ; preds = %entry
  %13 = load double* %diag, align 8
  %call8 = call double @sqrt(double %13)
  store double %call8, double* %diag, align 8
  %14 = load double* %diag, align 8
  %15 = load double** %theNZ, align 8
  %incdec.ptr = getelementptr inbounds double* %15, i32 1
  store double* %incdec.ptr, double** %theNZ, align 8
  store double %14, double* %15, align 8
  %16 = load double* %diag, align 8
  %div = fdiv double 1.000000e+00, %16
  store double %div, double* %recip, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %17 = load double** %theNZ, align 8
  %18 = load double** %last, align 8
  %cmp9 = icmp ne double* %17, %18
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load double* %recip, align 8
  %20 = load double** %theNZ, align 8
  %incdec.ptr10 = getelementptr inbounds double* %20, i32 1
  store double* %incdec.ptr10, double** %theNZ, align 8
  %21 = load double* %20, align 8
  %mul = fmul double %21, %19
  store double %mul, double* %20, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @FindRelativeIndicesLeft(i32* %src_structure, i32 %rows_in_update, i32 %offset, i32* %indices, i32* %relative) {
entry:
  %retval = alloca i32, align 4
  %src_structure.addr = alloca i32*, align 8
  %rows_in_update.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %indices.addr = alloca i32*, align 8
  %relative.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %leftRow = alloca i32*, align 8
  %last = alloca i32*, align 8
  store i32* %src_structure, i32** %src_structure.addr, align 8
  store i32 %rows_in_update, i32* %rows_in_update.addr, align 4
  store i32 %offset, i32* %offset.addr, align 4
  store i32* %indices, i32** %indices.addr, align 8
  store i32* %relative, i32** %relative.addr, align 8
  %0 = load i32** %src_structure.addr, align 8
  store i32* %0, i32** %leftRow, align 8
  %1 = load i32* %rows_in_update.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32** %src_structure.addr, align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  store i32* %arrayidx, i32** %last, align 8
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32** %leftRow, align 8
  %4 = load i32** %last, align 8
  %cmp = icmp ne i32* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32** %leftRow, align 8
  %incdec.ptr = getelementptr inbounds i32* %5, i32 1
  store i32* %incdec.ptr, i32** %leftRow, align 8
  %6 = load i32* %5, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** %indices.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  %9 = load i32* %offset.addr, align 4
  %sub = sub nsw i32 %8, %9
  %10 = load i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %idxprom3 = sext i32 %10 to i64
  %11 = load i32** %relative.addr, align 8
  %arrayidx4 = getelementptr inbounds i32* %11, i64 %idxprom3
  store i32 %sub, i32* %arrayidx4, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @ScatterSuperUpdate(double* %update, i32 %cols_in_update, i32 %rows_in_update, double* %dest_nz, i32 %dest_len, i32* %relative) {
entry:
  %retval = alloca i32, align 4
  %update.addr = alloca double*, align 8
  %cols_in_update.addr = alloca i32, align 4
  %rows_in_update.addr = alloca i32, align 4
  %dest_nz.addr = alloca double*, align 8
  %dest_len.addr = alloca i32, align 4
  %relative.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %dest = alloca i32, align 4
  %last = alloca i32*, align 8
  %leftRow = alloca i32*, align 8
  %theTmp = alloca double*, align 8
  %rightNZ = alloca double*, align 8
  store double* %update, double** %update.addr, align 8
  store i32 %cols_in_update, i32* %cols_in_update.addr, align 4
  store i32 %rows_in_update, i32* %rows_in_update.addr, align 4
  store double* %dest_nz, double** %dest_nz.addr, align 8
  store i32 %dest_len, i32* %dest_len.addr, align 4
  store i32* %relative, i32** %relative.addr, align 8
  %0 = load double** %update.addr, align 8
  store double* %0, double** %theTmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32* %i, align 4
  %2 = load i32* %cols_in_update.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32** %relative.addr, align 8
  %4 = load i32* %i, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %leftRow, align 8
  %5 = load i32** %relative.addr, align 8
  %6 = load i32* %rows_in_update.addr, align 4
  %idx.ext1 = sext i32 %6 to i64
  %add.ptr2 = getelementptr inbounds i32* %5, i64 %idx.ext1
  store i32* %add.ptr2, i32** %last, align 8
  %7 = load i32** %leftRow, align 8
  %arrayidx = getelementptr inbounds i32* %7, i64 0
  %8 = load i32* %arrayidx, align 4
  store i32 %8, i32* %dest, align 4
  %9 = load double** %dest_nz.addr, align 8
  %10 = load i32* %dest, align 4
  %11 = load i32* %dest_len.addr, align 4
  %mul = mul nsw i32 %10, %11
  %idx.ext3 = sext i32 %mul to i64
  %add.ptr4 = getelementptr inbounds double* %9, i64 %idx.ext3
  %12 = load i32* %dest, align 4
  %13 = load i32* %dest, align 4
  %add = add nsw i32 %13, 1
  %mul5 = mul nsw i32 %12, %add
  %div = sdiv i32 %mul5, 2
  %idx.ext6 = sext i32 %div to i64
  %idx.neg = sub i64 0, %idx.ext6
  %add.ptr7 = getelementptr inbounds double* %add.ptr4, i64 %idx.neg
  store double* %add.ptr7, double** %rightNZ, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %14 = load i32** %leftRow, align 8
  %15 = load i32** %last, align 8
  %cmp8 = icmp ne i32* %14, %15
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load double** %theTmp, align 8
  %17 = load double* %16, align 8
  %18 = load i32** %leftRow, align 8
  %19 = load i32* %18, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load double** %rightNZ, align 8
  %arrayidx9 = getelementptr inbounds double* %20, i64 %idxprom
  %21 = load double* %arrayidx9, align 8
  %add10 = fadd double %21, %17
  store double %add10, double* %arrayidx9, align 8
  %22 = load double** %theTmp, align 8
  store double 0.000000e+00, double* %22, align 8
  %23 = load double** %theTmp, align 8
  %incdec.ptr = getelementptr inbounds double* %23, i32 1
  store double* %incdec.ptr, double** %theTmp, align 8
  %24 = load i32** %leftRow, align 8
  %incdec.ptr11 = getelementptr inbounds i32* %24, i32 1
  store i32* %incdec.ptr11, i32** %leftRow, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %25 = load i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @ModifySuperByColumn(double* %src_nz, i32 %cols_in_update, i32 %rows_in_update, double* %dest_nz, i32 %dest_len, i32* %relative) {
entry:
  %retval = alloca i32, align 4
  %src_nz.addr = alloca double*, align 8
  %cols_in_update.addr = alloca i32, align 4
  %rows_in_update.addr = alloca i32, align 4
  %dest_nz.addr = alloca double*, align 8
  %dest_len.addr = alloca i32, align 4
  %relative.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %dest = alloca i32, align 4
  %last = alloca i32*, align 8
  %leftRow = alloca i32*, align 8
  %ljk = alloca double, align 8
  %theTmp = alloca double*, align 8
  %rightNZ = alloca double*, align 8
  store double* %src_nz, double** %src_nz.addr, align 8
  store i32 %cols_in_update, i32* %cols_in_update.addr, align 4
  store i32 %rows_in_update, i32* %rows_in_update.addr, align 4
  store double* %dest_nz, double** %dest_nz.addr, align 8
  store i32 %dest_len, i32* %dest_len.addr, align 4
  store i32* %relative, i32** %relative.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %cols_in_update.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32** %relative.addr, align 8
  %3 = load i32* %i, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds i32* %2, i64 %idx.ext
  store i32* %add.ptr, i32** %leftRow, align 8
  %4 = load i32** %relative.addr, align 8
  %5 = load i32* %rows_in_update.addr, align 4
  %idx.ext1 = sext i32 %5 to i64
  %add.ptr2 = getelementptr inbounds i32* %4, i64 %idx.ext1
  store i32* %add.ptr2, i32** %last, align 8
  %6 = load i32** %leftRow, align 8
  %arrayidx = getelementptr inbounds i32* %6, i64 0
  %7 = load i32* %arrayidx, align 4
  store i32 %7, i32* %dest, align 4
  %8 = load double** %dest_nz.addr, align 8
  %9 = load i32* %dest, align 4
  %10 = load i32* %dest_len.addr, align 4
  %mul = mul nsw i32 %9, %10
  %idx.ext3 = sext i32 %mul to i64
  %add.ptr4 = getelementptr inbounds double* %8, i64 %idx.ext3
  %11 = load i32* %dest, align 4
  %12 = load i32* %dest, align 4
  %add = add nsw i32 %12, 1
  %mul5 = mul nsw i32 %11, %add
  %div = sdiv i32 %mul5, 2
  %idx.ext6 = sext i32 %div to i64
  %idx.neg = sub i64 0, %idx.ext6
  %add.ptr7 = getelementptr inbounds double* %add.ptr4, i64 %idx.neg
  store double* %add.ptr7, double** %rightNZ, align 8
  %13 = load double** %src_nz.addr, align 8
  %14 = load i32* %i, align 4
  %idx.ext8 = sext i32 %14 to i64
  %add.ptr9 = getelementptr inbounds double* %13, i64 %idx.ext8
  store double* %add.ptr9, double** %theTmp, align 8
  %15 = load double** %theTmp, align 8
  %16 = load double* %15, align 8
  store double %16, double* %ljk, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %17 = load i32** %leftRow, align 8
  %18 = load i32** %last, align 8
  %cmp10 = icmp ne i32* %17, %18
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load double* %ljk, align 8
  %20 = load double** %theTmp, align 8
  %21 = load double* %20, align 8
  %mul11 = fmul double %19, %21
  %22 = load i32** %leftRow, align 8
  %23 = load i32* %22, align 4
  %idxprom = sext i32 %23 to i64
  %24 = load double** %rightNZ, align 8
  %arrayidx12 = getelementptr inbounds double* %24, i64 %idxprom
  %25 = load double* %arrayidx12, align 8
  %sub = fsub double %25, %mul11
  store double %sub, double* %arrayidx12, align 8
  %26 = load double** %theTmp, align 8
  %incdec.ptr = getelementptr inbounds double* %26, i32 1
  store double* %incdec.ptr, double** %theTmp, align 8
  %27 = load i32** %leftRow, align 8
  %incdec.ptr13 = getelementptr inbounds i32* %27, i32 1
  store i32* %incdec.ptr13, i32** %leftRow, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %28 = load i32* %i, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = load i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @SetDestIndices(i32 %super, i32* %indices) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %indices.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %rightRow = alloca i32*, align 8
  %lastRow = alloca i32*, align 8
  store i32 %super, i32* %super.addr, align 4
  store i32* %indices, i32** %indices.addr, align 8
  %0 = load i32* %super.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  %idxprom1 = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx2 = getelementptr inbounds i32* %3, i64 %idxprom1
  store i32* %arrayidx2, i32** %rightRow, align 8
  %4 = load i32** %rightRow, align 8
  %5 = load i32* %super.addr, align 4
  %add = add nsw i32 %5, 1
  %idxprom3 = sext i32 %add to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx4 = getelementptr inbounds i32* %6, i64 %idxprom3
  %7 = load i32* %arrayidx4, align 4
  %8 = load i32* %super.addr, align 4
  %idxprom5 = sext i32 %8 to i64
  %9 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx6 = getelementptr inbounds i32* %9, i64 %idxprom5
  %10 = load i32* %arrayidx6, align 4
  %sub = sub nsw i32 %7, %10
  %idx.ext = sext i32 %sub to i64
  %add.ptr = getelementptr inbounds i32* %4, i64 %idx.ext
  store i32* %add.ptr, i32** %lastRow, align 8
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %11 = load i32** %rightRow, align 8
  %12 = load i32** %lastRow, align 8
  %cmp = icmp ne i32* %11, %12
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %14 = load i32** %rightRow, align 8
  %incdec.ptr = getelementptr inbounds i32* %14, i32 1
  store i32* %incdec.ptr, i32** %rightRow, align 8
  %15 = load i32* %14, align 4
  %idxprom7 = sext i32 %15 to i64
  %16 = load i32** %indices.addr, align 8
  %arrayidx8 = getelementptr inbounds i32* %16, i64 %idxprom7
  store i32 %13, i32* %arrayidx8, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @SetDomainIndices(i32 %super, i32* %indices) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %indices.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %rightRow = alloca i32*, align 8
  %lastRow = alloca i32*, align 8
  store i32 %super, i32* %super.addr, align 4
  store i32* %indices, i32** %indices.addr, align 8
  %0 = load i32* %super.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  %add = add nsw i32 %2, 1
  %idxprom1 = sext i32 %add to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx2 = getelementptr inbounds i32* %3, i64 %idxprom1
  store i32* %arrayidx2, i32** %rightRow, align 8
  %4 = load i32** %rightRow, align 8
  %add.ptr = getelementptr inbounds i32* %4, i64 -1
  %5 = load i32* %super.addr, align 4
  %add3 = add nsw i32 %5, 1
  %idxprom4 = sext i32 %add3 to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %6, i64 %idxprom4
  %7 = load i32* %arrayidx5, align 4
  %8 = load i32* %super.addr, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %9, i64 %idxprom6
  %10 = load i32* %arrayidx7, align 4
  %sub = sub nsw i32 %7, %10
  %idx.ext = sext i32 %sub to i64
  %add.ptr8 = getelementptr inbounds i32* %add.ptr, i64 %idx.ext
  store i32* %add.ptr8, i32** %lastRow, align 8
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %11 = load i32** %rightRow, align 8
  %12 = load i32** %lastRow, align 8
  %cmp = icmp ne i32* %11, %12
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %14 = load i32** %rightRow, align 8
  %incdec.ptr = getelementptr inbounds i32* %14, i32 1
  store i32* %incdec.ptr, i32** %rightRow, align 8
  %15 = load i32* %14, align 4
  %idxprom9 = sext i32 %15 to i64
  %16 = load i32** %indices.addr, align 8
  %arrayidx10 = getelementptr inbounds i32* %16, i64 %idxprom9
  store i32 %13, i32* %arrayidx10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @ModifySuperBySuper(i32 %src, i32 %theFirst, i32 %theLast, i32 %length, double* %dest) {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca i32, align 4
  %theFirst.addr = alloca i32, align 4
  %theLast.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %dest.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %fits = alloca i32, align 4
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  %lastcol = alloca i32, align 4
  %this_length = alloca i32, align 4
  %destination = alloca double*, align 8
  store i32 %src, i32* %src.addr, align 4
  store i32 %theFirst, i32* %theFirst.addr, align 4
  store i32 %theLast, i32* %theLast.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store double* %dest, double** %dest.addr, align 8
  %0 = load i32* %length.addr, align 4
  %div = sdiv i32 2048, %0
  store i32 %div, i32* %fits, align 4
  %1 = load i32* %fits, align 4
  %cmp = icmp sgt i32 %1, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32* %fits, align 4
  %and = and i32 %2, -4
  store i32 %and, i32* %fits, align 4
  br label %if.end.3

if.else:                                          ; preds = %entry
  %3 = load i32* %fits, align 4
  %cmp1 = icmp slt i32 %3, 2
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.else
  %4 = load i32* %src.addr, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* %fits, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %if.then
  %7 = load i32* %src.addr, align 4
  %8 = load i32* %src.addr, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i32** @node, align 8
  %arrayidx5 = getelementptr inbounds i32* %9, i64 %idxprom4
  %10 = load i32* %arrayidx5, align 4
  %add = add nsw i32 %7, %10
  store i32 %add, i32* %lastcol, align 4
  %11 = load i32* %src.addr, align 4
  store i32 %11, i32* %last, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end.30, %if.end.3
  %12 = load i32* %last, align 4
  %13 = load i32* %lastcol, align 4
  %cmp6 = icmp slt i32 %12, %13
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32* %last, align 4
  store i32 %14, i32* %first, align 4
  %15 = load i32* %first, align 4
  %16 = load i32* %fits, align 4
  %add7 = add nsw i32 %15, %16
  store i32 %add7, i32* %last, align 4
  %17 = load i32* %last, align 4
  %18 = load i32* %lastcol, align 4
  %cmp8 = icmp sgt i32 %17, %18
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %while.body
  %19 = load i32* %lastcol, align 4
  store i32 %19, i32* %last, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %while.body
  %20 = load double** %dest.addr, align 8
  store double* %20, double** %destination, align 8
  %21 = load i32* %length.addr, align 4
  %22 = load i32* %theFirst.addr, align 4
  %sub = sub nsw i32 %21, %22
  store i32 %sub, i32* %this_length, align 4
  %23 = load i32* %theFirst.addr, align 4
  store i32 %23, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %24 = load i32* %i, align 4
  %25 = load i32* %theLast.addr, align 4
  %sub11 = sub nsw i32 %25, 1
  %cmp12 = icmp slt i32 %24, %sub11
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32* %first, align 4
  %27 = load i32* %last, align 4
  %28 = load i32* %i, align 4
  %29 = load i32* %first, align 4
  %30 = load i32* %src.addr, align 4
  %sub13 = sub nsw i32 %29, %30
  %sub14 = sub nsw i32 %28, %sub13
  %31 = load double** %destination, align 8
  %32 = load double** %destination, align 8
  %33 = load i32* %this_length, align 4
  %idx.ext = sext i32 %33 to i64
  %add.ptr = getelementptr inbounds double* %32, i64 %idx.ext
  %call = call i32 @ModifyTwoBySupernodeB(i32 %26, i32 %27, i32 %sub14, double* %31, double* %add.ptr)
  %34 = load i32* %this_length, align 4
  %35 = load i32* %this_length, align 4
  %add15 = add nsw i32 %34, %35
  %sub16 = sub nsw i32 %add15, 1
  %36 = load double** %destination, align 8
  %idx.ext17 = sext i32 %sub16 to i64
  %add.ptr18 = getelementptr inbounds double* %36, i64 %idx.ext17
  store double* %add.ptr18, double** %destination, align 8
  %37 = load i32* %this_length, align 4
  %sub19 = sub nsw i32 %37, 2
  store i32 %sub19, i32* %this_length, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %38 = load i32* %i, align 4
  %add20 = add nsw i32 %38, 2
  store i32 %add20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.29, %for.end
  %39 = load i32* %i, align 4
  %40 = load i32* %theLast.addr, align 4
  %cmp22 = icmp slt i32 %39, %40
  br i1 %cmp22, label %for.body.23, label %for.end.30

for.body.23:                                      ; preds = %for.cond.21
  %41 = load i32* %first, align 4
  %42 = load i32* %last, align 4
  %43 = load i32* %i, align 4
  %44 = load i32* %first, align 4
  %45 = load i32* %src.addr, align 4
  %sub24 = sub nsw i32 %44, %45
  %sub25 = sub nsw i32 %43, %sub24
  %46 = load double** %destination, align 8
  %call26 = call i32 @ModifyBySupernodeB(i32 %41, i32 %42, i32 %sub25, double* %46)
  %47 = load i32* %this_length, align 4
  %48 = load double** %destination, align 8
  %idx.ext27 = sext i32 %47 to i64
  %add.ptr28 = getelementptr inbounds double* %48, i64 %idx.ext27
  store double* %add.ptr28, double** %destination, align 8
  %49 = load i32* %this_length, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* %this_length, align 4
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.body.23
  %50 = load i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.21

for.end.30:                                       ; preds = %for.cond.21
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %51 = load i32* %retval
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define internal i32 @ModifyTwoBySupernodeB(i32 %super, i32 %lastcol, i32 %theFirst, double* %destination0, double* %destination1) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %lastcol.addr = alloca i32, align 4
  %theFirst.addr = alloca i32, align 4
  %destination0.addr = alloca double*, align 8
  %destination1.addr = alloca double*, align 8
  %col = alloca i32, align 4
  %increment = alloca i32, align 4
  %ljk0_0 = alloca double, align 8
  %ljk0_1 = alloca double, align 8
  %ljk1_0 = alloca double, align 8
  %ljk1_1 = alloca double, align 8
  %ljk2_0 = alloca double, align 8
  %ljk2_1 = alloca double, align 8
  %ljk3_0 = alloca double, align 8
  %ljk3_1 = alloca double, align 8
  %ljk4_0 = alloca double, align 8
  %ljk4_1 = alloca double, align 8
  %ljk5_0 = alloca double, align 8
  %ljk5_1 = alloca double, align 8
  %ljk6_0 = alloca double, align 8
  %ljk6_1 = alloca double, align 8
  %ljk7_0 = alloca double, align 8
  %ljk7_1 = alloca double, align 8
  %d0 = alloca double, align 8
  %d1 = alloca double, align 8
  %tmp0 = alloca double, align 8
  %tmp1 = alloca double, align 8
  %last = alloca double*, align 8
  %dest0 = alloca double*, align 8
  %dest1 = alloca double*, align 8
  %srcNZ0 = alloca double*, align 8
  %srcNZ1 = alloca double*, align 8
  %srcNZ2 = alloca double*, align 8
  %srcNZ3 = alloca double*, align 8
  %srcNZ4 = alloca double*, align 8
  %srcNZ5 = alloca double*, align 8
  %srcNZ6 = alloca double*, align 8
  %srcNZ7 = alloca double*, align 8
  store i32 %super, i32* %super.addr, align 4
  store i32 %lastcol, i32* %lastcol.addr, align 4
  store i32 %theFirst, i32* %theFirst.addr, align 4
  store double* %destination0, double** %destination0.addr, align 8
  store double* %destination1, double** %destination1.addr, align 8
  %0 = load i32* %super.addr, align 4
  store i32 %0, i32* %col, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %1 = load i32* %col, align 4
  %2 = load i32* %lastcol.addr, align 4
  %sub = sub nsw i32 %2, 7
  %cmp = icmp slt i32 %1, %sub
  br i1 %cmp, label %while.body, label %while.end.147

while.body:                                       ; preds = %while.cond
  %3 = load double** %destination0.addr, align 8
  store double* %3, double** %dest0, align 8
  %4 = load double** %destination1.addr, align 8
  store double* %4, double** %dest1, align 8
  %5 = load i32* %col, align 4
  %add = add nsw i32 %5, 1
  %idxprom = sext i32 %add to i64
  %6 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %6, i64 %idxprom
  %7 = load i32* %arrayidx, align 4
  %idxprom1 = sext i32 %7 to i64
  %8 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx2 = getelementptr inbounds %union.Entry* %8, i64 %idxprom1
  %nz = bitcast %union.Entry* %arrayidx2 to double*
  store double* %nz, double** %last, align 8
  %9 = load i32* %col, align 4
  %add3 = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add3 to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %12 = load i32* %col, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx7 = getelementptr inbounds i32* %13, i64 %idxprom6
  %14 = load i32* %arrayidx7, align 4
  %sub8 = sub nsw i32 %11, %14
  store i32 %sub8, i32* %increment, align 4
  %15 = load i32* %col, align 4
  %idxprom9 = sext i32 %15 to i64
  %16 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx10 = getelementptr inbounds i32* %16, i64 %idxprom9
  %17 = load i32* %arrayidx10, align 4
  %18 = load i32* %super.addr, align 4
  %19 = load i32* %col, align 4
  %sub11 = sub nsw i32 %18, %19
  %add12 = add nsw i32 %17, %sub11
  %20 = load i32* %theFirst.addr, align 4
  %add13 = add nsw i32 %add12, %20
  %idxprom14 = sext i32 %add13 to i64
  %21 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx15 = getelementptr inbounds %union.Entry* %21, i64 %idxprom14
  %nz16 = bitcast %union.Entry* %arrayidx15 to double*
  store double* %nz16, double** %srcNZ0, align 8
  %22 = load double** %srcNZ0, align 8
  %23 = load i32* %increment, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds double* %22, i64 %idx.ext
  %add.ptr17 = getelementptr inbounds double* %add.ptr, i64 -1
  store double* %add.ptr17, double** %srcNZ1, align 8
  %24 = load double** %srcNZ1, align 8
  %25 = load i32* %increment, align 4
  %idx.ext18 = sext i32 %25 to i64
  %add.ptr19 = getelementptr inbounds double* %24, i64 %idx.ext18
  %add.ptr20 = getelementptr inbounds double* %add.ptr19, i64 -2
  store double* %add.ptr20, double** %srcNZ2, align 8
  %26 = load double** %srcNZ2, align 8
  %27 = load i32* %increment, align 4
  %idx.ext21 = sext i32 %27 to i64
  %add.ptr22 = getelementptr inbounds double* %26, i64 %idx.ext21
  %add.ptr23 = getelementptr inbounds double* %add.ptr22, i64 -3
  store double* %add.ptr23, double** %srcNZ3, align 8
  %28 = load double** %srcNZ3, align 8
  %29 = load i32* %increment, align 4
  %idx.ext24 = sext i32 %29 to i64
  %add.ptr25 = getelementptr inbounds double* %28, i64 %idx.ext24
  %add.ptr26 = getelementptr inbounds double* %add.ptr25, i64 -4
  store double* %add.ptr26, double** %srcNZ4, align 8
  %30 = load double** %srcNZ4, align 8
  %31 = load i32* %increment, align 4
  %idx.ext27 = sext i32 %31 to i64
  %add.ptr28 = getelementptr inbounds double* %30, i64 %idx.ext27
  %add.ptr29 = getelementptr inbounds double* %add.ptr28, i64 -5
  store double* %add.ptr29, double** %srcNZ5, align 8
  %32 = load double** %srcNZ5, align 8
  %33 = load i32* %increment, align 4
  %idx.ext30 = sext i32 %33 to i64
  %add.ptr31 = getelementptr inbounds double* %32, i64 %idx.ext30
  %add.ptr32 = getelementptr inbounds double* %add.ptr31, i64 -6
  store double* %add.ptr32, double** %srcNZ6, align 8
  %34 = load double** %srcNZ6, align 8
  %35 = load i32* %increment, align 4
  %idx.ext33 = sext i32 %35 to i64
  %add.ptr34 = getelementptr inbounds double* %34, i64 %idx.ext33
  %add.ptr35 = getelementptr inbounds double* %add.ptr34, i64 -7
  store double* %add.ptr35, double** %srcNZ7, align 8
  %36 = load double** %srcNZ0, align 8
  %incdec.ptr = getelementptr inbounds double* %36, i32 1
  store double* %incdec.ptr, double** %srcNZ0, align 8
  %37 = load double* %36, align 8
  store double %37, double* %ljk0_0, align 8
  %38 = load double** %srcNZ0, align 8
  %incdec.ptr36 = getelementptr inbounds double* %38, i32 1
  store double* %incdec.ptr36, double** %srcNZ0, align 8
  %39 = load double* %38, align 8
  store double %39, double* %ljk0_1, align 8
  %40 = load double** %srcNZ1, align 8
  %incdec.ptr37 = getelementptr inbounds double* %40, i32 1
  store double* %incdec.ptr37, double** %srcNZ1, align 8
  %41 = load double* %40, align 8
  store double %41, double* %ljk1_0, align 8
  %42 = load double** %srcNZ1, align 8
  %incdec.ptr38 = getelementptr inbounds double* %42, i32 1
  store double* %incdec.ptr38, double** %srcNZ1, align 8
  %43 = load double* %42, align 8
  store double %43, double* %ljk1_1, align 8
  %44 = load double** %srcNZ2, align 8
  %incdec.ptr39 = getelementptr inbounds double* %44, i32 1
  store double* %incdec.ptr39, double** %srcNZ2, align 8
  %45 = load double* %44, align 8
  store double %45, double* %ljk2_0, align 8
  %46 = load double** %srcNZ2, align 8
  %incdec.ptr40 = getelementptr inbounds double* %46, i32 1
  store double* %incdec.ptr40, double** %srcNZ2, align 8
  %47 = load double* %46, align 8
  store double %47, double* %ljk2_1, align 8
  %48 = load double** %srcNZ3, align 8
  %incdec.ptr41 = getelementptr inbounds double* %48, i32 1
  store double* %incdec.ptr41, double** %srcNZ3, align 8
  %49 = load double* %48, align 8
  store double %49, double* %ljk3_0, align 8
  %50 = load double** %srcNZ3, align 8
  %incdec.ptr42 = getelementptr inbounds double* %50, i32 1
  store double* %incdec.ptr42, double** %srcNZ3, align 8
  %51 = load double* %50, align 8
  store double %51, double* %ljk3_1, align 8
  %52 = load double** %srcNZ4, align 8
  %incdec.ptr43 = getelementptr inbounds double* %52, i32 1
  store double* %incdec.ptr43, double** %srcNZ4, align 8
  %53 = load double* %52, align 8
  store double %53, double* %ljk4_0, align 8
  %54 = load double** %srcNZ4, align 8
  %incdec.ptr44 = getelementptr inbounds double* %54, i32 1
  store double* %incdec.ptr44, double** %srcNZ4, align 8
  %55 = load double* %54, align 8
  store double %55, double* %ljk4_1, align 8
  %56 = load double** %srcNZ5, align 8
  %incdec.ptr45 = getelementptr inbounds double* %56, i32 1
  store double* %incdec.ptr45, double** %srcNZ5, align 8
  %57 = load double* %56, align 8
  store double %57, double* %ljk5_0, align 8
  %58 = load double** %srcNZ5, align 8
  %incdec.ptr46 = getelementptr inbounds double* %58, i32 1
  store double* %incdec.ptr46, double** %srcNZ5, align 8
  %59 = load double* %58, align 8
  store double %59, double* %ljk5_1, align 8
  %60 = load double** %srcNZ6, align 8
  %incdec.ptr47 = getelementptr inbounds double* %60, i32 1
  store double* %incdec.ptr47, double** %srcNZ6, align 8
  %61 = load double* %60, align 8
  store double %61, double* %ljk6_0, align 8
  %62 = load double** %srcNZ6, align 8
  %incdec.ptr48 = getelementptr inbounds double* %62, i32 1
  store double* %incdec.ptr48, double** %srcNZ6, align 8
  %63 = load double* %62, align 8
  store double %63, double* %ljk6_1, align 8
  %64 = load double** %srcNZ7, align 8
  %incdec.ptr49 = getelementptr inbounds double* %64, i32 1
  store double* %incdec.ptr49, double** %srcNZ7, align 8
  %65 = load double* %64, align 8
  store double %65, double* %ljk7_0, align 8
  %66 = load double** %srcNZ7, align 8
  %incdec.ptr50 = getelementptr inbounds double* %66, i32 1
  store double* %incdec.ptr50, double** %srcNZ7, align 8
  %67 = load double* %66, align 8
  store double %67, double* %ljk7_1, align 8
  %68 = load double* %ljk0_0, align 8
  %69 = load double* %ljk0_0, align 8
  %mul = fmul double %68, %69
  %70 = load double* %ljk1_0, align 8
  %71 = load double* %ljk1_0, align 8
  %mul51 = fmul double %70, %71
  %add52 = fadd double %mul, %mul51
  %72 = load double* %ljk2_0, align 8
  %73 = load double* %ljk2_0, align 8
  %mul53 = fmul double %72, %73
  %add54 = fadd double %add52, %mul53
  %74 = load double* %ljk3_0, align 8
  %75 = load double* %ljk3_0, align 8
  %mul55 = fmul double %74, %75
  %add56 = fadd double %add54, %mul55
  %76 = load double* %ljk4_0, align 8
  %77 = load double* %ljk4_0, align 8
  %mul57 = fmul double %76, %77
  %add58 = fadd double %add56, %mul57
  %78 = load double* %ljk5_0, align 8
  %79 = load double* %ljk5_0, align 8
  %mul59 = fmul double %78, %79
  %add60 = fadd double %add58, %mul59
  %80 = load double* %ljk6_0, align 8
  %81 = load double* %ljk6_0, align 8
  %mul61 = fmul double %80, %81
  %add62 = fadd double %add60, %mul61
  %82 = load double* %ljk7_0, align 8
  %83 = load double* %ljk7_0, align 8
  %mul63 = fmul double %82, %83
  %add64 = fadd double %add62, %mul63
  %84 = load double** %dest0, align 8
  %incdec.ptr65 = getelementptr inbounds double* %84, i32 1
  store double* %incdec.ptr65, double** %dest0, align 8
  %85 = load double* %84, align 8
  %sub66 = fsub double %85, %add64
  store double %sub66, double* %84, align 8
  %86 = load double* %ljk0_1, align 8
  %87 = load double* %ljk0_1, align 8
  %mul67 = fmul double %86, %87
  %88 = load double* %ljk1_1, align 8
  %89 = load double* %ljk1_1, align 8
  %mul68 = fmul double %88, %89
  %add69 = fadd double %mul67, %mul68
  %90 = load double* %ljk2_1, align 8
  %91 = load double* %ljk2_1, align 8
  %mul70 = fmul double %90, %91
  %add71 = fadd double %add69, %mul70
  %92 = load double* %ljk3_1, align 8
  %93 = load double* %ljk3_1, align 8
  %mul72 = fmul double %92, %93
  %add73 = fadd double %add71, %mul72
  %94 = load double* %ljk4_1, align 8
  %95 = load double* %ljk4_1, align 8
  %mul74 = fmul double %94, %95
  %add75 = fadd double %add73, %mul74
  %96 = load double* %ljk5_1, align 8
  %97 = load double* %ljk5_1, align 8
  %mul76 = fmul double %96, %97
  %add77 = fadd double %add75, %mul76
  %98 = load double* %ljk6_1, align 8
  %99 = load double* %ljk6_1, align 8
  %mul78 = fmul double %98, %99
  %add79 = fadd double %add77, %mul78
  %100 = load double* %ljk7_1, align 8
  %101 = load double* %ljk7_1, align 8
  %mul80 = fmul double %100, %101
  %add81 = fadd double %add79, %mul80
  %102 = load double** %dest1, align 8
  %incdec.ptr82 = getelementptr inbounds double* %102, i32 1
  store double* %incdec.ptr82, double** %dest1, align 8
  %103 = load double* %102, align 8
  %sub83 = fsub double %103, %add81
  store double %sub83, double* %102, align 8
  %104 = load double* %ljk0_0, align 8
  %105 = load double* %ljk0_1, align 8
  %mul84 = fmul double %104, %105
  %106 = load double* %ljk1_0, align 8
  %107 = load double* %ljk1_1, align 8
  %mul85 = fmul double %106, %107
  %add86 = fadd double %mul84, %mul85
  %108 = load double* %ljk2_0, align 8
  %109 = load double* %ljk2_1, align 8
  %mul87 = fmul double %108, %109
  %add88 = fadd double %add86, %mul87
  %110 = load double* %ljk3_0, align 8
  %111 = load double* %ljk3_1, align 8
  %mul89 = fmul double %110, %111
  %add90 = fadd double %add88, %mul89
  %112 = load double* %ljk4_0, align 8
  %113 = load double* %ljk4_1, align 8
  %mul91 = fmul double %112, %113
  %add92 = fadd double %add90, %mul91
  %114 = load double* %ljk5_0, align 8
  %115 = load double* %ljk5_1, align 8
  %mul93 = fmul double %114, %115
  %add94 = fadd double %add92, %mul93
  %116 = load double* %ljk6_0, align 8
  %117 = load double* %ljk6_1, align 8
  %mul95 = fmul double %116, %117
  %add96 = fadd double %add94, %mul95
  %118 = load double* %ljk7_0, align 8
  %119 = load double* %ljk7_1, align 8
  %mul97 = fmul double %118, %119
  %add98 = fadd double %add96, %mul97
  %120 = load double** %dest0, align 8
  %incdec.ptr99 = getelementptr inbounds double* %120, i32 1
  store double* %incdec.ptr99, double** %dest0, align 8
  %121 = load double* %120, align 8
  %sub100 = fsub double %121, %add98
  store double %sub100, double* %120, align 8
  br label %while.cond.101

while.cond.101:                                   ; preds = %while.body.103, %while.body
  %122 = load double** %srcNZ0, align 8
  %123 = load double** %last, align 8
  %cmp102 = icmp ne double* %122, %123
  br i1 %cmp102, label %while.body.103, label %while.end

while.body.103:                                   ; preds = %while.cond.101
  %124 = load double** %dest0, align 8
  %125 = load double* %124, align 8
  store double %125, double* %d0, align 8
  %126 = load double** %dest1, align 8
  %127 = load double* %126, align 8
  store double %127, double* %d1, align 8
  %128 = load double** %srcNZ0, align 8
  %incdec.ptr104 = getelementptr inbounds double* %128, i32 1
  store double* %incdec.ptr104, double** %srcNZ0, align 8
  %129 = load double* %128, align 8
  store double %129, double* %tmp0, align 8
  %130 = load double* %ljk0_0, align 8
  %131 = load double* %tmp0, align 8
  %mul105 = fmul double %130, %131
  %132 = load double* %d0, align 8
  %sub106 = fsub double %132, %mul105
  store double %sub106, double* %d0, align 8
  %133 = load double* %ljk0_1, align 8
  %134 = load double* %tmp0, align 8
  %mul107 = fmul double %133, %134
  %135 = load double* %d1, align 8
  %sub108 = fsub double %135, %mul107
  store double %sub108, double* %d1, align 8
  %136 = load double** %srcNZ1, align 8
  %incdec.ptr109 = getelementptr inbounds double* %136, i32 1
  store double* %incdec.ptr109, double** %srcNZ1, align 8
  %137 = load double* %136, align 8
  store double %137, double* %tmp1, align 8
  %138 = load double* %ljk1_0, align 8
  %139 = load double* %tmp1, align 8
  %mul110 = fmul double %138, %139
  %140 = load double* %d0, align 8
  %sub111 = fsub double %140, %mul110
  store double %sub111, double* %d0, align 8
  %141 = load double* %ljk1_1, align 8
  %142 = load double* %tmp1, align 8
  %mul112 = fmul double %141, %142
  %143 = load double* %d1, align 8
  %sub113 = fsub double %143, %mul112
  store double %sub113, double* %d1, align 8
  %144 = load double** %srcNZ2, align 8
  %incdec.ptr114 = getelementptr inbounds double* %144, i32 1
  store double* %incdec.ptr114, double** %srcNZ2, align 8
  %145 = load double* %144, align 8
  store double %145, double* %tmp0, align 8
  %146 = load double* %ljk2_0, align 8
  %147 = load double* %tmp0, align 8
  %mul115 = fmul double %146, %147
  %148 = load double* %d0, align 8
  %sub116 = fsub double %148, %mul115
  store double %sub116, double* %d0, align 8
  %149 = load double* %ljk2_1, align 8
  %150 = load double* %tmp0, align 8
  %mul117 = fmul double %149, %150
  %151 = load double* %d1, align 8
  %sub118 = fsub double %151, %mul117
  store double %sub118, double* %d1, align 8
  %152 = load double** %srcNZ3, align 8
  %incdec.ptr119 = getelementptr inbounds double* %152, i32 1
  store double* %incdec.ptr119, double** %srcNZ3, align 8
  %153 = load double* %152, align 8
  store double %153, double* %tmp1, align 8
  %154 = load double* %ljk3_0, align 8
  %155 = load double* %tmp1, align 8
  %mul120 = fmul double %154, %155
  %156 = load double* %d0, align 8
  %sub121 = fsub double %156, %mul120
  store double %sub121, double* %d0, align 8
  %157 = load double* %ljk3_1, align 8
  %158 = load double* %tmp1, align 8
  %mul122 = fmul double %157, %158
  %159 = load double* %d1, align 8
  %sub123 = fsub double %159, %mul122
  store double %sub123, double* %d1, align 8
  %160 = load double** %srcNZ4, align 8
  %incdec.ptr124 = getelementptr inbounds double* %160, i32 1
  store double* %incdec.ptr124, double** %srcNZ4, align 8
  %161 = load double* %160, align 8
  store double %161, double* %tmp0, align 8
  %162 = load double* %ljk4_0, align 8
  %163 = load double* %tmp0, align 8
  %mul125 = fmul double %162, %163
  %164 = load double* %d0, align 8
  %sub126 = fsub double %164, %mul125
  store double %sub126, double* %d0, align 8
  %165 = load double* %ljk4_1, align 8
  %166 = load double* %tmp0, align 8
  %mul127 = fmul double %165, %166
  %167 = load double* %d1, align 8
  %sub128 = fsub double %167, %mul127
  store double %sub128, double* %d1, align 8
  %168 = load double** %srcNZ5, align 8
  %incdec.ptr129 = getelementptr inbounds double* %168, i32 1
  store double* %incdec.ptr129, double** %srcNZ5, align 8
  %169 = load double* %168, align 8
  store double %169, double* %tmp1, align 8
  %170 = load double* %ljk5_0, align 8
  %171 = load double* %tmp1, align 8
  %mul130 = fmul double %170, %171
  %172 = load double* %d0, align 8
  %sub131 = fsub double %172, %mul130
  store double %sub131, double* %d0, align 8
  %173 = load double* %ljk5_1, align 8
  %174 = load double* %tmp1, align 8
  %mul132 = fmul double %173, %174
  %175 = load double* %d1, align 8
  %sub133 = fsub double %175, %mul132
  store double %sub133, double* %d1, align 8
  %176 = load double** %srcNZ6, align 8
  %incdec.ptr134 = getelementptr inbounds double* %176, i32 1
  store double* %incdec.ptr134, double** %srcNZ6, align 8
  %177 = load double* %176, align 8
  store double %177, double* %tmp0, align 8
  %178 = load double* %ljk6_0, align 8
  %179 = load double* %tmp0, align 8
  %mul135 = fmul double %178, %179
  %180 = load double* %d0, align 8
  %sub136 = fsub double %180, %mul135
  store double %sub136, double* %d0, align 8
  %181 = load double* %ljk6_1, align 8
  %182 = load double* %tmp0, align 8
  %mul137 = fmul double %181, %182
  %183 = load double* %d1, align 8
  %sub138 = fsub double %183, %mul137
  store double %sub138, double* %d1, align 8
  %184 = load double** %srcNZ7, align 8
  %incdec.ptr139 = getelementptr inbounds double* %184, i32 1
  store double* %incdec.ptr139, double** %srcNZ7, align 8
  %185 = load double* %184, align 8
  store double %185, double* %tmp1, align 8
  %186 = load double* %ljk7_0, align 8
  %187 = load double* %tmp1, align 8
  %mul140 = fmul double %186, %187
  %188 = load double* %d0, align 8
  %sub141 = fsub double %188, %mul140
  store double %sub141, double* %d0, align 8
  %189 = load double* %ljk7_1, align 8
  %190 = load double* %tmp1, align 8
  %mul142 = fmul double %189, %190
  %191 = load double* %d1, align 8
  %sub143 = fsub double %191, %mul142
  store double %sub143, double* %d1, align 8
  %192 = load double* %d0, align 8
  %193 = load double** %dest0, align 8
  %incdec.ptr144 = getelementptr inbounds double* %193, i32 1
  store double* %incdec.ptr144, double** %dest0, align 8
  store double %192, double* %193, align 8
  %194 = load double* %d1, align 8
  %195 = load double** %dest1, align 8
  %incdec.ptr145 = getelementptr inbounds double* %195, i32 1
  store double* %incdec.ptr145, double** %dest1, align 8
  store double %194, double* %195, align 8
  br label %while.cond.101

while.end:                                        ; preds = %while.cond.101
  %196 = load i32* %col, align 4
  %add146 = add nsw i32 %196, 8
  store i32 %add146, i32* %col, align 4
  br label %while.cond

while.end.147:                                    ; preds = %while.cond
  br label %while.cond.148

while.cond.148:                                   ; preds = %while.end.241, %while.end.147
  %197 = load i32* %col, align 4
  %198 = load i32* %lastcol.addr, align 4
  %sub149 = sub nsw i32 %198, 3
  %cmp150 = icmp slt i32 %197, %sub149
  br i1 %cmp150, label %while.body.151, label %while.end.243

while.body.151:                                   ; preds = %while.cond.148
  %199 = load double** %destination0.addr, align 8
  store double* %199, double** %dest0, align 8
  %200 = load double** %destination1.addr, align 8
  store double* %200, double** %dest1, align 8
  %201 = load i32* %col, align 4
  %add152 = add nsw i32 %201, 1
  %idxprom153 = sext i32 %add152 to i64
  %202 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx154 = getelementptr inbounds i32* %202, i64 %idxprom153
  %203 = load i32* %arrayidx154, align 4
  %idxprom155 = sext i32 %203 to i64
  %204 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx156 = getelementptr inbounds %union.Entry* %204, i64 %idxprom155
  %nz157 = bitcast %union.Entry* %arrayidx156 to double*
  store double* %nz157, double** %last, align 8
  %205 = load i32* %col, align 4
  %add158 = add nsw i32 %205, 1
  %idxprom159 = sext i32 %add158 to i64
  %206 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx160 = getelementptr inbounds i32* %206, i64 %idxprom159
  %207 = load i32* %arrayidx160, align 4
  %208 = load i32* %col, align 4
  %idxprom161 = sext i32 %208 to i64
  %209 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx162 = getelementptr inbounds i32* %209, i64 %idxprom161
  %210 = load i32* %arrayidx162, align 4
  %sub163 = sub nsw i32 %207, %210
  store i32 %sub163, i32* %increment, align 4
  %211 = load i32* %col, align 4
  %idxprom164 = sext i32 %211 to i64
  %212 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx165 = getelementptr inbounds i32* %212, i64 %idxprom164
  %213 = load i32* %arrayidx165, align 4
  %214 = load i32* %super.addr, align 4
  %215 = load i32* %col, align 4
  %sub166 = sub nsw i32 %214, %215
  %add167 = add nsw i32 %213, %sub166
  %216 = load i32* %theFirst.addr, align 4
  %add168 = add nsw i32 %add167, %216
  %idxprom169 = sext i32 %add168 to i64
  %217 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx170 = getelementptr inbounds %union.Entry* %217, i64 %idxprom169
  %nz171 = bitcast %union.Entry* %arrayidx170 to double*
  store double* %nz171, double** %srcNZ0, align 8
  %218 = load double** %srcNZ0, align 8
  %219 = load i32* %increment, align 4
  %idx.ext172 = sext i32 %219 to i64
  %add.ptr173 = getelementptr inbounds double* %218, i64 %idx.ext172
  %add.ptr174 = getelementptr inbounds double* %add.ptr173, i64 -1
  store double* %add.ptr174, double** %srcNZ1, align 8
  %220 = load double** %srcNZ1, align 8
  %221 = load i32* %increment, align 4
  %idx.ext175 = sext i32 %221 to i64
  %add.ptr176 = getelementptr inbounds double* %220, i64 %idx.ext175
  %add.ptr177 = getelementptr inbounds double* %add.ptr176, i64 -2
  store double* %add.ptr177, double** %srcNZ2, align 8
  %222 = load double** %srcNZ2, align 8
  %223 = load i32* %increment, align 4
  %idx.ext178 = sext i32 %223 to i64
  %add.ptr179 = getelementptr inbounds double* %222, i64 %idx.ext178
  %add.ptr180 = getelementptr inbounds double* %add.ptr179, i64 -3
  store double* %add.ptr180, double** %srcNZ3, align 8
  %224 = load double** %srcNZ0, align 8
  %incdec.ptr181 = getelementptr inbounds double* %224, i32 1
  store double* %incdec.ptr181, double** %srcNZ0, align 8
  %225 = load double* %224, align 8
  store double %225, double* %ljk0_0, align 8
  %226 = load double** %srcNZ0, align 8
  %incdec.ptr182 = getelementptr inbounds double* %226, i32 1
  store double* %incdec.ptr182, double** %srcNZ0, align 8
  %227 = load double* %226, align 8
  store double %227, double* %ljk0_1, align 8
  %228 = load double** %srcNZ1, align 8
  %incdec.ptr183 = getelementptr inbounds double* %228, i32 1
  store double* %incdec.ptr183, double** %srcNZ1, align 8
  %229 = load double* %228, align 8
  store double %229, double* %ljk1_0, align 8
  %230 = load double** %srcNZ1, align 8
  %incdec.ptr184 = getelementptr inbounds double* %230, i32 1
  store double* %incdec.ptr184, double** %srcNZ1, align 8
  %231 = load double* %230, align 8
  store double %231, double* %ljk1_1, align 8
  %232 = load double** %srcNZ2, align 8
  %incdec.ptr185 = getelementptr inbounds double* %232, i32 1
  store double* %incdec.ptr185, double** %srcNZ2, align 8
  %233 = load double* %232, align 8
  store double %233, double* %ljk2_0, align 8
  %234 = load double** %srcNZ2, align 8
  %incdec.ptr186 = getelementptr inbounds double* %234, i32 1
  store double* %incdec.ptr186, double** %srcNZ2, align 8
  %235 = load double* %234, align 8
  store double %235, double* %ljk2_1, align 8
  %236 = load double** %srcNZ3, align 8
  %incdec.ptr187 = getelementptr inbounds double* %236, i32 1
  store double* %incdec.ptr187, double** %srcNZ3, align 8
  %237 = load double* %236, align 8
  store double %237, double* %ljk3_0, align 8
  %238 = load double** %srcNZ3, align 8
  %incdec.ptr188 = getelementptr inbounds double* %238, i32 1
  store double* %incdec.ptr188, double** %srcNZ3, align 8
  %239 = load double* %238, align 8
  store double %239, double* %ljk3_1, align 8
  %240 = load double* %ljk0_0, align 8
  %241 = load double* %ljk0_0, align 8
  %mul189 = fmul double %240, %241
  %242 = load double* %ljk1_0, align 8
  %243 = load double* %ljk1_0, align 8
  %mul190 = fmul double %242, %243
  %add191 = fadd double %mul189, %mul190
  %244 = load double* %ljk2_0, align 8
  %245 = load double* %ljk2_0, align 8
  %mul192 = fmul double %244, %245
  %add193 = fadd double %add191, %mul192
  %246 = load double* %ljk3_0, align 8
  %247 = load double* %ljk3_0, align 8
  %mul194 = fmul double %246, %247
  %add195 = fadd double %add193, %mul194
  %248 = load double** %dest0, align 8
  %incdec.ptr196 = getelementptr inbounds double* %248, i32 1
  store double* %incdec.ptr196, double** %dest0, align 8
  %249 = load double* %248, align 8
  %sub197 = fsub double %249, %add195
  store double %sub197, double* %248, align 8
  %250 = load double* %ljk0_1, align 8
  %251 = load double* %ljk0_1, align 8
  %mul198 = fmul double %250, %251
  %252 = load double* %ljk1_1, align 8
  %253 = load double* %ljk1_1, align 8
  %mul199 = fmul double %252, %253
  %add200 = fadd double %mul198, %mul199
  %254 = load double* %ljk2_1, align 8
  %255 = load double* %ljk2_1, align 8
  %mul201 = fmul double %254, %255
  %add202 = fadd double %add200, %mul201
  %256 = load double* %ljk3_1, align 8
  %257 = load double* %ljk3_1, align 8
  %mul203 = fmul double %256, %257
  %add204 = fadd double %add202, %mul203
  %258 = load double** %dest1, align 8
  %incdec.ptr205 = getelementptr inbounds double* %258, i32 1
  store double* %incdec.ptr205, double** %dest1, align 8
  %259 = load double* %258, align 8
  %sub206 = fsub double %259, %add204
  store double %sub206, double* %258, align 8
  %260 = load double* %ljk0_0, align 8
  %261 = load double* %ljk0_1, align 8
  %mul207 = fmul double %260, %261
  %262 = load double* %ljk1_0, align 8
  %263 = load double* %ljk1_1, align 8
  %mul208 = fmul double %262, %263
  %add209 = fadd double %mul207, %mul208
  %264 = load double* %ljk2_0, align 8
  %265 = load double* %ljk2_1, align 8
  %mul210 = fmul double %264, %265
  %add211 = fadd double %add209, %mul210
  %266 = load double* %ljk3_0, align 8
  %267 = load double* %ljk3_1, align 8
  %mul212 = fmul double %266, %267
  %add213 = fadd double %add211, %mul212
  %268 = load double** %dest0, align 8
  %incdec.ptr214 = getelementptr inbounds double* %268, i32 1
  store double* %incdec.ptr214, double** %dest0, align 8
  %269 = load double* %268, align 8
  %sub215 = fsub double %269, %add213
  store double %sub215, double* %268, align 8
  br label %while.cond.216

while.cond.216:                                   ; preds = %while.body.218, %while.body.151
  %270 = load double** %srcNZ0, align 8
  %271 = load double** %last, align 8
  %cmp217 = icmp ne double* %270, %271
  br i1 %cmp217, label %while.body.218, label %while.end.241

while.body.218:                                   ; preds = %while.cond.216
  %272 = load double** %dest0, align 8
  %273 = load double* %272, align 8
  store double %273, double* %d0, align 8
  %274 = load double** %dest1, align 8
  %275 = load double* %274, align 8
  store double %275, double* %d1, align 8
  %276 = load double** %srcNZ0, align 8
  %incdec.ptr219 = getelementptr inbounds double* %276, i32 1
  store double* %incdec.ptr219, double** %srcNZ0, align 8
  %277 = load double* %276, align 8
  store double %277, double* %tmp0, align 8
  %278 = load double* %ljk0_0, align 8
  %279 = load double* %tmp0, align 8
  %mul220 = fmul double %278, %279
  %280 = load double* %d0, align 8
  %sub221 = fsub double %280, %mul220
  store double %sub221, double* %d0, align 8
  %281 = load double* %ljk0_1, align 8
  %282 = load double* %tmp0, align 8
  %mul222 = fmul double %281, %282
  %283 = load double* %d1, align 8
  %sub223 = fsub double %283, %mul222
  store double %sub223, double* %d1, align 8
  %284 = load double** %srcNZ1, align 8
  %incdec.ptr224 = getelementptr inbounds double* %284, i32 1
  store double* %incdec.ptr224, double** %srcNZ1, align 8
  %285 = load double* %284, align 8
  store double %285, double* %tmp1, align 8
  %286 = load double* %ljk1_0, align 8
  %287 = load double* %tmp1, align 8
  %mul225 = fmul double %286, %287
  %288 = load double* %d0, align 8
  %sub226 = fsub double %288, %mul225
  store double %sub226, double* %d0, align 8
  %289 = load double* %ljk1_1, align 8
  %290 = load double* %tmp1, align 8
  %mul227 = fmul double %289, %290
  %291 = load double* %d1, align 8
  %sub228 = fsub double %291, %mul227
  store double %sub228, double* %d1, align 8
  %292 = load double** %srcNZ2, align 8
  %incdec.ptr229 = getelementptr inbounds double* %292, i32 1
  store double* %incdec.ptr229, double** %srcNZ2, align 8
  %293 = load double* %292, align 8
  store double %293, double* %tmp0, align 8
  %294 = load double* %ljk2_0, align 8
  %295 = load double* %tmp0, align 8
  %mul230 = fmul double %294, %295
  %296 = load double* %d0, align 8
  %sub231 = fsub double %296, %mul230
  store double %sub231, double* %d0, align 8
  %297 = load double* %ljk2_1, align 8
  %298 = load double* %tmp0, align 8
  %mul232 = fmul double %297, %298
  %299 = load double* %d1, align 8
  %sub233 = fsub double %299, %mul232
  store double %sub233, double* %d1, align 8
  %300 = load double** %srcNZ3, align 8
  %incdec.ptr234 = getelementptr inbounds double* %300, i32 1
  store double* %incdec.ptr234, double** %srcNZ3, align 8
  %301 = load double* %300, align 8
  store double %301, double* %tmp1, align 8
  %302 = load double* %ljk3_0, align 8
  %303 = load double* %tmp1, align 8
  %mul235 = fmul double %302, %303
  %304 = load double* %d0, align 8
  %sub236 = fsub double %304, %mul235
  store double %sub236, double* %d0, align 8
  %305 = load double* %ljk3_1, align 8
  %306 = load double* %tmp1, align 8
  %mul237 = fmul double %305, %306
  %307 = load double* %d1, align 8
  %sub238 = fsub double %307, %mul237
  store double %sub238, double* %d1, align 8
  %308 = load double* %d0, align 8
  %309 = load double** %dest0, align 8
  %incdec.ptr239 = getelementptr inbounds double* %309, i32 1
  store double* %incdec.ptr239, double** %dest0, align 8
  store double %308, double* %309, align 8
  %310 = load double* %d1, align 8
  %311 = load double** %dest1, align 8
  %incdec.ptr240 = getelementptr inbounds double* %311, i32 1
  store double* %incdec.ptr240, double** %dest1, align 8
  store double %310, double* %311, align 8
  br label %while.cond.216

while.end.241:                                    ; preds = %while.cond.216
  %312 = load i32* %col, align 4
  %add242 = add nsw i32 %312, 4
  store i32 %add242, i32* %col, align 4
  br label %while.cond.148

while.end.243:                                    ; preds = %while.cond.148
  br label %while.cond.244

while.cond.244:                                   ; preds = %while.end.305, %while.end.243
  %313 = load i32* %col, align 4
  %314 = load i32* %lastcol.addr, align 4
  %sub245 = sub nsw i32 %314, 1
  %cmp246 = icmp slt i32 %313, %sub245
  br i1 %cmp246, label %while.body.247, label %while.end.307

while.body.247:                                   ; preds = %while.cond.244
  %315 = load i32* %col, align 4
  %add248 = add nsw i32 %315, 1
  %idxprom249 = sext i32 %add248 to i64
  %316 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx250 = getelementptr inbounds i32* %316, i64 %idxprom249
  %317 = load i32* %arrayidx250, align 4
  %idxprom251 = sext i32 %317 to i64
  %318 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx252 = getelementptr inbounds %union.Entry* %318, i64 %idxprom251
  %nz253 = bitcast %union.Entry* %arrayidx252 to double*
  store double* %nz253, double** %last, align 8
  %319 = load double** %destination0.addr, align 8
  store double* %319, double** %dest0, align 8
  %320 = load double** %destination1.addr, align 8
  store double* %320, double** %dest1, align 8
  %321 = load i32* %col, align 4
  %add254 = add nsw i32 %321, 1
  %idxprom255 = sext i32 %add254 to i64
  %322 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx256 = getelementptr inbounds i32* %322, i64 %idxprom255
  %323 = load i32* %arrayidx256, align 4
  %324 = load i32* %col, align 4
  %idxprom257 = sext i32 %324 to i64
  %325 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx258 = getelementptr inbounds i32* %325, i64 %idxprom257
  %326 = load i32* %arrayidx258, align 4
  %sub259 = sub nsw i32 %323, %326
  store i32 %sub259, i32* %increment, align 4
  %327 = load i32* %col, align 4
  %idxprom260 = sext i32 %327 to i64
  %328 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx261 = getelementptr inbounds i32* %328, i64 %idxprom260
  %329 = load i32* %arrayidx261, align 4
  %330 = load i32* %super.addr, align 4
  %331 = load i32* %col, align 4
  %sub262 = sub nsw i32 %330, %331
  %add263 = add nsw i32 %329, %sub262
  %332 = load i32* %theFirst.addr, align 4
  %add264 = add nsw i32 %add263, %332
  %idxprom265 = sext i32 %add264 to i64
  %333 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx266 = getelementptr inbounds %union.Entry* %333, i64 %idxprom265
  %nz267 = bitcast %union.Entry* %arrayidx266 to double*
  store double* %nz267, double** %srcNZ0, align 8
  %334 = load double** %srcNZ0, align 8
  %335 = load i32* %increment, align 4
  %idx.ext268 = sext i32 %335 to i64
  %add.ptr269 = getelementptr inbounds double* %334, i64 %idx.ext268
  %add.ptr270 = getelementptr inbounds double* %add.ptr269, i64 -1
  store double* %add.ptr270, double** %srcNZ1, align 8
  %336 = load double** %srcNZ0, align 8
  %incdec.ptr271 = getelementptr inbounds double* %336, i32 1
  store double* %incdec.ptr271, double** %srcNZ0, align 8
  %337 = load double* %336, align 8
  store double %337, double* %ljk0_0, align 8
  %338 = load double** %srcNZ0, align 8
  %incdec.ptr272 = getelementptr inbounds double* %338, i32 1
  store double* %incdec.ptr272, double** %srcNZ0, align 8
  %339 = load double* %338, align 8
  store double %339, double* %ljk0_1, align 8
  %340 = load double** %srcNZ1, align 8
  %incdec.ptr273 = getelementptr inbounds double* %340, i32 1
  store double* %incdec.ptr273, double** %srcNZ1, align 8
  %341 = load double* %340, align 8
  store double %341, double* %ljk1_0, align 8
  %342 = load double** %srcNZ1, align 8
  %incdec.ptr274 = getelementptr inbounds double* %342, i32 1
  store double* %incdec.ptr274, double** %srcNZ1, align 8
  %343 = load double* %342, align 8
  store double %343, double* %ljk1_1, align 8
  %344 = load double* %ljk0_0, align 8
  %345 = load double* %ljk0_0, align 8
  %mul275 = fmul double %344, %345
  %346 = load double* %ljk1_0, align 8
  %347 = load double* %ljk1_0, align 8
  %mul276 = fmul double %346, %347
  %add277 = fadd double %mul275, %mul276
  %348 = load double** %dest0, align 8
  %incdec.ptr278 = getelementptr inbounds double* %348, i32 1
  store double* %incdec.ptr278, double** %dest0, align 8
  %349 = load double* %348, align 8
  %sub279 = fsub double %349, %add277
  store double %sub279, double* %348, align 8
  %350 = load double* %ljk0_1, align 8
  %351 = load double* %ljk0_1, align 8
  %mul280 = fmul double %350, %351
  %352 = load double* %ljk1_1, align 8
  %353 = load double* %ljk1_1, align 8
  %mul281 = fmul double %352, %353
  %add282 = fadd double %mul280, %mul281
  %354 = load double** %dest1, align 8
  %incdec.ptr283 = getelementptr inbounds double* %354, i32 1
  store double* %incdec.ptr283, double** %dest1, align 8
  %355 = load double* %354, align 8
  %sub284 = fsub double %355, %add282
  store double %sub284, double* %354, align 8
  %356 = load double* %ljk0_0, align 8
  %357 = load double* %ljk0_1, align 8
  %mul285 = fmul double %356, %357
  %358 = load double* %ljk1_0, align 8
  %359 = load double* %ljk1_1, align 8
  %mul286 = fmul double %358, %359
  %add287 = fadd double %mul285, %mul286
  %360 = load double** %dest0, align 8
  %incdec.ptr288 = getelementptr inbounds double* %360, i32 1
  store double* %incdec.ptr288, double** %dest0, align 8
  %361 = load double* %360, align 8
  %sub289 = fsub double %361, %add287
  store double %sub289, double* %360, align 8
  br label %while.cond.290

while.cond.290:                                   ; preds = %while.body.292, %while.body.247
  %362 = load double** %srcNZ0, align 8
  %363 = load double** %last, align 8
  %cmp291 = icmp ne double* %362, %363
  br i1 %cmp291, label %while.body.292, label %while.end.305

while.body.292:                                   ; preds = %while.cond.290
  %364 = load double** %srcNZ0, align 8
  %incdec.ptr293 = getelementptr inbounds double* %364, i32 1
  store double* %incdec.ptr293, double** %srcNZ0, align 8
  %365 = load double* %364, align 8
  store double %365, double* %tmp0, align 8
  %366 = load double** %srcNZ1, align 8
  %incdec.ptr294 = getelementptr inbounds double* %366, i32 1
  store double* %incdec.ptr294, double** %srcNZ1, align 8
  %367 = load double* %366, align 8
  store double %367, double* %tmp1, align 8
  %368 = load double* %ljk0_0, align 8
  %369 = load double* %tmp0, align 8
  %mul295 = fmul double %368, %369
  %370 = load double* %ljk1_0, align 8
  %371 = load double* %tmp1, align 8
  %mul296 = fmul double %370, %371
  %add297 = fadd double %mul295, %mul296
  %372 = load double** %dest0, align 8
  %incdec.ptr298 = getelementptr inbounds double* %372, i32 1
  store double* %incdec.ptr298, double** %dest0, align 8
  %373 = load double* %372, align 8
  %sub299 = fsub double %373, %add297
  store double %sub299, double* %372, align 8
  %374 = load double* %ljk0_1, align 8
  %375 = load double* %tmp0, align 8
  %mul300 = fmul double %374, %375
  %376 = load double* %ljk1_1, align 8
  %377 = load double* %tmp1, align 8
  %mul301 = fmul double %376, %377
  %add302 = fadd double %mul300, %mul301
  %378 = load double** %dest1, align 8
  %incdec.ptr303 = getelementptr inbounds double* %378, i32 1
  store double* %incdec.ptr303, double** %dest1, align 8
  %379 = load double* %378, align 8
  %sub304 = fsub double %379, %add302
  store double %sub304, double* %378, align 8
  br label %while.cond.290

while.end.305:                                    ; preds = %while.cond.290
  %380 = load i32* %col, align 4
  %add306 = add nsw i32 %380, 2
  store i32 %add306, i32* %col, align 4
  br label %while.cond.244

while.end.307:                                    ; preds = %while.cond.244
  br label %while.cond.308

while.cond.308:                                   ; preds = %while.end.346, %while.end.307
  %381 = load i32* %col, align 4
  %382 = load i32* %lastcol.addr, align 4
  %cmp309 = icmp slt i32 %381, %382
  br i1 %cmp309, label %while.body.310, label %while.end.347

while.body.310:                                   ; preds = %while.cond.308
  %383 = load i32* %col, align 4
  %add311 = add nsw i32 %383, 1
  %idxprom312 = sext i32 %add311 to i64
  %384 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx313 = getelementptr inbounds i32* %384, i64 %idxprom312
  %385 = load i32* %arrayidx313, align 4
  %idxprom314 = sext i32 %385 to i64
  %386 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx315 = getelementptr inbounds %union.Entry* %386, i64 %idxprom314
  %nz316 = bitcast %union.Entry* %arrayidx315 to double*
  store double* %nz316, double** %last, align 8
  %387 = load double** %destination0.addr, align 8
  store double* %387, double** %dest0, align 8
  %388 = load double** %destination1.addr, align 8
  store double* %388, double** %dest1, align 8
  %389 = load i32* %col, align 4
  %idxprom317 = sext i32 %389 to i64
  %390 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx318 = getelementptr inbounds i32* %390, i64 %idxprom317
  %391 = load i32* %arrayidx318, align 4
  %392 = load i32* %super.addr, align 4
  %393 = load i32* %col, align 4
  %sub319 = sub nsw i32 %392, %393
  %add320 = add nsw i32 %391, %sub319
  %394 = load i32* %theFirst.addr, align 4
  %add321 = add nsw i32 %add320, %394
  %idxprom322 = sext i32 %add321 to i64
  %395 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx323 = getelementptr inbounds %union.Entry* %395, i64 %idxprom322
  %nz324 = bitcast %union.Entry* %arrayidx323 to double*
  store double* %nz324, double** %srcNZ0, align 8
  %396 = load double** %srcNZ0, align 8
  %incdec.ptr325 = getelementptr inbounds double* %396, i32 1
  store double* %incdec.ptr325, double** %srcNZ0, align 8
  %397 = load double* %396, align 8
  store double %397, double* %ljk0_0, align 8
  %398 = load double** %srcNZ0, align 8
  %incdec.ptr326 = getelementptr inbounds double* %398, i32 1
  store double* %incdec.ptr326, double** %srcNZ0, align 8
  %399 = load double* %398, align 8
  store double %399, double* %ljk0_1, align 8
  %400 = load double* %ljk0_0, align 8
  %401 = load double* %ljk0_0, align 8
  %mul327 = fmul double %400, %401
  %402 = load double** %dest0, align 8
  %incdec.ptr328 = getelementptr inbounds double* %402, i32 1
  store double* %incdec.ptr328, double** %dest0, align 8
  %403 = load double* %402, align 8
  %sub329 = fsub double %403, %mul327
  store double %sub329, double* %402, align 8
  %404 = load double* %ljk0_1, align 8
  %405 = load double* %ljk0_1, align 8
  %mul330 = fmul double %404, %405
  %406 = load double** %dest1, align 8
  %incdec.ptr331 = getelementptr inbounds double* %406, i32 1
  store double* %incdec.ptr331, double** %dest1, align 8
  %407 = load double* %406, align 8
  %sub332 = fsub double %407, %mul330
  store double %sub332, double* %406, align 8
  %408 = load double* %ljk0_0, align 8
  %409 = load double* %ljk0_1, align 8
  %mul333 = fmul double %408, %409
  %410 = load double** %dest0, align 8
  %incdec.ptr334 = getelementptr inbounds double* %410, i32 1
  store double* %incdec.ptr334, double** %dest0, align 8
  %411 = load double* %410, align 8
  %sub335 = fsub double %411, %mul333
  store double %sub335, double* %410, align 8
  br label %while.cond.336

while.cond.336:                                   ; preds = %while.body.338, %while.body.310
  %412 = load double** %srcNZ0, align 8
  %413 = load double** %last, align 8
  %cmp337 = icmp ne double* %412, %413
  br i1 %cmp337, label %while.body.338, label %while.end.346

while.body.338:                                   ; preds = %while.cond.336
  %414 = load double** %srcNZ0, align 8
  %incdec.ptr339 = getelementptr inbounds double* %414, i32 1
  store double* %incdec.ptr339, double** %srcNZ0, align 8
  %415 = load double* %414, align 8
  store double %415, double* %tmp0, align 8
  %416 = load double* %ljk0_0, align 8
  %417 = load double* %tmp0, align 8
  %mul340 = fmul double %416, %417
  %418 = load double** %dest0, align 8
  %incdec.ptr341 = getelementptr inbounds double* %418, i32 1
  store double* %incdec.ptr341, double** %dest0, align 8
  %419 = load double* %418, align 8
  %sub342 = fsub double %419, %mul340
  store double %sub342, double* %418, align 8
  %420 = load double* %ljk0_1, align 8
  %421 = load double* %tmp0, align 8
  %mul343 = fmul double %420, %421
  %422 = load double** %dest1, align 8
  %incdec.ptr344 = getelementptr inbounds double* %422, i32 1
  store double* %incdec.ptr344, double** %dest1, align 8
  %423 = load double* %422, align 8
  %sub345 = fsub double %423, %mul343
  store double %sub345, double* %422, align 8
  br label %while.cond.336

while.end.346:                                    ; preds = %while.cond.336
  %424 = load i32* %col, align 4
  %inc = add nsw i32 %424, 1
  store i32 %inc, i32* %col, align 4
  br label %while.cond.308

while.end.347:                                    ; preds = %while.cond.308
  %425 = load i32* %retval
  ret i32 %425
}

; Function Attrs: nounwind uwtable
define internal i32 @ModifyBySupernodeB(i32 %super, i32 %lastcol, i32 %theFirst, double* %destination) {
entry:
  %retval = alloca i32, align 4
  %super.addr = alloca i32, align 4
  %lastcol.addr = alloca i32, align 4
  %theFirst.addr = alloca i32, align 4
  %destination.addr = alloca double*, align 8
  %t0 = alloca double, align 8
  %ljk0 = alloca double, align 8
  %ljk1 = alloca double, align 8
  %ljk2 = alloca double, align 8
  %ljk3 = alloca double, align 8
  %ljk4 = alloca double, align 8
  %ljk5 = alloca double, align 8
  %ljk6 = alloca double, align 8
  %ljk7 = alloca double, align 8
  %increment = alloca i32, align 4
  %dest = alloca double*, align 8
  %last = alloca double*, align 8
  %theNZ0 = alloca double*, align 8
  %theNZ1 = alloca double*, align 8
  %theNZ2 = alloca double*, align 8
  %theNZ3 = alloca double*, align 8
  %theNZ4 = alloca double*, align 8
  %theNZ5 = alloca double*, align 8
  %theNZ6 = alloca double*, align 8
  %theNZ7 = alloca double*, align 8
  %j = alloca i32, align 4
  %col = alloca i32, align 4
  store i32 %super, i32* %super.addr, align 4
  store i32 %lastcol, i32* %lastcol.addr, align 4
  store i32 %theFirst, i32* %theFirst.addr, align 4
  store double* %destination, double** %destination.addr, align 8
  %0 = load i32* %super.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  %3 = load i32* %theFirst.addr, align 4
  %add = add nsw i32 %2, %3
  %idxprom1 = sext i32 %add to i64
  %4 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx2 = getelementptr inbounds i32* %4, i64 %idxprom1
  %5 = load i32* %arrayidx2, align 4
  store i32 %5, i32* %j, align 4
  %6 = load i32* %super.addr, align 4
  store i32 %6, i32* %col, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %7 = load i32* %col, align 4
  %8 = load i32* %lastcol.addr, align 4
  %sub = sub nsw i32 %8, 7
  %cmp = icmp slt i32 %7, %sub
  br i1 %cmp, label %while.body, label %while.end.93

while.body:                                       ; preds = %while.cond
  %9 = load i32* %col, align 4
  %add3 = add nsw i32 %9, 1
  %idxprom4 = sext i32 %add3 to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %idxprom6 = sext i32 %11 to i64
  %12 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx7 = getelementptr inbounds %union.Entry* %12, i64 %idxprom6
  %nz = bitcast %union.Entry* %arrayidx7 to double*
  store double* %nz, double** %last, align 8
  %13 = load double** %destination.addr, align 8
  store double* %13, double** %dest, align 8
  %14 = load i32* %col, align 4
  %add8 = add nsw i32 %14, 1
  %idxprom9 = sext i32 %add8 to i64
  %15 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx10 = getelementptr inbounds i32* %15, i64 %idxprom9
  %16 = load i32* %arrayidx10, align 4
  %17 = load i32* %col, align 4
  %idxprom11 = sext i32 %17 to i64
  %18 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx12 = getelementptr inbounds i32* %18, i64 %idxprom11
  %19 = load i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %16, %19
  store i32 %sub13, i32* %increment, align 4
  %20 = load i32* %col, align 4
  %idxprom14 = sext i32 %20 to i64
  %21 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx15 = getelementptr inbounds i32* %21, i64 %idxprom14
  %22 = load i32* %arrayidx15, align 4
  %23 = load i32* %super.addr, align 4
  %24 = load i32* %col, align 4
  %sub16 = sub nsw i32 %23, %24
  %add17 = add nsw i32 %22, %sub16
  %25 = load i32* %theFirst.addr, align 4
  %add18 = add nsw i32 %add17, %25
  %idxprom19 = sext i32 %add18 to i64
  %26 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx20 = getelementptr inbounds %union.Entry* %26, i64 %idxprom19
  %nz21 = bitcast %union.Entry* %arrayidx20 to double*
  store double* %nz21, double** %theNZ0, align 8
  %27 = load double** %theNZ0, align 8
  %28 = load i32* %increment, align 4
  %idx.ext = sext i32 %28 to i64
  %add.ptr = getelementptr inbounds double* %27, i64 %idx.ext
  %add.ptr22 = getelementptr inbounds double* %add.ptr, i64 -1
  store double* %add.ptr22, double** %theNZ1, align 8
  %29 = load double** %theNZ1, align 8
  %30 = load i32* %increment, align 4
  %idx.ext23 = sext i32 %30 to i64
  %add.ptr24 = getelementptr inbounds double* %29, i64 %idx.ext23
  %add.ptr25 = getelementptr inbounds double* %add.ptr24, i64 -2
  store double* %add.ptr25, double** %theNZ2, align 8
  %31 = load double** %theNZ2, align 8
  %32 = load i32* %increment, align 4
  %idx.ext26 = sext i32 %32 to i64
  %add.ptr27 = getelementptr inbounds double* %31, i64 %idx.ext26
  %add.ptr28 = getelementptr inbounds double* %add.ptr27, i64 -3
  store double* %add.ptr28, double** %theNZ3, align 8
  %33 = load double** %theNZ3, align 8
  %34 = load i32* %increment, align 4
  %idx.ext29 = sext i32 %34 to i64
  %add.ptr30 = getelementptr inbounds double* %33, i64 %idx.ext29
  %add.ptr31 = getelementptr inbounds double* %add.ptr30, i64 -4
  store double* %add.ptr31, double** %theNZ4, align 8
  %35 = load double** %theNZ4, align 8
  %36 = load i32* %increment, align 4
  %idx.ext32 = sext i32 %36 to i64
  %add.ptr33 = getelementptr inbounds double* %35, i64 %idx.ext32
  %add.ptr34 = getelementptr inbounds double* %add.ptr33, i64 -5
  store double* %add.ptr34, double** %theNZ5, align 8
  %37 = load double** %theNZ5, align 8
  %38 = load i32* %increment, align 4
  %idx.ext35 = sext i32 %38 to i64
  %add.ptr36 = getelementptr inbounds double* %37, i64 %idx.ext35
  %add.ptr37 = getelementptr inbounds double* %add.ptr36, i64 -6
  store double* %add.ptr37, double** %theNZ6, align 8
  %39 = load double** %theNZ6, align 8
  %40 = load i32* %increment, align 4
  %idx.ext38 = sext i32 %40 to i64
  %add.ptr39 = getelementptr inbounds double* %39, i64 %idx.ext38
  %add.ptr40 = getelementptr inbounds double* %add.ptr39, i64 -7
  store double* %add.ptr40, double** %theNZ7, align 8
  %41 = load double** %theNZ0, align 8
  %incdec.ptr = getelementptr inbounds double* %41, i32 1
  store double* %incdec.ptr, double** %theNZ0, align 8
  %42 = load double* %41, align 8
  store double %42, double* %ljk0, align 8
  %43 = load double** %theNZ1, align 8
  %incdec.ptr41 = getelementptr inbounds double* %43, i32 1
  store double* %incdec.ptr41, double** %theNZ1, align 8
  %44 = load double* %43, align 8
  store double %44, double* %ljk1, align 8
  %45 = load double** %theNZ2, align 8
  %incdec.ptr42 = getelementptr inbounds double* %45, i32 1
  store double* %incdec.ptr42, double** %theNZ2, align 8
  %46 = load double* %45, align 8
  store double %46, double* %ljk2, align 8
  %47 = load double** %theNZ3, align 8
  %incdec.ptr43 = getelementptr inbounds double* %47, i32 1
  store double* %incdec.ptr43, double** %theNZ3, align 8
  %48 = load double* %47, align 8
  store double %48, double* %ljk3, align 8
  %49 = load double** %theNZ4, align 8
  %incdec.ptr44 = getelementptr inbounds double* %49, i32 1
  store double* %incdec.ptr44, double** %theNZ4, align 8
  %50 = load double* %49, align 8
  store double %50, double* %ljk4, align 8
  %51 = load double** %theNZ5, align 8
  %incdec.ptr45 = getelementptr inbounds double* %51, i32 1
  store double* %incdec.ptr45, double** %theNZ5, align 8
  %52 = load double* %51, align 8
  store double %52, double* %ljk5, align 8
  %53 = load double** %theNZ6, align 8
  %incdec.ptr46 = getelementptr inbounds double* %53, i32 1
  store double* %incdec.ptr46, double** %theNZ6, align 8
  %54 = load double* %53, align 8
  store double %54, double* %ljk6, align 8
  %55 = load double** %theNZ7, align 8
  %incdec.ptr47 = getelementptr inbounds double* %55, i32 1
  store double* %incdec.ptr47, double** %theNZ7, align 8
  %56 = load double* %55, align 8
  store double %56, double* %ljk7, align 8
  %57 = load double* %ljk0, align 8
  %58 = load double* %ljk0, align 8
  %mul = fmul double %57, %58
  %59 = load double* %ljk1, align 8
  %60 = load double* %ljk1, align 8
  %mul48 = fmul double %59, %60
  %add49 = fadd double %mul, %mul48
  %61 = load double* %ljk2, align 8
  %62 = load double* %ljk2, align 8
  %mul50 = fmul double %61, %62
  %add51 = fadd double %add49, %mul50
  %63 = load double* %ljk3, align 8
  %64 = load double* %ljk3, align 8
  %mul52 = fmul double %63, %64
  %add53 = fadd double %add51, %mul52
  %65 = load double* %ljk4, align 8
  %66 = load double* %ljk4, align 8
  %mul54 = fmul double %65, %66
  %add55 = fadd double %add53, %mul54
  %67 = load double* %ljk5, align 8
  %68 = load double* %ljk5, align 8
  %mul56 = fmul double %67, %68
  %add57 = fadd double %add55, %mul56
  %69 = load double* %ljk6, align 8
  %70 = load double* %ljk6, align 8
  %mul58 = fmul double %69, %70
  %add59 = fadd double %add57, %mul58
  %71 = load double* %ljk7, align 8
  %72 = load double* %ljk7, align 8
  %mul60 = fmul double %71, %72
  %add61 = fadd double %add59, %mul60
  %73 = load double** %dest, align 8
  %incdec.ptr62 = getelementptr inbounds double* %73, i32 1
  store double* %incdec.ptr62, double** %dest, align 8
  %74 = load double* %73, align 8
  %sub63 = fsub double %74, %add61
  store double %sub63, double* %73, align 8
  br label %while.cond.64

while.cond.64:                                    ; preds = %while.body.66, %while.body
  %75 = load double** %theNZ0, align 8
  %76 = load double** %last, align 8
  %cmp65 = icmp ne double* %75, %76
  br i1 %cmp65, label %while.body.66, label %while.end

while.body.66:                                    ; preds = %while.cond.64
  %77 = load double** %dest, align 8
  %78 = load double* %77, align 8
  store double %78, double* %t0, align 8
  %79 = load double* %ljk0, align 8
  %80 = load double** %theNZ0, align 8
  %incdec.ptr67 = getelementptr inbounds double* %80, i32 1
  store double* %incdec.ptr67, double** %theNZ0, align 8
  %81 = load double* %80, align 8
  %mul68 = fmul double %79, %81
  %82 = load double* %t0, align 8
  %sub69 = fsub double %82, %mul68
  store double %sub69, double* %t0, align 8
  %83 = load double* %ljk1, align 8
  %84 = load double** %theNZ1, align 8
  %incdec.ptr70 = getelementptr inbounds double* %84, i32 1
  store double* %incdec.ptr70, double** %theNZ1, align 8
  %85 = load double* %84, align 8
  %mul71 = fmul double %83, %85
  %86 = load double* %t0, align 8
  %sub72 = fsub double %86, %mul71
  store double %sub72, double* %t0, align 8
  %87 = load double* %ljk2, align 8
  %88 = load double** %theNZ2, align 8
  %incdec.ptr73 = getelementptr inbounds double* %88, i32 1
  store double* %incdec.ptr73, double** %theNZ2, align 8
  %89 = load double* %88, align 8
  %mul74 = fmul double %87, %89
  %90 = load double* %t0, align 8
  %sub75 = fsub double %90, %mul74
  store double %sub75, double* %t0, align 8
  %91 = load double* %ljk3, align 8
  %92 = load double** %theNZ3, align 8
  %incdec.ptr76 = getelementptr inbounds double* %92, i32 1
  store double* %incdec.ptr76, double** %theNZ3, align 8
  %93 = load double* %92, align 8
  %mul77 = fmul double %91, %93
  %94 = load double* %t0, align 8
  %sub78 = fsub double %94, %mul77
  store double %sub78, double* %t0, align 8
  %95 = load double* %ljk4, align 8
  %96 = load double** %theNZ4, align 8
  %incdec.ptr79 = getelementptr inbounds double* %96, i32 1
  store double* %incdec.ptr79, double** %theNZ4, align 8
  %97 = load double* %96, align 8
  %mul80 = fmul double %95, %97
  %98 = load double* %t0, align 8
  %sub81 = fsub double %98, %mul80
  store double %sub81, double* %t0, align 8
  %99 = load double* %ljk5, align 8
  %100 = load double** %theNZ5, align 8
  %incdec.ptr82 = getelementptr inbounds double* %100, i32 1
  store double* %incdec.ptr82, double** %theNZ5, align 8
  %101 = load double* %100, align 8
  %mul83 = fmul double %99, %101
  %102 = load double* %t0, align 8
  %sub84 = fsub double %102, %mul83
  store double %sub84, double* %t0, align 8
  %103 = load double* %ljk6, align 8
  %104 = load double** %theNZ6, align 8
  %incdec.ptr85 = getelementptr inbounds double* %104, i32 1
  store double* %incdec.ptr85, double** %theNZ6, align 8
  %105 = load double* %104, align 8
  %mul86 = fmul double %103, %105
  %106 = load double* %t0, align 8
  %sub87 = fsub double %106, %mul86
  store double %sub87, double* %t0, align 8
  %107 = load double* %ljk7, align 8
  %108 = load double** %theNZ7, align 8
  %incdec.ptr88 = getelementptr inbounds double* %108, i32 1
  store double* %incdec.ptr88, double** %theNZ7, align 8
  %109 = load double* %108, align 8
  %mul89 = fmul double %107, %109
  %110 = load double* %t0, align 8
  %sub90 = fsub double %110, %mul89
  store double %sub90, double* %t0, align 8
  %111 = load double* %t0, align 8
  %112 = load double** %dest, align 8
  %incdec.ptr91 = getelementptr inbounds double* %112, i32 1
  store double* %incdec.ptr91, double** %dest, align 8
  store double %111, double* %112, align 8
  br label %while.cond.64

while.end:                                        ; preds = %while.cond.64
  %113 = load i32* %col, align 4
  %add92 = add nsw i32 %113, 8
  store i32 %add92, i32* %col, align 4
  br label %while.cond

while.end.93:                                     ; preds = %while.cond
  br label %while.cond.94

while.cond.94:                                    ; preds = %while.end.156, %while.end.93
  %114 = load i32* %col, align 4
  %115 = load i32* %lastcol.addr, align 4
  %sub95 = sub nsw i32 %115, 3
  %cmp96 = icmp slt i32 %114, %sub95
  br i1 %cmp96, label %while.body.97, label %while.end.158

while.body.97:                                    ; preds = %while.cond.94
  %116 = load i32* %col, align 4
  %add98 = add nsw i32 %116, 1
  %idxprom99 = sext i32 %add98 to i64
  %117 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx100 = getelementptr inbounds i32* %117, i64 %idxprom99
  %118 = load i32* %arrayidx100, align 4
  %idxprom101 = sext i32 %118 to i64
  %119 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx102 = getelementptr inbounds %union.Entry* %119, i64 %idxprom101
  %nz103 = bitcast %union.Entry* %arrayidx102 to double*
  store double* %nz103, double** %last, align 8
  %120 = load double** %destination.addr, align 8
  store double* %120, double** %dest, align 8
  %121 = load i32* %col, align 4
  %add104 = add nsw i32 %121, 1
  %idxprom105 = sext i32 %add104 to i64
  %122 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx106 = getelementptr inbounds i32* %122, i64 %idxprom105
  %123 = load i32* %arrayidx106, align 4
  %124 = load i32* %col, align 4
  %idxprom107 = sext i32 %124 to i64
  %125 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx108 = getelementptr inbounds i32* %125, i64 %idxprom107
  %126 = load i32* %arrayidx108, align 4
  %sub109 = sub nsw i32 %123, %126
  store i32 %sub109, i32* %increment, align 4
  %127 = load i32* %theFirst.addr, align 4
  %128 = load i32* %col, align 4
  %idxprom110 = sext i32 %128 to i64
  %129 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx111 = getelementptr inbounds i32* %129, i64 %idxprom110
  %130 = load i32* %arrayidx111, align 4
  %add112 = add nsw i32 %127, %130
  %131 = load i32* %super.addr, align 4
  %132 = load i32* %col, align 4
  %sub113 = sub nsw i32 %131, %132
  %add114 = add nsw i32 %add112, %sub113
  %idxprom115 = sext i32 %add114 to i64
  %133 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx116 = getelementptr inbounds %union.Entry* %133, i64 %idxprom115
  %nz117 = bitcast %union.Entry* %arrayidx116 to double*
  store double* %nz117, double** %theNZ0, align 8
  %134 = load double** %theNZ0, align 8
  %135 = load i32* %increment, align 4
  %idx.ext118 = sext i32 %135 to i64
  %add.ptr119 = getelementptr inbounds double* %134, i64 %idx.ext118
  %add.ptr120 = getelementptr inbounds double* %add.ptr119, i64 -1
  store double* %add.ptr120, double** %theNZ1, align 8
  %136 = load double** %theNZ1, align 8
  %137 = load i32* %increment, align 4
  %idx.ext121 = sext i32 %137 to i64
  %add.ptr122 = getelementptr inbounds double* %136, i64 %idx.ext121
  %add.ptr123 = getelementptr inbounds double* %add.ptr122, i64 -2
  store double* %add.ptr123, double** %theNZ2, align 8
  %138 = load double** %theNZ2, align 8
  %139 = load i32* %increment, align 4
  %idx.ext124 = sext i32 %139 to i64
  %add.ptr125 = getelementptr inbounds double* %138, i64 %idx.ext124
  %add.ptr126 = getelementptr inbounds double* %add.ptr125, i64 -3
  store double* %add.ptr126, double** %theNZ3, align 8
  %140 = load double** %theNZ0, align 8
  %incdec.ptr127 = getelementptr inbounds double* %140, i32 1
  store double* %incdec.ptr127, double** %theNZ0, align 8
  %141 = load double* %140, align 8
  store double %141, double* %ljk0, align 8
  %142 = load double** %theNZ1, align 8
  %incdec.ptr128 = getelementptr inbounds double* %142, i32 1
  store double* %incdec.ptr128, double** %theNZ1, align 8
  %143 = load double* %142, align 8
  store double %143, double* %ljk1, align 8
  %144 = load double** %theNZ2, align 8
  %incdec.ptr129 = getelementptr inbounds double* %144, i32 1
  store double* %incdec.ptr129, double** %theNZ2, align 8
  %145 = load double* %144, align 8
  store double %145, double* %ljk2, align 8
  %146 = load double** %theNZ3, align 8
  %incdec.ptr130 = getelementptr inbounds double* %146, i32 1
  store double* %incdec.ptr130, double** %theNZ3, align 8
  %147 = load double* %146, align 8
  store double %147, double* %ljk3, align 8
  %148 = load double* %ljk0, align 8
  %149 = load double* %ljk0, align 8
  %mul131 = fmul double %148, %149
  %150 = load double* %ljk1, align 8
  %151 = load double* %ljk1, align 8
  %mul132 = fmul double %150, %151
  %add133 = fadd double %mul131, %mul132
  %152 = load double* %ljk2, align 8
  %153 = load double* %ljk2, align 8
  %mul134 = fmul double %152, %153
  %add135 = fadd double %add133, %mul134
  %154 = load double* %ljk3, align 8
  %155 = load double* %ljk3, align 8
  %mul136 = fmul double %154, %155
  %add137 = fadd double %add135, %mul136
  %156 = load double** %dest, align 8
  %incdec.ptr138 = getelementptr inbounds double* %156, i32 1
  store double* %incdec.ptr138, double** %dest, align 8
  %157 = load double* %156, align 8
  %sub139 = fsub double %157, %add137
  store double %sub139, double* %156, align 8
  br label %while.cond.140

while.cond.140:                                   ; preds = %while.body.142, %while.body.97
  %158 = load double** %theNZ0, align 8
  %159 = load double** %last, align 8
  %cmp141 = icmp ne double* %158, %159
  br i1 %cmp141, label %while.body.142, label %while.end.156

while.body.142:                                   ; preds = %while.cond.140
  %160 = load double** %dest, align 8
  %161 = load double* %160, align 8
  store double %161, double* %t0, align 8
  %162 = load double* %ljk0, align 8
  %163 = load double** %theNZ0, align 8
  %incdec.ptr143 = getelementptr inbounds double* %163, i32 1
  store double* %incdec.ptr143, double** %theNZ0, align 8
  %164 = load double* %163, align 8
  %mul144 = fmul double %162, %164
  %165 = load double* %t0, align 8
  %sub145 = fsub double %165, %mul144
  store double %sub145, double* %t0, align 8
  %166 = load double* %ljk1, align 8
  %167 = load double** %theNZ1, align 8
  %incdec.ptr146 = getelementptr inbounds double* %167, i32 1
  store double* %incdec.ptr146, double** %theNZ1, align 8
  %168 = load double* %167, align 8
  %mul147 = fmul double %166, %168
  %169 = load double* %t0, align 8
  %sub148 = fsub double %169, %mul147
  store double %sub148, double* %t0, align 8
  %170 = load double* %ljk2, align 8
  %171 = load double** %theNZ2, align 8
  %incdec.ptr149 = getelementptr inbounds double* %171, i32 1
  store double* %incdec.ptr149, double** %theNZ2, align 8
  %172 = load double* %171, align 8
  %mul150 = fmul double %170, %172
  %173 = load double* %t0, align 8
  %sub151 = fsub double %173, %mul150
  store double %sub151, double* %t0, align 8
  %174 = load double* %ljk3, align 8
  %175 = load double** %theNZ3, align 8
  %incdec.ptr152 = getelementptr inbounds double* %175, i32 1
  store double* %incdec.ptr152, double** %theNZ3, align 8
  %176 = load double* %175, align 8
  %mul153 = fmul double %174, %176
  %177 = load double* %t0, align 8
  %sub154 = fsub double %177, %mul153
  store double %sub154, double* %t0, align 8
  %178 = load double* %t0, align 8
  %179 = load double** %dest, align 8
  %incdec.ptr155 = getelementptr inbounds double* %179, i32 1
  store double* %incdec.ptr155, double** %dest, align 8
  store double %178, double* %179, align 8
  br label %while.cond.140

while.end.156:                                    ; preds = %while.cond.140
  %180 = load i32* %col, align 4
  %add157 = add nsw i32 %180, 4
  store i32 %add157, i32* %col, align 4
  br label %while.cond.94

while.end.158:                                    ; preds = %while.cond.94
  br label %while.cond.159

while.cond.159:                                   ; preds = %while.end.208, %while.end.158
  %181 = load i32* %col, align 4
  %182 = load i32* %lastcol.addr, align 4
  %cmp160 = icmp slt i32 %181, %182
  br i1 %cmp160, label %while.body.161, label %while.end.209

while.body.161:                                   ; preds = %while.cond.159
  %183 = load i32* %col, align 4
  %add162 = add nsw i32 %183, 1
  %idxprom163 = sext i32 %add162 to i64
  %184 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx164 = getelementptr inbounds i32* %184, i64 %idxprom163
  %185 = load i32* %arrayidx164, align 4
  %idxprom165 = sext i32 %185 to i64
  %186 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx166 = getelementptr inbounds %union.Entry* %186, i64 %idxprom165
  %nz167 = bitcast %union.Entry* %arrayidx166 to double*
  store double* %nz167, double** %last, align 8
  %187 = load double** %destination.addr, align 8
  store double* %187, double** %dest, align 8
  %188 = load i32* %theFirst.addr, align 4
  %189 = load i32* %col, align 4
  %idxprom168 = sext i32 %189 to i64
  %190 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx169 = getelementptr inbounds i32* %190, i64 %idxprom168
  %191 = load i32* %arrayidx169, align 4
  %add170 = add nsw i32 %188, %191
  %192 = load i32* %super.addr, align 4
  %193 = load i32* %col, align 4
  %sub171 = sub nsw i32 %192, %193
  %add172 = add nsw i32 %add170, %sub171
  %idxprom173 = sext i32 %add172 to i64
  %194 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx174 = getelementptr inbounds %union.Entry* %194, i64 %idxprom173
  %nz175 = bitcast %union.Entry* %arrayidx174 to double*
  store double* %nz175, double** %theNZ0, align 8
  %195 = load double** %theNZ0, align 8
  %incdec.ptr176 = getelementptr inbounds double* %195, i32 1
  store double* %incdec.ptr176, double** %theNZ0, align 8
  %196 = load double* %195, align 8
  store double %196, double* %ljk0, align 8
  %197 = load double* %ljk0, align 8
  %198 = load double* %ljk0, align 8
  %mul177 = fmul double %197, %198
  %199 = load double** %dest, align 8
  %incdec.ptr178 = getelementptr inbounds double* %199, i32 1
  store double* %incdec.ptr178, double** %dest, align 8
  %200 = load double* %199, align 8
  %sub179 = fsub double %200, %mul177
  store double %sub179, double* %199, align 8
  br label %while.cond.180

while.cond.180:                                   ; preds = %while.body.183, %while.body.161
  %201 = load double** %theNZ0, align 8
  %202 = load double** %last, align 8
  %add.ptr181 = getelementptr inbounds double* %202, i64 -3
  %cmp182 = icmp ult double* %201, %add.ptr181
  br i1 %cmp182, label %while.body.183, label %while.end.200

while.body.183:                                   ; preds = %while.cond.180
  %203 = load double* %ljk0, align 8
  %204 = load double** %theNZ0, align 8
  %205 = load double* %204, align 8
  %mul184 = fmul double %203, %205
  %206 = load double** %dest, align 8
  %207 = load double* %206, align 8
  %sub185 = fsub double %207, %mul184
  store double %sub185, double* %206, align 8
  %208 = load double* %ljk0, align 8
  %209 = load double** %theNZ0, align 8
  %add.ptr186 = getelementptr inbounds double* %209, i64 1
  %210 = load double* %add.ptr186, align 8
  %mul187 = fmul double %208, %210
  %211 = load double** %dest, align 8
  %add.ptr188 = getelementptr inbounds double* %211, i64 1
  %212 = load double* %add.ptr188, align 8
  %sub189 = fsub double %212, %mul187
  store double %sub189, double* %add.ptr188, align 8
  %213 = load double* %ljk0, align 8
  %214 = load double** %theNZ0, align 8
  %add.ptr190 = getelementptr inbounds double* %214, i64 2
  %215 = load double* %add.ptr190, align 8
  %mul191 = fmul double %213, %215
  %216 = load double** %dest, align 8
  %add.ptr192 = getelementptr inbounds double* %216, i64 2
  %217 = load double* %add.ptr192, align 8
  %sub193 = fsub double %217, %mul191
  store double %sub193, double* %add.ptr192, align 8
  %218 = load double* %ljk0, align 8
  %219 = load double** %theNZ0, align 8
  %add.ptr194 = getelementptr inbounds double* %219, i64 3
  %220 = load double* %add.ptr194, align 8
  %mul195 = fmul double %218, %220
  %221 = load double** %dest, align 8
  %add.ptr196 = getelementptr inbounds double* %221, i64 3
  %222 = load double* %add.ptr196, align 8
  %sub197 = fsub double %222, %mul195
  store double %sub197, double* %add.ptr196, align 8
  %223 = load double** %dest, align 8
  %add.ptr198 = getelementptr inbounds double* %223, i64 4
  store double* %add.ptr198, double** %dest, align 8
  %224 = load double** %theNZ0, align 8
  %add.ptr199 = getelementptr inbounds double* %224, i64 4
  store double* %add.ptr199, double** %theNZ0, align 8
  br label %while.cond.180

while.end.200:                                    ; preds = %while.cond.180
  br label %while.cond.201

while.cond.201:                                   ; preds = %while.body.203, %while.end.200
  %225 = load double** %theNZ0, align 8
  %226 = load double** %last, align 8
  %cmp202 = icmp ne double* %225, %226
  br i1 %cmp202, label %while.body.203, label %while.end.208

while.body.203:                                   ; preds = %while.cond.201
  %227 = load double* %ljk0, align 8
  %228 = load double** %theNZ0, align 8
  %incdec.ptr204 = getelementptr inbounds double* %228, i32 1
  store double* %incdec.ptr204, double** %theNZ0, align 8
  %229 = load double* %228, align 8
  %mul205 = fmul double %227, %229
  %230 = load double** %dest, align 8
  %incdec.ptr206 = getelementptr inbounds double* %230, i32 1
  store double* %incdec.ptr206, double** %dest, align 8
  %231 = load double* %230, align 8
  %sub207 = fsub double %231, %mul205
  store double %sub207, double* %230, align 8
  br label %while.cond.201

while.end.208:                                    ; preds = %while.cond.201
  %232 = load i32* %col, align 4
  %inc = add nsw i32 %232, 1
  store i32 %inc, i32* %col, align 4
  br label %while.cond.159

while.end.209:                                    ; preds = %while.cond.159
  %233 = load i32* %retval
  ret i32 %233
}

; Function Attrs: nounwind uwtable
define internal i32 @Partition(%struct.SMatrix* byval align 8 %M, i32 %parts, i32* %T, i32* %assigned_ops, i32* %domain, i32* %domains, i32* %proc_domains, i32 %distribute) {
entry:
  %retval = alloca i32, align 4
  %parts.addr = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %assigned_ops.addr = alloca i32*, align 8
  %domain.addr = alloca i32*, align 8
  %domains.addr = alloca i32*, align 8
  %proc_domains.addr = alloca i32*, align 8
  %distribute.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %start = alloca i32, align 4
  %minm = alloca i32, align 4
  %maxm = alloca i32, align 4
  %ops = alloca i32, align 4
  %change = alloca i32, align 4
  %which = alloca i32, align 4
  %depth = alloca i32*, align 8
  %ave = alloca double, align 8
  %maxo = alloca double, align 8
  %maxd = alloca double, align 8
  %t = alloca %struct.Chunk*, align 8
  store i32 %parts, i32* %parts.addr, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32* %assigned_ops, i32** %assigned_ops.addr, align 8
  store i32* %domain, i32** %domain.addr, align 8
  store i32* %domains, i32** %domains.addr, align 8
  store i32* %proc_domains, i32** %proc_domains.addr, align 8
  store i32 %distribute, i32* %distribute.addr, align 4
  store i32 0, i32* %which, align 4
  store double 0.000000e+00, double* %maxo, align 8
  store i32 0, i32* %start, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %1 = load i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %T.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %5 = load i32* %n1, align 4
  %cmp2 = icmp eq i32 %4, %5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call = call %struct.Chunk* @NewChunk()
  store %struct.Chunk* %call, %struct.Chunk** %t, align 8
  %6 = load i32* %start, align 4
  %7 = load %struct.Chunk** %t, align 8
  %first = getelementptr inbounds %struct.Chunk* %7, i32 0, i32 0
  store i32 %6, i32* %first, align 4
  %8 = load i32* %i, align 4
  %add = add nsw i32 %8, 1
  %9 = load %struct.Chunk** %t, align 8
  %last = getelementptr inbounds %struct.Chunk* %9, i32 0, i32 1
  store i32 %add, i32* %last, align 4
  %10 = load %struct.Chunk** %t, align 8
  %call3 = call i32 @AddInOrder(%struct.Chunk* %10)
  %11 = load i32* %i, align 4
  %add4 = add nsw i32 %11, 1
  store i32 %add4, i32* %start, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32* %parts.addr, align 4
  %14 = load i32** %assigned_ops.addr, align 8
  %call5 = call i32 @NumberPartition(i32 %13, i32* %14, i32 0)
  br label %for.cond.6

for.cond.6:                                       ; preds = %if.end.34, %for.end
  %15 = load i32** %assigned_ops.addr, align 8
  %16 = load i32* %parts.addr, align 4
  %call7 = call i32 @MinBucket(i32* %15, i32 %16)
  %idxprom8 = sext i32 %call7 to i64
  %17 = load i32** %assigned_ops.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %17, i64 %idxprom8
  %18 = load i32* %arrayidx9, align 4
  store i32 %18, i32* %minm, align 4
  %19 = load i32** %assigned_ops.addr, align 8
  %20 = load i32* %parts.addr, align 4
  %call10 = call i32 @MaxBucket(i32* %19, i32 %20)
  %idxprom11 = sext i32 %call10 to i64
  %21 = load i32** %assigned_ops.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %21, i64 %idxprom11
  %22 = load i32* %arrayidx12, align 4
  store i32 %22, i32* %maxm, align 4
  %23 = load i32* %maxm, align 4
  %cmp13 = icmp eq i32 %23, 0
  br i1 %cmp13, label %if.then.29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond.6
  %24 = load i32* %maxm, align 4
  %25 = load i32* %minm, align 4
  %sub = sub nsw i32 %24, %25
  %conv = sitofp i32 %sub to double
  %mul = fmul double 1.000000e+02, %conv
  %26 = load i32* %maxm, align 4
  %conv14 = sitofp i32 %26 to double
  %div = fdiv double %mul, %conv14
  %27 = load i32* @tolerance, align 4
  %conv15 = sitofp i32 %27 to double
  %cmp16 = fcmp olt double %div, %conv15
  br i1 %cmp16, label %if.then.29, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false
  %28 = load i32* %parts.addr, align 4
  %conv19 = sitofp i32 %28 to double
  %mul20 = fmul double 1.000000e+00, %conv19
  %29 = load i32* %maxm, align 4
  %conv21 = sitofp i32 %29 to double
  %mul22 = fmul double %mul20, %conv21
  %n23 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %30 = load i32* %n23, align 4
  %idxprom24 = sext i32 %30 to i64
  %31 = load double** @work_tree, align 8
  %arrayidx25 = getelementptr inbounds double* %31, i64 %idxprom24
  %32 = load double* %arrayidx25, align 8
  %div26 = fdiv double %mul22, %32
  %cmp27 = fcmp olt double %div26, 5.000000e-02
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false.18, %lor.lhs.false, %for.cond.6
  br label %for.end.36

if.end.30:                                        ; preds = %lor.lhs.false.18
  %call31 = call %struct.Chunk* @GetChunk()
  store %struct.Chunk* %call31, %struct.Chunk** %t, align 8
  %33 = load %struct.Chunk** %t, align 8
  %call32 = call i32 @Divide(%struct.Chunk* %33)
  store i32 %call32, i32* %change, align 4
  %34 = load i32* %change, align 4
  %tobool = icmp ne i32 %34, 0
  br i1 %tobool, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  br label %for.end.36

if.end.34:                                        ; preds = %if.end.30
  %35 = load i32* %parts.addr, align 4
  %36 = load i32** %assigned_ops.addr, align 8
  %call35 = call i32 @NumberPartition(i32 %35, i32* %36, i32 0)
  br label %for.cond.6

for.end.36:                                       ; preds = %if.then.33, %if.then.29
  %37 = load i32* %parts.addr, align 4
  %38 = load i32** %assigned_ops.addr, align 8
  %call37 = call i32 @NumberPartition(i32 %37, i32* %38, i32 1)
  store i32 0, i32* %which, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.54, %for.end.36
  %39 = load i32* %i, align 4
  %40 = load i32* %parts.addr, align 4
  %cmp39 = icmp slt i32 %39, %40
  br i1 %cmp39, label %for.body.41, label %for.end.56

for.body.41:                                      ; preds = %for.cond.38
  %41 = load i32* %which, align 4
  %42 = load i32* %i, align 4
  %idxprom42 = sext i32 %42 to i64
  %43 = load i32** %proc_domains.addr, align 8
  %arrayidx43 = getelementptr inbounds i32* %43, i64 %idxprom42
  store i32 %41, i32* %arrayidx43, align 4
  %44 = load %struct.Chunk** @chunks_head, align 8
  store %struct.Chunk* %44, %struct.Chunk** %t, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.53, %for.body.41
  %45 = load %struct.Chunk** %t, align 8
  %tobool44 = icmp ne %struct.Chunk* %45, null
  br i1 %tobool44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %46 = load %struct.Chunk** %t, align 8
  %assign = getelementptr inbounds %struct.Chunk* %46, i32 0, i32 2
  %47 = load i32* %assign, align 4
  %48 = load i32* %i, align 4
  %cmp45 = icmp eq i32 %47, %48
  br i1 %cmp45, label %if.then.47, label %if.end.53

if.then.47:                                       ; preds = %while.body
  %49 = load %struct.Chunk** %t, align 8
  %last48 = getelementptr inbounds %struct.Chunk* %49, i32 0, i32 1
  %50 = load i32* %last48, align 4
  %sub49 = sub nsw i32 %50, 1
  %51 = load i32* %which, align 4
  %inc50 = add nsw i32 %51, 1
  store i32 %inc50, i32* %which, align 4
  %idxprom51 = sext i32 %51 to i64
  %52 = load i32** %domains.addr, align 8
  %arrayidx52 = getelementptr inbounds i32* %52, i64 %idxprom51
  store i32 %sub49, i32* %arrayidx52, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.47, %while.body
  %53 = load %struct.Chunk** %t, align 8
  %next = getelementptr inbounds %struct.Chunk* %53, i32 0, i32 3
  %54 = load %struct.Chunk** %next, align 8
  store %struct.Chunk* %54, %struct.Chunk** %t, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc.54

for.inc.54:                                       ; preds = %while.end
  %55 = load i32* %i, align 4
  %inc55 = add nsw i32 %55, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond.38

for.end.56:                                       ; preds = %for.cond.38
  %56 = load i32* %which, align 4
  %57 = load i32* %parts.addr, align 4
  %idxprom57 = sext i32 %57 to i64
  %58 = load i32** %proc_domains.addr, align 8
  %arrayidx58 = getelementptr inbounds i32* %58, i64 %idxprom57
  store i32 %56, i32* %arrayidx58, align 4
  br label %while.cond.59

while.cond.59:                                    ; preds = %while.body.61, %for.end.56
  %59 = load %struct.Chunk** @chunks_head, align 8
  %tobool60 = icmp ne %struct.Chunk* %59, null
  br i1 %tobool60, label %while.body.61, label %while.end.64

while.body.61:                                    ; preds = %while.cond.59
  %60 = load %struct.Chunk** @chunks_head, align 8
  store %struct.Chunk* %60, %struct.Chunk** %t, align 8
  %61 = load %struct.Chunk** @chunks_head, align 8
  %next62 = getelementptr inbounds %struct.Chunk* %61, i32 0, i32 3
  %62 = load %struct.Chunk** %next62, align 8
  store %struct.Chunk* %62, %struct.Chunk** @chunks_head, align 8
  %63 = load %struct.Chunk** %t, align 8
  %call63 = call i32 (%struct.Chunk*, ...) *bitcast (i32 (...)* @free to i32 (%struct.Chunk*, ...)*)(%struct.Chunk* %63)
  br label %while.cond.59

while.end.64:                                     ; preds = %while.cond.59
  %64 = load i32* %parts.addr, align 4
  %idxprom65 = sext i32 %64 to i64
  %65 = load i32** %proc_domains.addr, align 8
  %arrayidx66 = getelementptr inbounds i32* %65, i64 %idxprom65
  %66 = load i32* %arrayidx66, align 4
  %conv67 = sext i32 %66 to i64
  %mul68 = mul i64 %conv67, 4
  %call69 = call i8* @malloc(i64 %mul68)
  %67 = bitcast i8* %call69 to i32*
  store i32* %67, i32** %depth, align 8
  store i32 0, i32* %p, align 4
  br label %for.cond.70

for.cond.70:                                      ; preds = %for.inc.93, %while.end.64
  %68 = load i32* %p, align 4
  %69 = load i32* %parts.addr, align 4
  %cmp71 = icmp slt i32 %68, %69
  br i1 %cmp71, label %for.body.73, label %for.end.95

for.body.73:                                      ; preds = %for.cond.70
  %70 = load i32* %p, align 4
  %idxprom74 = sext i32 %70 to i64
  %71 = load i32** %proc_domains.addr, align 8
  %arrayidx75 = getelementptr inbounds i32* %71, i64 %idxprom74
  %72 = load i32* %arrayidx75, align 4
  store i32 %72, i32* %i, align 4
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.90, %for.body.73
  %73 = load i32* %i, align 4
  %74 = load i32* %p, align 4
  %add77 = add nsw i32 %74, 1
  %idxprom78 = sext i32 %add77 to i64
  %75 = load i32** %proc_domains.addr, align 8
  %arrayidx79 = getelementptr inbounds i32* %75, i64 %idxprom78
  %76 = load i32* %arrayidx79, align 4
  %cmp80 = icmp slt i32 %73, %76
  br i1 %cmp80, label %for.body.82, label %for.end.92

for.body.82:                                      ; preds = %for.cond.76
  %77 = load i32* %p, align 4
  %mul83 = mul nsw i32 1000000, %77
  %78 = load i32* %i, align 4
  %idxprom84 = sext i32 %78 to i64
  %79 = load i32** %domains.addr, align 8
  %arrayidx85 = getelementptr inbounds i32* %79, i64 %idxprom84
  %80 = load i32* %arrayidx85, align 4
  %call86 = call i32 (i32, ...) *bitcast (i32 (i32)* @BlDepth to i32 (i32, ...)*)(i32 %80)
  %sub87 = sub nsw i32 %mul83, %call86
  %81 = load i32* %i, align 4
  %idxprom88 = sext i32 %81 to i64
  %82 = load i32** %depth, align 8
  %arrayidx89 = getelementptr inbounds i32* %82, i64 %idxprom88
  store i32 %sub87, i32* %arrayidx89, align 4
  br label %for.inc.90

for.inc.90:                                       ; preds = %for.body.82
  %83 = load i32* %i, align 4
  %inc91 = add nsw i32 %83, 1
  store i32 %inc91, i32* %i, align 4
  br label %for.cond.76

for.end.92:                                       ; preds = %for.cond.76
  br label %for.inc.93

for.inc.93:                                       ; preds = %for.end.92
  %84 = load i32* %p, align 4
  %inc94 = add nsw i32 %84, 1
  store i32 %inc94, i32* %p, align 4
  br label %for.cond.70

for.end.95:                                       ; preds = %for.cond.70
  %85 = load i32* %p, align 4
  %idxprom96 = sext i32 %85 to i64
  %86 = load i32** %proc_domains.addr, align 8
  %arrayidx97 = getelementptr inbounds i32* %86, i64 %idxprom96
  %87 = load i32* %arrayidx97, align 4
  %88 = load i32** %domains.addr, align 8
  %89 = load i32** %depth, align 8
  %call98 = call i32 (i32, i32*, i32*, ...) *bitcast (i32 (i32, i32*, i32*)* @SortByKey to i32 (i32, i32*, i32*, ...)*)(i32 %87, i32* %88, i32* %89)
  %90 = load i32** %depth, align 8
  %call99 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %90)
  store i32 0, i32* %i, align 4
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.107, %for.end.95
  %91 = load i32* %i, align 4
  %n101 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %92 = load i32* %n101, align 4
  %cmp102 = icmp slt i32 %91, %92
  br i1 %cmp102, label %for.body.104, label %for.end.109

for.body.104:                                     ; preds = %for.cond.100
  %93 = load i32* %i, align 4
  %idxprom105 = sext i32 %93 to i64
  %94 = load i32** %domain.addr, align 8
  %arrayidx106 = getelementptr inbounds i32* %94, i64 %idxprom105
  store i32 0, i32* %arrayidx106, align 4
  br label %for.inc.107

for.inc.107:                                      ; preds = %for.body.104
  %95 = load i32* %i, align 4
  %inc108 = add nsw i32 %95, 1
  store i32 %inc108, i32* %i, align 4
  br label %for.cond.100

for.end.109:                                      ; preds = %for.cond.100
  store i32 0, i32* %i, align 4
  br label %for.cond.110

for.cond.110:                                     ; preds = %for.inc.119, %for.end.109
  %96 = load i32* %i, align 4
  %97 = load i32* %parts.addr, align 4
  %idxprom111 = sext i32 %97 to i64
  %98 = load i32** %proc_domains.addr, align 8
  %arrayidx112 = getelementptr inbounds i32* %98, i64 %idxprom111
  %99 = load i32* %arrayidx112, align 4
  %cmp113 = icmp slt i32 %96, %99
  br i1 %cmp113, label %for.body.115, label %for.end.121

for.body.115:                                     ; preds = %for.cond.110
  %100 = load i32** %domain.addr, align 8
  %101 = load i32* %i, align 4
  %idxprom116 = sext i32 %101 to i64
  %102 = load i32** %domains.addr, align 8
  %arrayidx117 = getelementptr inbounds i32* %102, i64 %idxprom116
  %103 = load i32* %arrayidx117, align 4
  %call118 = call i32 @MarkSubtreeAsDomain(i32* %100, i32 %103)
  br label %for.inc.119

for.inc.119:                                      ; preds = %for.body.115
  %104 = load i32* %i, align 4
  %inc120 = add nsw i32 %104, 1
  store i32 %inc120, i32* %i, align 4
  br label %for.cond.110

for.end.121:                                      ; preds = %for.cond.110
  store double 0.000000e+00, double* @domain_ops, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.133, %for.end.121
  %105 = load i32* %i, align 4
  %106 = load i32* %parts.addr, align 4
  %idxprom123 = sext i32 %106 to i64
  %107 = load i32** %proc_domains.addr, align 8
  %arrayidx124 = getelementptr inbounds i32* %107, i64 %idxprom123
  %108 = load i32* %arrayidx124, align 4
  %cmp125 = icmp slt i32 %105, %108
  br i1 %cmp125, label %for.body.127, label %for.end.135

for.body.127:                                     ; preds = %for.cond.122
  %109 = load i32* %i, align 4
  %idxprom128 = sext i32 %109 to i64
  %110 = load i32** %domains.addr, align 8
  %arrayidx129 = getelementptr inbounds i32* %110, i64 %idxprom128
  %111 = load i32* %arrayidx129, align 4
  %idxprom130 = sext i32 %111 to i64
  %112 = load double** @work_tree, align 8
  %arrayidx131 = getelementptr inbounds double* %112, i64 %idxprom130
  %113 = load double* %arrayidx131, align 8
  %114 = load double* @domain_ops, align 8
  %add132 = fadd double %114, %113
  store double %add132, double* @domain_ops, align 8
  br label %for.inc.133

for.inc.133:                                      ; preds = %for.body.127
  %115 = load i32* %i, align 4
  %inc134 = add nsw i32 %115, 1
  store i32 %inc134, i32* %i, align 4
  br label %for.cond.122

for.end.135:                                      ; preds = %for.cond.122
  store double 0.000000e+00, double* %maxd, align 8
  store i32 0, i32* %p, align 4
  br label %for.cond.136

for.cond.136:                                     ; preds = %for.inc.165, %for.end.135
  %116 = load i32* %p, align 4
  %117 = load i32* %parts.addr, align 4
  %cmp137 = icmp slt i32 %116, %117
  br i1 %cmp137, label %for.body.139, label %for.end.167

for.body.139:                                     ; preds = %for.cond.136
  store i32 0, i32* %ops, align 4
  %118 = load i32* %p, align 4
  %idxprom140 = sext i32 %118 to i64
  %119 = load i32** %proc_domains.addr, align 8
  %arrayidx141 = getelementptr inbounds i32* %119, i64 %idxprom140
  %120 = load i32* %arrayidx141, align 4
  store i32 %120, i32* %i, align 4
  br label %for.cond.142

for.cond.142:                                     ; preds = %for.inc.156, %for.body.139
  %121 = load i32* %i, align 4
  %122 = load i32* %p, align 4
  %add143 = add nsw i32 %122, 1
  %idxprom144 = sext i32 %add143 to i64
  %123 = load i32** %proc_domains.addr, align 8
  %arrayidx145 = getelementptr inbounds i32* %123, i64 %idxprom144
  %124 = load i32* %arrayidx145, align 4
  %cmp146 = icmp slt i32 %121, %124
  br i1 %cmp146, label %for.body.148, label %for.end.158

for.body.148:                                     ; preds = %for.cond.142
  %125 = load i32* %i, align 4
  %idxprom149 = sext i32 %125 to i64
  %126 = load i32** %domains.addr, align 8
  %arrayidx150 = getelementptr inbounds i32* %126, i64 %idxprom149
  %127 = load i32* %arrayidx150, align 4
  %idxprom151 = sext i32 %127 to i64
  %128 = load double** @work_tree, align 8
  %arrayidx152 = getelementptr inbounds double* %128, i64 %idxprom151
  %129 = load double* %arrayidx152, align 8
  %130 = load i32* %ops, align 4
  %conv153 = sitofp i32 %130 to double
  %add154 = fadd double %conv153, %129
  %conv155 = fptosi double %add154 to i32
  store i32 %conv155, i32* %ops, align 4
  br label %for.inc.156

for.inc.156:                                      ; preds = %for.body.148
  %131 = load i32* %i, align 4
  %inc157 = add nsw i32 %131, 1
  store i32 %inc157, i32* %i, align 4
  br label %for.cond.142

for.end.158:                                      ; preds = %for.cond.142
  %132 = load i32* %ops, align 4
  %conv159 = sitofp i32 %132 to double
  %133 = load double* %maxd, align 8
  %cmp160 = fcmp ogt double %conv159, %133
  br i1 %cmp160, label %if.then.162, label %if.end.164

if.then.162:                                      ; preds = %for.end.158
  %134 = load i32* %ops, align 4
  %conv163 = sitofp i32 %134 to double
  store double %conv163, double* %maxd, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.162, %for.end.158
  br label %for.inc.165

for.inc.165:                                      ; preds = %if.end.164
  %135 = load i32* %p, align 4
  %inc166 = add nsw i32 %135, 1
  store i32 %inc166, i32* %p, align 4
  br label %for.cond.136

for.end.167:                                      ; preds = %for.cond.136
  %136 = load double* @domain_ops, align 8
  %137 = load i32* %parts.addr, align 4
  %conv168 = sitofp i32 %137 to double
  %div169 = fdiv double %136, %conv168
  store double %div169, double* %ave, align 8
  %138 = load i32* %parts.addr, align 4
  %139 = load i32* %parts.addr, align 4
  %idxprom170 = sext i32 %139 to i64
  %140 = load i32** %proc_domains.addr, align 8
  %arrayidx171 = getelementptr inbounds i32* %140, i64 %idxprom170
  %141 = load i32* %arrayidx171, align 4
  %call172 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.33, i32 0, i32 0), i32 %138, i32 %141)
  %142 = load double* @domain_ops, align 8
  %n173 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %143 = load i32* %n173, align 4
  %idxprom174 = sext i32 %143 to i64
  %144 = load double** @work_tree, align 8
  %arrayidx175 = getelementptr inbounds double* %144, i64 %idxprom174
  %145 = load double* %arrayidx175, align 8
  %div176 = fdiv double %142, %145
  %call177 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.1.34, i32 0, i32 0), double %div176)
  %146 = load double* %ave, align 8
  %147 = load double* %maxd, align 8
  %div178 = fdiv double %146, %147
  %n179 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %148 = load i32* %n179, align 4
  %idxprom180 = sext i32 %148 to i64
  %149 = load double** @work_tree, align 8
  %arrayidx181 = getelementptr inbounds double* %149, i64 %idxprom180
  %150 = load double* %arrayidx181, align 8
  %151 = load double* %maxo, align 8
  %div182 = fdiv double %150, %151
  %152 = load i32* %parts.addr, align 4
  %conv183 = sitofp i32 %152 to double
  %div184 = fdiv double %div182, %conv183
  %call185 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.2.35, i32 0, i32 0), double %div178, double %div184)
  %153 = load i32* %retval
  ret i32 %153
}

; Function Attrs: nounwind uwtable
define internal i32 @MarkSubtreeAsDomain(i32* %domain, i32 %root) {
entry:
  %retval = alloca i32, align 4
  %domain.addr = alloca i32*, align 8
  %root.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %first = alloca i32, align 4
  %root_super = alloca i32, align 4
  store i32* %domain, i32** %domain.addr, align 8
  store i32 %root, i32* %root.addr, align 4
  %0 = load i32* %root.addr, align 4
  store i32 %0, i32* %first, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32* %first, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32** @firstchild, align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  %4 = load i32* %first, align 4
  %add = add nsw i32 %4, 1
  %idxprom1 = sext i32 %add to i64
  %5 = load i32** @firstchild, align 8
  %arrayidx2 = getelementptr inbounds i32* %5, i64 %idxprom1
  %6 = load i32* %arrayidx2, align 4
  %cmp = icmp ne i32 %3, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32* %first, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32** @firstchild, align 8
  %arrayidx4 = getelementptr inbounds i32* %8, i64 %idxprom3
  %9 = load i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %9 to i64
  %10 = load i32** @child, align 8
  %arrayidx6 = getelementptr inbounds i32* %10, i64 %idxprom5
  %11 = load i32* %arrayidx6, align 4
  store i32 %11, i32* %first, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32* %first, align 4
  store i32 %12, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %13 = load i32* %i, align 4
  %14 = load i32* %root.addr, align 4
  %cmp7 = icmp sle i32 %13, %14
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32* %i, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i32** %domain.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %16, i64 %idxprom8
  store i32 1, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32* %root.addr, align 4
  store i32 %18, i32* %root_super, align 4
  %19 = load i32* %root_super, align 4
  %idxprom10 = sext i32 %19 to i64
  %20 = load i32** @node, align 8
  %arrayidx11 = getelementptr inbounds i32* %20, i64 %idxprom10
  %21 = load i32* %arrayidx11, align 4
  %cmp12 = icmp slt i32 %21, 0
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %22 = load i32* %root_super, align 4
  %idxprom13 = sext i32 %22 to i64
  %23 = load i32** @node, align 8
  %arrayidx14 = getelementptr inbounds i32* %23, i64 %idxprom13
  %24 = load i32* %arrayidx14, align 4
  %25 = load i32* %root_super, align 4
  %add15 = add nsw i32 %25, %24
  store i32 %add15, i32* %root_super, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %26 = load i32* %root_super, align 4
  store i32 %26, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.24, %if.end
  %27 = load i32* %i, align 4
  %28 = load i32* %root_super, align 4
  %29 = load i32* %root_super, align 4
  %idxprom17 = sext i32 %29 to i64
  %30 = load i32** @node, align 8
  %arrayidx18 = getelementptr inbounds i32* %30, i64 %idxprom17
  %31 = load i32* %arrayidx18, align 4
  %add19 = add nsw i32 %28, %31
  %cmp20 = icmp slt i32 %27, %add19
  br i1 %cmp20, label %for.body.21, label %for.end.26

for.body.21:                                      ; preds = %for.cond.16
  %32 = load i32* %i, align 4
  %idxprom22 = sext i32 %32 to i64
  %33 = load i32** %domain.addr, align 8
  %arrayidx23 = getelementptr inbounds i32* %33, i64 %idxprom22
  store i32 2, i32* %arrayidx23, align 4
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.21
  %34 = load i32* %i, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.16

for.end.26:                                       ; preds = %for.cond.16
  %35 = load i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @NumberPartition(i32 %parts, i32* %assigned_ops, i32 %distribute) {
entry:
  %retval = alloca i32, align 4
  %parts.addr = alloca i32, align 4
  %assigned_ops.addr = alloca i32*, align 8
  %distribute.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %minm = alloca i32, align 4
  %t = alloca %struct.Chunk*, align 8
  %old_t = alloca %struct.Chunk*, align 8
  store i32 %parts, i32* %parts.addr, align 4
  store i32* %assigned_ops, i32** %assigned_ops.addr, align 8
  store i32 %distribute, i32* %distribute.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %parts.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %assigned_ops.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.Chunk** @chunks_head, align 8
  store %struct.Chunk* %5, %struct.Chunk** %t, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.end
  %6 = load %struct.Chunk** %t, align 8
  %tobool = icmp ne %struct.Chunk* %6, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32** %assigned_ops.addr, align 8
  %8 = load i32* %parts.addr, align 4
  %call = call i32 @MinBucket(i32* %7, i32 %8)
  store i32 %call, i32* %minm, align 4
  %9 = load %struct.Chunk** %t, align 8
  %last = getelementptr inbounds %struct.Chunk* %9, i32 0, i32 1
  %10 = load i32* %last, align 4
  %sub = sub nsw i32 %10, 1
  %idxprom1 = sext i32 %sub to i64
  %11 = load double** @work_tree, align 8
  %arrayidx2 = getelementptr inbounds double* %11, i64 %idxprom1
  %12 = load double* %arrayidx2, align 8
  %13 = load i32* %minm, align 4
  %idxprom3 = sext i32 %13 to i64
  %14 = load i32** %assigned_ops.addr, align 8
  %arrayidx4 = getelementptr inbounds i32* %14, i64 %idxprom3
  %15 = load i32* %arrayidx4, align 4
  %conv = sitofp i32 %15 to double
  %add = fadd double %conv, %12
  %conv5 = fptosi double %add to i32
  store i32 %conv5, i32* %arrayidx4, align 4
  %16 = load %struct.Chunk** %t, align 8
  store %struct.Chunk* %16, %struct.Chunk** %old_t, align 8
  %17 = load %struct.Chunk** %t, align 8
  %next = getelementptr inbounds %struct.Chunk* %17, i32 0, i32 3
  %18 = load %struct.Chunk** %next, align 8
  store %struct.Chunk* %18, %struct.Chunk** %t, align 8
  %19 = load i32* %distribute.addr, align 4
  %tobool6 = icmp ne i32 %19, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %20 = load i32* %minm, align 4
  %21 = load %struct.Chunk** %old_t, align 8
  %assign = getelementptr inbounds %struct.Chunk* %21, i32 0, i32 2
  store i32 %20, i32* %assign, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @Divide(%struct.Chunk* %root) {
entry:
  %root.addr = alloca %struct.Chunk*, align 8
  %i = alloca i32, align 4
  %first = alloca i32, align 4
  %first_in_super = alloca i32, align 4
  %change = alloca i32, align 4
  %t2 = alloca %struct.Chunk*, align 8
  store %struct.Chunk* %root, %struct.Chunk** %root.addr, align 8
  store i32 1, i32* %change, align 4
  %0 = load %struct.Chunk** %root.addr, align 8
  %last = getelementptr inbounds %struct.Chunk* %0, i32 0, i32 1
  %1 = load i32* %last, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* %first_in_super, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32* %first_in_super, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** @firstchild, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %add = add nsw i32 %4, 1
  %5 = load i32* %first_in_super, align 4
  %add1 = add nsw i32 %5, 1
  %idxprom2 = sext i32 %add1 to i64
  %6 = load i32** @firstchild, align 8
  %arrayidx3 = getelementptr inbounds i32* %6, i64 %idxprom2
  %7 = load i32* %arrayidx3, align 4
  %cmp = icmp eq i32 %add, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32* %first_in_super, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %first_in_super, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load %struct.Chunk** %root.addr, align 8
  %first4 = getelementptr inbounds %struct.Chunk* %9, i32 0, i32 0
  %10 = load i32* %first4, align 4
  store i32 %10, i32* %first, align 4
  %11 = load i32* %first_in_super, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load i32** @firstchild, align 8
  %arrayidx6 = getelementptr inbounds i32* %12, i64 %idxprom5
  %13 = load i32* %arrayidx6, align 4
  store i32 %13, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %14 = load i32* %i, align 4
  %15 = load i32* %first_in_super, align 4
  %add7 = add nsw i32 %15, 1
  %idxprom8 = sext i32 %add7 to i64
  %16 = load i32** @firstchild, align 8
  %arrayidx9 = getelementptr inbounds i32* %16, i64 %idxprom8
  %17 = load i32* %arrayidx9, align 4
  %cmp10 = icmp slt i32 %14, %17
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call %struct.Chunk* @NewChunk()
  store %struct.Chunk* %call, %struct.Chunk** %t2, align 8
  %18 = load i32* %i, align 4
  %idxprom11 = sext i32 %18 to i64
  %19 = load i32** @child, align 8
  %arrayidx12 = getelementptr inbounds i32* %19, i64 %idxprom11
  %20 = load i32* %arrayidx12, align 4
  %add13 = add nsw i32 %20, 1
  %21 = load %struct.Chunk** %t2, align 8
  %last14 = getelementptr inbounds %struct.Chunk* %21, i32 0, i32 1
  store i32 %add13, i32* %last14, align 4
  %22 = load i32* %first, align 4
  %23 = load %struct.Chunk** %t2, align 8
  %first15 = getelementptr inbounds %struct.Chunk* %23, i32 0, i32 0
  store i32 %22, i32* %first15, align 4
  %24 = load %struct.Chunk** %t2, align 8
  %call16 = call i32 @AddInOrder(%struct.Chunk* %24)
  %25 = load %struct.Chunk** %t2, align 8
  %last17 = getelementptr inbounds %struct.Chunk* %25, i32 0, i32 1
  %26 = load i32* %last17, align 4
  store i32 %26, i32* %first, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.Chunk** %root.addr, align 8
  %call18 = call i32 (%struct.Chunk*, ...) *bitcast (i32 (...)* @free to i32 (%struct.Chunk*, ...)*)(%struct.Chunk* %28)
  %29 = load i32* %change, align 4
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @MaxBucket(i32* %assigned_ops, i32 %parts) {
entry:
  %assigned_ops.addr = alloca i32*, align 8
  %parts.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %maxm = alloca i32, align 4
  %ind = alloca i32, align 4
  store i32* %assigned_ops, i32** %assigned_ops.addr, align 8
  store i32 %parts, i32* %parts.addr, align 4
  %0 = load i32** %assigned_ops.addr, align 8
  %arrayidx = getelementptr inbounds i32* %0, i64 0
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %maxm, align 4
  store i32 0, i32* %ind, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %parts.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %assigned_ops.addr, align 8
  %arrayidx1 = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx1, align 4
  %7 = load i32* %maxm, align 4
  %cmp2 = icmp sgt i32 %6, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  store i32 %8, i32* %ind, align 4
  %9 = load i32* %i, align 4
  %idxprom3 = sext i32 %9 to i64
  %10 = load i32** %assigned_ops.addr, align 8
  %arrayidx4 = getelementptr inbounds i32* %10, i64 %idxprom3
  %11 = load i32* %arrayidx4, align 4
  store i32 %11, i32* %maxm, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32* %ind, align 4
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @MinBucket(i32* %assigned_ops, i32 %parts) {
entry:
  %assigned_ops.addr = alloca i32*, align 8
  %parts.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %minm = alloca i32, align 4
  %ind = alloca i32, align 4
  store i32* %assigned_ops, i32** %assigned_ops.addr, align 8
  store i32 %parts, i32* %parts.addr, align 4
  %0 = load i32** %assigned_ops.addr, align 8
  %arrayidx = getelementptr inbounds i32* %0, i64 0
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %minm, align 4
  store i32 0, i32* %ind, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %parts.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %assigned_ops.addr, align 8
  %arrayidx1 = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx1, align 4
  %7 = load i32* %minm, align 4
  %cmp2 = icmp slt i32 %6, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  store i32 %8, i32* %ind, align 4
  %9 = load i32* %i, align 4
  %idxprom3 = sext i32 %9 to i64
  %10 = load i32** %assigned_ops.addr, align 8
  %arrayidx4 = getelementptr inbounds i32* %10, i64 %idxprom3
  %11 = load i32* %arrayidx4, align 4
  store i32 %11, i32* %minm, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32* %ind, align 4
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal %struct.Chunk* @NewChunk() {
entry:
  %t = alloca %struct.Chunk*, align 8
  %call = call i8* @malloc(i64 24)
  %0 = bitcast i8* %call to %struct.Chunk*
  store %struct.Chunk* %0, %struct.Chunk** %t, align 8
  %1 = load %struct.Chunk** %t, align 8
  ret %struct.Chunk* %1
}

; Function Attrs: nounwind uwtable
define internal i32 @AddInOrder(%struct.Chunk* %t) {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.Chunk*, align 8
  %current = alloca %struct.Chunk*, align 8
  %work = alloca i32, align 4
  store %struct.Chunk* %t, %struct.Chunk** %t.addr, align 8
  %0 = load %struct.Chunk** %t.addr, align 8
  %last = getelementptr inbounds %struct.Chunk* %0, i32 0, i32 1
  %1 = load i32* %last, align 4
  %sub = sub nsw i32 %1, 1
  %idxprom = sext i32 %sub to i64
  %2 = load double** @work_tree, align 8
  %arrayidx = getelementptr inbounds double* %2, i64 %idxprom
  %3 = load double* %arrayidx, align 8
  %conv = fptosi double %3 to i32
  store i32 %conv, i32* %work, align 4
  %4 = load %struct.Chunk** @chunks_head, align 8
  store %struct.Chunk* %4, %struct.Chunk** %current, align 8
  %5 = load %struct.Chunk** %current, align 8
  %tobool = icmp ne %struct.Chunk* %5, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.Chunk** %t.addr, align 8
  %next = getelementptr inbounds %struct.Chunk* %6, i32 0, i32 3
  store %struct.Chunk* null, %struct.Chunk** %next, align 8
  %7 = load %struct.Chunk** %t.addr, align 8
  store %struct.Chunk* %7, %struct.Chunk** @chunks_head, align 8
  br label %if.end.24

if.else:                                          ; preds = %entry
  %8 = load i32* %work, align 4
  %conv1 = sitofp i32 %8 to double
  %9 = load %struct.Chunk** %current, align 8
  %last2 = getelementptr inbounds %struct.Chunk* %9, i32 0, i32 1
  %10 = load i32* %last2, align 4
  %sub3 = sub nsw i32 %10, 1
  %idxprom4 = sext i32 %sub3 to i64
  %11 = load double** @work_tree, align 8
  %arrayidx5 = getelementptr inbounds double* %11, i64 %idxprom4
  %12 = load double* %arrayidx5, align 8
  %cmp = fcmp oge double %conv1, %12
  br i1 %cmp, label %if.then.7, label %if.else.9

if.then.7:                                        ; preds = %if.else
  %13 = load %struct.Chunk** @chunks_head, align 8
  %14 = load %struct.Chunk** %t.addr, align 8
  %next8 = getelementptr inbounds %struct.Chunk* %14, i32 0, i32 3
  store %struct.Chunk* %13, %struct.Chunk** %next8, align 8
  %15 = load %struct.Chunk** %t.addr, align 8
  store %struct.Chunk* %15, %struct.Chunk** @chunks_head, align 8
  br label %if.end

if.else.9:                                        ; preds = %if.else
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else.9
  %16 = load %struct.Chunk** %current, align 8
  %next10 = getelementptr inbounds %struct.Chunk* %16, i32 0, i32 3
  %17 = load %struct.Chunk** %next10, align 8
  %tobool11 = icmp ne %struct.Chunk* %17, null
  br i1 %tobool11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %18 = load i32* %work, align 4
  %conv12 = sitofp i32 %18 to double
  %19 = load %struct.Chunk** %current, align 8
  %next13 = getelementptr inbounds %struct.Chunk* %19, i32 0, i32 3
  %20 = load %struct.Chunk** %next13, align 8
  %last14 = getelementptr inbounds %struct.Chunk* %20, i32 0, i32 1
  %21 = load i32* %last14, align 4
  %sub15 = sub nsw i32 %21, 1
  %idxprom16 = sext i32 %sub15 to i64
  %22 = load double** @work_tree, align 8
  %arrayidx17 = getelementptr inbounds double* %22, i64 %idxprom16
  %23 = load double* %arrayidx17, align 8
  %cmp18 = fcmp olt double %conv12, %23
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %cmp18, %land.rhs ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %25 = load %struct.Chunk** %current, align 8
  %next20 = getelementptr inbounds %struct.Chunk* %25, i32 0, i32 3
  %26 = load %struct.Chunk** %next20, align 8
  store %struct.Chunk* %26, %struct.Chunk** %current, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %27 = load %struct.Chunk** %current, align 8
  %next21 = getelementptr inbounds %struct.Chunk* %27, i32 0, i32 3
  %28 = load %struct.Chunk** %next21, align 8
  %29 = load %struct.Chunk** %t.addr, align 8
  %next22 = getelementptr inbounds %struct.Chunk* %29, i32 0, i32 3
  store %struct.Chunk* %28, %struct.Chunk** %next22, align 8
  %30 = load %struct.Chunk** %t.addr, align 8
  %31 = load %struct.Chunk** %current, align 8
  %next23 = getelementptr inbounds %struct.Chunk* %31, i32 0, i32 3
  store %struct.Chunk* %30, %struct.Chunk** %next23, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then.7
  br label %if.end.24

if.end.24:                                        ; preds = %if.end, %if.then
  %32 = load %struct.Chunk** %t.addr, align 8
  %next25 = getelementptr inbounds %struct.Chunk* %32, i32 0, i32 3
  %33 = load %struct.Chunk** %next25, align 8
  %cmp26 = icmp eq %struct.Chunk* %33, null
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.24
  %34 = load %struct.Chunk** %t.addr, align 8
  store %struct.Chunk* %34, %struct.Chunk** @chunks_tail, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.end.24
  %35 = load i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal %struct.Chunk* @GetChunk() {
entry:
  %t = alloca %struct.Chunk*, align 8
  %0 = load %struct.Chunk** @chunks_head, align 8
  store %struct.Chunk* %0, %struct.Chunk** %t, align 8
  %1 = load %struct.Chunk** %t, align 8
  %tobool = icmp ne %struct.Chunk* %1, null
  br i1 %tobool, label %if.then, label %if.end.2

if.then:                                          ; preds = %entry
  %2 = load %struct.Chunk** %t, align 8
  %next = getelementptr inbounds %struct.Chunk* %2, i32 0, i32 3
  %3 = load %struct.Chunk** %next, align 8
  store %struct.Chunk* %3, %struct.Chunk** @chunks_head, align 8
  %4 = load %struct.Chunk** %t, align 8
  %5 = load %struct.Chunk** @chunks_tail, align 8
  %cmp = icmp eq %struct.Chunk* %4, %5
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store %struct.Chunk* null, %struct.Chunk** @chunks_tail, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  br label %if.end.2

if.end.2:                                         ; preds = %if.end, %entry
  %6 = load %struct.Chunk** %t, align 8
  ret %struct.Chunk* %6
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeTargetBlockSize(%struct.SMatrix* byval align 8 %M, i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %max_ht = alloca i32, align 4
  %total_ops = alloca double, align 8
  store i32 %P, i32* %P.addr, align 4
  store i32 0, i32* %max_ht, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %call = call i32 @FindMaxHeight(%struct.SMatrix* byval align 8 %M, i32 %0, i32 0, i32* %max_ht)
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %1 = load i32* %n1, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load double** @work_tree, align 8
  %arrayidx = getelementptr inbounds double* %2, i64 %idxprom
  %3 = load double* %arrayidx, align 8
  store double %3, double* %total_ops, align 8
  %4 = load double* %total_ops, align 8
  %5 = load i32* %max_ht, align 4
  %mul = mul nsw i32 3, %5
  %conv = sitofp i32 %mul to double
  %div = fdiv double %4, %conv
  %6 = load i32* %P.addr, align 4
  %conv2 = sitofp i32 %6 to double
  %div3 = fdiv double %div, %conv2
  %call4 = call double @sqrt(double %div3)
  store double %call4, double* @max_block_size, align 8
  %7 = load i32* %max_ht, align 4
  %8 = load double* %total_ops, align 8
  %9 = load double* %total_ops, align 8
  %10 = load i32* %max_ht, align 4
  %mul5 = mul nsw i32 3, %10
  %conv6 = sitofp i32 %mul5 to double
  %div7 = fdiv double %9, %conv6
  %11 = load double* @max_block_size, align 8
  %12 = load i32* %P.addr, align 4
  %call8 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.36, i32 0, i32 0), i32 %7, double %8, double %div7, double %11, i32 %12)
  %13 = load i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @FindMaxHeight(%struct.SMatrix* byval align 8 %L, i32 %root, i32 %height, i32* %maxm) {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %maxm.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32 %root, i32* %root.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32* %maxm, i32** %maxm.addr, align 8
  %0 = load i32* %height.addr, align 4
  %1 = load i32** %maxm.addr, align 8
  %2 = load i32* %1, align 4
  %cmp = icmp sgt i32 %0, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32* %height.addr, align 4
  %4 = load i32** %maxm.addr, align 8
  store i32 %3, i32* %4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %root.addr, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32** @firstchild, align 8
  %arrayidx = getelementptr inbounds i32* %6, i64 %idxprom
  %7 = load i32* %arrayidx, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32* %i, align 4
  %9 = load i32* %root.addr, align 4
  %add = add nsw i32 %9, 1
  %idxprom1 = sext i32 %add to i64
  %10 = load i32** @firstchild, align 8
  %arrayidx2 = getelementptr inbounds i32* %10, i64 %idxprom1
  %11 = load i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32* %i, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load i32** @child, align 8
  %arrayidx5 = getelementptr inbounds i32* %13, i64 %idxprom4
  %14 = load i32* %arrayidx5, align 4
  %15 = load i32* %height.addr, align 4
  %add6 = add nsw i32 %15, 1
  %16 = load i32** %maxm.addr, align 8
  %call = call i32 @FindMaxHeight(%struct.SMatrix* byval align 8 %L, i32 %14, i32 %add6, i32* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i32 @NoSegments(%struct.SMatrix* byval align 8 %M) {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %n = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv1, i32 888)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** @partition, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %3 = load i32* %n2, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** @node, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  %7 = load i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load i32** @partition, align 8
  %arrayidx5 = getelementptr inbounds i32* %8, i64 %idxprom4
  store i32 %6, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @CreatePermutation(i32 %n, i32* %node, i32* %PERM, i32 %permutation_method) {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %node.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %permutation_method.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %swap = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %node, i32** %node.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32 %permutation_method, i32* %permutation_method.addr, align 4
  %0 = load i32* %n.addr, align 4
  %1 = load i32* %n.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32** %PERM.addr, align 8
  %arrayidx = getelementptr inbounds i32* %2, i64 %idxprom
  store i32 %0, i32* %arrayidx, align 4
  %3 = load i32* %permutation_method.addr, align 4
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i32* %j, align 4
  %5 = load i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %j, align 4
  %7 = load i32* %j, align 4
  %idxprom2 = sext i32 %7 to i64
  %8 = load i32** %PERM.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %8, i64 %idxprom2
  store i32 %6, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %j, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %10 = load i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %L = alloca %struct.SMatrix, align 8
  %b = alloca double*, align 8
  %x = alloca double*, align 8
  %norm = alloca double, align 8
  %elapsed = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %assigned_ops = alloca i32*, align 8
  %num_nz = alloca i32, align 4
  %num_domain = alloca i32, align 4
  %num_alloc = alloca i32, align 4
  %ps = alloca i32, align 4
  %PERM2 = alloca i32*, align 8
  %start = alloca i32, align 4
  %mint = alloca double, align 8
  %maxt = alloca double, align 8
  %avgt = alloca double, align 8
  %tmp = alloca %struct.SMatrix, align 8
  %i125 = alloca i32, align 4
  %tot_domain_updates = alloca i32, align 4
  %tail_length = alloca i32, align 4
  %t = alloca i64, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call i64 @time(i64* null)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %start, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i32* %argc.addr, align 4
  %1 = load i8*** %argv.addr, align 8
  %call1 = call i32 (i32, i8**, i8*, ...) *bitcast (i32 (...)* @getopt to i32 (i32, i8**, i8*, ...)*)(i32 %0, i8** %1, i8* getelementptr inbounds ([12 x i8]* @.str.61, i32 0, i32 0))
  store i32 %call1, i32* %c, align 4
  %cmp = icmp ne i32 %call1, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %c, align 4
  switch i32 %2, label %sw.epilog [
    i32 66, label %sw.bb
    i32 67, label %sw.bb.4
    i32 112, label %sw.bb.7
    i32 115, label %sw.bb.9
    i32 116, label %sw.bb.10
    i32 104, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %while.body
  %3 = load i8** @optarg, align 8
  %call3 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %3)
  store i32 %call3, i32* @postpass_partition_size, align 4
  br label %sw.epilog

sw.bb.4:                                          ; preds = %while.body
  %4 = load i8** @optarg, align 8
  %call5 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %4)
  %conv6 = sitofp i32 %call5 to double
  store double %conv6, double* @CacheSize, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %while.body
  %5 = load i8** @optarg, align 8
  %call8 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %5)
  store i32 %call8, i32* @P, align 4
  br label %sw.epilog

sw.bb.9:                                          ; preds = %while.body
  store i32 1, i32* @do_stats, align 4
  br label %sw.epilog

sw.bb.10:                                         ; preds = %while.body
  store i32 1, i32* @do_test, align 4
  br label %sw.epilog

sw.bb.11:                                         ; preds = %while.body
  %call12 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.1.62, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.2.63, i32 0, i32 0))
  %call14 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([45 x i8]* @.str.3.64, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.4.65, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.5.66, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([55 x i8]* @.str.6.67, i32 0, i32 0))
  %call18 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.7.68, i32 0, i32 0))
  %call19 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.8.69, i32 0, i32 0))
  %call20 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([34 x i8]* @.str.9.70, i32 0, i32 0), i32 1, i32 32, i32 16384)
  call void @exit(i32 0)
  unreachable

sw.epilog:                                        ; preds = %sw.bb.10, %sw.bb.9, %sw.bb.7, %sw.bb.4, %sw.bb, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load double* @CacheSize, align 8
  %div = fdiv double %6, 8.000000e+00
  store double %div, double* @CS, align 8
  %7 = load double* @CS, align 8
  %call21 = call double @sqrt(double %7)
  store double %call21, double* @CS, align 8
  %8 = load double* @CS, align 8
  %add = fadd double %8, 5.000000e-01
  %call22 = call double @floor(double %add)
  %conv23 = fptosi double %call22 to i32
  store i32 %conv23, i32* @BS, align 4
  %call24 = call i8* @malloc(i64 12)
  %9 = bitcast i8* %call24 to %struct.gpid*
  store %struct.gpid* %9, %struct.gpid** @gp, align 8
  %10 = load %struct.gpid** @gp, align 8
  %pid = getelementptr inbounds %struct.gpid* %10, i32 0, i32 0
  store i32 0, i32* %pid, align 4
  %call25 = call i8* @malloc(i64 608)
  %11 = bitcast i8* %call25 to %struct.GlobalMemory*
  store %struct.GlobalMemory* %11, %struct.GlobalMemory** @Global, align 8
  %12 = load %struct.GlobalMemory** @Global, align 8
  %start26 = getelementptr inbounds %struct.GlobalMemory* %12, i32 0, i32 0
  %gsense = getelementptr inbounds %struct.barrier_t* %start26, i32 0, i32 0
  store volatile i32 1, i32* %gsense, align 4
  %13 = load %struct.GlobalMemory** @Global, align 8
  %start27 = getelementptr inbounds %struct.GlobalMemory* %13, i32 0, i32 0
  %count = getelementptr inbounds %struct.barrier_t* %start27, i32 0, i32 1
  store volatile i64 0, i64* %count, align 8
  %14 = load %struct.GlobalMemory** @Global, align 8
  %waitLock = getelementptr inbounds %struct.GlobalMemory* %14, i32 0, i32 1
  %call28 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %waitLock, %union.pthread_mutexattr_t* null)
  %15 = load %struct.GlobalMemory** @Global, align 8
  %memLock = getelementptr inbounds %struct.GlobalMemory* %15, i32 0, i32 2
  %call29 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %memLock, %union.pthread_mutexattr_t* null)
  %16 = load i32* @P, align 4
  %call30 = call i32 (i32, ...) *bitcast (i32 (i32)* @MallocInit to i32 (i32, ...)*)(i32 %16)
  store i32 0, i32* %i, align 4
  br label %while.cond.31

while.cond.31:                                    ; preds = %while.body.38, %while.end
  %17 = load i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %18 = load i32* %argc.addr, align 4
  %cmp32 = icmp slt i32 %inc, %18
  br i1 %cmp32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.31
  %19 = load i32* %i, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %20, i64 %idxprom
  %21 = load i8** %arrayidx, align 8
  %arrayidx34 = getelementptr inbounds i8* %21, i64 0
  %22 = load i8* %arrayidx34, align 1
  %conv35 = sext i8 %22 to i32
  %cmp36 = icmp eq i32 %conv35, 45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.31
  %23 = phi i1 [ false, %while.cond.31 ], [ %cmp36, %land.rhs ]
  br i1 %23, label %while.body.38, label %while.end.39

while.body.38:                                    ; preds = %land.end
  br label %while.cond.31

while.end.39:                                     ; preds = %land.end
  %24 = load i32* %i, align 4
  %idxprom40 = sext i32 %24 to i64
  %25 = load i8*** %argv.addr, align 8
  %arrayidx41 = getelementptr inbounds i8** %25, i64 %idxprom40
  %26 = load i8** %arrayidx41, align 8
  call void (%struct.SMatrix*, i8*, i8*, ...) *bitcast (void (%struct.SMatrix*, i8*, i8*)* @ReadSparse to void (%struct.SMatrix*, i8*, i8*, ...)*)(%struct.SMatrix* sret %tmp, i8* %26, i8* getelementptr inbounds ([80 x i8]* @probname, i32 0, i32 0))
  %27 = bitcast %struct.SMatrix* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.SMatrix* @M to i8*), i8* %27, i64 40, i32 8, i1 false)
  store i32 21, i32* @distribute, align 4
  %call42 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  %call43 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.11.72, i32 0, i32 0))
  %call44 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.12.73, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8]* @probname, i32 0, i32 0))
  %28 = load i32* @P, align 4
  %call45 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([20 x i8]* @.str.13.74, i32 0, i32 0), i32 %28)
  %29 = load i32* @postpass_partition_size, align 4
  %call46 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([34 x i8]* @.str.14, i32 0, i32 0), i32 %29)
  %30 = load double* @CacheSize, align 8
  %call47 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.15, i32 0, i32 0), double %30)
  %call48 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  %call49 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  %call50 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.16.75, i32 0, i32 0))
  %call51 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.17, i32 0, i32 0))
  %call52 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.18, i32 0, i32 0))
  %call53 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([12 x i8]* @.str.19, i32 0, i32 0))
  %call54 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.20, i32 0, i32 0))
  %call55 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([14 x i8]* @.str.21, i32 0, i32 0))
  %call56 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.22, i32 0, i32 0))
  %31 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add57 = add nsw i32 %31, 1
  %conv58 = sext i32 %add57 to i64
  %mul = mul i64 %conv58, 4
  %conv59 = trunc i64 %mul to i32
  %call60 = call i8* @MyMalloc(i32 %conv59, i32 888)
  %32 = bitcast i8* %call60 to i32*
  store i32* %32, i32** @PERM, align 8
  %33 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add61 = add nsw i32 %33, 1
  %conv62 = sext i32 %add61 to i64
  %mul63 = mul i64 %conv62, 4
  %conv64 = trunc i64 %mul63 to i32
  %call65 = call i8* @MyMalloc(i32 %conv64, i32 888)
  %34 = bitcast i8* %call65 to i32*
  store i32* %34, i32** @INVP, align 8
  %35 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %36 = load i32** @PERM, align 8
  %call66 = call i32 (i32, i32*, i32*, i32, ...) *bitcast (i32 (i32, i32*, i32*, i32)* @CreatePermutation to i32 (i32, i32*, i32*, i32, ...)*)(i32 %35, i32* null, i32* %36, i32 1)
  %37 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %38 = load i32** @PERM, align 8
  %39 = load i32** @INVP, align 8
  %call67 = call i32 (i32, i32*, i32*, ...) *bitcast (i32 (i32, i32*, i32*)* @InvertPerm to i32 (i32, i32*, i32*, ...)*)(i32 %37, i32* %38, i32* %39)
  %40 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add68 = add nsw i32 %40, 1
  %conv69 = sext i32 %add68 to i64
  %mul70 = mul i64 %conv69, 4
  %conv71 = trunc i64 %mul70 to i32
  %call72 = call i8* @MyMalloc(i32 %conv71, i32 888)
  %41 = bitcast i8* %call72 to i32*
  store i32* %41, i32** @T, align 8
  %42 = load i32** @T, align 8
  %43 = load i32** @PERM, align 8
  %44 = load i32** @INVP, align 8
  %call73 = call i32 (%struct.SMatrix*, i32*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, i32*, i32*)* @EliminationTreeFromA to i32 (%struct.SMatrix*, i32*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %42, i32* %43, i32* %44)
  %45 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add74 = add nsw i32 %45, 2
  %conv75 = sext i32 %add74 to i64
  %mul76 = mul i64 %conv75, 4
  %conv77 = trunc i64 %mul76 to i32
  %call78 = call i8* @MyMalloc(i32 %conv77, i32 888)
  %46 = bitcast i8* %call78 to i32*
  store i32* %46, i32** @firstchild, align 8
  %47 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add79 = add nsw i32 %47, 1
  %conv80 = sext i32 %add79 to i64
  %mul81 = mul i64 %conv80, 4
  %conv82 = trunc i64 %mul81 to i32
  %call83 = call i8* @MyMalloc(i32 %conv82, i32 888)
  %48 = bitcast i8* %call83 to i32*
  store i32* %48, i32** @child, align 8
  %49 = load i32** @T, align 8
  %50 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %51 = load i32** @firstchild, align 8
  %52 = load i32** @child, align 8
  %call84 = call i32 (i32*, i32, i32*, i32*, ...) *bitcast (i32 (i32*, i32, i32*, i32*)* @ParentToChild to i32 (i32*, i32, i32*, i32*, ...)*)(i32* %49, i32 %50, i32* %51, i32* %52)
  %53 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add85 = add nsw i32 %53, 1
  %conv86 = sext i32 %add85 to i64
  %mul87 = mul i64 %conv86, 4
  %conv88 = trunc i64 %mul87 to i32
  %call89 = call i8* @MyMalloc(i32 %conv88, i32 888)
  %54 = bitcast i8* %call89 to i32*
  store i32* %54, i32** @nz, align 8
  %55 = load i32** @T, align 8
  %56 = load i32** @nz, align 8
  %57 = load i32** @PERM, align 8
  %58 = load i32** @INVP, align 8
  %call90 = call i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*)* @ComputeNZ to i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %55, i32* %56, i32* %57, i32* %58)
  %59 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add91 = add nsw i32 %59, 1
  %conv92 = sext i32 %add91 to i64
  %mul93 = mul i64 %conv92, 8
  %conv94 = trunc i64 %mul93 to i32
  %call95 = call i8* @MyMalloc(i32 %conv94, i32 888)
  %60 = bitcast i8* %call95 to double*
  store double* %60, double** @work_tree, align 8
  %61 = load i32** @nz, align 8
  %62 = load double** @work_tree, align 8
  %call96 = call i32 (%struct.SMatrix*, i32*, double*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, double*)* @ComputeWorkTree to i32 (%struct.SMatrix*, i32*, double*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %61, double* %62)
  %63 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add97 = add nsw i32 %63, 1
  %conv98 = sext i32 %add97 to i64
  %mul99 = mul i64 %conv98, 4
  %conv100 = trunc i64 %mul99 to i32
  %call101 = call i8* @MyMalloc(i32 %conv100, i32 888)
  %64 = bitcast i8* %call101 to i32*
  store i32* %64, i32** @node, align 8
  %65 = load i32** @T, align 8
  %66 = load i32** @nz, align 8
  %67 = load i32** @node, align 8
  %68 = load i32** @PERM, align 8
  %69 = load i32** @INVP, align 8
  %call102 = call i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, i32*)* @FindSupernodes to i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %65, i32* %66, i32* %67, i32* %68, i32* %69)
  %70 = load i32** @T, align 8
  %71 = load i32** @nz, align 8
  %72 = load i32** @node, align 8
  %call103 = call i32 (i32, %struct.SMatrix*, i32*, i32*, i32*, i32*, i32, ...) *bitcast (i32 (i32, %struct.SMatrix*, i32*, i32*, i32*, i32*, i32)* @Amalgamate2 to i32 (i32, %struct.SMatrix*, i32*, i32*, i32*, i32*, i32, ...)*)(i32 1, %struct.SMatrix* byval align 8 @M, i32* %70, i32* %71, i32* %72, i32* null, i32 1)
  %73 = load i32* @P, align 4
  %conv104 = sext i32 %73 to i64
  %mul105 = mul i64 %conv104, 4
  %call106 = call i8* @malloc(i64 %mul105)
  %74 = bitcast i8* %call106 to i32*
  store i32* %74, i32** %assigned_ops, align 8
  %75 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %conv107 = sext i32 %75 to i64
  %mul108 = mul i64 %conv107, 4
  %conv109 = trunc i64 %mul108 to i32
  %call110 = call i8* @MyMalloc(i32 %conv109, i32 888)
  %76 = bitcast i8* %call110 to i32*
  store i32* %76, i32** @domain, align 8
  %77 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %conv111 = sext i32 %77 to i64
  %mul112 = mul i64 %conv111, 4
  %conv113 = trunc i64 %mul112 to i32
  %call114 = call i8* @MyMalloc(i32 %conv113, i32 888)
  %78 = bitcast i8* %call114 to i32*
  store i32* %78, i32** @domains, align 8
  %79 = load i32* @P, align 4
  %add115 = add nsw i32 %79, 1
  %conv116 = sext i32 %add115 to i64
  %mul117 = mul i64 %conv116, 4
  %conv118 = trunc i64 %mul117 to i32
  %call119 = call i8* @MyMalloc(i32 %conv118, i32 888)
  %80 = bitcast i8* %call119 to i32*
  store i32* %80, i32** @proc_domains, align 8
  %call120 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.23, i32 0, i32 0))
  %81 = load %struct._IO_FILE** @stdout, align 8
  %call121 = call i32 @fflush(%struct._IO_FILE* %81)
  %82 = load i32* @P, align 4
  %83 = load i32** @T, align 8
  %84 = load i32** %assigned_ops, align 8
  %85 = load i32** @domain, align 8
  %86 = load i32** @domains, align 8
  %87 = load i32** @proc_domains, align 8
  %88 = load i32* @distribute, align 4
  %call122 = call i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32, ...) *bitcast (i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32)* @Partition to i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32, ...)*)(%struct.SMatrix* byval align 8 @M, i32 %82, i32* %83, i32* %84, i32* %85, i32* %86, i32* %87, i32 %88)
  %89 = load i32** %assigned_ops, align 8
  %call123 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %89)
  store i32 0, i32* %tot_domain_updates, align 4
  store i32 0, i32* %i125, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end.39
  %90 = load i32* %i125, align 4
  %91 = load i32* @P, align 4
  %idxprom128 = sext i32 %91 to i64
  %92 = load i32** @proc_domains, align 8
  %arrayidx129 = getelementptr inbounds i32* %92, i64 %idxprom128
  %93 = load i32* %arrayidx129, align 4
  %cmp130 = icmp slt i32 %90, %93
  br i1 %cmp130, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %94 = load i32* %i125, align 4
  %idxprom132 = sext i32 %94 to i64
  %95 = load i32** @domains, align 8
  %arrayidx133 = getelementptr inbounds i32* %95, i64 %idxprom132
  %96 = load i32* %arrayidx133, align 4
  %idxprom134 = sext i32 %96 to i64
  %97 = load i32** @nz, align 8
  %arrayidx135 = getelementptr inbounds i32* %97, i64 %idxprom134
  %98 = load i32* %arrayidx135, align 4
  %sub = sub nsw i32 %98, 1
  store i32 %sub, i32* %tail_length, align 4
  %99 = load i32* %tail_length, align 4
  %100 = load i32* %tail_length, align 4
  %add136 = add nsw i32 %100, 1
  %mul137 = mul nsw i32 %99, %add136
  %div138 = sdiv i32 %mul137, 2
  %101 = load i32* %tot_domain_updates, align 4
  %add139 = add nsw i32 %101, %div138
  store i32 %add139, i32* %tot_domain_updates, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %102 = load i32* %i125, align 4
  %inc140 = add nsw i32 %102, 1
  store i32 %inc140, i32* %i125, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %103 = load i32* %tot_domain_updates, align 4
  %call141 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.24, i32 0, i32 0), i32 %103)
  store i32 0, i32* %num_domain, align 4
  store i32 0, i32* %num_nz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.142

for.cond.142:                                     ; preds = %for.inc.154, %for.end
  %104 = load i32* %i, align 4
  %105 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %cmp143 = icmp slt i32 %104, %105
  br i1 %cmp143, label %for.body.145, label %for.end.156

for.body.145:                                     ; preds = %for.cond.142
  %106 = load i32* %i, align 4
  %idxprom146 = sext i32 %106 to i64
  %107 = load i32** @nz, align 8
  %arrayidx147 = getelementptr inbounds i32* %107, i64 %idxprom146
  %108 = load i32* %arrayidx147, align 4
  %109 = load i32* %num_nz, align 4
  %add148 = add nsw i32 %109, %108
  store i32 %add148, i32* %num_nz, align 4
  %110 = load i32* %i, align 4
  %idxprom149 = sext i32 %110 to i64
  %111 = load i32** @domain, align 8
  %arrayidx150 = getelementptr inbounds i32* %111, i64 %idxprom149
  %112 = load i32* %arrayidx150, align 4
  %tobool = icmp ne i32 %112, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.145
  %113 = load i32* %i, align 4
  %idxprom151 = sext i32 %113 to i64
  %114 = load i32** @nz, align 8
  %arrayidx152 = getelementptr inbounds i32* %114, i64 %idxprom151
  %115 = load i32* %arrayidx152, align 4
  %116 = load i32* %num_domain, align 4
  %add153 = add nsw i32 %116, %115
  store i32 %add153, i32* %num_domain, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.145
  br label %for.inc.154

for.inc.154:                                      ; preds = %if.end
  %117 = load i32* %i, align 4
  %inc155 = add nsw i32 %117, 1
  store i32 %inc155, i32* %i, align 4
  br label %for.cond.142

for.end.156:                                      ; preds = %for.cond.142
  %118 = load i32* @P, align 4
  %call157 = call i32 (%struct.SMatrix*, i32, ...) *bitcast (i32 (%struct.SMatrix*, i32)* @ComputeTargetBlockSize to i32 (%struct.SMatrix*, i32, ...)*)(%struct.SMatrix* byval align 8 @M, i32 %118)
  %119 = load i32* @target_partition_size, align 4
  %120 = load i32* @postpass_partition_size, align 4
  %call158 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([44 x i8]* @.str.25, i32 0, i32 0), i32 %119, i32 %120)
  %call159 = call i32 (%struct.SMatrix*, ...) *bitcast (i32 (%struct.SMatrix*)* @NoSegments to i32 (%struct.SMatrix*, ...)*)(%struct.SMatrix* byval align 8 @M)
  %121 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %add160 = add nsw i32 %121, 1
  %conv161 = sext i32 %add160 to i64
  %mul162 = mul i64 %conv161, 4
  %call163 = call i8* @malloc(i64 %mul162)
  %122 = bitcast i8* %call163 to i32*
  store i32* %122, i32** %PERM2, align 8
  %123 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %124 = load i32** @node, align 8
  %125 = load i32** %PERM2, align 8
  %126 = load i32* @permutation_method, align 4
  %call164 = call i32 (i32, i32*, i32*, i32, ...) *bitcast (i32 (i32, i32*, i32*, i32)* @CreatePermutation to i32 (i32, i32*, i32*, i32, ...)*)(i32 %123, i32* %124, i32* %125, i32 %126)
  %127 = load i32** @PERM, align 8
  %128 = load i32** %PERM2, align 8
  %129 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %call165 = call i32 @ComposePerm(i32* %127, i32* %128, i32 %129)
  %130 = load i32** %PERM2, align 8
  %call166 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %130)
  %131 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %132 = load i32** @PERM, align 8
  %133 = load i32** @INVP, align 8
  %call167 = call i32 (i32, i32*, i32*, ...) *bitcast (i32 (i32, i32*, i32*)* @InvertPerm to i32 (i32, i32*, i32*, ...)*)(i32 %131, i32* %132, i32* %133)
  %call168 = call double* (%struct.SMatrix*, ...) *bitcast (double* (%struct.SMatrix*)* @CreateVector to double* (%struct.SMatrix*, ...)*)(%struct.SMatrix* byval align 8 @M)
  store double* %call168, double** %b, align 8
  %134 = load i32* @postpass_partition_size, align 4
  store i32 %134, i32* %ps, align 4
  %135 = load i32* %num_domain, align 4
  %136 = load i32* %num_nz, align 4
  %137 = load i32* %num_domain, align 4
  %sub169 = sub nsw i32 %136, %137
  %mul170 = mul nsw i32 %sub169, 10
  %138 = load i32* %ps, align 4
  %div171 = sdiv i32 %mul170, %138
  %139 = load i32* %ps, align 4
  %div172 = sdiv i32 %div171, %139
  %add173 = add nsw i32 %135, %div172
  store i32 %add173, i32* %num_alloc, align 4
  %140 = load i32* %num_alloc, align 4
  %141 = load i32** @T, align 8
  %142 = load i32** @firstchild, align 8
  %143 = load i32** @child, align 8
  %144 = load i32** @PERM, align 8
  %145 = load i32** @INVP, align 8
  %146 = load i32** @domain, align 8
  %147 = load i32** @partition, align 8
  %call174 = call i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32*)* @CreateBlockedMatrix2 to i32 (%struct.SMatrix*, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32 %140, i32* %141, i32* %142, i32* %143, i32* %144, i32* %145, i32* %146, i32* %147)
  %148 = load i32** @firstchild, align 8
  %149 = load i32** @child, align 8
  %150 = load i32** @PERM, align 8
  %151 = load i32** @INVP, align 8
  %call175 = call i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*)* @FillInStructure to i32 (%struct.SMatrix*, i32*, i32*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %148, i32* %149, i32* %150, i32* %151)
  %152 = load i32* @distribute, align 4
  %call176 = call i32 (i32, ...) *bitcast (i32 (i32)* @AssignBlocksNow to i32 (i32, ...)*)(i32 %152)
  %call177 = call i32 (...) *bitcast (i32 ()* @AllocateNZ to i32 (...)*)()
  %153 = load i32** @PERM, align 8
  %154 = load i32** @INVP, align 8
  %call178 = call i32 (%struct.SMatrix*, i32*, i32*, ...) *bitcast (i32 (%struct.SMatrix*, i32*, i32*)* @FillInNZ to i32 (%struct.SMatrix*, i32*, i32*, ...)*)(%struct.SMatrix* byval align 8 @M, i32* %153, i32* %154)
  %call179 = call i32 (%struct.SMatrix*, ...) *bitcast (i32 (%struct.SMatrix*)* @FreeMatrix to i32 (%struct.SMatrix*, ...)*)(%struct.SMatrix* byval align 8 @M)
  %155 = load i32* @P, align 4
  %call180 = call i32 (i32, ...) *bitcast (i32 (i32)* @InitTaskQueues to i32 (i32, ...)*)(i32 %155)
  %call181 = call i32 (i32, ...) *bitcast (i32 ()* @PreAllocate1FO to i32 (i32, ...)*)(i32 0)
  %call182 = call i32 (...) *bitcast (i32 ()* @ComputeRemainingFO to i32 (...)*)()
  %call183 = call i32 (...) *bitcast (i32 ()* @ComputeReceivedFO to i32 (...)*)()
  store i32 1, i32* %i, align 4
  br label %for.cond.184

for.cond.184:                                     ; preds = %for.inc.190, %for.end.156
  %156 = load i32* %i, align 4
  %157 = load i32* @P, align 4
  %cmp185 = icmp slt i32 %156, %157
  br i1 %cmp185, label %for.body.187, label %for.end.192

for.body.187:                                     ; preds = %for.cond.184
  %call189 = call i32 @pthread_create(i64* %t, %union.pthread_attr_t* null, i8* (i8*)* bitcast (void ()* @Go to i8* (i8*)*), i8* null)
  br label %for.inc.190

for.inc.190:                                      ; preds = %for.body.187
  %158 = load i32* %i, align 4
  %inc191 = add nsw i32 %158, 1
  store i32 %inc191, i32* %i, align 4
  br label %for.cond.184

for.end.192:                                      ; preds = %for.cond.184
  call void @Go()
  %159 = load i32* getelementptr inbounds (%struct.SMatrix* @M, i32 0, i32 0), align 4
  %idxprom193 = sext i32 %159 to i64
  %160 = load double** @work_tree, align 8
  %arrayidx194 = getelementptr inbounds double* %160, i64 %idxprom193
  %161 = load double* %arrayidx194, align 8
  %call195 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.26, i32 0, i32 0), double %161)
  %call196 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  %call197 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.27, i32 0, i32 0))
  %call198 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.28, i32 0, i32 0))
  %call199 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.29, i32 0, i32 0))
  %162 = load %struct.GlobalMemory** @Global, align 8
  %runtime = getelementptr inbounds %struct.GlobalMemory* %162, i32 0, i32 3
  %arrayidx200 = getelementptr inbounds [128 x i32]* %runtime, i32 0, i64 0
  %163 = load i32* %arrayidx200, align 4
  %call201 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.30, i32 0, i32 0), i32 %163)
  %164 = load i32* @do_stats, align 4
  %tobool202 = icmp ne i32 %164, 0
  br i1 %tobool202, label %if.then.203, label %if.end.260

if.then.203:                                      ; preds = %for.end.192
  %165 = load %struct.GlobalMemory** @Global, align 8
  %runtime204 = getelementptr inbounds %struct.GlobalMemory* %165, i32 0, i32 3
  %arrayidx205 = getelementptr inbounds [128 x i32]* %runtime204, i32 0, i64 0
  %166 = load i32* %arrayidx205, align 4
  %conv206 = uitofp i32 %166 to double
  store double %conv206, double* %mint, align 8
  store double %conv206, double* %avgt, align 8
  store double %conv206, double* %maxt, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond.207

for.cond.207:                                     ; preds = %for.inc.240, %if.then.203
  %167 = load i32* %i, align 4
  %168 = load i32* @P, align 4
  %cmp208 = icmp slt i32 %167, %168
  br i1 %cmp208, label %for.body.210, label %for.end.242

for.body.210:                                     ; preds = %for.cond.207
  %169 = load i32* %i, align 4
  %idxprom211 = sext i32 %169 to i64
  %170 = load %struct.GlobalMemory** @Global, align 8
  %runtime212 = getelementptr inbounds %struct.GlobalMemory* %170, i32 0, i32 3
  %arrayidx213 = getelementptr inbounds [128 x i32]* %runtime212, i32 0, i64 %idxprom211
  %171 = load i32* %arrayidx213, align 4
  %conv214 = uitofp i32 %171 to double
  %172 = load double* %maxt, align 8
  %cmp215 = fcmp ogt double %conv214, %172
  br i1 %cmp215, label %if.then.217, label %if.end.222

if.then.217:                                      ; preds = %for.body.210
  %173 = load i32* %i, align 4
  %idxprom218 = sext i32 %173 to i64
  %174 = load %struct.GlobalMemory** @Global, align 8
  %runtime219 = getelementptr inbounds %struct.GlobalMemory* %174, i32 0, i32 3
  %arrayidx220 = getelementptr inbounds [128 x i32]* %runtime219, i32 0, i64 %idxprom218
  %175 = load i32* %arrayidx220, align 4
  %conv221 = uitofp i32 %175 to double
  store double %conv221, double* %maxt, align 8
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.217, %for.body.210
  %176 = load i32* %i, align 4
  %idxprom223 = sext i32 %176 to i64
  %177 = load %struct.GlobalMemory** @Global, align 8
  %runtime224 = getelementptr inbounds %struct.GlobalMemory* %177, i32 0, i32 3
  %arrayidx225 = getelementptr inbounds [128 x i32]* %runtime224, i32 0, i64 %idxprom223
  %178 = load i32* %arrayidx225, align 4
  %conv226 = uitofp i32 %178 to double
  %179 = load double* %mint, align 8
  %cmp227 = fcmp olt double %conv226, %179
  br i1 %cmp227, label %if.then.229, label %if.end.234

if.then.229:                                      ; preds = %if.end.222
  %180 = load i32* %i, align 4
  %idxprom230 = sext i32 %180 to i64
  %181 = load %struct.GlobalMemory** @Global, align 8
  %runtime231 = getelementptr inbounds %struct.GlobalMemory* %181, i32 0, i32 3
  %arrayidx232 = getelementptr inbounds [128 x i32]* %runtime231, i32 0, i64 %idxprom230
  %182 = load i32* %arrayidx232, align 4
  %conv233 = uitofp i32 %182 to double
  store double %conv233, double* %mint, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.229, %if.end.222
  %183 = load i32* %i, align 4
  %idxprom235 = sext i32 %183 to i64
  %184 = load %struct.GlobalMemory** @Global, align 8
  %runtime236 = getelementptr inbounds %struct.GlobalMemory* %184, i32 0, i32 3
  %arrayidx237 = getelementptr inbounds [128 x i32]* %runtime236, i32 0, i64 %idxprom235
  %185 = load i32* %arrayidx237, align 4
  %conv238 = uitofp i32 %185 to double
  %186 = load double* %avgt, align 8
  %add239 = fadd double %186, %conv238
  store double %add239, double* %avgt, align 8
  br label %for.inc.240

for.inc.240:                                      ; preds = %if.end.234
  %187 = load i32* %i, align 4
  %inc241 = add nsw i32 %187, 1
  store i32 %inc241, i32* %i, align 4
  br label %for.cond.207

for.end.242:                                      ; preds = %for.cond.207
  %188 = load double* %avgt, align 8
  %189 = load i32* @P, align 4
  %conv243 = sitofp i32 %189 to double
  %div244 = fdiv double %188, %conv243
  store double %div244, double* %avgt, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond.245

for.cond.245:                                     ; preds = %for.inc.253, %for.end.242
  %190 = load i32* %i, align 4
  %191 = load i32* @P, align 4
  %cmp246 = icmp slt i32 %190, %191
  br i1 %cmp246, label %for.body.248, label %for.end.255

for.body.248:                                     ; preds = %for.cond.245
  %192 = load i32* %i, align 4
  %193 = load i32* %i, align 4
  %idxprom249 = sext i32 %193 to i64
  %194 = load %struct.GlobalMemory** @Global, align 8
  %runtime250 = getelementptr inbounds %struct.GlobalMemory* %194, i32 0, i32 3
  %arrayidx251 = getelementptr inbounds [128 x i32]* %runtime250, i32 0, i64 %idxprom249
  %195 = load i32* %arrayidx251, align 4
  %call252 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.31, i32 0, i32 0), i32 %192, i32 %195)
  br label %for.inc.253

for.inc.253:                                      ; preds = %for.body.248
  %196 = load i32* %i, align 4
  %inc254 = add nsw i32 %196, 1
  store i32 %inc254, i32* %i, align 4
  br label %for.cond.245

for.end.255:                                      ; preds = %for.cond.245
  %197 = load double* %avgt, align 8
  %call256 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.32.76, i32 0, i32 0), double %197)
  %198 = load double* %mint, align 8
  %call257 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.33.77, i32 0, i32 0), double %198)
  %199 = load double* %maxt, align 8
  %call258 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.34, i32 0, i32 0), double %199)
  %call259 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  br label %if.end.260

if.end.260:                                       ; preds = %for.end.255, %for.end.192
  %call261 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.35, i32 0, i32 0))
  %200 = load i32* %start, align 4
  %call262 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.36.78, i32 0, i32 0), i32 %200)
  %201 = load %struct.gpid** @gp, align 8
  %initdone = getelementptr inbounds %struct.gpid* %201, i32 0, i32 1
  %202 = load i32* %initdone, align 4
  %call263 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.37, i32 0, i32 0), i32 %202)
  %203 = load %struct.gpid** @gp, align 8
  %finish = getelementptr inbounds %struct.gpid* %203, i32 0, i32 2
  %204 = load i32* %finish, align 4
  %call264 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.38, i32 0, i32 0), i32 %204)
  %205 = load %struct.gpid** @gp, align 8
  %finish265 = getelementptr inbounds %struct.gpid* %205, i32 0, i32 2
  %206 = load i32* %finish265, align 4
  %207 = load i32* %start, align 4
  %sub266 = sub i32 %206, %207
  %call267 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.39, i32 0, i32 0), i32 %sub266)
  %208 = load %struct.gpid** @gp, align 8
  %finish268 = getelementptr inbounds %struct.gpid* %208, i32 0, i32 2
  %209 = load i32* %finish268, align 4
  %210 = load %struct.gpid** @gp, align 8
  %initdone269 = getelementptr inbounds %struct.gpid* %210, i32 0, i32 1
  %211 = load i32* %initdone269, align 4
  %sub270 = sub i32 %209, %211
  %call271 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.40, i32 0, i32 0), i32 %sub270)
  %call272 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.71, i32 0, i32 0))
  %212 = load i32* @do_test, align 4
  %tobool273 = icmp ne i32 %212, 0
  br i1 %tobool273, label %if.then.274, label %if.end.284

if.then.274:                                      ; preds = %if.end.260
  %call275 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([46 x i8]* @.str.41, i32 0, i32 0))
  %213 = load double** %b, align 8
  %214 = load i32** @PERM, align 8
  %215 = load i32** @INVP, align 8
  %call276 = call double* (%struct.BMatrix*, double*, i32*, i32*, ...) *bitcast (double* (%struct.BMatrix*, double*, i32*, i32*)* @TriBSolve to double* (%struct.BMatrix*, double*, i32*, i32*, ...)*)(%struct.BMatrix* byval align 8 @LB, double* %213, i32* %214, i32* %215)
  store double* %call276, double** %x, align 8
  %216 = load double** %x, align 8
  %217 = load i32* getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 0), align 4
  %call277 = call double (double*, i32, ...) *bitcast (double (double*, i32)* @ComputeNorm to double (double*, i32, ...)*)(double* %216, i32 %217)
  store double %call277, double* %norm, align 8
  %218 = load double* %norm, align 8
  %cmp278 = fcmp oge double %218, 1.000000e-04
  br i1 %cmp278, label %if.then.280, label %if.else

if.then.280:                                      ; preds = %if.then.274
  %219 = load double* %norm, align 8
  %call281 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.42, i32 0, i32 0), double %219)
  br label %if.end.283

if.else:                                          ; preds = %if.then.274
  %call282 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([8 x i8]* @.str.43, i32 0, i32 0))
  br label %if.end.283

if.end.283:                                       ; preds = %if.else, %if.then.280
  br label %if.end.284

if.end.284:                                       ; preds = %if.end.283, %if.end.260
  call void @exit(i32 0)
  unreachable

return:                                           ; No predecessors!
  %220 = load i32* %retval
  ret i32 %220
}

; Function Attrs: nounwind
declare i64 @time(i64*)

declare i32 @getopt(...)

declare i32 @atoi(...)

; Function Attrs: nounwind readnone
declare double @floor(double)

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture , i64, i32, i1)

declare i32 @fflush(%struct._IO_FILE*)

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*)

; Function Attrs: nounwind uwtable
define internal i32 @atomic_cmpxchg(i32 %oldcount, i32 %newcount) {
entry:
  %oldcount.addr = alloca i32, align 4
  %newcount.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  %updatedcount = alloca i32, align 4
  store i32 %oldcount, i32* %oldcount.addr, align 4
  store i32 %newcount, i32* %newcount.addr, align 4
  %0 = load %struct.GlobalMemory** @Global, align 8
  %start = getelementptr inbounds %struct.GlobalMemory* %0, i32 0, i32 0
  %count = getelementptr inbounds %struct.barrier_t* %start, i32 0, i32 1
  %1 = load volatile i64* %count, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %temp, align 4
  %2 = load i32* %oldcount.addr, align 4
  %3 = load i32* %temp, align 4
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32* %newcount.addr, align 4
  %conv2 = sext i32 %4 to i64
  %5 = load %struct.GlobalMemory** @Global, align 8
  %start3 = getelementptr inbounds %struct.GlobalMemory* %5, i32 0, i32 0
  %count4 = getelementptr inbounds %struct.barrier_t* %start3, i32 0, i32 1
  store volatile i64 %conv2, i64* %count4, align 8
  %6 = load i32* %oldcount.addr, align 4
  store i32 %6, i32* %updatedcount, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.GlobalMemory** @Global, align 8
  %start5 = getelementptr inbounds %struct.GlobalMemory* %7, i32 0, i32 0
  %count6 = getelementptr inbounds %struct.barrier_t* %start5, i32 0, i32 1
  %8 = load volatile i64* %count6, align 8
  %conv7 = trunc i64 %8 to i32
  store i32 %conv7, i32* %updatedcount, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32* %updatedcount, align 4
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal void @Go() {
entry:
  %iter = alloca i32, align 4
  %MyNum = alloca i32, align 4
  %lc = alloca %struct.LocalCopies*, align 8
  %lsense = alloca i32, align 4
  %oldcount = alloca i32, align 4
  %newcount = alloca i32, align 4
  %updatedcount = alloca i32, align 4
  %0 = load %struct.GlobalMemory** @Global, align 8
  %waitLock = getelementptr inbounds %struct.GlobalMemory* %0, i32 0, i32 1
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %waitLock)
  %1 = load %struct.gpid** @gp, align 8
  %pid = getelementptr inbounds %struct.gpid* %1, i32 0, i32 0
  %2 = load i32* %pid, align 4
  store i32 %2, i32* %MyNum, align 4
  %3 = load %struct.gpid** @gp, align 8
  %pid1 = getelementptr inbounds %struct.gpid* %3, i32 0, i32 0
  %4 = load i32* %pid1, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %pid1, align 4
  %5 = load %struct.GlobalMemory** @Global, align 8
  %waitLock2 = getelementptr inbounds %struct.GlobalMemory* %5, i32 0, i32 1
  %call3 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %waitLock2)
  %call4 = call i8* @malloc(i64 8296)
  %6 = bitcast i8* %call4 to %struct.LocalCopies*
  store %struct.LocalCopies* %6, %struct.LocalCopies** %lc, align 8
  %7 = load %struct.LocalCopies** %lc, align 8
  %freeUpdate = getelementptr inbounds %struct.LocalCopies* %7, i32 0, i32 7
  store %struct.Update* null, %struct.Update** %freeUpdate, align 8
  %8 = load %struct.LocalCopies** %lc, align 8
  %freeTask = getelementptr inbounds %struct.LocalCopies* %8, i32 0, i32 8
  store %struct.Task* null, %struct.Task** %freeTask, align 8
  %9 = load %struct.LocalCopies** %lc, align 8
  %runtime = getelementptr inbounds %struct.LocalCopies* %9, i32 0, i32 15
  store i32 0, i32* %runtime, align 4
  %10 = load i32* %MyNum, align 4
  %11 = load %struct.LocalCopies** %lc, align 8
  %call5 = call i32 @PreAllocateFO(i32 %10, %struct.LocalCopies* %11)
  %12 = load i32* %MyNum, align 4
  %13 = load %struct.LocalCopies** %lc, align 8
  %call6 = call i32 @PreProcessFO(i32 %12, %struct.LocalCopies* %13)
  %14 = load %struct.GlobalMemory** @Global, align 8
  %start = getelementptr inbounds %struct.GlobalMemory* %14, i32 0, i32 0
  %gsense = getelementptr inbounds %struct.barrier_t* %start, i32 0, i32 0
  %15 = load volatile i32* %gsense, align 4
  store i32 %15, i32* %lsense, align 4
  br label %while.body

while.body:                                       ; preds = %if.end.22, %entry
  %16 = load %struct.GlobalMemory** @Global, align 8
  %start7 = getelementptr inbounds %struct.GlobalMemory* %16, i32 0, i32 0
  %count = getelementptr inbounds %struct.barrier_t* %start7, i32 0, i32 1
  %17 = load volatile i64* %count, align 8
  %conv = trunc i64 %17 to i32
  store i32 %conv, i32* %oldcount, align 4
  %18 = load i32* %oldcount, align 4
  %19 = load i32* %lsense, align 4
  %add = add nsw i32 %18, %19
  store i32 %add, i32* %newcount, align 4
  %20 = load i32* %oldcount, align 4
  %21 = load i32* %newcount, align 4
  %call8 = call i32 @atomic_cmpxchg(i32 %20, i32 %21)
  store i32 %call8, i32* %updatedcount, align 4
  %22 = load i32* %updatedcount, align 4
  %23 = load i32* %oldcount, align 4
  %cmp = icmp eq i32 %22, %23
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %while.body
  %24 = load i32* %newcount, align 4
  %25 = load i32* @P, align 4
  %cmp10 = icmp eq i32 %24, %25
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.then
  %26 = load i32* %lsense, align 4
  %cmp12 = icmp eq i32 %26, 1
  br i1 %cmp12, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then
  %27 = load i32* %newcount, align 4
  %cmp14 = icmp eq i32 %27, 0
  br i1 %cmp14, label %land.lhs.true.16, label %if.end

land.lhs.true.16:                                 ; preds = %lor.lhs.false
  %28 = load i32* %lsense, align 4
  %cmp17 = icmp eq i32 %28, -1
  br i1 %cmp17, label %if.then.19, label %if.end

if.then.19:                                       ; preds = %land.lhs.true.16, %land.lhs.true
  %29 = load i32* %lsense, align 4
  %sub = sub nsw i32 0, %29
  %30 = load %struct.GlobalMemory** @Global, align 8
  %start20 = getelementptr inbounds %struct.GlobalMemory* %30, i32 0, i32 0
  %gsense21 = getelementptr inbounds %struct.barrier_t* %start20, i32 0, i32 0
  store volatile i32 %sub, i32* %gsense21, align 4
  call void @Criteria(i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.19, %land.lhs.true.16, %lor.lhs.false
  br label %while.end

if.end.22:                                        ; preds = %while.body
  br label %while.body

while.end:                                        ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body.27, %while.end
  %31 = load %struct.GlobalMemory** @Global, align 8
  %start23 = getelementptr inbounds %struct.GlobalMemory* %31, i32 0, i32 0
  %gsense24 = getelementptr inbounds %struct.barrier_t* %start23, i32 0, i32 0
  %32 = load volatile i32* %gsense24, align 4
  %33 = load i32* %lsense, align 4
  %cmp25 = icmp eq i32 %32, %33
  br i1 %cmp25, label %while.body.27, label %while.end.28

while.body.27:                                    ; preds = %while.cond
  br label %while.cond

while.end.28:                                     ; preds = %while.cond
  call void @Criteria(i32 1)
  ret void
}

declare void @Criteria(i32)

; Function Attrs: nounwind uwtable
define internal i32 @PlaceDomains(i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %d = alloca i32, align 4
  %first = alloca i32, align 4
  %range_start = alloca i8*, align 8
  %range_end = alloca i8*, align 8
  %page = alloca i32, align 4
  store i32 %P, i32* %P.addr, align 4
  %0 = load i32* %P.addr, align 4
  %sub = sub nsw i32 %0, 1
  store i32 %sub, i32* %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.69, %entry
  %1 = load i32* %p, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end.70

for.body:                                         ; preds = %for.cond
  %2 = load i32* %p, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  store i32 %4, i32* %d, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32* %d, align 4
  %6 = load i32* %p, align 4
  %add = add nsw i32 %6, 1
  %idxprom2 = sext i32 %add to i64
  %7 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 13), align 8
  %arrayidx3 = getelementptr inbounds i32* %7, i64 %idxprom2
  %8 = load i32* %arrayidx3, align 4
  %cmp4 = icmp slt i32 %5, %8
  br i1 %cmp4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.1
  %9 = load i32* %d, align 4
  %idxprom6 = sext i32 %9 to i64
  %10 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx7 = getelementptr inbounds i32* %10, i64 %idxprom6
  %11 = load i32* %arrayidx7, align 4
  store i32 %11, i32* %first, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.5
  %12 = load i32* %first, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i32** @firstchild, align 8
  %arrayidx9 = getelementptr inbounds i32* %13, i64 %idxprom8
  %14 = load i32* %arrayidx9, align 4
  %15 = load i32* %first, align 4
  %add10 = add nsw i32 %15, 1
  %idxprom11 = sext i32 %add10 to i64
  %16 = load i32** @firstchild, align 8
  %arrayidx12 = getelementptr inbounds i32* %16, i64 %idxprom11
  %17 = load i32* %arrayidx12, align 4
  %cmp13 = icmp ne i32 %14, %17
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32* %first, align 4
  %idxprom14 = sext i32 %18 to i64
  %19 = load i32** @firstchild, align 8
  %arrayidx15 = getelementptr inbounds i32* %19, i64 %idxprom14
  %20 = load i32* %arrayidx15, align 4
  %idxprom16 = sext i32 %20 to i64
  %21 = load i32** @child, align 8
  %arrayidx17 = getelementptr inbounds i32* %21, i64 %idxprom16
  %22 = load i32* %arrayidx17, align 4
  store i32 %22, i32* %first, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load i32* %first, align 4
  %idxprom18 = sext i32 %23 to i64
  %24 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx19 = getelementptr inbounds i32* %24, i64 %idxprom18
  %25 = load i32* %arrayidx19, align 4
  %idxprom20 = sext i32 %25 to i64
  %26 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx21 = getelementptr inbounds i32* %26, i64 %idxprom20
  %27 = bitcast i32* %arrayidx21 to i8*
  store i8* %27, i8** %range_start, align 8
  %28 = load i32* %d, align 4
  %idxprom22 = sext i32 %28 to i64
  %29 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx23 = getelementptr inbounds i32* %29, i64 %idxprom22
  %30 = load i32* %arrayidx23, align 4
  %add24 = add nsw i32 %30, 1
  %idxprom25 = sext i32 %add24 to i64
  %31 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx26 = getelementptr inbounds i32* %31, i64 %idxprom25
  %32 = load i32* %arrayidx26, align 4
  %idxprom27 = sext i32 %32 to i64
  %33 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx28 = getelementptr inbounds i32* %33, i64 %idxprom27
  %34 = bitcast i32* %arrayidx28 to i8*
  store i8* %34, i8** %range_end, align 8
  %35 = load i32* %first, align 4
  %idxprom29 = sext i32 %35 to i64
  %36 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx30 = getelementptr inbounds i32* %36, i64 %idxprom29
  %37 = load i32* %arrayidx30, align 4
  %idxprom31 = sext i32 %37 to i64
  %38 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 2), align 8
  %arrayidx32 = getelementptr inbounds i32* %38, i64 %idxprom31
  %39 = load i32* %d, align 4
  %idxprom33 = sext i32 %39 to i64
  %40 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx34 = getelementptr inbounds i32* %40, i64 %idxprom33
  %41 = load i32* %arrayidx34, align 4
  %add35 = add nsw i32 %41, 1
  %idxprom36 = sext i32 %add35 to i64
  %42 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx37 = getelementptr inbounds i32* %42, i64 %idxprom36
  %43 = load i32* %arrayidx37, align 4
  %44 = load i32* %first, align 4
  %idxprom38 = sext i32 %44 to i64
  %45 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx39 = getelementptr inbounds i32* %45, i64 %idxprom38
  %46 = load i32* %arrayidx39, align 4
  %sub40 = sub nsw i32 %43, %46
  %conv = sext i32 %sub40 to i64
  %mul = mul i64 %conv, 4
  %47 = load i32* %p, align 4
  %call = call i32 (i32*, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (i32*, i64, i32, ...)*)(i32* %arrayidx32, i64 %mul, i32 %47)
  %48 = load i32* %first, align 4
  %idxprom41 = sext i32 %48 to i64
  %49 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx42 = getelementptr inbounds i32* %49, i64 %idxprom41
  %50 = load i32* %arrayidx42, align 4
  %idxprom43 = sext i32 %50 to i64
  %51 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx44 = getelementptr inbounds %union.Entry* %51, i64 %idxprom43
  %block = bitcast %union.Entry* %arrayidx44 to %struct.Block**
  %52 = bitcast %struct.Block** %block to i8*
  store i8* %52, i8** %range_start, align 8
  %53 = load i32* %d, align 4
  %idxprom45 = sext i32 %53 to i64
  %54 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx46 = getelementptr inbounds i32* %54, i64 %idxprom45
  %55 = load i32* %arrayidx46, align 4
  %add47 = add nsw i32 %55, 1
  %idxprom48 = sext i32 %add47 to i64
  %56 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx49 = getelementptr inbounds i32* %56, i64 %idxprom48
  %57 = load i32* %arrayidx49, align 4
  %idxprom50 = sext i32 %57 to i64
  %58 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx51 = getelementptr inbounds %union.Entry* %58, i64 %idxprom50
  %block52 = bitcast %union.Entry* %arrayidx51 to %struct.Block**
  %59 = bitcast %struct.Block** %block52 to i8*
  store i8* %59, i8** %range_end, align 8
  %60 = load i32* %first, align 4
  %idxprom53 = sext i32 %60 to i64
  %61 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx54 = getelementptr inbounds i32* %61, i64 %idxprom53
  %62 = load i32* %arrayidx54, align 4
  %idxprom55 = sext i32 %62 to i64
  %63 = load %union.Entry** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 17), align 8
  %arrayidx56 = getelementptr inbounds %union.Entry* %63, i64 %idxprom55
  %block57 = bitcast %union.Entry* %arrayidx56 to %struct.Block**
  %64 = load i32* %d, align 4
  %idxprom58 = sext i32 %64 to i64
  %65 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 11), align 8
  %arrayidx59 = getelementptr inbounds i32* %65, i64 %idxprom58
  %66 = load i32* %arrayidx59, align 4
  %add60 = add nsw i32 %66, 1
  %idxprom61 = sext i32 %add60 to i64
  %67 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx62 = getelementptr inbounds i32* %67, i64 %idxprom61
  %68 = load i32* %arrayidx62, align 4
  %69 = load i32* %first, align 4
  %idxprom63 = sext i32 %69 to i64
  %70 = load i32** getelementptr inbounds (%struct.BMatrix* @LB, i32 0, i32 1), align 8
  %arrayidx64 = getelementptr inbounds i32* %70, i64 %idxprom63
  %71 = load i32* %arrayidx64, align 4
  %sub65 = sub nsw i32 %68, %71
  %conv66 = sext i32 %sub65 to i64
  %mul67 = mul i64 %conv66, 8
  %72 = load i32* %p, align 4
  %call68 = call i32 (%struct.Block**, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (%struct.Block**, i64, i32, ...)*)(%struct.Block** %block57, i64 %mul67, i32 %72)
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %73 = load i32* %d, align 4
  %inc = add nsw i32 %73, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.69

for.inc.69:                                       ; preds = %for.end
  %74 = load i32* %p, align 4
  %dec = add nsw i32 %74, -1
  store i32 %dec, i32* %p, align 4
  br label %for.cond

for.end.70:                                       ; preds = %for.cond
  %75 = load i32* %retval
  ret i32 %75
}

; Function Attrs: nounwind uwtable
define internal i32 @ComposePerm(i32* %PERM1, i32* %PERM2, i32 %n) {
entry:
  %retval = alloca i32, align 4
  %PERM1.addr = alloca i32*, align 8
  %PERM2.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %PERM3 = alloca i32*, align 8
  store i32* %PERM1, i32** %PERM1.addr, align 8
  store i32* %PERM2, i32** %PERM2.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %PERM3, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %PERM2.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load i32** %PERM1.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %7, i64 %idxprom2
  %8 = load i32* %arrayidx3, align 4
  %9 = load i32* %i, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load i32** %PERM3, align 8
  %arrayidx5 = getelementptr inbounds i32* %10, i64 %idxprom4
  store i32 %8, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.14, %for.end
  %12 = load i32* %i, align 4
  %13 = load i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %12, %13
  br i1 %cmp7, label %for.body.9, label %for.end.16

for.body.9:                                       ; preds = %for.cond.6
  %14 = load i32* %i, align 4
  %idxprom10 = sext i32 %14 to i64
  %15 = load i32** %PERM3, align 8
  %arrayidx11 = getelementptr inbounds i32* %15, i64 %idxprom10
  %16 = load i32* %arrayidx11, align 4
  %17 = load i32* %i, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i32** %PERM1.addr, align 8
  %arrayidx13 = getelementptr inbounds i32* %18, i64 %idxprom12
  store i32 %16, i32* %arrayidx13, align 4
  br label %for.inc.14

for.inc.14:                                       ; preds = %for.body.9
  %19 = load i32* %i, align 4
  %inc15 = add nsw i32 %19, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond.6

for.end.16:                                       ; preds = %for.cond.6
  %20 = load i32** %PERM3, align 8
  %call17 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %20)
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @EliminationTreeFromA(%struct.SMatrix* byval align 8 %A, i32* %T, i32* %P, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %P.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %subtree = alloca i32*, align 8
  %i = alloca i32, align 4
  %nd = alloca i32, align 4
  %nabor = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %nextr = alloca i32, align 4
  %root = alloca i32, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32* %P, i32** %P.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %0 = load i32* %n, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %subtree, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %n3 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %4 = load i32* %n3, align 4
  %5 = load i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32** %subtree, align 8
  %arrayidx = getelementptr inbounds i32* %6, i64 %idxprom
  store i32 %4, i32* %arrayidx, align 4
  %7 = load i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load i32** %T.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %8, i64 %idxprom4
  store i32 %4, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.60, %for.end
  %10 = load i32* %j, align 4
  %n7 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %11 = load i32* %n7, align 4
  %cmp8 = icmp slt i32 %10, %11
  br i1 %cmp8, label %for.body.10, label %for.end.62

for.body.10:                                      ; preds = %for.cond.6
  %12 = load i32* %j, align 4
  %idxprom11 = sext i32 %12 to i64
  %13 = load i32** %P.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %13, i64 %idxprom11
  %14 = load i32* %arrayidx12, align 4
  store i32 %14, i32* %nd, align 4
  %15 = load i32* %nd, align 4
  %idxprom13 = sext i32 %15 to i64
  %col = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 2
  %16 = load i32** %col, align 8
  %arrayidx14 = getelementptr inbounds i32* %16, i64 %idxprom13
  %17 = load i32* %arrayidx14, align 4
  store i32 %17, i32* %i, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.57, %for.body.10
  %18 = load i32* %i, align 4
  %19 = load i32* %nd, align 4
  %add16 = add nsw i32 %19, 1
  %idxprom17 = sext i32 %add16 to i64
  %col18 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 2
  %20 = load i32** %col18, align 8
  %arrayidx19 = getelementptr inbounds i32* %20, i64 %idxprom17
  %21 = load i32* %arrayidx19, align 4
  %cmp20 = icmp slt i32 %18, %21
  br i1 %cmp20, label %for.body.22, label %for.end.59

for.body.22:                                      ; preds = %for.cond.15
  %22 = load i32* %i, align 4
  %idxprom23 = sext i32 %22 to i64
  %row = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 4
  %23 = load i32** %row, align 8
  %arrayidx24 = getelementptr inbounds i32* %23, i64 %idxprom23
  %24 = load i32* %arrayidx24, align 4
  %idxprom25 = sext i32 %24 to i64
  %25 = load i32** %INVP.addr, align 8
  %arrayidx26 = getelementptr inbounds i32* %25, i64 %idxprom25
  %26 = load i32* %arrayidx26, align 4
  store i32 %26, i32* %nabor, align 4
  %27 = load i32* %nabor, align 4
  %28 = load i32* %j, align 4
  %cmp27 = icmp slt i32 %27, %28
  br i1 %cmp27, label %if.then, label %if.end.56

if.then:                                          ; preds = %for.body.22
  %29 = load i32* %nabor, align 4
  store i32 %29, i32* %r, align 4
  br label %for.cond.29

for.cond.29:                                      ; preds = %for.inc.36, %if.then
  %30 = load i32* %r, align 4
  %idxprom30 = sext i32 %30 to i64
  %31 = load i32** %subtree, align 8
  %arrayidx31 = getelementptr inbounds i32* %31, i64 %idxprom30
  %32 = load i32* %arrayidx31, align 4
  %n32 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %33 = load i32* %n32, align 4
  %cmp33 = icmp ne i32 %32, %33
  br i1 %cmp33, label %for.body.35, label %for.end.39

for.body.35:                                      ; preds = %for.cond.29
  br label %for.inc.36

for.inc.36:                                       ; preds = %for.body.35
  %34 = load i32* %r, align 4
  %idxprom37 = sext i32 %34 to i64
  %35 = load i32** %subtree, align 8
  %arrayidx38 = getelementptr inbounds i32* %35, i64 %idxprom37
  %36 = load i32* %arrayidx38, align 4
  store i32 %36, i32* %r, align 4
  br label %for.cond.29

for.end.39:                                       ; preds = %for.cond.29
  %37 = load i32* %r, align 4
  %38 = load i32* %j, align 4
  %cmp40 = icmp ne i32 %37, %38
  br i1 %cmp40, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %for.end.39
  %39 = load i32* %j, align 4
  store i32 %39, i32* %root, align 4
  %40 = load i32* %r, align 4
  %idxprom43 = sext i32 %40 to i64
  %41 = load i32** %subtree, align 8
  %arrayidx44 = getelementptr inbounds i32* %41, i64 %idxprom43
  store i32 %39, i32* %arrayidx44, align 4
  %42 = load i32* %r, align 4
  %idxprom45 = sext i32 %42 to i64
  %43 = load i32** %T.addr, align 8
  %arrayidx46 = getelementptr inbounds i32* %43, i64 %idxprom45
  store i32 %39, i32* %arrayidx46, align 4
  br label %if.end

if.else:                                          ; preds = %for.end.39
  %44 = load i32* %r, align 4
  store i32 %44, i32* %root, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.42
  %45 = load i32* %nabor, align 4
  store i32 %45, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %46 = load i32* %r, align 4
  %idxprom47 = sext i32 %46 to i64
  %47 = load i32** %subtree, align 8
  %arrayidx48 = getelementptr inbounds i32* %47, i64 %idxprom47
  %48 = load i32* %arrayidx48, align 4
  %n49 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %49 = load i32* %n49, align 4
  %cmp50 = icmp ne i32 %48, %49
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %50 = load i32* %r, align 4
  %idxprom52 = sext i32 %50 to i64
  %51 = load i32** %subtree, align 8
  %arrayidx53 = getelementptr inbounds i32* %51, i64 %idxprom52
  %52 = load i32* %arrayidx53, align 4
  store i32 %52, i32* %nextr, align 4
  %53 = load i32* %root, align 4
  %54 = load i32* %r, align 4
  %idxprom54 = sext i32 %54 to i64
  %55 = load i32** %subtree, align 8
  %arrayidx55 = getelementptr inbounds i32* %55, i64 %idxprom54
  store i32 %53, i32* %arrayidx55, align 4
  %56 = load i32* %nextr, align 4
  store i32 %56, i32* %r, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.56

if.end.56:                                        ; preds = %while.end, %for.body.22
  br label %for.inc.57

for.inc.57:                                       ; preds = %if.end.56
  %57 = load i32* %i, align 4
  %inc58 = add nsw i32 %57, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond.15

for.end.59:                                       ; preds = %for.cond.15
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.end.59
  %58 = load i32* %j, align 4
  %inc61 = add nsw i32 %58, 1
  store i32 %inc61, i32* %j, align 4
  br label %for.cond.6

for.end.62:                                       ; preds = %for.cond.6
  %59 = load i32** %subtree, align 8
  %call63 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %59)
  %60 = load i32* %retval
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define internal i32 @ParentToChild(i32* %T, i32 %n, i32* %firstchild, i32* %child) {
entry:
  %retval = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %firstchild.addr = alloca i32*, align 8
  %child.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %parent = alloca i32, align 4
  %count = alloca i32, align 4
  %next = alloca i32*, align 8
  store i32* %T, i32** %T.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32* %firstchild, i32** %firstchild.addr, align 8
  store i32* %child, i32** %child.addr, align 8
  store i32 0, i32* %count, align 4
  %0 = load i32* %n.addr, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %next, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %n.addr, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %next, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  %6 = load i32* %i, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load i32** %firstchild.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %7, i64 %idxprom2
  store i32 -1, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32* %n.addr, align 4
  store i32 %9, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.18, %for.end
  %10 = load i32* %i, align 4
  %cmp5 = icmp sge i32 %10, 0
  br i1 %cmp5, label %for.body.7, label %for.end.19

for.body.7:                                       ; preds = %for.cond.4
  %11 = load i32* %i, align 4
  %idxprom8 = sext i32 %11 to i64
  %12 = load i32** %T.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %12, i64 %idxprom8
  %13 = load i32* %arrayidx9, align 4
  store i32 %13, i32* %parent, align 4
  %14 = load i32* %parent, align 4
  %15 = load i32* %i, align 4
  %cmp10 = icmp ne i32 %14, %15
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.7
  %16 = load i32* %parent, align 4
  %idxprom12 = sext i32 %16 to i64
  %17 = load i32** %firstchild.addr, align 8
  %arrayidx13 = getelementptr inbounds i32* %17, i64 %idxprom12
  %18 = load i32* %arrayidx13, align 4
  %19 = load i32* %i, align 4
  %idxprom14 = sext i32 %19 to i64
  %20 = load i32** %next, align 8
  %arrayidx15 = getelementptr inbounds i32* %20, i64 %idxprom14
  store i32 %18, i32* %arrayidx15, align 4
  %21 = load i32* %i, align 4
  %22 = load i32* %parent, align 4
  %idxprom16 = sext i32 %22 to i64
  %23 = load i32** %firstchild.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %23, i64 %idxprom16
  store i32 %21, i32* %arrayidx17, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.7
  br label %for.inc.18

for.inc.18:                                       ; preds = %if.end
  %24 = load i32* %i, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.4

for.end.19:                                       ; preds = %for.cond.4
  store i32 0, i32* %i, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.35, %for.end.19
  %25 = load i32* %i, align 4
  %26 = load i32* %n.addr, align 4
  %cmp21 = icmp sle i32 %25, %26
  br i1 %cmp21, label %for.body.23, label %for.end.37

for.body.23:                                      ; preds = %for.cond.20
  %27 = load i32* %i, align 4
  %idxprom24 = sext i32 %27 to i64
  %28 = load i32** %firstchild.addr, align 8
  %arrayidx25 = getelementptr inbounds i32* %28, i64 %idxprom24
  %29 = load i32* %arrayidx25, align 4
  store i32 %29, i32* %k, align 4
  %30 = load i32* %count, align 4
  %31 = load i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %32 = load i32** %firstchild.addr, align 8
  %arrayidx27 = getelementptr inbounds i32* %32, i64 %idxprom26
  store i32 %30, i32* %arrayidx27, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.23
  %33 = load i32* %k, align 4
  %cmp28 = icmp ne i32 %33, -1
  br i1 %cmp28, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %34 = load i32* %k, align 4
  %35 = load i32* %count, align 4
  %inc30 = add nsw i32 %35, 1
  store i32 %inc30, i32* %count, align 4
  %idxprom31 = sext i32 %35 to i64
  %36 = load i32** %child.addr, align 8
  %arrayidx32 = getelementptr inbounds i32* %36, i64 %idxprom31
  store i32 %34, i32* %arrayidx32, align 4
  %37 = load i32* %k, align 4
  %idxprom33 = sext i32 %37 to i64
  %38 = load i32** %next, align 8
  %arrayidx34 = getelementptr inbounds i32* %38, i64 %idxprom33
  %39 = load i32* %arrayidx34, align 4
  store i32 %39, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc.35

for.inc.35:                                       ; preds = %while.end
  %40 = load i32* %i, align 4
  %inc36 = add nsw i32 %40, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond.20

for.end.37:                                       ; preds = %for.cond.20
  %41 = load i32* %count, align 4
  %42 = load i32* %n.addr, align 4
  %add38 = add nsw i32 %42, 1
  %idxprom39 = sext i32 %add38 to i64
  %43 = load i32** %firstchild.addr, align 8
  %arrayidx40 = getelementptr inbounds i32* %43, i64 %idxprom39
  store i32 %41, i32* %arrayidx40, align 4
  %44 = load i32** %next, align 8
  %call41 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %44)
  %45 = load i32* %retval
  ret i32 %45
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeNZ(%struct.SMatrix* byval align 8 %A, i32* %T, i32* %nz, i32* %PERM, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nd = alloca i32, align 4
  %nabor = alloca i32, align 4
  %k = alloca i32, align 4
  %marker = alloca i32*, align 8
  store i32* %T, i32** %T.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  %n = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %marker, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %nz.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  store i32 1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %n3 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %7 = load i32* %n3, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load i32** %nz.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %8, i64 %idxprom4
  store i32 0, i32* %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.44, %for.end
  %9 = load i32* %i, align 4
  %n7 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %10 = load i32* %n7, align 4
  %cmp8 = icmp slt i32 %9, %10
  br i1 %cmp8, label %for.body.10, label %for.end.46

for.body.10:                                      ; preds = %for.cond.6
  %11 = load i32* %i, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i32** %PERM.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %12, i64 %idxprom11
  %13 = load i32* %arrayidx12, align 4
  store i32 %13, i32* %nd, align 4
  %14 = load i32* %i, align 4
  %idxprom13 = sext i32 %14 to i64
  %15 = load i32** %marker, align 8
  %arrayidx14 = getelementptr inbounds i32* %15, i64 %idxprom13
  store i32 -1, i32* %arrayidx14, align 4
  %16 = load i32* %nd, align 4
  %idxprom15 = sext i32 %16 to i64
  %col = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 2
  %17 = load i32** %col, align 8
  %arrayidx16 = getelementptr inbounds i32* %17, i64 %idxprom15
  %18 = load i32* %arrayidx16, align 4
  store i32 %18, i32* %j, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.41, %for.body.10
  %19 = load i32* %j, align 4
  %20 = load i32* %nd, align 4
  %add = add nsw i32 %20, 1
  %idxprom18 = sext i32 %add to i64
  %col19 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 2
  %21 = load i32** %col19, align 8
  %arrayidx20 = getelementptr inbounds i32* %21, i64 %idxprom18
  %22 = load i32* %arrayidx20, align 4
  %cmp21 = icmp slt i32 %19, %22
  br i1 %cmp21, label %for.body.23, label %for.end.43

for.body.23:                                      ; preds = %for.cond.17
  %23 = load i32* %j, align 4
  %idxprom24 = sext i32 %23 to i64
  %row = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 4
  %24 = load i32** %row, align 8
  %arrayidx25 = getelementptr inbounds i32* %24, i64 %idxprom24
  %25 = load i32* %arrayidx25, align 4
  %idxprom26 = sext i32 %25 to i64
  %26 = load i32** %INVP.addr, align 8
  %arrayidx27 = getelementptr inbounds i32* %26, i64 %idxprom26
  %27 = load i32* %arrayidx27, align 4
  store i32 %27, i32* %nabor, align 4
  %28 = load i32* %nabor, align 4
  store i32 %28, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.23
  %29 = load i32* %k, align 4
  %idxprom28 = sext i32 %29 to i64
  %30 = load i32** %marker, align 8
  %arrayidx29 = getelementptr inbounds i32* %30, i64 %idxprom28
  %31 = load i32* %arrayidx29, align 4
  %32 = load i32* %i, align 4
  %cmp30 = icmp ne i32 %31, %32
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %33 = load i32* %k, align 4
  %34 = load i32* %i, align 4
  %cmp32 = icmp slt i32 %33, %34
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %35 = phi i1 [ false, %while.cond ], [ %cmp32, %land.rhs ]
  br i1 %35, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %36 = load i32* %k, align 4
  %idxprom34 = sext i32 %36 to i64
  %37 = load i32** %nz.addr, align 8
  %arrayidx35 = getelementptr inbounds i32* %37, i64 %idxprom34
  %38 = load i32* %arrayidx35, align 4
  %inc36 = add nsw i32 %38, 1
  store i32 %inc36, i32* %arrayidx35, align 4
  %39 = load i32* %i, align 4
  %40 = load i32* %k, align 4
  %idxprom37 = sext i32 %40 to i64
  %41 = load i32** %marker, align 8
  %arrayidx38 = getelementptr inbounds i32* %41, i64 %idxprom37
  store i32 %39, i32* %arrayidx38, align 4
  %42 = load i32* %k, align 4
  %idxprom39 = sext i32 %42 to i64
  %43 = load i32** %T.addr, align 8
  %arrayidx40 = getelementptr inbounds i32* %43, i64 %idxprom39
  %44 = load i32* %arrayidx40, align 4
  store i32 %44, i32* %k, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %for.inc.41

for.inc.41:                                       ; preds = %while.end
  %45 = load i32* %j, align 4
  %inc42 = add nsw i32 %45, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond.17

for.end.43:                                       ; preds = %for.cond.17
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.end.43
  %46 = load i32* %i, align 4
  %inc45 = add nsw i32 %46, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond.6

for.end.46:                                       ; preds = %for.cond.6
  %47 = load i32** %marker, align 8
  %call47 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %47)
  %48 = load i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @FindSupernodes(%struct.SMatrix* byval align 8 %A, i32* %T, i32* %nz, i32* %node, i32* %PERM, i32* %INVP) {
entry:
  %retval = alloca i32, align 4
  %T.addr = alloca i32*, align 8
  %nz.addr = alloca i32*, align 8
  %node.addr = alloca i32*, align 8
  %PERM.addr = alloca i32*, align 8
  %INVP.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %nchild = alloca i32*, align 8
  %supers = alloca i32, align 4
  %current = alloca i32, align 4
  %size = alloca i32, align 4
  %max_super = alloca i32, align 4
  store i32* %T, i32** %T.addr, align 8
  store i32* %nz, i32** %nz.addr, align 8
  store i32* %node, i32** %node.addr, align 8
  store i32* %PERM, i32** %PERM.addr, align 8
  store i32* %INVP, i32** %INVP.addr, align 8
  store i32 0, i32* %max_super, align 4
  %n = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %0 = load i32* %n, align 4
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %nchild, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %nchild, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.13, %for.end
  %7 = load i32* %i, align 4
  %n4 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %8 = load i32* %n4, align 4
  %cmp5 = icmp slt i32 %7, %8
  br i1 %cmp5, label %for.body.7, label %for.end.15

for.body.7:                                       ; preds = %for.cond.3
  %9 = load i32* %i, align 4
  %idxprom8 = sext i32 %9 to i64
  %10 = load i32** %T.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %10, i64 %idxprom8
  %11 = load i32* %arrayidx9, align 4
  %idxprom10 = sext i32 %11 to i64
  %12 = load i32** %nchild, align 8
  %arrayidx11 = getelementptr inbounds i32* %12, i64 %idxprom10
  %13 = load i32* %arrayidx11, align 4
  %inc12 = add nsw i32 %13, 1
  store i32 %inc12, i32* %arrayidx11, align 4
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.body.7
  %14 = load i32* %i, align 4
  %inc14 = add nsw i32 %14, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond.3

for.end.15:                                       ; preds = %for.cond.3
  store i32 0, i32* %current, align 4
  store i32 1, i32* %supers, align 4
  store i32 1, i32* %size, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.49, %for.end.15
  %15 = load i32* %i, align 4
  %n17 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %16 = load i32* %n17, align 4
  %cmp18 = icmp slt i32 %15, %16
  br i1 %cmp18, label %for.body.20, label %for.end.51

for.body.20:                                      ; preds = %for.cond.16
  %17 = load i32* %i, align 4
  %idxprom21 = sext i32 %17 to i64
  %18 = load i32** %nz.addr, align 8
  %arrayidx22 = getelementptr inbounds i32* %18, i64 %idxprom21
  %19 = load i32* %arrayidx22, align 4
  %20 = load i32* %i, align 4
  %sub = sub nsw i32 %20, 1
  %idxprom23 = sext i32 %sub to i64
  %21 = load i32** %nz.addr, align 8
  %arrayidx24 = getelementptr inbounds i32* %21, i64 %idxprom23
  %22 = load i32* %arrayidx24, align 4
  %sub25 = sub nsw i32 %22, 1
  %cmp26 = icmp eq i32 %19, %sub25
  br i1 %cmp26, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body.20
  %23 = load i32* %i, align 4
  %sub28 = sub nsw i32 %23, 1
  %idxprom29 = sext i32 %sub28 to i64
  %24 = load i32** %T.addr, align 8
  %arrayidx30 = getelementptr inbounds i32* %24, i64 %idxprom29
  %25 = load i32* %arrayidx30, align 4
  %26 = load i32* %i, align 4
  %cmp31 = icmp eq i32 %25, %26
  br i1 %cmp31, label %land.lhs.true.33, label %if.else

land.lhs.true.33:                                 ; preds = %land.lhs.true
  %27 = load i32* %i, align 4
  %idxprom34 = sext i32 %27 to i64
  %28 = load i32** %nchild, align 8
  %arrayidx35 = getelementptr inbounds i32* %28, i64 %idxprom34
  %29 = load i32* %arrayidx35, align 4
  %cmp36 = icmp eq i32 %29, 1
  br i1 %cmp36, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.33
  %30 = load i32* %current, align 4
  %31 = load i32* %i, align 4
  %sub38 = sub nsw i32 %30, %31
  %32 = load i32* %i, align 4
  %idxprom39 = sext i32 %32 to i64
  %33 = load i32** %node.addr, align 8
  %arrayidx40 = getelementptr inbounds i32* %33, i64 %idxprom39
  store i32 %sub38, i32* %arrayidx40, align 4
  %34 = load i32* %size, align 4
  %inc41 = add nsw i32 %34, 1
  store i32 %inc41, i32* %size, align 4
  br label %if.end.48

if.else:                                          ; preds = %land.lhs.true.33, %land.lhs.true, %for.body.20
  %35 = load i32* %size, align 4
  %36 = load i32* %current, align 4
  %idxprom42 = sext i32 %36 to i64
  %37 = load i32** %node.addr, align 8
  %arrayidx43 = getelementptr inbounds i32* %37, i64 %idxprom42
  store i32 %35, i32* %arrayidx43, align 4
  %38 = load i32* %size, align 4
  %39 = load i32* %max_super, align 4
  %cmp44 = icmp sgt i32 %38, %39
  br i1 %cmp44, label %if.then.46, label %if.end

if.then.46:                                       ; preds = %if.else
  %40 = load i32* %size, align 4
  store i32 %40, i32* %max_super, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.46, %if.else
  %41 = load i32* %supers, align 4
  %inc47 = add nsw i32 %41, 1
  store i32 %inc47, i32* %supers, align 4
  %42 = load i32* %i, align 4
  store i32 %42, i32* %current, align 4
  store i32 1, i32* %size, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %if.end, %if.then
  br label %for.inc.49

for.inc.49:                                       ; preds = %if.end.48
  %43 = load i32* %i, align 4
  %inc50 = add nsw i32 %43, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond.16

for.end.51:                                       ; preds = %for.cond.16
  %44 = load i32* %size, align 4
  %45 = load i32* %current, align 4
  %idxprom52 = sext i32 %45 to i64
  %46 = load i32** %node.addr, align 8
  %arrayidx53 = getelementptr inbounds i32* %46, i64 %idxprom52
  store i32 %44, i32* %arrayidx53, align 4
  %47 = load i32* %size, align 4
  %48 = load i32* %max_super, align 4
  %cmp54 = icmp sgt i32 %47, %48
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %for.end.51
  %49 = load i32* %size, align 4
  store i32 %49, i32* %max_super, align 4
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %for.end.51
  %n58 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %50 = load i32* %n58, align 4
  %idxprom59 = sext i32 %50 to i64
  %51 = load i32** %node.addr, align 8
  %arrayidx60 = getelementptr inbounds i32* %51, i64 %idxprom59
  store i32 0, i32* %arrayidx60, align 4
  %52 = load i32* %supers, align 4
  %n61 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %53 = load i32* %n61, align 4
  %conv62 = sitofp i32 %53 to double
  %54 = load i32* %supers, align 4
  %conv63 = sitofp i32 %54 to double
  %div = fdiv double %conv62, %conv63
  %55 = load i32* %max_super, align 4
  %call64 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([44 x i8]* @.str.95, i32 0, i32 0), i32 %52, double %div, i32 %55)
  %56 = load i32** %nchild, align 8
  %call65 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %56)
  %57 = load i32* %retval
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define internal i32 @ComputeWorkTree(%struct.SMatrix* byval align 8 %A, i32* %nz, double* %work_tree) {
entry:
  %retval = alloca i32, align 4
  %nz.addr = alloca i32*, align 8
  %work_tree.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nzj = alloca i32, align 4
  store i32* %nz, i32** %nz.addr, align 8
  store double* %work_tree, double** %work_tree.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.23, %entry
  %0 = load i32* %j, align 4
  %n = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %1 = load i32* %n, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.25

for.body:                                         ; preds = %for.cond
  %2 = load i32* %j, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %A, i32 0, i32 0
  %3 = load i32* %n1, align 4
  %cmp2 = icmp ne i32 %2, %3
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %4 = load i32* %j, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32** %nz.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 %idxprom
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* %nzj, align 4
  %7 = load i32* %nzj, align 4
  %8 = load i32* %nzj, align 4
  %9 = load i32* %nzj, align 4
  %sub = sub nsw i32 %9, 1
  %mul = mul nsw i32 %8, %sub
  %add = add nsw i32 %7, %mul
  %conv = sitofp i32 %add to double
  %10 = load i32* %j, align 4
  %idxprom3 = sext i32 %10 to i64
  %11 = load double** %work_tree.addr, align 8
  %arrayidx4 = getelementptr inbounds double* %11, i64 %idxprom3
  store double %conv, double* %arrayidx4, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %12 = load i32* %j, align 4
  %idxprom5 = sext i32 %12 to i64
  %13 = load double** %work_tree.addr, align 8
  %arrayidx6 = getelementptr inbounds double* %13, i64 %idxprom5
  store double 0.000000e+00, double* %arrayidx6, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load i32* %j, align 4
  %idxprom7 = sext i32 %14 to i64
  %15 = load i32** @firstchild, align 8
  %arrayidx8 = getelementptr inbounds i32* %15, i64 %idxprom7
  %16 = load i32* %arrayidx8, align 4
  store i32 %16, i32* %i, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %if.end
  %17 = load i32* %i, align 4
  %18 = load i32* %j, align 4
  %add10 = add nsw i32 %18, 1
  %idxprom11 = sext i32 %add10 to i64
  %19 = load i32** @firstchild, align 8
  %arrayidx12 = getelementptr inbounds i32* %19, i64 %idxprom11
  %20 = load i32* %arrayidx12, align 4
  %cmp13 = icmp slt i32 %17, %20
  br i1 %cmp13, label %for.body.15, label %for.end

for.body.15:                                      ; preds = %for.cond.9
  %21 = load i32* %i, align 4
  %idxprom16 = sext i32 %21 to i64
  %22 = load i32** @child, align 8
  %arrayidx17 = getelementptr inbounds i32* %22, i64 %idxprom16
  %23 = load i32* %arrayidx17, align 4
  %idxprom18 = sext i32 %23 to i64
  %24 = load double** %work_tree.addr, align 8
  %arrayidx19 = getelementptr inbounds double* %24, i64 %idxprom18
  %25 = load double* %arrayidx19, align 8
  %26 = load i32* %j, align 4
  %idxprom20 = sext i32 %26 to i64
  %27 = load double** %work_tree.addr, align 8
  %arrayidx21 = getelementptr inbounds double* %27, i64 %idxprom20
  %28 = load double* %arrayidx21, align 8
  %add22 = fadd double %28, %25
  store double %add22, double* %arrayidx21, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.15
  %29 = load i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.end
  %30 = load i32* %j, align 4
  %inc24 = add nsw i32 %30, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond

for.end.25:                                       ; preds = %for.cond
  %31 = load i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal void @NewMatrix(%struct.SMatrix* noalias sret %agg.result, i32 %n, i32 %m, i32 %nz) {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %nz.addr = alloca i32, align 4
  %M = alloca %struct.SMatrix, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %nz, i32* %nz.addr, align 4
  %0 = load i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %1 = load i32* %m.addr, align 4
  %m2 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 1
  store i32 %1, i32* %m2, align 4
  %2 = load i32* %n.addr, align 4
  %add = add nsw i32 %2, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 4
  %conv3 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv3, i32 888)
  %3 = bitcast i8* %call to i32*
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  store i32* %3, i32** %col, align 8
  %4 = load i32* %n.addr, align 4
  %add4 = add nsw i32 %4, 1
  %conv5 = sext i32 %add4 to i64
  %mul6 = mul i64 %conv5, 4
  %conv7 = trunc i64 %mul6 to i32
  %call8 = call i8* @MyMalloc(i32 %conv7, i32 888)
  %5 = bitcast i8* %call8 to i32*
  %startrow = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 3
  store i32* %5, i32** %startrow, align 8
  %6 = load i32* %m.addr, align 4
  %7 = load i32* %n.addr, align 4
  %add9 = add nsw i32 %6, %7
  %conv10 = sext i32 %add9 to i64
  %mul11 = mul i64 %conv10, 4
  %conv12 = trunc i64 %mul11 to i32
  %call13 = call i8* @MyMalloc(i32 %conv12, i32 888)
  %8 = bitcast i8* %call13 to i32*
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  store i32* %8, i32** %row, align 8
  %9 = load i32* %nz.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i32* %m.addr, align 4
  %11 = load i32* %n.addr, align 4
  %add14 = add nsw i32 %10, %11
  %conv15 = sext i32 %add14 to i64
  %mul16 = mul i64 %conv15, 8
  %conv17 = trunc i64 %mul16 to i32
  %call18 = call i8* @MyMalloc(i32 %conv17, i32 888)
  %12 = bitcast i8* %call18 to double*
  %nz19 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  store double* %12, double** %nz19, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %nz20 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  store double* null, double** %nz20, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %col21 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %13 = load i32** %col21, align 8
  %tobool22 = icmp ne i32* %13, null
  br i1 %tobool22, label %lor.lhs.false, label %if.then.29

lor.lhs.false:                                    ; preds = %if.end
  %row23 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %14 = load i32** %row23, align 8
  %tobool24 = icmp ne i32* %14, null
  br i1 %tobool24, label %lor.lhs.false.25, label %if.then.29

lor.lhs.false.25:                                 ; preds = %lor.lhs.false
  %15 = load i32* %nz.addr, align 4
  %tobool26 = icmp ne i32 %15, 0
  br i1 %tobool26, label %land.lhs.true, label %if.end.31

land.lhs.true:                                    ; preds = %lor.lhs.false.25
  %nz27 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %16 = load double** %nz27, align 8
  %tobool28 = icmp ne double* %16, null
  br i1 %tobool28, label %if.end.31, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true, %lor.lhs.false, %if.end
  %17 = load i32* %n.addr, align 4
  %18 = load i32* %m.addr, align 4
  %call30 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.104, i32 0, i32 0), i32 %17, i32 %18)
  call void @exit(i32 0)
  unreachable

if.end.31:                                        ; preds = %land.lhs.true, %lor.lhs.false.25
  %19 = bitcast %struct.SMatrix* %agg.result to i8*
  %20 = bitcast %struct.SMatrix* %M to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 40, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @FreeMatrix(%struct.SMatrix* byval align 8 %M) {
entry:
  %retval = alloca i32, align 4
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %0 = load i32** %col, align 8
  %call = call i32 (i32*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (i32*, ...)*)(i32* %0)
  %startrow = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 3
  %1 = load i32** %startrow, align 8
  %call1 = call i32 (i32*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (i32*, ...)*)(i32* %1)
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %2 = load i32** %row, align 8
  %call2 = call i32 (i32*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (i32*, ...)*)(i32* %2)
  %nz = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %3 = load double** %nz, align 8
  %tobool = icmp ne double* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %nz3 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 5
  %4 = load double** %nz3, align 8
  %call4 = call i32 (double*, ...) *bitcast (i32 (i32*)* @MyFree to i32 (double*, ...)*)(double* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal double* @NewVector(i32 %n) {
entry:
  %n.addr = alloca i32, align 4
  %v = alloca double*, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @MyMalloc(i32 %conv1, i32 888)
  %1 = bitcast i8* %call to double*
  store double* %1, double** %v, align 8
  %2 = load double** %v, align 8
  %tobool = icmp ne double* %2, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %3 = load i32* %n.addr, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32* %n.addr, align 4
  %call3 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.1.105, i32 0, i32 0), i32 %4)
  call void @exit(i32 0)
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load double** %v, align 8
  ret double* %5
}

; Function Attrs: nounwind uwtable
define internal double @Value(i32 %i, i32 %j, i32 %n) {
entry:
  %retval = alloca double, align 8
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %i.addr, align 4
  %1 = load i32* %j.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32* @maxm, align 4
  %conv = sitofp i32 %2 to double
  %add = fadd double %conv, 1.000000e-01
  store double %add, double* %retval
  br label %return

if.else:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %3 = load double* %retval
  ret double %3
}

; Function Attrs: nounwind uwtable
define internal void @ReadSparse(%struct.SMatrix* noalias sret %agg.result, i8* %name, i8* %probName) {
entry:
  %name.addr = alloca i8*, align 8
  %probName.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n_rows = alloca i32, align 4
  %tmp = alloca i32, align 4
  %numer_lines = alloca i32, align 4
  %colnum = alloca i32, align 4
  %colsize = alloca i32, align 4
  %rownum = alloca i32, align 4
  %rowsize = alloca i32, align 4
  %buf = alloca [100 x i8], align 16
  %type = alloca [4 x i8], align 1
  %M = alloca %struct.SMatrix, align 8
  %F = alloca %struct.SMatrix, align 8
  %tmp84 = alloca %struct.SMatrix, align 8
  %tmp115 = alloca %struct.SMatrix, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %probName, i8** %probName.addr, align 8
  %0 = load i8** %name.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  %2 = load i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct._IO_FILE** @stdin, align 8
  store %struct._IO_FILE* %3, %struct._IO_FILE** %fp, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %4 = load i8** %name.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %4, i8* getelementptr inbounds ([2 x i8]* @.str.2.106, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %struct._IO_FILE** %fp, align 8
  %tobool11 = icmp ne %struct._IO_FILE* %5, null
  br i1 %tobool11, label %if.end.14, label %if.then.12

if.then.12:                                       ; preds = %if.end
  %call13 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([20 x i8]* @.str.3.107, i32 0, i32 0))
  call void @exit(i32 0)
  unreachable

if.end.14:                                        ; preds = %if.end
  %6 = load %struct._IO_FILE** %fp, align 8
  %arraydecay = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([5 x i8]* @.str.4.108, i32 0, i32 0), i8* %arraydecay)
  %7 = load %struct._IO_FILE** %fp, align 8
  %8 = load i8** %probName.addr, align 8
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([4 x i8]* @.str.5.109, i32 0, i32 0), i8* %8)
  %9 = load i8** %probName.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %9, i64 8
  store i8 0, i8* %arrayidx17, align 1
  %10 = load %struct._IO_FILE** %fp, align 8
  %call18 = call i32 @DumpLine(%struct._IO_FILE* %10)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %11 = load i32* %i, align 4
  %cmp19 = icmp slt i32 %11, 5
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct._IO_FILE** %fp, align 8
  %arraydecay21 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([5 x i8]* @.str.6.110, i32 0, i32 0), i8* %arraydecay21)
  %arraydecay23 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call24 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %arraydecay23, i8* getelementptr inbounds ([3 x i8]* @.str.7.111, i32 0, i32 0), i32* %tmp)
  %13 = load i32* %i, align 4
  %cmp25 = icmp eq i32 %13, 3
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %for.body
  %14 = load i32* %tmp, align 4
  store i32 %14, i32* %numer_lines, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %15 = load i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct._IO_FILE** %fp, align 8
  %call29 = call i32 @DumpLine(%struct._IO_FILE* %16)
  %17 = load %struct._IO_FILE** %fp, align 8
  %arraydecay30 = getelementptr inbounds [4 x i8]* %type, i32 0, i32 0
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([4 x i8]* @.str.8.112, i32 0, i32 0), i8* %arraydecay30)
  %arrayidx32 = getelementptr inbounds [4 x i8]* %type, i32 0, i64 3
  store i8 0, i8* %arrayidx32, align 1
  %arrayidx33 = getelementptr inbounds [4 x i8]* %type, i32 0, i64 0
  %18 = load i8* %arrayidx33, align 1
  %conv34 = sext i8 %18 to i32
  %cmp35 = icmp ne i32 %conv34, 67
  br i1 %cmp35, label %land.lhs.true, label %if.then.46

land.lhs.true:                                    ; preds = %for.end
  %arrayidx37 = getelementptr inbounds [4 x i8]* %type, i32 0, i64 1
  %19 = load i8* %arrayidx37, align 1
  %conv38 = sext i8 %19 to i32
  %cmp39 = icmp eq i32 %conv38, 83
  br i1 %cmp39, label %land.lhs.true.41, label %if.then.46

land.lhs.true.41:                                 ; preds = %land.lhs.true
  %arrayidx42 = getelementptr inbounds [4 x i8]* %type, i32 0, i64 2
  %20 = load i8* %arrayidx42, align 1
  %conv43 = sext i8 %20 to i32
  %cmp44 = icmp eq i32 %conv43, 65
  br i1 %cmp44, label %if.end.49, label %if.then.46

if.then.46:                                       ; preds = %land.lhs.true.41, %land.lhs.true, %for.end
  %21 = load %struct._IO_FILE** @stderr, align 8
  %arraydecay47 = getelementptr inbounds [4 x i8]* %type, i32 0, i32 0
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([16 x i8]* @.str.9.113, i32 0, i32 0), i8* %arraydecay47)
  call void @exit(i32 0)
  unreachable

if.end.49:                                        ; preds = %land.lhs.true.41
  %22 = load %struct._IO_FILE** %fp, align 8
  %arraydecay50 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([5 x i8]* @.str.10.114, i32 0, i32 0), i8* %arraydecay50)
  %23 = load %struct._IO_FILE** %fp, align 8
  %arraydecay52 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([5 x i8]* @.str.6.110, i32 0, i32 0), i8* %arraydecay52)
  %arraydecay54 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call55 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %arraydecay54, i8* getelementptr inbounds ([3 x i8]* @.str.7.111, i32 0, i32 0), i32* %n_rows)
  store i32 10, i32* %n, align 4
  store i32 10, i32* %m, align 4
  %24 = load %struct._IO_FILE** %fp, align 8
  %arraydecay56 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([5 x i8]* @.str.6.110, i32 0, i32 0), i8* %arraydecay56)
  %arraydecay58 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call59 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %arraydecay58, i8* getelementptr inbounds ([3 x i8]* @.str.7.111, i32 0, i32 0), i32* %tmp)
  %25 = load i32* %tmp, align 4
  %cmp60 = icmp ne i32 %25, 0
  br i1 %cmp60, label %if.then.62, label %if.end.64

if.then.62:                                       ; preds = %if.end.49
  %call63 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([34 x i8]* @.str.11.115, i32 0, i32 0))
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.62, %if.end.49
  %26 = load i32* %n_rows, align 4
  %27 = load i32* %n, align 4
  %cmp65 = icmp ne i32 %26, %27
  br i1 %cmp65, label %if.then.67, label %if.end.69

if.then.67:                                       ; preds = %if.end.64
  %call68 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.12.116, i32 0, i32 0))
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.67, %if.end.64
  %28 = load %struct._IO_FILE** %fp, align 8
  %call70 = call i32 @DumpLine(%struct._IO_FILE* %28)
  %29 = load %struct._IO_FILE** %fp, align 8
  %arraydecay71 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([5 x i8]* @.str.13.117, i32 0, i32 0), i8* %arraydecay71)
  %arraydecay73 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call74 = call i32 @ParseIntFormat(i8* %arraydecay73, i32* %colnum, i32* %colsize)
  %30 = load %struct._IO_FILE** %fp, align 8
  %arraydecay75 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([5 x i8]* @.str.13.117, i32 0, i32 0), i8* %arraydecay75)
  %arraydecay77 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call78 = call i32 @ParseIntFormat(i8* %arraydecay77, i32* %rownum, i32* %rowsize)
  %31 = load %struct._IO_FILE** %fp, align 8
  %arraydecay79 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([5 x i8]* @.str.14.118, i32 0, i32 0), i8* %arraydecay79)
  %32 = load %struct._IO_FILE** %fp, align 8
  %arraydecay81 = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...)* @__isoc99_fscanf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([5 x i8]* @.str.14.118, i32 0, i32 0), i8* %arraydecay81)
  %33 = load %struct._IO_FILE** %fp, align 8
  %call83 = call i32 @DumpLine(%struct._IO_FILE* %33)
  %34 = load i32* %n, align 4
  %35 = load i32* %m, align 4
  call void @NewMatrix(%struct.SMatrix* sret %tmp84, i32 %34, i32 %35, i32 0)
  %36 = bitcast %struct.SMatrix* %M to i8*
  %37 = bitcast %struct.SMatrix* %tmp84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 40, i32 8, i1 false)
  %38 = load %struct._IO_FILE** %fp, align 8
  %39 = load i32* %n, align 4
  %add = add nsw i32 %39, 1
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %40 = load i32** %col, align 8
  %41 = load i32* %colnum, align 4
  %42 = load i32* %colsize, align 4
  %call85 = call i32 @ReadVector(%struct._IO_FILE* %38, i32 %add, i32* %40, i32 %41, i32 %42)
  %43 = load %struct._IO_FILE** %fp, align 8
  %44 = load i32* %m, align 4
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %45 = load i32** %row, align 8
  %46 = load i32* %rownum, align 4
  %47 = load i32* %rowsize, align 4
  %call86 = call i32 @ReadVector(%struct._IO_FILE* %43, i32 %44, i32* %45, i32 %46, i32 %47)
  store i32 0, i32* %i, align 4
  br label %for.cond.87

for.cond.87:                                      ; preds = %for.inc.92, %if.end.69
  %48 = load i32* %i, align 4
  %49 = load i32* %numer_lines, align 4
  %cmp88 = icmp slt i32 %48, %49
  br i1 %cmp88, label %for.body.90, label %for.end.94

for.body.90:                                      ; preds = %for.cond.87
  %50 = load %struct._IO_FILE** %fp, align 8
  %call91 = call i32 @DumpLine(%struct._IO_FILE* %50)
  br label %for.inc.92

for.inc.92:                                       ; preds = %for.body.90
  %51 = load i32* %i, align 4
  %inc93 = add nsw i32 %51, 1
  store i32 %inc93, i32* %i, align 4
  br label %for.cond.87

for.end.94:                                       ; preds = %for.cond.87
  store i32 0, i32* %i, align 4
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.100, %for.end.94
  %52 = load i32* %i, align 4
  %53 = load i32* %n, align 4
  %cmp96 = icmp slt i32 %52, %53
  br i1 %cmp96, label %for.body.98, label %for.end.102

for.body.98:                                      ; preds = %for.cond.95
  %54 = load i32* %i, align 4
  %call99 = call i32 @ISort(%struct.SMatrix* byval align 8 %M, i32 %54)
  br label %for.inc.100

for.inc.100:                                      ; preds = %for.body.98
  %55 = load i32* %i, align 4
  %inc101 = add nsw i32 %55, 1
  store i32 %inc101, i32* %i, align 4
  br label %for.cond.95

for.end.102:                                      ; preds = %for.cond.95
  store i32 0, i32* %i, align 4
  br label %for.cond.103

for.cond.103:                                     ; preds = %for.inc.111, %for.end.102
  %56 = load i32* %i, align 4
  %57 = load i32* %n, align 4
  %cmp104 = icmp sle i32 %56, %57
  br i1 %cmp104, label %for.body.106, label %for.end.113

for.body.106:                                     ; preds = %for.cond.103
  %58 = load i32* %i, align 4
  %idxprom = sext i32 %58 to i64
  %col107 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %59 = load i32** %col107, align 8
  %arrayidx108 = getelementptr inbounds i32* %59, i64 %idxprom
  %60 = load i32* %arrayidx108, align 4
  %61 = load i32* %i, align 4
  %idxprom109 = sext i32 %61 to i64
  %startrow = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 3
  %62 = load i32** %startrow, align 8
  %arrayidx110 = getelementptr inbounds i32* %62, i64 %idxprom109
  store i32 %60, i32* %arrayidx110, align 4
  br label %for.inc.111

for.inc.111:                                      ; preds = %for.body.106
  %63 = load i32* %i, align 4
  %inc112 = add nsw i32 %63, 1
  store i32 %inc112, i32* %i, align 4
  br label %for.cond.103

for.end.113:                                      ; preds = %for.cond.103
  %64 = load %struct._IO_FILE** %fp, align 8
  %call114 = call i32 @fclose(%struct._IO_FILE* %64)
  call void @LowerToFull(%struct.SMatrix* sret %tmp115, %struct.SMatrix* byval align 8 %M)
  %65 = bitcast %struct.SMatrix* %F to i8*
  %66 = bitcast %struct.SMatrix* %tmp115 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %65, i8* %66, i64 40, i32 8, i1 false)
  store i32 0, i32* @maxm, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.116

for.cond.116:                                     ; preds = %for.inc.139, %for.end.113
  %67 = load i32* %i, align 4
  %68 = load i32* %n, align 4
  %cmp117 = icmp slt i32 %67, %68
  br i1 %cmp117, label %for.body.119, label %for.end.141

for.body.119:                                     ; preds = %for.cond.116
  %69 = load i32* %i, align 4
  %add120 = add nsw i32 %69, 1
  %idxprom121 = sext i32 %add120 to i64
  %col122 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %70 = load i32** %col122, align 8
  %arrayidx123 = getelementptr inbounds i32* %70, i64 %idxprom121
  %71 = load i32* %arrayidx123, align 4
  %72 = load i32* %i, align 4
  %idxprom124 = sext i32 %72 to i64
  %col125 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %73 = load i32** %col125, align 8
  %arrayidx126 = getelementptr inbounds i32* %73, i64 %idxprom124
  %74 = load i32* %arrayidx126, align 4
  %sub = sub nsw i32 %71, %74
  %75 = load i32* @maxm, align 4
  %cmp127 = icmp sgt i32 %sub, %75
  br i1 %cmp127, label %if.then.129, label %if.end.138

if.then.129:                                      ; preds = %for.body.119
  %76 = load i32* %i, align 4
  %add130 = add nsw i32 %76, 1
  %idxprom131 = sext i32 %add130 to i64
  %col132 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %77 = load i32** %col132, align 8
  %arrayidx133 = getelementptr inbounds i32* %77, i64 %idxprom131
  %78 = load i32* %arrayidx133, align 4
  %79 = load i32* %i, align 4
  %idxprom134 = sext i32 %79 to i64
  %col135 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %80 = load i32** %col135, align 8
  %arrayidx136 = getelementptr inbounds i32* %80, i64 %idxprom134
  %81 = load i32* %arrayidx136, align 4
  %sub137 = sub nsw i32 %78, %81
  store i32 %sub137, i32* @maxm, align 4
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.129, %for.body.119
  br label %for.inc.139

for.inc.139:                                      ; preds = %if.end.138
  %82 = load i32* %i, align 4
  %inc140 = add nsw i32 %82, 1
  store i32 %inc140, i32* %i, align 4
  br label %for.cond.116

for.end.141:                                      ; preds = %for.cond.116
  %nz = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 5
  %83 = load double** %nz, align 8
  %tobool142 = icmp ne double* %83, null
  br i1 %tobool142, label %if.then.143, label %if.end.173

if.then.143:                                      ; preds = %for.end.141
  store i32 0, i32* %j, align 4
  br label %for.cond.144

for.cond.144:                                     ; preds = %for.inc.170, %if.then.143
  %84 = load i32* %j, align 4
  %85 = load i32* %n, align 4
  %cmp145 = icmp slt i32 %84, %85
  br i1 %cmp145, label %for.body.147, label %for.end.172

for.body.147:                                     ; preds = %for.cond.144
  %86 = load i32* %j, align 4
  %idxprom148 = sext i32 %86 to i64
  %col149 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %87 = load i32** %col149, align 8
  %arrayidx150 = getelementptr inbounds i32* %87, i64 %idxprom148
  %88 = load i32* %arrayidx150, align 4
  store i32 %88, i32* %i, align 4
  br label %for.cond.151

for.cond.151:                                     ; preds = %for.inc.167, %for.body.147
  %89 = load i32* %i, align 4
  %90 = load i32* %j, align 4
  %add152 = add nsw i32 %90, 1
  %idxprom153 = sext i32 %add152 to i64
  %col154 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 2
  %91 = load i32** %col154, align 8
  %arrayidx155 = getelementptr inbounds i32* %91, i64 %idxprom153
  %92 = load i32* %arrayidx155, align 4
  %cmp156 = icmp slt i32 %89, %92
  br i1 %cmp156, label %for.body.158, label %for.end.169

for.body.158:                                     ; preds = %for.cond.151
  %93 = load i32* %i, align 4
  %idxprom159 = sext i32 %93 to i64
  %row160 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 4
  %94 = load i32** %row160, align 8
  %arrayidx161 = getelementptr inbounds i32* %94, i64 %idxprom159
  %95 = load i32* %arrayidx161, align 4
  %96 = load i32* %j, align 4
  %n162 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 0
  %97 = load i32* %n162, align 4
  %call163 = call double @Value(i32 %95, i32 %96, i32 %97)
  %98 = load i32* %i, align 4
  %idxprom164 = sext i32 %98 to i64
  %nz165 = getelementptr inbounds %struct.SMatrix* %F, i32 0, i32 5
  %99 = load double** %nz165, align 8
  %arrayidx166 = getelementptr inbounds double* %99, i64 %idxprom164
  store double %call163, double* %arrayidx166, align 8
  br label %for.inc.167

for.inc.167:                                      ; preds = %for.body.158
  %100 = load i32* %i, align 4
  %inc168 = add nsw i32 %100, 1
  store i32 %inc168, i32* %i, align 4
  br label %for.cond.151

for.end.169:                                      ; preds = %for.cond.151
  br label %for.inc.170

for.inc.170:                                      ; preds = %for.end.169
  %101 = load i32* %j, align 4
  %inc171 = add nsw i32 %101, 1
  store i32 %inc171, i32* %j, align 4
  br label %for.cond.144

for.end.172:                                      ; preds = %for.cond.144
  br label %if.end.173

if.end.173:                                       ; preds = %for.end.172, %for.end.141
  %call174 = call i32 @FreeMatrix(%struct.SMatrix* byval align 8 %M)
  %102 = bitcast %struct.SMatrix* %agg.result to i8*
  %103 = bitcast %struct.SMatrix* %F to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %103, i64 40, i32 8, i1 false)
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*)

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...)

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...)

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...)

declare i32 @fclose(%struct._IO_FILE*)

; Function Attrs: nounwind uwtable
define internal i32 @DumpLine(%struct._IO_FILE* %fp) {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %c = alloca i32, align 4
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._IO_FILE** %fp.addr, align 8
  %call = call i32 @fgetc(%struct._IO_FILE* %0)
  store i32 %call, i32* %c, align 4
  %cmp = icmp ne i32 %call, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %1 = load i32* %retval
  ret i32 %1
}

declare i32 @fgetc(%struct._IO_FILE*)

; Function Attrs: nounwind uwtable
define internal i32 @ParseIntFormat(i8* %buf, i32* %num, i32* %size) {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %num.addr = alloca i32*, align 8
  %size.addr = alloca i32*, align 8
  %tmp = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32* %num, i32** %num.addr, align 8
  store i32* %size, i32** %size.addr, align 8
  %0 = load i8** %buf.addr, align 8
  store i8* %0, i8** %tmp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8** %tmp, align 8
  %incdec.ptr = getelementptr inbounds i8* %1, i32 1
  store i8* %incdec.ptr, i8** %tmp, align 8
  %2 = load i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 40
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i8** %tmp, align 8
  %4 = load i32** %num.addr, align 8
  %call = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %3, i8* getelementptr inbounds ([3 x i8]* @.str.7.111, i32 0, i32 0), i32* %4)
  br label %while.cond.2

while.cond.2:                                     ; preds = %while.body.7, %while.end
  %5 = load i8** %tmp, align 8
  %incdec.ptr3 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr3, i8** %tmp, align 8
  %6 = load i8* %5, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp ne i32 %conv4, 73
  br i1 %cmp5, label %while.body.7, label %while.end.8

while.body.7:                                     ; preds = %while.cond.2
  br label %while.cond.2

while.end.8:                                      ; preds = %while.cond.2
  %7 = load i8** %tmp, align 8
  %8 = load i32** %size.addr, align 8
  %call9 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %7, i8* getelementptr inbounds ([3 x i8]* @.str.7.111, i32 0, i32 0), i32* %8)
  %9 = load i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @ReadVector(%struct._IO_FILE* %fp, i32 %n, i32* %where, i32 %perline, i32 %persize) {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %n.addr = alloca i32, align 4
  %where.addr = alloca i32*, align 8
  %perline.addr = alloca i32, align 4
  %persize.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %item = alloca i32, align 4
  %tmp = alloca i8, align 1
  %buf = alloca [100 x i8], align 16
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32* %where, i32** %where.addr, align 8
  store i32 %perline, i32* %perline.addr, align 4
  store i32 %persize, i32* %persize.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [100 x i8]* %buf, i32 0, i32 0
  %2 = load %struct._IO_FILE** %fp.addr, align 8
  %call = call i8* @fgets(i8* %arraydecay, i32 100, %struct._IO_FILE* %2)
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %3 = load i32* %j, align 4
  %4 = load i32* %perline.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %6 = load i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32* %j, align 4
  %add = add nsw i32 %8, 1
  %9 = load i32* %persize.addr, align 4
  %mul = mul nsw i32 %add, %9
  %idxprom = sext i32 %mul to i64
  %arrayidx = getelementptr inbounds [100 x i8]* %buf, i32 0, i64 %idxprom
  %10 = load i8* %arrayidx, align 1
  store i8 %10, i8* %tmp, align 1
  %11 = load i32* %j, align 4
  %add4 = add nsw i32 %11, 1
  %12 = load i32* %persize.addr, align 4
  %mul5 = mul nsw i32 %add4, %12
  %idxprom6 = sext i32 %mul5 to i64
  %arrayidx7 = getelementptr inbounds [100 x i8]* %buf, i32 0, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %13 = load i32* %j, align 4
  %14 = load i32* %persize.addr, align 4
  %mul8 = mul nsw i32 %13, %14
  %idxprom9 = sext i32 %mul8 to i64
  %arrayidx10 = getelementptr inbounds [100 x i8]* %buf, i32 0, i64 %idxprom9
  %call11 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %arrayidx10)
  store i32 %call11, i32* %item, align 4
  %15 = load i8* %tmp, align 1
  %16 = load i32* %j, align 4
  %add12 = add nsw i32 %16, 1
  %17 = load i32* %persize.addr, align 4
  %mul13 = mul nsw i32 %add12, %17
  %idxprom14 = sext i32 %mul13 to i64
  %arrayidx15 = getelementptr inbounds [100 x i8]* %buf, i32 0, i64 %idxprom14
  store i8 %15, i8* %arrayidx15, align 1
  %18 = load i32* %item, align 4
  %sub = sub nsw i32 %18, 1
  %19 = load i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  %idxprom16 = sext i32 %19 to i64
  %20 = load i32** %where.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %20, i64 %idxprom16
  store i32 %sub, i32* %arrayidx17, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32* %j, align 4
  %inc18 = add nsw i32 %21, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i32* %retval
  ret i32 %22
}

declare i8* @fgets(i8*, i32, %struct._IO_FILE*)

; Function Attrs: nounwind uwtable
define internal void @LowerToFull(%struct.SMatrix* noalias sret %agg.result, %struct.SMatrix* byval align 8 %L) {
entry:
  %M = alloca %struct.SMatrix, align 8
  %link = alloca i32*, align 8
  %first = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nextj = alloca i32, align 4
  %ind = alloca i32, align 4
  %tmp = alloca %struct.SMatrix, align 8
  %s = alloca i32, align 4
  %n69 = alloca i32, align 4
  %s129 = alloca i32, align 4
  %n131 = alloca i32, align 4
  store i32 0, i32* %ind, align 4
  %n = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %0 = load i32* %n, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @malloc(i64 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %link, align 8
  %n1 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %2 = load i32* %n1, align 4
  %conv2 = sext i32 %2 to i64
  %mul3 = mul i64 %conv2, 4
  %call4 = call i8* @malloc(i64 %mul3)
  %3 = bitcast i8* %call4 to i32*
  store i32* %3, i32** %first, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %i, align 4
  %n5 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %5 = load i32* %n5, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32** %first, align 8
  %arrayidx = getelementptr inbounds i32* %7, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  %8 = load i32* %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %9 = load i32** %link, align 8
  %arrayidx8 = getelementptr inbounds i32* %9, i64 %idxprom7
  store i32 -1, i32* %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %n9 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %11 = load i32* %n9, align 4
  %m = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 1
  %12 = load i32* %m, align 4
  %n10 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %13 = load i32* %n10, align 4
  %sub = sub nsw i32 %12, %13
  %mul11 = mul nsw i32 2, %sub
  %n12 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %14 = load i32* %n12, align 4
  %add = add nsw i32 %mul11, %14
  call void @NewMatrix(%struct.SMatrix* sret %tmp, i32 %11, i32 %add, i32 0)
  %15 = bitcast %struct.SMatrix* %M to i8*
  %16 = bitcast %struct.SMatrix* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 40, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc.144, %for.end
  %17 = load i32* %i, align 4
  %n14 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %18 = load i32* %n14, align 4
  %cmp15 = icmp slt i32 %17, %18
  br i1 %cmp15, label %for.body.17, label %for.end.146

for.body.17:                                      ; preds = %for.cond.13
  %19 = load i32* %ind, align 4
  %20 = load i32* %i, align 4
  %idxprom18 = sext i32 %20 to i64
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %21 = load i32** %col, align 8
  %arrayidx19 = getelementptr inbounds i32* %21, i64 %idxprom18
  store i32 %19, i32* %arrayidx19, align 4
  %22 = load i32* %i, align 4
  %idxprom20 = sext i32 %22 to i64
  %col21 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %23 = load i32** %col21, align 8
  %arrayidx22 = getelementptr inbounds i32* %23, i64 %idxprom20
  %24 = load i32* %arrayidx22, align 4
  store i32 %24, i32* %j, align 4
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.42, %for.body.17
  %25 = load i32* %j, align 4
  %26 = load i32* %i, align 4
  %add24 = add nsw i32 %26, 1
  %idxprom25 = sext i32 %add24 to i64
  %col26 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %27 = load i32** %col26, align 8
  %arrayidx27 = getelementptr inbounds i32* %27, i64 %idxprom25
  %28 = load i32* %arrayidx27, align 4
  %cmp28 = icmp slt i32 %25, %28
  br i1 %cmp28, label %for.body.30, label %for.end.44

for.body.30:                                      ; preds = %for.cond.23
  %29 = load i32* %j, align 4
  %idxprom31 = sext i32 %29 to i64
  %row = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %30 = load i32** %row, align 8
  %arrayidx32 = getelementptr inbounds i32* %30, i64 %idxprom31
  %31 = load i32* %arrayidx32, align 4
  %32 = load i32* %i, align 4
  %cmp33 = icmp sge i32 %31, %32
  br i1 %cmp33, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.30
  %33 = load i32* %j, align 4
  %idxprom35 = sext i32 %33 to i64
  %row36 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %34 = load i32** %row36, align 8
  %arrayidx37 = getelementptr inbounds i32* %34, i64 %idxprom35
  %35 = load i32* %arrayidx37, align 4
  %36 = load i32* %ind, align 4
  %inc38 = add nsw i32 %36, 1
  store i32 %inc38, i32* %ind, align 4
  %idxprom39 = sext i32 %36 to i64
  %row40 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %37 = load i32** %row40, align 8
  %arrayidx41 = getelementptr inbounds i32* %37, i64 %idxprom39
  store i32 %35, i32* %arrayidx41, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.30
  br label %for.inc.42

for.inc.42:                                       ; preds = %if.end
  %38 = load i32* %j, align 4
  %inc43 = add nsw i32 %38, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond.23

for.end.44:                                       ; preds = %for.cond.23
  %39 = load i32* %i, align 4
  %idxprom45 = sext i32 %39 to i64
  %40 = load i32** %link, align 8
  %arrayidx46 = getelementptr inbounds i32* %40, i64 %idxprom45
  %41 = load i32* %arrayidx46, align 4
  store i32 %41, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.81, %for.end.44
  %42 = load i32* %j, align 4
  %cmp47 = icmp ne i32 %42, -1
  br i1 %cmp47, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %43 = load i32* %j, align 4
  %idxprom49 = sext i32 %43 to i64
  %44 = load i32** %link, align 8
  %arrayidx50 = getelementptr inbounds i32* %44, i64 %idxprom49
  %45 = load i32* %arrayidx50, align 4
  store i32 %45, i32* %nextj, align 4
  %46 = load i32* %j, align 4
  %47 = load i32* %ind, align 4
  %inc51 = add nsw i32 %47, 1
  store i32 %inc51, i32* %ind, align 4
  %idxprom52 = sext i32 %47 to i64
  %row53 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %48 = load i32** %row53, align 8
  %arrayidx54 = getelementptr inbounds i32* %48, i64 %idxprom52
  store i32 %46, i32* %arrayidx54, align 4
  %49 = load i32* %j, align 4
  %idxprom55 = sext i32 %49 to i64
  %50 = load i32** %first, align 8
  %arrayidx56 = getelementptr inbounds i32* %50, i64 %idxprom55
  %51 = load i32* %arrayidx56, align 4
  %inc57 = add nsw i32 %51, 1
  store i32 %inc57, i32* %arrayidx56, align 4
  %52 = load i32* %j, align 4
  %idxprom58 = sext i32 %52 to i64
  %53 = load i32** %first, align 8
  %arrayidx59 = getelementptr inbounds i32* %53, i64 %idxprom58
  %54 = load i32* %arrayidx59, align 4
  %55 = load i32* %j, align 4
  %add60 = add nsw i32 %55, 1
  %idxprom61 = sext i32 %add60 to i64
  %col62 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %56 = load i32** %col62, align 8
  %arrayidx63 = getelementptr inbounds i32* %56, i64 %idxprom61
  %57 = load i32* %arrayidx63, align 4
  %cmp64 = icmp slt i32 %54, %57
  br i1 %cmp64, label %if.then.66, label %if.end.81

if.then.66:                                       ; preds = %while.body
  %58 = load i32* %j, align 4
  %idxprom70 = sext i32 %58 to i64
  %59 = load i32** %first, align 8
  %arrayidx71 = getelementptr inbounds i32* %59, i64 %idxprom70
  %60 = load i32* %arrayidx71, align 4
  %idxprom72 = sext i32 %60 to i64
  %row73 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %61 = load i32** %row73, align 8
  %arrayidx74 = getelementptr inbounds i32* %61, i64 %idxprom72
  %62 = load i32* %arrayidx74, align 4
  store i32 %62, i32* %s, align 4
  %63 = load i32* %j, align 4
  store i32 %63, i32* %n69, align 4
  %64 = load i32* %s, align 4
  %idxprom75 = sext i32 %64 to i64
  %65 = load i32** %link, align 8
  %arrayidx76 = getelementptr inbounds i32* %65, i64 %idxprom75
  %66 = load i32* %arrayidx76, align 4
  %67 = load i32* %n69, align 4
  %idxprom77 = sext i32 %67 to i64
  %68 = load i32** %link, align 8
  %arrayidx78 = getelementptr inbounds i32* %68, i64 %idxprom77
  store i32 %66, i32* %arrayidx78, align 4
  %69 = load i32* %n69, align 4
  %70 = load i32* %s, align 4
  %idxprom79 = sext i32 %70 to i64
  %71 = load i32** %link, align 8
  %arrayidx80 = getelementptr inbounds i32* %71, i64 %idxprom79
  store i32 %69, i32* %arrayidx80, align 4
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.66, %while.body
  %72 = load i32* %nextj, align 4
  store i32 %72, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %73 = load i32* %i, align 4
  %idxprom82 = sext i32 %73 to i64
  %col83 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %74 = load i32** %col83, align 8
  %arrayidx84 = getelementptr inbounds i32* %74, i64 %idxprom82
  %75 = load i32* %arrayidx84, align 4
  %76 = load i32* %i, align 4
  %idxprom85 = sext i32 %76 to i64
  %77 = load i32** %first, align 8
  %arrayidx86 = getelementptr inbounds i32* %77, i64 %idxprom85
  store i32 %75, i32* %arrayidx86, align 4
  %78 = load i32* %i, align 4
  %idxprom87 = sext i32 %78 to i64
  %79 = load i32** %first, align 8
  %arrayidx88 = getelementptr inbounds i32* %79, i64 %idxprom87
  %80 = load i32* %arrayidx88, align 4
  %idxprom89 = sext i32 %80 to i64
  %row90 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %81 = load i32** %row90, align 8
  %arrayidx91 = getelementptr inbounds i32* %81, i64 %idxprom89
  %82 = load i32* %arrayidx91, align 4
  %83 = load i32* %i, align 4
  %cmp92 = icmp eq i32 %82, %83
  br i1 %cmp92, label %if.then.94, label %if.else

if.then.94:                                       ; preds = %while.end
  %84 = load i32* %i, align 4
  %idxprom95 = sext i32 %84 to i64
  %85 = load i32** %first, align 8
  %arrayidx96 = getelementptr inbounds i32* %85, i64 %idxprom95
  %86 = load i32* %arrayidx96, align 4
  %inc97 = add nsw i32 %86, 1
  store i32 %inc97, i32* %arrayidx96, align 4
  br label %if.end.118

if.else:                                          ; preds = %while.end
  %87 = load %struct._IO_FILE** @stderr, align 8
  %88 = load i32* %i, align 4
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([23 x i8]* @.str.15.119, i32 0, i32 0), i32 %88)
  %89 = load i32* %i, align 4
  %idxprom99 = sext i32 %89 to i64
  %col100 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %90 = load i32** %col100, align 8
  %arrayidx101 = getelementptr inbounds i32* %90, i64 %idxprom99
  %91 = load i32* %arrayidx101, align 4
  store i32 %91, i32* %j, align 4
  br label %for.cond.102

for.cond.102:                                     ; preds = %for.inc.114, %if.else
  %92 = load i32* %j, align 4
  %93 = load i32* %i, align 4
  %add103 = add nsw i32 %93, 1
  %idxprom104 = sext i32 %add103 to i64
  %col105 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %94 = load i32** %col105, align 8
  %arrayidx106 = getelementptr inbounds i32* %94, i64 %idxprom104
  %95 = load i32* %arrayidx106, align 4
  %cmp107 = icmp slt i32 %92, %95
  br i1 %cmp107, label %for.body.109, label %for.end.116

for.body.109:                                     ; preds = %for.cond.102
  %96 = load %struct._IO_FILE** @stderr, align 8
  %97 = load i32* %j, align 4
  %idxprom110 = sext i32 %97 to i64
  %row111 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %98 = load i32** %row111, align 8
  %arrayidx112 = getelementptr inbounds i32* %98, i64 %idxprom110
  %99 = load i32* %arrayidx112, align 4
  %call113 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([4 x i8]* @.str.16.120, i32 0, i32 0), i32 %99)
  br label %for.inc.114

for.inc.114:                                      ; preds = %for.body.109
  %100 = load i32* %j, align 4
  %inc115 = add nsw i32 %100, 1
  store i32 %inc115, i32* %j, align 4
  br label %for.cond.102

for.end.116:                                      ; preds = %for.cond.102
  %101 = load %struct._IO_FILE** @stderr, align 8
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([2 x i8]* @.str.17.121, i32 0, i32 0))
  br label %if.end.118

if.end.118:                                       ; preds = %for.end.116, %if.then.94
  %102 = load i32* %i, align 4
  %idxprom119 = sext i32 %102 to i64
  %103 = load i32** %first, align 8
  %arrayidx120 = getelementptr inbounds i32* %103, i64 %idxprom119
  %104 = load i32* %arrayidx120, align 4
  %105 = load i32* %i, align 4
  %add121 = add nsw i32 %105, 1
  %idxprom122 = sext i32 %add121 to i64
  %col123 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 2
  %106 = load i32** %col123, align 8
  %arrayidx124 = getelementptr inbounds i32* %106, i64 %idxprom122
  %107 = load i32* %arrayidx124, align 4
  %cmp125 = icmp slt i32 %104, %107
  br i1 %cmp125, label %if.then.127, label %if.end.143

if.then.127:                                      ; preds = %if.end.118
  %108 = load i32* %i, align 4
  %idxprom132 = sext i32 %108 to i64
  %109 = load i32** %first, align 8
  %arrayidx133 = getelementptr inbounds i32* %109, i64 %idxprom132
  %110 = load i32* %arrayidx133, align 4
  %idxprom134 = sext i32 %110 to i64
  %row135 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 4
  %111 = load i32** %row135, align 8
  %arrayidx136 = getelementptr inbounds i32* %111, i64 %idxprom134
  %112 = load i32* %arrayidx136, align 4
  store i32 %112, i32* %s129, align 4
  %113 = load i32* %i, align 4
  store i32 %113, i32* %n131, align 4
  %114 = load i32* %s129, align 4
  %idxprom137 = sext i32 %114 to i64
  %115 = load i32** %link, align 8
  %arrayidx138 = getelementptr inbounds i32* %115, i64 %idxprom137
  %116 = load i32* %arrayidx138, align 4
  %117 = load i32* %n131, align 4
  %idxprom139 = sext i32 %117 to i64
  %118 = load i32** %link, align 8
  %arrayidx140 = getelementptr inbounds i32* %118, i64 %idxprom139
  store i32 %116, i32* %arrayidx140, align 4
  %119 = load i32* %n131, align 4
  %120 = load i32* %s129, align 4
  %idxprom141 = sext i32 %120 to i64
  %121 = load i32** %link, align 8
  %arrayidx142 = getelementptr inbounds i32* %121, i64 %idxprom141
  store i32 %119, i32* %arrayidx142, align 4
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.127, %if.end.118
  br label %for.inc.144

for.inc.144:                                      ; preds = %if.end.143
  %122 = load i32* %i, align 4
  %inc145 = add nsw i32 %122, 1
  store i32 %inc145, i32* %i, align 4
  br label %for.cond.13

for.end.146:                                      ; preds = %for.cond.13
  %123 = load i32* %ind, align 4
  %n147 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 0
  %124 = load i32* %n147, align 4
  %idxprom148 = sext i32 %124 to i64
  %col149 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %125 = load i32** %col149, align 8
  %arrayidx150 = getelementptr inbounds i32* %125, i64 %idxprom148
  store i32 %123, i32* %arrayidx150, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.151

for.cond.151:                                     ; preds = %for.inc.161, %for.end.146
  %126 = load i32* %i, align 4
  %n152 = getelementptr inbounds %struct.SMatrix* %L, i32 0, i32 0
  %127 = load i32* %n152, align 4
  %cmp153 = icmp sle i32 %126, %127
  br i1 %cmp153, label %for.body.155, label %for.end.163

for.body.155:                                     ; preds = %for.cond.151
  %128 = load i32* %i, align 4
  %idxprom156 = sext i32 %128 to i64
  %col157 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %129 = load i32** %col157, align 8
  %arrayidx158 = getelementptr inbounds i32* %129, i64 %idxprom156
  %130 = load i32* %arrayidx158, align 4
  %131 = load i32* %i, align 4
  %idxprom159 = sext i32 %131 to i64
  %startrow = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 3
  %132 = load i32** %startrow, align 8
  %arrayidx160 = getelementptr inbounds i32* %132, i64 %idxprom159
  store i32 %130, i32* %arrayidx160, align 4
  br label %for.inc.161

for.inc.161:                                      ; preds = %for.body.155
  %133 = load i32* %i, align 4
  %inc162 = add nsw i32 %133, 1
  store i32 %inc162, i32* %i, align 4
  br label %for.cond.151

for.end.163:                                      ; preds = %for.cond.151
  %134 = load i32* %ind, align 4
  %m164 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 1
  %135 = load i32* %m164, align 4
  %cmp165 = icmp ne i32 %134, %135
  br i1 %cmp165, label %if.then.167, label %if.end.169

if.then.167:                                      ; preds = %for.end.163
  %call168 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([11 x i8]* @.str.18.122, i32 0, i32 0))
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.167, %for.end.163
  %136 = load i32** %link, align 8
  %call170 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %136)
  %137 = load i32** %first, align 8
  %call171 = call i32 (i32*, ...) *bitcast (i32 (...)* @free to i32 (i32*, ...)*)(i32* %137)
  %138 = bitcast %struct.SMatrix* %agg.result to i8*
  %139 = bitcast %struct.SMatrix* %M to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* %139, i64 40, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @ISort(%struct.SMatrix* byval align 8 %M, i32 %k) {
entry:
  %retval = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %hi = alloca i32, align 4
  %lo = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca double, align 8
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32* %k.addr, align 4
  %add = add nsw i32 %0, 1
  %idxprom = sext i32 %add to i64
  %col = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %1 = load i32** %col, align 8
  %arrayidx = getelementptr inbounds i32* %1, i64 %idxprom
  %2 = load i32* %arrayidx, align 4
  store i32 %2, i32* %hi, align 4
  %3 = load i32* %k.addr, align 4
  %idxprom2 = sext i32 %3 to i64
  %col3 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 2
  %4 = load i32** %col3, align 8
  %arrayidx4 = getelementptr inbounds i32* %4, i64 %idxprom2
  %5 = load i32* %arrayidx4, align 4
  store i32 %5, i32* %lo, align 4
  %6 = load i32* %lo, align 4
  store i32 %6, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32* %i, align 4
  %8 = load i32* %hi, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32* %i, align 4
  %idxprom5 = sext i32 %9 to i64
  %row = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %10 = load i32** %row, align 8
  %arrayidx6 = getelementptr inbounds i32* %10, i64 %idxprom5
  %11 = load i32* %arrayidx6, align 4
  store i32 %11, i32* %tmp, align 4
  %12 = load i32* %i, align 4
  store i32 %12, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %13 = load i32* %j, align 4
  %sub = sub nsw i32 %13, 1
  %idxprom7 = sext i32 %sub to i64
  %row8 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %14 = load i32** %row8, align 8
  %arrayidx9 = getelementptr inbounds i32* %14, i64 %idxprom7
  %15 = load i32* %arrayidx9, align 4
  %16 = load i32* %tmp, align 4
  %cmp10 = icmp sgt i32 %15, %16
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %17 = load i32* %j, align 4
  %18 = load i32* %lo, align 4
  %cmp11 = icmp sgt i32 %17, %18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %19 = phi i1 [ false, %while.cond ], [ %cmp11, %land.rhs ]
  br i1 %19, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %20 = load i32* %j, align 4
  %sub12 = sub nsw i32 %20, 1
  %idxprom13 = sext i32 %sub12 to i64
  %row14 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %21 = load i32** %row14, align 8
  %arrayidx15 = getelementptr inbounds i32* %21, i64 %idxprom13
  %22 = load i32* %arrayidx15, align 4
  %23 = load i32* %j, align 4
  %idxprom16 = sext i32 %23 to i64
  %row17 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %24 = load i32** %row17, align 8
  %arrayidx18 = getelementptr inbounds i32* %24, i64 %idxprom16
  store i32 %22, i32* %arrayidx18, align 4
  %25 = load i32* %j, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %26 = load i32* %tmp, align 4
  %27 = load i32* %j, align 4
  %idxprom19 = sext i32 %27 to i64
  %row20 = getelementptr inbounds %struct.SMatrix* %M, i32 0, i32 4
  %28 = load i32** %row20, align 8
  %arrayidx21 = getelementptr inbounds i32* %28, i64 %idxprom19
  store i32 %26, i32* %arrayidx21, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %29 = load i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @MallocInit(i32 %P) {
entry:
  %retval = alloca i32, align 4
  %P.addr = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %P, i32* %P.addr, align 4
  %0 = load i32* %P.addr, align 4
  store i32 %0, i32* @mallocP, align 4
  %1 = load i32* @mallocP, align 4
  %add = add nsw i32 %1, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 64
  %call = call i8* @malloc(i64 %mul)
  %2 = bitcast i8* %call to %struct.MemPool*
  store %struct.MemPool* %2, %struct.MemPool** @mem_pool, align 8
  %3 = load %struct.MemPool** @mem_pool, align 8
  %incdec.ptr = getelementptr inbounds %struct.MemPool* %3, i32 1
  store %struct.MemPool* %incdec.ptr, %struct.MemPool** @mem_pool, align 8
  store i32 -1, i32* %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %p, align 4
  %5 = load i32* @mallocP, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %p, align 4
  %call2 = call i32 @InitOneFreeList(i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %p, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @InitOneFreeList(i32 %p) {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32* %p.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx = getelementptr inbounds %struct.MemPool* %1, i64 %idxprom
  %memoryLock = getelementptr inbounds %struct.MemPool* %arrayidx, i32 0, i32 0
  %call = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %memoryLock, %union.pthread_mutexattr_t* null)
  %2 = load i32* %p.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i8* @malloc(i64 136)
  %3 = bitcast i8* %call1 to i32**
  %4 = load i32* %p.addr, align 4
  %idxprom2 = sext i32 %4 to i64
  %5 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx3 = getelementptr inbounds %struct.MemPool* %5, i64 %idxprom2
  %freeBlock = getelementptr inbounds %struct.MemPool* %arrayidx3, i32 0, i32 1
  store i32** %3, i32*** %freeBlock, align 8
  %6 = load i32* %p.addr, align 4
  %idxprom4 = sext i32 %6 to i64
  %7 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx5 = getelementptr inbounds %struct.MemPool* %7, i64 %idxprom4
  %freeBlock6 = getelementptr inbounds %struct.MemPool* %arrayidx5, i32 0, i32 1
  %8 = load i32*** %freeBlock6, align 8
  %9 = load i32* %p.addr, align 4
  %call7 = call i32 (i32**, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (i32**, i64, i32, ...)*)(i32** %8, i64 136, i32 %9)
  br label %if.end

if.else:                                          ; preds = %entry
  %call8 = call i8* @malloc(i64 136)
  %10 = bitcast i8* %call8 to i32**
  %11 = load i32* %p.addr, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx10 = getelementptr inbounds %struct.MemPool* %12, i64 %idxprom9
  %freeBlock11 = getelementptr inbounds %struct.MemPool* %arrayidx10, i32 0, i32 1
  store i32** %10, i32*** %freeBlock11, align 8
  %13 = load i32* %p.addr, align 4
  %idxprom12 = sext i32 %13 to i64
  %14 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx13 = getelementptr inbounds %struct.MemPool* %14, i64 %idxprom12
  %freeBlock14 = getelementptr inbounds %struct.MemPool* %arrayidx13, i32 0, i32 1
  %15 = load i32*** %freeBlock14, align 8
  %call15 = call i32 (i32**, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (i32**, i64, i32, ...)*)(i32** %15, i64 136, i32 888)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32* %j, align 4
  %cmp16 = icmp sle i32 %16, 16
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32* %j, align 4
  %idxprom17 = sext i32 %17 to i64
  %18 = load i32* %p.addr, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx19 = getelementptr inbounds %struct.MemPool* %19, i64 %idxprom18
  %freeBlock20 = getelementptr inbounds %struct.MemPool* %arrayidx19, i32 0, i32 1
  %20 = load i32*** %freeBlock20, align 8
  %arrayidx21 = getelementptr inbounds i32** %20, i64 %idxprom17
  store volatile i32* null, i32** %arrayidx21, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i32* %p.addr, align 4
  %idxprom22 = sext i32 %22 to i64
  %23 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx23 = getelementptr inbounds %struct.MemPool* %23, i64 %idxprom22
  %touched = getelementptr inbounds %struct.MemPool* %arrayidx23, i32 0, i32 3
  store i32 0, i32* %touched, align 4
  %24 = load i32* %p.addr, align 4
  %idxprom24 = sext i32 %24 to i64
  %25 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx25 = getelementptr inbounds %struct.MemPool* %25, i64 %idxprom24
  %maxm = getelementptr inbounds %struct.MemPool* %arrayidx25, i32 0, i32 4
  store i32 0, i32* %maxm, align 4
  %26 = load i32* %p.addr, align 4
  %idxprom26 = sext i32 %26 to i64
  %27 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx27 = getelementptr inbounds %struct.MemPool* %27, i64 %idxprom26
  %tally = getelementptr inbounds %struct.MemPool* %arrayidx27, i32 0, i32 2
  store i32 0, i32* %tally, align 4
  %28 = load i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @MallocStats() {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.131, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* @mallocP, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx = getelementptr inbounds %struct.MemPool* %3, i64 %idxprom
  %touched = getelementptr inbounds %struct.MemPool* %arrayidx, i32 0, i32 3
  %4 = load i32* %touched, align 4
  %cmp1 = icmp sgt i32 %4, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %6 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx3 = getelementptr inbounds %struct.MemPool* %6, i64 %idxprom2
  %maxm = getelementptr inbounds %struct.MemPool* %arrayidx3, i32 0, i32 4
  %7 = load i32* %maxm, align 4
  %call4 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([5 x i8]* @.str.1.132, i32 0, i32 0), i32 %7)
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  %idxprom5 = sext i32 %8 to i64
  %9 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx6 = getelementptr inbounds %struct.MemPool* %9, i64 %idxprom5
  %maxm7 = getelementptr inbounds %struct.MemPool* %arrayidx6, i32 0, i32 4
  %10 = load i32* %maxm7, align 4
  %call8 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([4 x i8]* @.str.2.133, i32 0, i32 0), i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.3.134, i32 0, i32 0))
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @FindBucket(i32 %size) {
entry:
  %size.addr = alloca i32, align 4
  %bucket = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32* %size.addr, align 4
  %cmp = icmp sgt i32 %0, 32768
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 16, i32* %bucket, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %bucket, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %1 = load i32* %bucket, align 4
  %shl = shl i32 1, %1
  %2 = load i32* %size.addr, align 4
  %cmp1 = icmp slt i32 %shl, %2
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32* %bucket, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %bucket, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %4 = load i32* %bucket, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i8* @MyMalloc(i32 %size, i32 %home) {
entry:
  %size.addr = alloca i32, align 4
  %home.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bucket = alloca i32, align 4
  %leftover = alloca i32, align 4
  %alloc_size = alloca i32, align 4
  %d = alloca i32*, align 8
  %result = alloca i32*, align 8
  %prev = alloca i32*, align 8
  %freespace = alloca i32*, align 8
  %freelast = alloca i32*, align 8
  %block_size = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 %home, i32* %home.addr, align 4
  %0 = load i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %size.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32* %home.addr, align 4
  %cmp1 = icmp eq i32 %1, 888
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -1, i32* %home.addr, align 4
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %2 = load i32* %size.addr, align 4
  %call = call i32 @FindBucket(i32 %2)
  store i32 %call, i32* %bucket, align 4
  %3 = load i32* %bucket, align 4
  %cmp4 = icmp slt i32 %3, 16
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %4 = load i32* %bucket, align 4
  %shl = shl i32 1, %4
  store i32 %shl, i32* %alloc_size, align 4
  br label %if.end.6

if.else:                                          ; preds = %if.end.3
  %5 = load i32* %size.addr, align 4
  %add = add nsw i32 %5, 8
  %sub = sub nsw i32 %add, 1
  %div = sdiv i32 %sub, 8
  %mul = mul nsw i32 %div, 8
  store i32 %mul, i32* %alloc_size, align 4
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  store i32* null, i32** %result, align 8
  %6 = load i32* %bucket, align 4
  %cmp7 = icmp slt i32 %6, 16
  br i1 %cmp7, label %if.then.8, label %if.end.33

if.then.8:                                        ; preds = %if.end.6
  %7 = load i32* %bucket, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32* %home.addr, align 4
  %idxprom9 = sext i32 %8 to i64
  %9 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx = getelementptr inbounds %struct.MemPool* %9, i64 %idxprom9
  %freeBlock = getelementptr inbounds %struct.MemPool* %arrayidx, i32 0, i32 1
  %10 = load i32*** %freeBlock, align 8
  %arrayidx10 = getelementptr inbounds i32** %10, i64 %idxprom
  %11 = load volatile i32** %arrayidx10, align 8
  %tobool = icmp ne i32* %11, null
  br i1 %tobool, label %if.then.11, label %if.end.32

if.then.11:                                       ; preds = %if.then.8
  %12 = load i32* %home.addr, align 4
  %idxprom12 = sext i32 %12 to i64
  %13 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx13 = getelementptr inbounds %struct.MemPool* %13, i64 %idxprom12
  %memoryLock = getelementptr inbounds %struct.MemPool* %arrayidx13, i32 0, i32 0
  %call14 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %memoryLock)
  %14 = load i32* %bucket, align 4
  %idxprom15 = sext i32 %14 to i64
  %15 = load i32* %home.addr, align 4
  %idxprom16 = sext i32 %15 to i64
  %16 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx17 = getelementptr inbounds %struct.MemPool* %16, i64 %idxprom16
  %freeBlock18 = getelementptr inbounds %struct.MemPool* %arrayidx17, i32 0, i32 1
  %17 = load i32*** %freeBlock18, align 8
  %arrayidx19 = getelementptr inbounds i32** %17, i64 %idxprom15
  %18 = load volatile i32** %arrayidx19, align 8
  store i32* %18, i32** %result, align 8
  %19 = load i32** %result, align 8
  %tobool20 = icmp ne i32* %19, null
  br i1 %tobool20, label %if.then.21, label %if.end.27

if.then.21:                                       ; preds = %if.then.11
  %20 = load i32** %result, align 8
  %21 = bitcast i32* %20 to i32**
  %22 = load i32** %21, align 8
  %23 = load i32* %bucket, align 4
  %idxprom22 = sext i32 %23 to i64
  %24 = load i32* %home.addr, align 4
  %idxprom23 = sext i32 %24 to i64
  %25 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx24 = getelementptr inbounds %struct.MemPool* %25, i64 %idxprom23
  %freeBlock25 = getelementptr inbounds %struct.MemPool* %arrayidx24, i32 0, i32 1
  %26 = load i32*** %freeBlock25, align 8
  %arrayidx26 = getelementptr inbounds i32** %26, i64 %idxprom22
  store volatile i32* %22, i32** %arrayidx26, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.21, %if.then.11
  %27 = load i32* %home.addr, align 4
  %idxprom28 = sext i32 %27 to i64
  %28 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx29 = getelementptr inbounds %struct.MemPool* %28, i64 %idxprom28
  %memoryLock30 = getelementptr inbounds %struct.MemPool* %arrayidx29, i32 0, i32 0
  %call31 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %memoryLock30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.27, %if.then.8
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.6
  %29 = load i32** %result, align 8
  %tobool34 = icmp ne i32* %29, null
  br i1 %tobool34, label %if.end.81, label %if.then.35

if.then.35:                                       ; preds = %if.end.33
  %30 = load i32* %home.addr, align 4
  %idxprom36 = sext i32 %30 to i64
  %31 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx37 = getelementptr inbounds %struct.MemPool* %31, i64 %idxprom36
  %memoryLock38 = getelementptr inbounds %struct.MemPool* %arrayidx37, i32 0, i32 0
  %call39 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %memoryLock38)
  store i32* null, i32** %prev, align 8
  %32 = load i32* %home.addr, align 4
  %idxprom40 = sext i32 %32 to i64
  %33 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx41 = getelementptr inbounds %struct.MemPool* %33, i64 %idxprom40
  %freeBlock42 = getelementptr inbounds %struct.MemPool* %arrayidx41, i32 0, i32 1
  %34 = load i32*** %freeBlock42, align 8
  %arrayidx43 = getelementptr inbounds i32** %34, i64 16
  %35 = load volatile i32** %arrayidx43, align 8
  store i32* %35, i32** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.76, %if.then.35
  %36 = load i32** %d, align 8
  %tobool44 = icmp ne i32* %36, null
  br i1 %tobool44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load i32** %d, align 8
  %arrayidx45 = getelementptr inbounds i32* %37, i64 -1
  %38 = load i32* %arrayidx45, align 4
  store i32 %38, i32* %block_size, align 4
  %39 = load i32* %block_size, align 4
  %40 = load i32* %alloc_size, align 4
  %cmp46 = icmp uge i32 %39, %40
  br i1 %cmp46, label %if.then.47, label %if.end.76

if.then.47:                                       ; preds = %while.body
  %41 = load i32* %block_size, align 4
  %42 = load i32* %alloc_size, align 4
  %sub48 = sub i32 %41, %42
  %conv = zext i32 %sub48 to i64
  %sub49 = sub i64 %conv, 8
  %conv50 = trunc i64 %sub49 to i32
  store i32 %conv50, i32* %leftover, align 4
  %43 = load i32** %d, align 8
  %44 = load i32* %leftover, align 4
  %conv51 = sext i32 %44 to i64
  %div52 = udiv i64 %conv51, 4
  %add.ptr = getelementptr inbounds i32* %43, i64 %div52
  %add.ptr53 = getelementptr inbounds i32* %add.ptr, i64 2
  store i32* %add.ptr53, i32** %result, align 8
  %45 = load i32* %alloc_size, align 4
  %46 = load i32** %result, align 8
  %arrayidx54 = getelementptr inbounds i32* %46, i64 -1
  store i32 %45, i32* %arrayidx54, align 4
  %47 = load i32* %home.addr, align 4
  %48 = load i32** %result, align 8
  %arrayidx55 = getelementptr inbounds i32* %48, i64 -2
  store i32 %47, i32* %arrayidx55, align 4
  %49 = load i32* %leftover, align 4
  %cmp56 = icmp sgt i32 %49, 32768
  br i1 %cmp56, label %if.then.58, label %if.else.60

if.then.58:                                       ; preds = %if.then.47
  %50 = load i32* %leftover, align 4
  %51 = load i32** %d, align 8
  %arrayidx59 = getelementptr inbounds i32* %51, i64 -1
  store i32 %50, i32* %arrayidx59, align 4
  br label %if.end.75

if.else.60:                                       ; preds = %if.then.47
  %52 = load i32** %prev, align 8
  %tobool61 = icmp ne i32* %52, null
  br i1 %tobool61, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %if.else.60
  %53 = load i32** %d, align 8
  %54 = bitcast i32* %53 to i32**
  %55 = load i32** %54, align 8
  %56 = load i32** %prev, align 8
  %57 = bitcast i32* %56 to i32**
  store i32* %55, i32** %57, align 8
  br label %if.end.68

if.else.63:                                       ; preds = %if.else.60
  %58 = load i32** %d, align 8
  %59 = bitcast i32* %58 to i32**
  %60 = load i32** %59, align 8
  %61 = load i32* %home.addr, align 4
  %idxprom64 = sext i32 %61 to i64
  %62 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx65 = getelementptr inbounds %struct.MemPool* %62, i64 %idxprom64
  %freeBlock66 = getelementptr inbounds %struct.MemPool* %arrayidx65, i32 0, i32 1
  %63 = load i32*** %freeBlock66, align 8
  %arrayidx67 = getelementptr inbounds i32** %63, i64 16
  store volatile i32* %60, i32** %arrayidx67, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.63, %if.then.62
  %64 = load i32* %leftover, align 4
  %cmp69 = icmp sgt i32 %64, 0
  br i1 %cmp69, label %if.then.71, label %if.end.74

if.then.71:                                       ; preds = %if.end.68
  %65 = load i32* %leftover, align 4
  %66 = load i32** %d, align 8
  %arrayidx72 = getelementptr inbounds i32* %66, i64 -1
  store i32 %65, i32* %arrayidx72, align 4
  %67 = load i32** %d, align 8
  %call73 = call i32 @MyFreeNow(i32* %67)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %if.end.68
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.then.58
  br label %while.end

if.end.76:                                        ; preds = %while.body
  %68 = load i32** %d, align 8
  store i32* %68, i32** %prev, align 8
  %69 = load i32** %d, align 8
  %70 = bitcast i32* %69 to i32**
  %71 = load i32** %70, align 8
  store i32* %71, i32** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %if.end.75, %while.cond
  %72 = load i32* %home.addr, align 4
  %idxprom77 = sext i32 %72 to i64
  %73 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx78 = getelementptr inbounds %struct.MemPool* %73, i64 %idxprom77
  %memoryLock79 = getelementptr inbounds %struct.MemPool* %arrayidx78, i32 0, i32 0
  %call80 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %memoryLock79)
  br label %if.end.81

if.end.81:                                        ; preds = %while.end, %if.end.33
  %74 = load i32** %result, align 8
  %tobool82 = icmp ne i32* %74, null
  br i1 %tobool82, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %if.end.81
  %75 = load i32** %result, align 8
  %76 = bitcast i32* %75 to i32**
  store i32* null, i32** %76, align 8
  br label %if.end.135

if.else.84:                                       ; preds = %if.end.81
  %77 = load i32* %alloc_size, align 4
  %cmp85 = icmp sgt i32 %77, 262144
  br i1 %cmp85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.84
  %78 = load i32* %alloc_size, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else.84
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %78, %cond.true ], [ 262144, %cond.false ]
  store i32 %cond, i32* %block_size, align 4
  %79 = load %struct.GlobalMemory** @Global, align 8
  %memLock = getelementptr inbounds %struct.GlobalMemory* %79, i32 0, i32 2
  %call87 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %memLock)
  %80 = load i32* %block_size, align 4
  %conv88 = zext i32 %80 to i64
  %add89 = add i64 %conv88, 8
  %call90 = call i8* @malloc(i64 %add89)
  %81 = bitcast i8* %call90 to i32*
  store i32* %81, i32** %freespace, align 8
  %82 = load i32** %freespace, align 8
  %83 = load i32* %block_size, align 4
  %conv91 = zext i32 %83 to i64
  %add92 = add i64 %conv91, 8
  %84 = load i32* %home.addr, align 4
  %call93 = call i32 (i32*, i64, i32, ...) *bitcast (i32 (i32*, i32, i32)* @MigrateMem to i32 (i32*, i64, i32, ...)*)(i32* %82, i64 %add92, i32 %84)
  %85 = load i32* %home.addr, align 4
  %idxprom94 = sext i32 %85 to i64
  %86 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx95 = getelementptr inbounds %struct.MemPool* %86, i64 %idxprom94
  %touched = getelementptr inbounds %struct.MemPool* %arrayidx95, i32 0, i32 3
  %87 = load i32* %touched, align 4
  %inc = add nsw i32 %87, 1
  store i32 %inc, i32* %touched, align 4
  %88 = load %struct.GlobalMemory** @Global, align 8
  %memLock96 = getelementptr inbounds %struct.GlobalMemory* %88, i32 0, i32 2
  %call97 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %memLock96)
  %89 = load i32** %freespace, align 8
  %add.ptr98 = getelementptr inbounds i32* %89, i64 2
  store i32* %add.ptr98, i32** %freespace, align 8
  %90 = load i32* %block_size, align 4
  %91 = load i32** %freespace, align 8
  %arrayidx99 = getelementptr inbounds i32* %91, i64 -1
  store i32 %90, i32* %arrayidx99, align 4
  %92 = load i32* %home.addr, align 4
  %93 = load i32** %freespace, align 8
  %arrayidx100 = getelementptr inbounds i32* %93, i64 -2
  store i32 %92, i32* %arrayidx100, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %94 = load i32* %i, align 4
  %conv101 = sext i32 %94 to i64
  %95 = load i32* %block_size, align 4
  %conv102 = zext i32 %95 to i64
  %div103 = udiv i64 %conv102, 4
  %cmp104 = icmp ult i64 %conv101, %div103
  br i1 %cmp104, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %96 = load i32* %i, align 4
  %idxprom106 = sext i32 %96 to i64
  %97 = load i32** %freespace, align 8
  %arrayidx107 = getelementptr inbounds i32* %97, i64 %idxprom106
  store i32 0, i32* %arrayidx107, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %98 = load i32* %i, align 4
  %inc108 = add nsw i32 %98, 1
  store i32 %inc108, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %99 = load i32* %block_size, align 4
  %100 = load i32* %alloc_size, align 4
  %cmp109 = icmp eq i32 %99, %100
  br i1 %cmp109, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %for.end
  %101 = load i32** %freespace, align 8
  store i32* %101, i32** %result, align 8
  br label %if.end.134

if.else.112:                                      ; preds = %for.end
  %102 = load i32** %freespace, align 8
  %arrayidx113 = getelementptr inbounds i32* %102, i64 -1
  %103 = load i32* %arrayidx113, align 4
  %104 = load i32* %home.addr, align 4
  %idxprom114 = sext i32 %104 to i64
  %105 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx115 = getelementptr inbounds %struct.MemPool* %105, i64 %idxprom114
  %tally = getelementptr inbounds %struct.MemPool* %arrayidx115, i32 0, i32 2
  %106 = load i32* %tally, align 4
  %add116 = add i32 %106, %103
  store i32 %add116, i32* %tally, align 4
  %107 = load i32* %home.addr, align 4
  %idxprom117 = sext i32 %107 to i64
  %108 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx118 = getelementptr inbounds %struct.MemPool* %108, i64 %idxprom117
  %tally119 = getelementptr inbounds %struct.MemPool* %arrayidx118, i32 0, i32 2
  %109 = load i32* %tally119, align 4
  %110 = load i32* %home.addr, align 4
  %idxprom120 = sext i32 %110 to i64
  %111 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx121 = getelementptr inbounds %struct.MemPool* %111, i64 %idxprom120
  %maxm = getelementptr inbounds %struct.MemPool* %arrayidx121, i32 0, i32 4
  %112 = load i32* %maxm, align 4
  %cmp122 = icmp sgt i32 %109, %112
  br i1 %cmp122, label %if.then.124, label %if.end.131

if.then.124:                                      ; preds = %if.else.112
  %113 = load i32* %home.addr, align 4
  %idxprom125 = sext i32 %113 to i64
  %114 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx126 = getelementptr inbounds %struct.MemPool* %114, i64 %idxprom125
  %tally127 = getelementptr inbounds %struct.MemPool* %arrayidx126, i32 0, i32 2
  %115 = load i32* %tally127, align 4
  %116 = load i32* %home.addr, align 4
  %idxprom128 = sext i32 %116 to i64
  %117 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx129 = getelementptr inbounds %struct.MemPool* %117, i64 %idxprom128
  %maxm130 = getelementptr inbounds %struct.MemPool* %arrayidx129, i32 0, i32 4
  store i32 %115, i32* %maxm130, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.124, %if.else.112
  %118 = load i32** %freespace, align 8
  %call132 = call i32 @MyFree(i32* %118)
  %119 = load i32* %alloc_size, align 4
  %120 = load i32* %home.addr, align 4
  %call133 = call i8* @MyMalloc(i32 %119, i32 %120)
  %121 = bitcast i8* %call133 to i32*
  store i32* %121, i32** %result, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.131, %if.then.111
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.83
  %122 = load i32** %result, align 8
  %arrayidx136 = getelementptr inbounds i32* %122, i64 -1
  %123 = load i32* %arrayidx136, align 4
  %124 = load i32* %home.addr, align 4
  %idxprom137 = sext i32 %124 to i64
  %125 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx138 = getelementptr inbounds %struct.MemPool* %125, i64 %idxprom137
  %tally139 = getelementptr inbounds %struct.MemPool* %arrayidx138, i32 0, i32 2
  %126 = load i32* %tally139, align 4
  %add140 = add i32 %126, %123
  store i32 %add140, i32* %tally139, align 4
  %127 = load i32* %home.addr, align 4
  %idxprom141 = sext i32 %127 to i64
  %128 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx142 = getelementptr inbounds %struct.MemPool* %128, i64 %idxprom141
  %tally143 = getelementptr inbounds %struct.MemPool* %arrayidx142, i32 0, i32 2
  %129 = load i32* %tally143, align 4
  %130 = load i32* %home.addr, align 4
  %idxprom144 = sext i32 %130 to i64
  %131 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx145 = getelementptr inbounds %struct.MemPool* %131, i64 %idxprom144
  %maxm146 = getelementptr inbounds %struct.MemPool* %arrayidx145, i32 0, i32 4
  %132 = load i32* %maxm146, align 4
  %cmp147 = icmp sgt i32 %129, %132
  br i1 %cmp147, label %if.then.149, label %if.end.156

if.then.149:                                      ; preds = %if.end.135
  %133 = load i32* %home.addr, align 4
  %idxprom150 = sext i32 %133 to i64
  %134 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx151 = getelementptr inbounds %struct.MemPool* %134, i64 %idxprom150
  %tally152 = getelementptr inbounds %struct.MemPool* %arrayidx151, i32 0, i32 2
  %135 = load i32* %tally152, align 4
  %136 = load i32* %home.addr, align 4
  %idxprom153 = sext i32 %136 to i64
  %137 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx154 = getelementptr inbounds %struct.MemPool* %137, i64 %idxprom153
  %maxm155 = getelementptr inbounds %struct.MemPool* %arrayidx154, i32 0, i32 4
  store i32 %135, i32* %maxm155, align 4
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.149, %if.end.135
  %138 = load i32** %result, align 8
  %arrayidx157 = getelementptr inbounds i32* %138, i64 -1
  %139 = load i32* %arrayidx157, align 4
  %140 = load i32* %size.addr, align 4
  %cmp158 = icmp ult i32 %139, %140
  br i1 %cmp158, label %if.then.160, label %if.end.163

if.then.160:                                      ; preds = %if.end.156
  %141 = load i32* %size.addr, align 4
  %142 = load i32** %result, align 8
  %arrayidx161 = getelementptr inbounds i32* %142, i64 -1
  %143 = load i32* %arrayidx161, align 4
  %call162 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([33 x i8]* @.str.4.135, i32 0, i32 0), i32 %141, i32 %143)
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.160, %if.end.156
  %144 = load i32** %result, align 8
  %145 = bitcast i32* %144 to i8*
  ret i8* %145
}

; Function Attrs: nounwind uwtable
define internal i32 @MigrateMem(i32* %start, i32 %length, i32 %home) {
entry:
  %retval = alloca i32, align 4
  %start.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %home.addr = alloca i32, align 4
  %finish = alloca i32*, align 8
  %currpage = alloca i32, align 4
  %endpage = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %start, i32** %start.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %home, i32* %home.addr, align 4
  %0 = load i32* %retval
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define internal i32 @MyFree(i32* %block) {
entry:
  %retval = alloca i32, align 4
  %block.addr = alloca i32*, align 8
  %home = alloca i32, align 4
  store i32* %block, i32** %block.addr, align 8
  %0 = load i32** %block.addr, align 8
  %arrayidx = getelementptr inbounds i32* %0, i64 -2
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %home, align 4
  %2 = load i32* %home, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx1 = getelementptr inbounds %struct.MemPool* %3, i64 %idxprom
  %memoryLock = getelementptr inbounds %struct.MemPool* %arrayidx1, i32 0, i32 0
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %memoryLock)
  %4 = load i32** %block.addr, align 8
  %call2 = call i32 @MyFreeNow(i32* %4)
  %5 = load i32* %home, align 4
  %idxprom3 = sext i32 %5 to i64
  %6 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx4 = getelementptr inbounds %struct.MemPool* %6, i64 %idxprom3
  %memoryLock5 = getelementptr inbounds %struct.MemPool* %arrayidx4, i32 0, i32 0
  %call6 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %memoryLock5)
  %7 = load i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @MyFreeNow(i32* %block) {
entry:
  %retval = alloca i32, align 4
  %block.addr = alloca i32*, align 8
  %bucket = alloca i32, align 4
  %size = alloca i32, align 4
  %home = alloca i32, align 4
  store i32* %block, i32** %block.addr, align 8
  %0 = load i32** %block.addr, align 8
  %arrayidx = getelementptr inbounds i32* %0, i64 -1
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %size, align 4
  %2 = load i32** %block.addr, align 8
  %arrayidx1 = getelementptr inbounds i32* %2, i64 -2
  %3 = load i32* %arrayidx1, align 4
  store i32 %3, i32* %home, align 4
  %4 = load i32* %size, align 4
  %cmp = icmp sle i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32* %size, align 4
  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.5.136, i32 0, i32 0), i32 %5)
  call void @exit(i32 -1)
  unreachable

if.end:                                           ; preds = %entry
  %6 = load i32* %home, align 4
  %cmp2 = icmp slt i32 %6, -1
  br i1 %cmp2, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i32* %home, align 4
  %8 = load i32* @mallocP, align 4
  %cmp3 = icmp sge i32 %7, %8
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %9 = load i32* %home, align 4
  %call5 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.6.137, i32 0, i32 0), i32 %9)
  call void @exit(i32 -1)
  unreachable

if.end.6:                                         ; preds = %lor.lhs.false
  %10 = load i32* %size, align 4
  %cmp7 = icmp sgt i32 %10, 32768
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end.6
  store i32 16, i32* %bucket, align 4
  br label %if.end.13

if.else:                                          ; preds = %if.end.6
  %11 = load i32* %size, align 4
  %call9 = call i32 @FindBucket(i32 %11)
  store i32 %call9, i32* %bucket, align 4
  %12 = load i32* %size, align 4
  %13 = load i32* %bucket, align 4
  %shl = shl i32 1, %13
  %cmp10 = icmp slt i32 %12, %shl
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  %14 = load i32* %bucket, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %bucket, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.else
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.then.8
  %15 = load i32* %bucket, align 4
  %cmp14 = icmp eq i32 %15, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.13
  %16 = load i32* %bucket, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load i32* %home, align 4
  %idxprom17 = sext i32 %17 to i64
  %18 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx18 = getelementptr inbounds %struct.MemPool* %18, i64 %idxprom17
  %freeBlock = getelementptr inbounds %struct.MemPool* %arrayidx18, i32 0, i32 1
  %19 = load i32*** %freeBlock, align 8
  %arrayidx19 = getelementptr inbounds i32** %19, i64 %idxprom
  %20 = load volatile i32** %arrayidx19, align 8
  %21 = load i32** %block.addr, align 8
  %22 = bitcast i32* %21 to i32**
  store i32* %20, i32** %22, align 8
  %23 = load i32** %block.addr, align 8
  %24 = load i32* %bucket, align 4
  %idxprom20 = sext i32 %24 to i64
  %25 = load i32* %home, align 4
  %idxprom21 = sext i32 %25 to i64
  %26 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx22 = getelementptr inbounds %struct.MemPool* %26, i64 %idxprom21
  %freeBlock23 = getelementptr inbounds %struct.MemPool* %arrayidx22, i32 0, i32 1
  %27 = load i32*** %freeBlock23, align 8
  %arrayidx24 = getelementptr inbounds i32** %27, i64 %idxprom20
  store volatile i32* %23, i32** %arrayidx24, align 8
  %28 = load i32* %size, align 4
  %29 = load i32* %home, align 4
  %idxprom25 = sext i32 %29 to i64
  %30 = load %struct.MemPool** @mem_pool, align 8
  %arrayidx26 = getelementptr inbounds %struct.MemPool* %30, i64 %idxprom25
  %tally = getelementptr inbounds %struct.MemPool* %arrayidx26, i32 0, i32 2
  %31 = load i32* %tally, align 4
  %sub = sub nsw i32 %31, %28
  store i32 %sub, i32* %tally, align 4
  br label %return

return:                                           ; preds = %if.end.16, %if.then.15
  %32 = load i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal void @DeriveInvariant() {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @printX() {
entry:
  %0 = load i32* @index_out, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %idxprom
  store i8 88, i8* %arrayidx, align 1
  %1 = load i32* @index_out, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @index_out, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @printY() {
entry:
  %0 = load i32* @index_out, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %idxprom
  store i8 89, i8* %arrayidx, align 1
  %1 = load i32* @index_out, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @index_out, align 4
  call void @DecrementCounter()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @DecrementCounter() {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %i13 = alloca i32, align 4
  %call = call i32 (...) *@pthread_self()
  store i32 %call, i32* %idx, align 4
  %0 = load i32* %idx, align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  %1 = load i32* %idx, align 4
  %idxprom1 = zext i32 %1 to i64
  %arrayidx2 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %idxprom1
  %2 = load i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32* @counter0, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @counter0, align 4
  %4 = load i32* @counter0, align 4
  %cmp3 = icmp eq i32 %4, 0
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  call void @DeriveInvariant()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.4
  %5 = load i32* %i, align 4
  %cmp5 = icmp slt i32 %5, 3
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %arrayidx7 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom6
  store i8 1, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %8 = load i32* %idx, align 4
  %idxprom8 = zext i32 %8 to i64
  %arrayidx9 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %idxprom8
  store i32 1, i32* %arrayidx9, align 4
  br label %if.end.25

if.else:                                          ; preds = %entry
  %9 = load i32* @counter1, align 4
  %dec10 = add nsw i32 %9, -1
  store i32 %dec10, i32* @counter1, align 4
  %10 = load i32* @counter1, align 4
  %cmp11 = icmp eq i32 %10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.22

if.then.12:                                       ; preds = %if.else
  call void @DeriveInvariant()
  store i32 0, i32* %i13, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.19, %if.then.12
  %11 = load i32* %i13, align 4
  %cmp15 = icmp slt i32 %11, 3
  br i1 %cmp15, label %for.body.16, label %for.end.21

for.body.16:                                      ; preds = %for.cond.14
  %12 = load i32* %i13, align 4
  %idxprom17 = sext i32 %12 to i64
  %arrayidx18 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom17
  store i8 1, i8* %arrayidx18, align 1
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.body.16
  %13 = load i32* %i13, align 4
  %inc20 = add nsw i32 %13, 1
  store i32 %inc20, i32* %i13, align 4
  br label %for.cond.14

for.end.21:                                       ; preds = %for.cond.14
  br label %if.end.22

if.end.22:                                        ; preds = %for.end.21, %if.else
  %14 = load i32* %idx, align 4
  %idxprom23 = zext i32 %14 to i64
  %arrayidx24 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %idxprom23
  store i32 0, i32* %arrayidx24, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.22, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @flushAll() {
entry:
  %0 = load i32* @index_out, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @printChar(i8 signext %ch) {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1
  %0 = load i8* %ch.addr, align 1
  %1 = load i32* @index_out, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %idxprom
  store i8 %0, i8* %arrayidx, align 1
  %2 = load i32* @index_out, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @index_out, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @waitForAll() {
entry:
  %call = call i32 (i32, i32, ...) *bitcast (i32 (...)* @pthread_join to i32 (i32, i32, ...)*)(i32 0, i32 0)
  call void @flushAll()
  ret void
}

declare i32 @pthread_join(...)

; Function Attrs: nounwind uwtable
define internal void @snapshot(i32 %gvar, i32 %index) {
entry:
  %gvar.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store i32 %gvar, i32* %gvar.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %call = call i32 (...) *@pthread_self()
  store i32 %call, i32* %idx, align 4
  %0 = load i32* %idx, align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom
  %1 = load i8* %arrayidx, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %2 = load i32* %index.addr, align 4
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.then
  %3 = load i32* %gvar.addr, align 4
  store i32 %3, i32* @gSyncVar_0, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.then
  %4 = load i32* %gvar.addr, align 4
  store i32 %4, i32* @gSyncVar_1, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.then
  %5 = load i32* %gvar.addr, align 4
  store i32 %5, i32* @gSyncVar_2, align 4
  br label %sw.default

sw.default:                                       ; preds = %sw.bb.2, %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.1, %sw.bb
  %6 = load i32* %index.addr, align 4
  %add = add nsw i32 %6, 1
  %7 = load i32* @gSyncVarsTotalNum, align 4
  %cmp = icmp sgt i32 %add, %7
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %sw.epilog
  %8 = load i32* %index.addr, align 4
  %add4 = add nsw i32 %8, 1
  store i32 %add4, i32* @gSyncVarsTotalNum, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.3, %sw.epilog
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  ret void
}

declare i32 @pthread_self(...)

; Function Attrs: nounwind uwtable
define internal void @snapshot64(i64 %gvar, i32 %index) {
entry:
  %gvar.addr = alloca i64, align 8
  %index.addr = alloca i32, align 4
  store i64 %gvar, i64* %gvar.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  %0 = load i64* %gvar.addr, align 8
  %conv = trunc i64 %0 to i32
  %1 = load i32* %index.addr, align 4
  call void @snapshot(i32 %conv, i32 %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitializeSwitchesAndCounter() {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @IncrementCounter() {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %call = call i32 (...) *@pthread_self()
  store i32 %call, i32* %idx, align 4
  %0 = load i32* %idx, align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32* @counter0, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @counter0, align 4
  %3 = load i8* @firstSync, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.1
  %4 = load i32* %i, align 4
  %cmp2 = icmp slt i32 %4, 3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %idxprom3 = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom3
  store i8 1, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8 0, i8* @firstSync, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  br label %if.end.7

if.else:                                          ; preds = %entry
  %7 = load i32* @counter1, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* @counter1, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.end
  ret void
}


