digraph "CFG for 'bmod' function" {
	label="CFG for 'bmod' function";

	Node0x48f5d70 [shape=record,label="{entry:\l  %a.addr = alloca double*, align 8\l  %b.addr = alloca double*, align 8\l  %c.addr = alloca double*, align 8\l  %dimi.addr = alloca i32, align 4\l  %dimj.addr = alloca i32, align 4\l  %dimk.addr = alloca i32, align 4\l  %stridea.addr = alloca i32, align 4\l  %strideb.addr = alloca i32, align 4\l  %stridec.addr = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %k = alloca i32, align 4\l  %alpha = alloca double, align 8\l  store double* %a, double** %a.addr, align 8\l  store double* %b, double** %b.addr, align 8\l  store double* %c, double** %c.addr, align 8\l  store i32 %dimi, i32* %dimi.addr, align 4\l  store i32 %dimj, i32* %dimj.addr, align 4\l  store i32 %dimk, i32* %dimk.addr, align 4\l  store i32 %stridea, i32* %stridea.addr, align 4\l  store i32 %strideb, i32* %strideb.addr, align 4\l  store i32 %stridec, i32* %stridec.addr, align 4\l  store i32 0, i32* %k, align 4\l  br label %for.cond\l}"];
	Node0x48f5d70 -> Node0x48f5dc0;
	Node0x48f5dc0 [shape=record,label="{for.cond:                                         \l  %0 = load i32* %k, align 4\l  %1 = load i32* %dimk.addr, align 4\l  %cmp = icmp slt i32 %0, %1\l  br i1 %cmp, label %for.body, label %for.end.12\l|{<s0>T|<s1>F}}"];
	Node0x48f5dc0:s0 -> Node0x48f5e10;
	Node0x48f5dc0:s1 -> Node0x48f5ff0;
	Node0x48f5e10 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f5e10 -> Node0x48f5e60;
	Node0x48f5e60 [shape=record,label="{for.cond.1:                                       \l  %2 = load i32* %j, align 4\l  %3 = load i32* %dimj.addr, align 4\l  %cmp2 = icmp slt i32 %2, %3\l  br i1 %cmp2, label %for.body.3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x48f5e60:s0 -> Node0x48f5eb0;
	Node0x48f5e60:s1 -> Node0x48f5f50;
	Node0x48f5eb0 [shape=record,label="{for.body.3:                                       \l  %4 = load i32* %k, align 4\l  %5 = load i32* %j, align 4\l  %6 = load i32* %strideb.addr, align 4\l  %mul = mul nsw i32 %5, %6\l  %add = add nsw i32 %4, %mul\l  %idxprom = sext i32 %add to i64\l  %7 = load double** %b.addr, align 8\l  %arrayidx = getelementptr inbounds double* %7, i64 %idxprom\l  %8 = load double* %arrayidx, align 8\l  %sub = fsub double -0.000000e+00, %8\l  store double %sub, double* %alpha, align 8\l  %9 = load i32* %j, align 4\l  %10 = load i32* %stridec.addr, align 4\l  %mul4 = mul nsw i32 %9, %10\l  %idxprom5 = sext i32 %mul4 to i64\l  %11 = load double** %c.addr, align 8\l  %arrayidx6 = getelementptr inbounds double* %11, i64 %idxprom5\l  %12 = load i32* %k, align 4\l  %13 = load i32* %stridea.addr, align 4\l  %mul7 = mul nsw i32 %12, %13\l  %idxprom8 = sext i32 %mul7 to i64\l  %14 = load double** %a.addr, align 8\l  %arrayidx9 = getelementptr inbounds double* %14, i64 %idxprom8\l  %15 = load i32* %dimi.addr, align 4\l  %16 = load double* %alpha, align 8\l  call void @daxpy(double* %arrayidx6, double* %arrayidx9, i32 %15, double %16)\l  br label %for.inc\l}"];
	Node0x48f5eb0 -> Node0x48f5f00;
	Node0x48f5f00 [shape=record,label="{for.inc:                                          \l  %17 = load i32* %j, align 4\l  %inc = add nsw i32 %17, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f5f00 -> Node0x48f5e60;
	Node0x48f5f50 [shape=record,label="{for.end:                                          \l  br label %for.inc.10\l}"];
	Node0x48f5f50 -> Node0x48f5fa0;
	Node0x48f5fa0 [shape=record,label="{for.inc.10:                                       \l  %18 = load i32* %k, align 4\l  %inc11 = add nsw i32 %18, 1\l  store i32 %inc11, i32* %k, align 4\l  br label %for.cond\l}"];
	Node0x48f5fa0 -> Node0x48f5dc0;
	Node0x48f5ff0 [shape=record,label="{for.end.12:                                       \l  ret void\l}"];
}
