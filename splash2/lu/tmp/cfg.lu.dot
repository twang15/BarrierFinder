digraph "CFG for 'lu' function" {
	label="CFG for 'lu' function";

	Node0x490bde0 [shape=record,label="{entry:\l  %n.addr = alloca i32, align 4\l  %bs.addr = alloca i32, align 4\l  %MyNum.addr = alloca i32, align 4\l  %lc.addr = alloca %struct.LocalCopies*, align 8\l  %dostats.addr = alloca i32, align 4\l  %i = alloca i32, align 4\l  %il = alloca i32, align 4\l  %j = alloca i32, align 4\l  %jl = alloca i32, align 4\l  %k = alloca i32, align 4\l  %kl = alloca i32, align 4\l  %I = alloca i32, align 4\l  %J = alloca i32, align 4\l  %K = alloca i32, align 4\l  %A = alloca double*, align 8\l  %B = alloca double*, align 8\l  %C = alloca double*, align 8\l  %D = alloca double*, align 8\l  %dimI = alloca i32, align 4\l  %dimJ = alloca i32, align 4\l  %dimK = alloca i32, align 4\l  %strI = alloca i32, align 4\l  %strJ = alloca i32, align 4\l  %strK = alloca i32, align 4\l  %t1 = alloca i32, align 4\l  %t2 = alloca i32, align 4\l  %t3 = alloca i32, align 4\l  %t4 = alloca i32, align 4\l  %t11 = alloca i32, align 4\l  %t22 = alloca i32, align 4\l  %diagowner = alloca i32, align 4\l  %colowner = alloca i32, align 4\l  %lsense = alloca i32, align 4\l  %oldcount = alloca i32, align 4\l  %newcount = alloca i32, align 4\l  %updatedcount = alloca i32, align 4\l  %retVal = alloca i32, align 4\l  %lsense115 = alloca i32, align 4\l  %oldcount120 = alloca i32, align 4\l  %newcount124 = alloca i32, align 4\l  %updatedcount126 = alloca i32, align 4\l  %retVal127 = alloca i32, align 4\l  store i32 %n, i32* %n.addr, align 4\l  store i32 %bs, i32* %bs.addr, align 4\l  store i32 %MyNum, i32* %MyNum.addr, align 4\l  store %struct.LocalCopies* %lc, %struct.LocalCopies** %lc.addr, align 8\l  store i32 %dostats, i32* %dostats.addr, align 4\l  store i32 0, i32* %k, align 4\l  store i32 0, i32* %K, align 4\l  br label %for.cond\l}"];
	Node0x490bde0 -> Node0x490be30;
	Node0x490be30 [shape=record,label="{for.cond:                                         \l  %0 = load i32* %k, align 4\l  %1 = load i32* %n.addr, align 4\l  %cmp = icmp slt i32 %0, %1\l  br i1 %cmp, label %for.body, label %for.end.240\l|{<s0>T|<s1>F}}"];
	Node0x490be30:s0 -> Node0x490be80;
	Node0x490be30:s1 -> Node0x490d870;
	Node0x490be80 [shape=record,label="{for.body:                                         \l  %2 = load i32* %k, align 4\l  %3 = load i32* %bs.addr, align 4\l  %add = add nsw i32 %2, %3\l  store i32 %add, i32* %kl, align 4\l  %4 = load i32* %kl, align 4\l  %5 = load i32* %n.addr, align 4\l  %cmp1 = icmp sgt i32 %4, %5\l  br i1 %cmp1, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x490be80:s0 -> Node0x490bed0;
	Node0x490be80:s1 -> Node0x490bf20;
	Node0x490bed0 [shape=record,label="{if.then:                                          \l  %6 = load i32* %n.addr, align 4\l  store i32 %6, i32* %kl, align 4\l  %7 = load i32* %kl, align 4\l  %8 = load i32* %k, align 4\l  %sub = sub nsw i32 %7, %8\l  store i32 %sub, i32* %strK, align 4\l  br label %if.end\l}"];
	Node0x490bed0 -> Node0x490bf70;
	Node0x490bf20 [shape=record,label="{if.else:                                          \l  %9 = load i32* %bs.addr, align 4\l  store i32 %9, i32* %strK, align 4\l  br label %if.end\l}"];
	Node0x490bf20 -> Node0x490bf70;
	Node0x490bf70 [shape=record,label="{if.end:                                           \l  %10 = load i32* %MyNum.addr, align 4\l  %cmp2 = icmp eq i32 %10, 0\l  br i1 %cmp2, label %if.then.3, label %lor.lhs.false\l|{<s0>T|<s1>F}}"];
	Node0x490bf70:s0 -> Node0x490c010;
	Node0x490bf70:s1 -> Node0x490bfc0;
	Node0x490bfc0 [shape=record,label="{lor.lhs.false:                                    \l  %11 = load i32* %dostats.addr, align 4\l  %tobool = icmp ne i32 %11, 0\l  br i1 %tobool, label %if.then.3, label %if.end.4\l|{<s0>T|<s1>F}}"];
	Node0x490bfc0:s0 -> Node0x490c010;
	Node0x490bfc0:s1 -> Node0x490c060;
	Node0x490c010 [shape=record,label="{if.then.3:                                        \l  %call = call i64 @time(i64* null)\l  %conv = trunc i64 %call to i32\l  store i32 %conv, i32* %t1, align 4\l  br label %if.end.4\l}"];
	Node0x490c010 -> Node0x490c060;
	Node0x490c060 [shape=record,label="{if.end.4:                                         \l  %12 = load i32* %K, align 4\l  %13 = load i32* %K, align 4\l  %call5 = call i32 @BlockOwner(i32 %12, i32 %13)\l  store i32 %call5, i32* %diagowner, align 4\l  %14 = load i32* %diagowner, align 4\l  %15 = load i32* %MyNum.addr, align 4\l  %cmp6 = icmp eq i32 %14, %15\l  br i1 %cmp6, label %if.then.8, label %if.end.10\l|{<s0>T|<s1>F}}"];
	Node0x490c060:s0 -> Node0x490c0b0;
	Node0x490c060:s1 -> Node0x490c100;
	Node0x490c0b0 [shape=record,label="{if.then.8:                                        \l  %16 = load i32* %K, align 4\l  %17 = load i32* %K, align 4\l  %18 = load i32* @nblocks, align 4\l  %mul = mul nsw i32 %17, %18\l  %add9 = add nsw i32 %16, %mul\l  %idxprom = sext i32 %add9 to i64\l  %19 = load double*** @a, align 8\l  %arrayidx = getelementptr inbounds double** %19, i64 %idxprom\l  %20 = load double** %arrayidx, align 8\l  store double* %20, double** %A, align 8\l  %21 = load double** %A, align 8\l  %22 = load i32* %strK, align 4\l  %23 = load i32* %strK, align 4\l  call void @lu0(double* %21, i32 %22, i32 %23)\l  br label %if.end.10\l}"];
	Node0x490c0b0 -> Node0x490c100;
	Node0x490c100 [shape=record,label="{if.end.10:                                        \l  %24 = load i32* %MyNum.addr, align 4\l  %cmp11 = icmp eq i32 %24, 0\l  br i1 %cmp11, label %if.then.15, label %lor.lhs.false.13\l|{<s0>T|<s1>F}}"];
	Node0x490c100:s0 -> Node0x490c1a0;
	Node0x490c100:s1 -> Node0x490c150;
	Node0x490c150 [shape=record,label="{lor.lhs.false.13:                                 \l  %25 = load i32* %dostats.addr, align 4\l  %tobool14 = icmp ne i32 %25, 0\l  br i1 %tobool14, label %if.then.15, label %if.end.18\l|{<s0>T|<s1>F}}"];
	Node0x490c150:s0 -> Node0x490c1a0;
	Node0x490c150:s1 -> Node0x490c1f0;
	Node0x490c1a0 [shape=record,label="{if.then.15:                                       \l  %call16 = call i64 @time(i64* null)\l  %conv17 = trunc i64 %call16 to i32\l  store i32 %conv17, i32* %t11, align 4\l  br label %if.end.18\l}"];
	Node0x490c1a0 -> Node0x490c1f0;
	Node0x490c1f0 [shape=record,label="{if.end.18:                                        \l  %26 = load %struct.GlobalMemory** @Global, align 8\l  %start = getelementptr inbounds %struct.GlobalMemory* %26, i32 0, i32 10\l  %gsense = getelementptr inbounds %struct.barrier_t* %start, i32 0, i32 0\l  %27 = load volatile i32* %gsense, align 4\l  store i32 %27, i32* %lsense, align 4\l  br label %while.body\l}"];
	Node0x490c1f0 -> Node0x490c240;
	Node0x490c240 [shape=record,label="{while.body:                                       \l  %28 = load %struct.GlobalMemory** @Global, align 8\l  %start19 = getelementptr inbounds %struct.GlobalMemory* %28, i32 0, i32 10\l  %count = getelementptr inbounds %struct.barrier_t* %start19, i32 0, i32 1\l  %29 = load volatile i64* %count, align 8\l  %conv20 = trunc i64 %29 to i32\l  store i32 %conv20, i32* %oldcount, align 4\l  %30 = load i32* %oldcount, align 4\l  %31 = load i32* %lsense, align 4\l  %add21 = add nsw i32 %30, %31\l  store i32 %add21, i32* %newcount, align 4\l  %32 = load i32* %oldcount, align 4\l  %33 = load i32* %newcount, align 4\l  %call22 = call i32 @atomic_cmpxchg(i32 %32, i32 %33)\l  store i32 %call22, i32* %updatedcount, align 4\l  %34 = load i32* %updatedcount, align 4\l  %35 = load i32* %oldcount, align 4\l  %cmp23 = icmp eq i32 %34, %35\l  br i1 %cmp23, label %if.then.25, label %if.end.41\l|{<s0>T|<s1>F}}"];
	Node0x490c240:s0 -> Node0x490c290;
	Node0x490c240:s1 -> Node0x490c470;
	Node0x490c290 [shape=record,label="{if.then.25:                                       \l  %36 = load i32* %newcount, align 4\l  %37 = load i32* @P, align 4\l  %cmp26 = icmp eq i32 %36, %37\l  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false.30\l|{<s0>T|<s1>F}}"];
	Node0x490c290:s0 -> Node0x490c2e0;
	Node0x490c290:s1 -> Node0x490c330;
	Node0x490c2e0 [shape=record,label="{land.lhs.true:                                    \l  %38 = load i32* %lsense, align 4\l  %cmp28 = icmp eq i32 %38, 1\l  br i1 %cmp28, label %if.then.36, label %lor.lhs.false.30\l|{<s0>T|<s1>F}}"];
	Node0x490c2e0:s0 -> Node0x490c3d0;
	Node0x490c2e0:s1 -> Node0x490c330;
	Node0x490c330 [shape=record,label="{lor.lhs.false.30:                                 \l  %39 = load i32* %newcount, align 4\l  %cmp31 = icmp eq i32 %39, 0\l  br i1 %cmp31, label %land.lhs.true.33, label %if.end.40\l|{<s0>T|<s1>F}}"];
	Node0x490c330:s0 -> Node0x490c380;
	Node0x490c330:s1 -> Node0x490c420;
	Node0x490c380 [shape=record,label="{land.lhs.true.33:                                 \l  %40 = load i32* %lsense, align 4\l  %cmp34 = icmp eq i32 %40, -1\l  br i1 %cmp34, label %if.then.36, label %if.end.40\l|{<s0>T|<s1>F}}"];
	Node0x490c380:s0 -> Node0x490c3d0;
	Node0x490c380:s1 -> Node0x490c420;
	Node0x490c3d0 [shape=record,label="{if.then.36:                                       \l  %41 = load i32* %lsense, align 4\l  %sub37 = sub nsw i32 0, %41\l  %42 = load %struct.GlobalMemory** @Global, align 8\l  %start38 = getelementptr inbounds %struct.GlobalMemory* %42, i32 0, i32 10\l  %gsense39 = getelementptr inbounds %struct.barrier_t* %start38, i32 0, i32 0\l  store volatile i32 %sub37, i32* %gsense39, align 4\l  call void @Criteria(i32 4)\l  br label %if.end.40\l}"];
	Node0x490c3d0 -> Node0x490c420;
	Node0x490c420 [shape=record,label="{if.end.40:                                        \l  br label %while.end\l}"];
	Node0x490c420 -> Node0x490c4c0;
	Node0x490c470 [shape=record,label="{if.end.41:                                        \l  br label %while.body\l}"];
	Node0x490c470 -> Node0x490c240;
	Node0x490c4c0 [shape=record,label="{while.end:                                        \l  br label %while.cond\l}"];
	Node0x490c4c0 -> Node0x490c510;
	Node0x490c510 [shape=record,label="{while.cond:                                       \l  %43 = load %struct.GlobalMemory** @Global, align 8\l  %start42 = getelementptr inbounds %struct.GlobalMemory* %43, i32 0, i32 10\l  %gsense43 = getelementptr inbounds %struct.barrier_t* %start42, i32 0, i32 0\l  %44 = load volatile i32* %gsense43, align 4\l  %45 = load i32* %lsense, align 4\l  %cmp44 = icmp eq i32 %44, %45\l  br i1 %cmp44, label %while.body.46, label %while.end.47\l|{<s0>T|<s1>F}}"];
	Node0x490c510:s0 -> Node0x490c560;
	Node0x490c510:s1 -> Node0x490c5b0;
	Node0x490c560 [shape=record,label="{while.body.46:                                    \l  br label %while.cond\l}"];
	Node0x490c560 -> Node0x490c510;
	Node0x490c5b0 [shape=record,label="{while.end.47:                                     \l  call void @Criteria(i32 4)\l  %46 = load i32* %MyNum.addr, align 4\l  %cmp48 = icmp eq i32 %46, 0\l  br i1 %cmp48, label %if.then.52, label %lor.lhs.false.50\l|{<s0>T|<s1>F}}"];
	Node0x490c5b0:s0 -> Node0x490c650;
	Node0x490c5b0:s1 -> Node0x490c600;
	Node0x490c600 [shape=record,label="{lor.lhs.false.50:                                 \l  %47 = load i32* %dostats.addr, align 4\l  %tobool51 = icmp ne i32 %47, 0\l  br i1 %tobool51, label %if.then.52, label %if.end.55\l|{<s0>T|<s1>F}}"];
	Node0x490c600:s0 -> Node0x490c650;
	Node0x490c600:s1 -> Node0x490c6a0;
	Node0x490c650 [shape=record,label="{if.then.52:                                       \l  %call53 = call i64 @time(i64* null)\l  %conv54 = trunc i64 %call53 to i32\l  store i32 %conv54, i32* %t2, align 4\l  br label %if.end.55\l}"];
	Node0x490c650 -> Node0x490c6a0;
	Node0x490c6a0 [shape=record,label="{if.end.55:                                        \l  %48 = load i32* %K, align 4\l  %49 = load i32* %K, align 4\l  %50 = load i32* @nblocks, align 4\l  %mul56 = mul nsw i32 %49, %50\l  %add57 = add nsw i32 %48, %mul56\l  %idxprom58 = sext i32 %add57 to i64\l  %51 = load double*** @a, align 8\l  %arrayidx59 = getelementptr inbounds double** %51, i64 %idxprom58\l  %52 = load double** %arrayidx59, align 8\l  store double* %52, double** %D, align 8\l  %53 = load i32* %kl, align 4\l  store i32 %53, i32* %i, align 4\l  %54 = load i32* %K, align 4\l  %add60 = add nsw i32 %54, 1\l  store i32 %add60, i32* %I, align 4\l  br label %for.cond.61\l}"];
	Node0x490c6a0 -> Node0x490c6f0;
	Node0x490c6f0 [shape=record,label="{for.cond.61:                                      \l  %55 = load i32* %i, align 4\l  %56 = load i32* %n.addr, align 4\l  %cmp62 = icmp slt i32 %55, %56\l  br i1 %cmp62, label %for.body.64, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x490c6f0:s0 -> Node0x490c740;
	Node0x490c6f0:s1 -> Node0x490c970;
	Node0x490c740 [shape=record,label="{for.body.64:                                      \l  %57 = load i32* %I, align 4\l  %58 = load i32* %K, align 4\l  %call65 = call i32 @BlockOwner(i32 %57, i32 %58)\l  %59 = load i32* %MyNum.addr, align 4\l  %cmp66 = icmp eq i32 %call65, %59\l  br i1 %cmp66, label %if.then.68, label %if.end.80\l|{<s0>T|<s1>F}}"];
	Node0x490c740:s0 -> Node0x490c790;
	Node0x490c740:s1 -> Node0x490c8d0;
	Node0x490c790 [shape=record,label="{if.then.68:                                       \l  %60 = load i32* %i, align 4\l  %61 = load i32* %bs.addr, align 4\l  %add69 = add nsw i32 %60, %61\l  store i32 %add69, i32* %il, align 4\l  %62 = load i32* %il, align 4\l  %63 = load i32* %n.addr, align 4\l  %cmp70 = icmp sgt i32 %62, %63\l  br i1 %cmp70, label %if.then.72, label %if.else.74\l|{<s0>T|<s1>F}}"];
	Node0x490c790:s0 -> Node0x490c7e0;
	Node0x490c790:s1 -> Node0x490c830;
	Node0x490c7e0 [shape=record,label="{if.then.72:                                       \l  %64 = load i32* %n.addr, align 4\l  store i32 %64, i32* %il, align 4\l  %65 = load i32* %il, align 4\l  %66 = load i32* %i, align 4\l  %sub73 = sub nsw i32 %65, %66\l  store i32 %sub73, i32* %strI, align 4\l  br label %if.end.75\l}"];
	Node0x490c7e0 -> Node0x490c880;
	Node0x490c830 [shape=record,label="{if.else.74:                                       \l  %67 = load i32* %bs.addr, align 4\l  store i32 %67, i32* %strI, align 4\l  br label %if.end.75\l}"];
	Node0x490c830 -> Node0x490c880;
	Node0x490c880 [shape=record,label="{if.end.75:                                        \l  %68 = load i32* %I, align 4\l  %69 = load i32* %K, align 4\l  %70 = load i32* @nblocks, align 4\l  %mul76 = mul nsw i32 %69, %70\l  %add77 = add nsw i32 %68, %mul76\l  %idxprom78 = sext i32 %add77 to i64\l  %71 = load double*** @a, align 8\l  %arrayidx79 = getelementptr inbounds double** %71, i64 %idxprom78\l  %72 = load double** %arrayidx79, align 8\l  store double* %72, double** %A, align 8\l  %73 = load double** %A, align 8\l  %74 = load double** %D, align 8\l  %75 = load i32* %strI, align 4\l  %76 = load i32* %strK, align 4\l  %77 = load i32* %strI, align 4\l  %78 = load i32* %strK, align 4\l  call void @bdiv(double* %73, double* %74, i32 %75, i32 %76, i32 %77, i32 %78)\l  br label %if.end.80\l}"];
	Node0x490c880 -> Node0x490c8d0;
	Node0x490c8d0 [shape=record,label="{if.end.80:                                        \l  br label %for.inc\l}"];
	Node0x490c8d0 -> Node0x490c920;
	Node0x490c920 [shape=record,label="{for.inc:                                          \l  %79 = load i32* %bs.addr, align 4\l  %80 = load i32* %i, align 4\l  %add81 = add nsw i32 %80, %79\l  store i32 %add81, i32* %i, align 4\l  %81 = load i32* %I, align 4\l  %inc = add nsw i32 %81, 1\l  store i32 %inc, i32* %I, align 4\l  br label %for.cond.61\l}"];
	Node0x490c920 -> Node0x490c6f0;
	Node0x490c970 [shape=record,label="{for.end:                                          \l  %82 = load i32* %kl, align 4\l  store i32 %82, i32* %j, align 4\l  %83 = load i32* %K, align 4\l  %add82 = add nsw i32 %83, 1\l  store i32 %add82, i32* %J, align 4\l  br label %for.cond.83\l}"];
	Node0x490c970 -> Node0x490c9c0;
	Node0x490c9c0 [shape=record,label="{for.cond.83:                                      \l  %84 = load i32* %j, align 4\l  %85 = load i32* %n.addr, align 4\l  %cmp84 = icmp slt i32 %84, %85\l  br i1 %cmp84, label %for.body.86, label %for.end.106\l|{<s0>T|<s1>F}}"];
	Node0x490c9c0:s0 -> Node0x490ca10;
	Node0x490c9c0:s1 -> Node0x490cc40;
	Node0x490ca10 [shape=record,label="{for.body.86:                                      \l  %86 = load i32* %K, align 4\l  %87 = load i32* %J, align 4\l  %call87 = call i32 @BlockOwner(i32 %86, i32 %87)\l  %88 = load i32* %MyNum.addr, align 4\l  %cmp88 = icmp eq i32 %call87, %88\l  br i1 %cmp88, label %if.then.90, label %if.end.102\l|{<s0>T|<s1>F}}"];
	Node0x490ca10:s0 -> Node0x490ca60;
	Node0x490ca10:s1 -> Node0x490cba0;
	Node0x490ca60 [shape=record,label="{if.then.90:                                       \l  %89 = load i32* %j, align 4\l  %90 = load i32* %bs.addr, align 4\l  %add91 = add nsw i32 %89, %90\l  store i32 %add91, i32* %jl, align 4\l  %91 = load i32* %jl, align 4\l  %92 = load i32* %n.addr, align 4\l  %cmp92 = icmp sgt i32 %91, %92\l  br i1 %cmp92, label %if.then.94, label %if.else.96\l|{<s0>T|<s1>F}}"];
	Node0x490ca60:s0 -> Node0x490cab0;
	Node0x490ca60:s1 -> Node0x490cb00;
	Node0x490cab0 [shape=record,label="{if.then.94:                                       \l  %93 = load i32* %n.addr, align 4\l  store i32 %93, i32* %jl, align 4\l  %94 = load i32* %jl, align 4\l  %95 = load i32* %j, align 4\l  %sub95 = sub nsw i32 %94, %95\l  store i32 %sub95, i32* %strJ, align 4\l  br label %if.end.97\l}"];
	Node0x490cab0 -> Node0x490cb50;
	Node0x490cb00 [shape=record,label="{if.else.96:                                       \l  %96 = load i32* %bs.addr, align 4\l  store i32 %96, i32* %strJ, align 4\l  br label %if.end.97\l}"];
	Node0x490cb00 -> Node0x490cb50;
	Node0x490cb50 [shape=record,label="{if.end.97:                                        \l  %97 = load i32* %K, align 4\l  %98 = load i32* %J, align 4\l  %99 = load i32* @nblocks, align 4\l  %mul98 = mul nsw i32 %98, %99\l  %add99 = add nsw i32 %97, %mul98\l  %idxprom100 = sext i32 %add99 to i64\l  %100 = load double*** @a, align 8\l  %arrayidx101 = getelementptr inbounds double** %100, i64 %idxprom100\l  %101 = load double** %arrayidx101, align 8\l  store double* %101, double** %A, align 8\l  %102 = load double** %D, align 8\l  %103 = load double** %A, align 8\l  %104 = load i32* %strK, align 4\l  %105 = load i32* %strJ, align 4\l  %106 = load i32* %strK, align 4\l  %107 = load i32* %strK, align 4\l  call void @bmodd(double* %102, double* %103, i32 %104, i32 %105, i32 %106,\l... i32 %107)\l  br label %if.end.102\l}"];
	Node0x490cb50 -> Node0x490cba0;
	Node0x490cba0 [shape=record,label="{if.end.102:                                       \l  br label %for.inc.103\l}"];
	Node0x490cba0 -> Node0x490cbf0;
	Node0x490cbf0 [shape=record,label="{for.inc.103:                                      \l  %108 = load i32* %bs.addr, align 4\l  %109 = load i32* %j, align 4\l  %add104 = add nsw i32 %109, %108\l  store i32 %add104, i32* %j, align 4\l  %110 = load i32* %J, align 4\l  %inc105 = add nsw i32 %110, 1\l  store i32 %inc105, i32* %J, align 4\l  br label %for.cond.83\l}"];
	Node0x490cbf0 -> Node0x490c9c0;
	Node0x490cc40 [shape=record,label="{for.end.106:                                      \l  %111 = load i32* %MyNum.addr, align 4\l  %cmp107 = icmp eq i32 %111, 0\l  br i1 %cmp107, label %if.then.111, label %lor.lhs.false.109\l|{<s0>T|<s1>F}}"];
	Node0x490cc40:s0 -> Node0x490cce0;
	Node0x490cc40:s1 -> Node0x490cc90;
	Node0x490cc90 [shape=record,label="{lor.lhs.false.109:                                \l  %112 = load i32* %dostats.addr, align 4\l  %tobool110 = icmp ne i32 %112, 0\l  br i1 %tobool110, label %if.then.111, label %if.end.114\l|{<s0>T|<s1>F}}"];
	Node0x490cc90:s0 -> Node0x490cce0;
	Node0x490cc90:s1 -> Node0x490cd30;
	Node0x490cce0 [shape=record,label="{if.then.111:                                      \l  %call112 = call i64 @time(i64* null)\l  %conv113 = trunc i64 %call112 to i32\l  store i32 %conv113, i32* %t22, align 4\l  br label %if.end.114\l}"];
	Node0x490cce0 -> Node0x490cd30;
	Node0x490cd30 [shape=record,label="{if.end.114:                                       \l  %113 = load %struct.GlobalMemory** @Global, align 8\l  %start116 = getelementptr inbounds %struct.GlobalMemory* %113, i32 0, i32 10\l  %gsense117 = getelementptr inbounds %struct.barrier_t* %start116, i32 0, i32\l... 0\l  %114 = load volatile i32* %gsense117, align 4\l  store i32 %114, i32* %lsense115, align 4\l  br label %while.body.119\l}"];
	Node0x490cd30 -> Node0x490cd80;
	Node0x490cd80 [shape=record,label="{while.body.119:                                   \l  %115 = load %struct.GlobalMemory** @Global, align 8\l  %start121 = getelementptr inbounds %struct.GlobalMemory* %115, i32 0, i32 10\l  %count122 = getelementptr inbounds %struct.barrier_t* %start121, i32 0, i32 1\l  %116 = load volatile i64* %count122, align 8\l  %conv123 = trunc i64 %116 to i32\l  store i32 %conv123, i32* %oldcount120, align 4\l  %117 = load i32* %oldcount120, align 4\l  %118 = load i32* %lsense115, align 4\l  %add125 = add nsw i32 %117, %118\l  store i32 %add125, i32* %newcount124, align 4\l  %119 = load i32* %oldcount120, align 4\l  %120 = load i32* %newcount124, align 4\l  %call128 = call i32 @atomic_cmpxchg(i32 %119, i32 %120)\l  store i32 %call128, i32* %updatedcount126, align 4\l  %121 = load i32* %updatedcount126, align 4\l  %122 = load i32* %oldcount120, align 4\l  %cmp129 = icmp eq i32 %121, %122\l  br i1 %cmp129, label %if.then.131, label %if.end.148\l|{<s0>T|<s1>F}}"];
	Node0x490cd80:s0 -> Node0x490cdd0;
	Node0x490cd80:s1 -> Node0x490cfb0;
	Node0x490cdd0 [shape=record,label="{if.then.131:                                      \l  %123 = load i32* %newcount124, align 4\l  %124 = load i32* @P, align 4\l  %cmp132 = icmp eq i32 %123, %124\l  br i1 %cmp132, label %land.lhs.true.134, label %lor.lhs.false.137\l|{<s0>T|<s1>F}}"];
	Node0x490cdd0:s0 -> Node0x490ce20;
	Node0x490cdd0:s1 -> Node0x490ce70;
	Node0x490ce20 [shape=record,label="{land.lhs.true.134:                                \l  %125 = load i32* %lsense115, align 4\l  %cmp135 = icmp eq i32 %125, 1\l  br i1 %cmp135, label %if.then.143, label %lor.lhs.false.137\l|{<s0>T|<s1>F}}"];
	Node0x490ce20:s0 -> Node0x490cf10;
	Node0x490ce20:s1 -> Node0x490ce70;
	Node0x490ce70 [shape=record,label="{lor.lhs.false.137:                                \l  %126 = load i32* %newcount124, align 4\l  %cmp138 = icmp eq i32 %126, 0\l  br i1 %cmp138, label %land.lhs.true.140, label %if.end.147\l|{<s0>T|<s1>F}}"];
	Node0x490ce70:s0 -> Node0x490cec0;
	Node0x490ce70:s1 -> Node0x490cf60;
	Node0x490cec0 [shape=record,label="{land.lhs.true.140:                                \l  %127 = load i32* %lsense115, align 4\l  %cmp141 = icmp eq i32 %127, -1\l  br i1 %cmp141, label %if.then.143, label %if.end.147\l|{<s0>T|<s1>F}}"];
	Node0x490cec0:s0 -> Node0x490cf10;
	Node0x490cec0:s1 -> Node0x490cf60;
	Node0x490cf10 [shape=record,label="{if.then.143:                                      \l  %128 = load i32* %lsense115, align 4\l  %sub144 = sub nsw i32 0, %128\l  %129 = load %struct.GlobalMemory** @Global, align 8\l  %start145 = getelementptr inbounds %struct.GlobalMemory* %129, i32 0, i32 10\l  %gsense146 = getelementptr inbounds %struct.barrier_t* %start145, i32 0, i32\l... 0\l  store volatile i32 %sub144, i32* %gsense146, align 4\l  call void @Criteria(i32 5)\l  br label %if.end.147\l}"];
	Node0x490cf10 -> Node0x490cf60;
	Node0x490cf60 [shape=record,label="{if.end.147:                                       \l  br label %while.end.149\l}"];
	Node0x490cf60 -> Node0x490d000;
	Node0x490cfb0 [shape=record,label="{if.end.148:                                       \l  br label %while.body.119\l}"];
	Node0x490cfb0 -> Node0x490cd80;
	Node0x490d000 [shape=record,label="{while.end.149:                                    \l  br label %while.cond.150\l}"];
	Node0x490d000 -> Node0x490d050;
	Node0x490d050 [shape=record,label="{while.cond.150:                                   \l  %130 = load %struct.GlobalMemory** @Global, align 8\l  %start151 = getelementptr inbounds %struct.GlobalMemory* %130, i32 0, i32 10\l  %gsense152 = getelementptr inbounds %struct.barrier_t* %start151, i32 0, i32\l... 0\l  %131 = load volatile i32* %gsense152, align 4\l  %132 = load i32* %lsense115, align 4\l  %cmp153 = icmp eq i32 %131, %132\l  br i1 %cmp153, label %while.body.155, label %while.end.156\l|{<s0>T|<s1>F}}"];
	Node0x490d050:s0 -> Node0x490d0a0;
	Node0x490d050:s1 -> Node0x490d0f0;
	Node0x490d0a0 [shape=record,label="{while.body.155:                                   \l  br label %while.cond.150\l}"];
	Node0x490d0a0 -> Node0x490d050;
	Node0x490d0f0 [shape=record,label="{while.end.156:                                    \l  call void @Criteria(i32 5)\l  %133 = load i32* %MyNum.addr, align 4\l  %cmp157 = icmp eq i32 %133, 0\l  br i1 %cmp157, label %if.then.161, label %lor.lhs.false.159\l|{<s0>T|<s1>F}}"];
	Node0x490d0f0:s0 -> Node0x490d190;
	Node0x490d0f0:s1 -> Node0x490d140;
	Node0x490d140 [shape=record,label="{lor.lhs.false.159:                                \l  %134 = load i32* %dostats.addr, align 4\l  %tobool160 = icmp ne i32 %134, 0\l  br i1 %tobool160, label %if.then.161, label %if.end.164\l|{<s0>T|<s1>F}}"];
	Node0x490d140:s0 -> Node0x490d190;
	Node0x490d140:s1 -> Node0x490d1e0;
	Node0x490d190 [shape=record,label="{if.then.161:                                      \l  %call162 = call i64 @time(i64* null)\l  %conv163 = trunc i64 %call162 to i32\l  store i32 %conv163, i32* %t3, align 4\l  br label %if.end.164\l}"];
	Node0x490d190 -> Node0x490d1e0;
	Node0x490d1e0 [shape=record,label="{if.end.164:                                       \l  %135 = load i32* %kl, align 4\l  store i32 %135, i32* %i, align 4\l  %136 = load i32* %K, align 4\l  %add165 = add nsw i32 %136, 1\l  store i32 %add165, i32* %I, align 4\l  br label %for.cond.166\l}"];
	Node0x490d1e0 -> Node0x490d230;
	Node0x490d230 [shape=record,label="{for.cond.166:                                     \l  %137 = load i32* %i, align 4\l  %138 = load i32* %n.addr, align 4\l  %cmp167 = icmp slt i32 %137, %138\l  br i1 %cmp167, label %for.body.169, label %for.end.214\l|{<s0>T|<s1>F}}"];
	Node0x490d230:s0 -> Node0x490d280;
	Node0x490d230:s1 -> Node0x490d6e0;
	Node0x490d280 [shape=record,label="{for.body.169:                                     \l  %139 = load i32* %i, align 4\l  %140 = load i32* %bs.addr, align 4\l  %add170 = add nsw i32 %139, %140\l  store i32 %add170, i32* %il, align 4\l  %141 = load i32* %il, align 4\l  %142 = load i32* %n.addr, align 4\l  %cmp171 = icmp sgt i32 %141, %142\l  br i1 %cmp171, label %if.then.173, label %if.else.175\l|{<s0>T|<s1>F}}"];
	Node0x490d280:s0 -> Node0x490d2d0;
	Node0x490d280:s1 -> Node0x490d320;
	Node0x490d2d0 [shape=record,label="{if.then.173:                                      \l  %143 = load i32* %n.addr, align 4\l  store i32 %143, i32* %il, align 4\l  %144 = load i32* %il, align 4\l  %145 = load i32* %i, align 4\l  %sub174 = sub nsw i32 %144, %145\l  store i32 %sub174, i32* %strI, align 4\l  br label %if.end.176\l}"];
	Node0x490d2d0 -> Node0x490d370;
	Node0x490d320 [shape=record,label="{if.else.175:                                      \l  %146 = load i32* %bs.addr, align 4\l  store i32 %146, i32* %strI, align 4\l  br label %if.end.176\l}"];
	Node0x490d320 -> Node0x490d370;
	Node0x490d370 [shape=record,label="{if.end.176:                                       \l  %147 = load i32* %I, align 4\l  %148 = load i32* %K, align 4\l  %call177 = call i32 @BlockOwner(i32 %147, i32 %148)\l  store i32 %call177, i32* %colowner, align 4\l  %149 = load i32* %I, align 4\l  %150 = load i32* %K, align 4\l  %151 = load i32* @nblocks, align 4\l  %mul178 = mul nsw i32 %150, %151\l  %add179 = add nsw i32 %149, %mul178\l  %idxprom180 = sext i32 %add179 to i64\l  %152 = load double*** @a, align 8\l  %arrayidx181 = getelementptr inbounds double** %152, i64 %idxprom180\l  %153 = load double** %arrayidx181, align 8\l  store double* %153, double** %A, align 8\l  %154 = load i32* %kl, align 4\l  store i32 %154, i32* %j, align 4\l  %155 = load i32* %K, align 4\l  %add182 = add nsw i32 %155, 1\l  store i32 %add182, i32* %J, align 4\l  br label %for.cond.183\l}"];
	Node0x490d370 -> Node0x490d3c0;
	Node0x490d3c0 [shape=record,label="{for.cond.183:                                     \l  %156 = load i32* %j, align 4\l  %157 = load i32* %n.addr, align 4\l  %cmp184 = icmp slt i32 %156, %157\l  br i1 %cmp184, label %for.body.186, label %for.end.210\l|{<s0>T|<s1>F}}"];
	Node0x490d3c0:s0 -> Node0x490d410;
	Node0x490d3c0:s1 -> Node0x490d640;
	Node0x490d410 [shape=record,label="{for.body.186:                                     \l  %158 = load i32* %j, align 4\l  %159 = load i32* %bs.addr, align 4\l  %add187 = add nsw i32 %158, %159\l  store i32 %add187, i32* %jl, align 4\l  %160 = load i32* %jl, align 4\l  %161 = load i32* %n.addr, align 4\l  %cmp188 = icmp sgt i32 %160, %161\l  br i1 %cmp188, label %if.then.190, label %if.else.192\l|{<s0>T|<s1>F}}"];
	Node0x490d410:s0 -> Node0x490d460;
	Node0x490d410:s1 -> Node0x490d4b0;
	Node0x490d460 [shape=record,label="{if.then.190:                                      \l  %162 = load i32* %n.addr, align 4\l  store i32 %162, i32* %jl, align 4\l  %163 = load i32* %jl, align 4\l  %164 = load i32* %j, align 4\l  %sub191 = sub nsw i32 %163, %164\l  store i32 %sub191, i32* %strJ, align 4\l  br label %if.end.193\l}"];
	Node0x490d460 -> Node0x490d500;
	Node0x490d4b0 [shape=record,label="{if.else.192:                                      \l  %165 = load i32* %bs.addr, align 4\l  store i32 %165, i32* %strJ, align 4\l  br label %if.end.193\l}"];
	Node0x490d4b0 -> Node0x490d500;
	Node0x490d500 [shape=record,label="{if.end.193:                                       \l  %166 = load i32* %I, align 4\l  %167 = load i32* %J, align 4\l  %call194 = call i32 @BlockOwner(i32 %166, i32 %167)\l  %168 = load i32* %MyNum.addr, align 4\l  %cmp195 = icmp eq i32 %call194, %168\l  br i1 %cmp195, label %if.then.197, label %if.end.206\l|{<s0>T|<s1>F}}"];
	Node0x490d500:s0 -> Node0x490d550;
	Node0x490d500:s1 -> Node0x490d5a0;
	Node0x490d550 [shape=record,label="{if.then.197:                                      \l  %169 = load i32* %K, align 4\l  %170 = load i32* %J, align 4\l  %171 = load i32* @nblocks, align 4\l  %mul198 = mul nsw i32 %170, %171\l  %add199 = add nsw i32 %169, %mul198\l  %idxprom200 = sext i32 %add199 to i64\l  %172 = load double*** @a, align 8\l  %arrayidx201 = getelementptr inbounds double** %172, i64 %idxprom200\l  %173 = load double** %arrayidx201, align 8\l  store double* %173, double** %B, align 8\l  %174 = load i32* %I, align 4\l  %175 = load i32* %J, align 4\l  %176 = load i32* @nblocks, align 4\l  %mul202 = mul nsw i32 %175, %176\l  %add203 = add nsw i32 %174, %mul202\l  %idxprom204 = sext i32 %add203 to i64\l  %177 = load double*** @a, align 8\l  %arrayidx205 = getelementptr inbounds double** %177, i64 %idxprom204\l  %178 = load double** %arrayidx205, align 8\l  store double* %178, double** %C, align 8\l  %179 = load double** %A, align 8\l  %180 = load double** %B, align 8\l  %181 = load double** %C, align 8\l  %182 = load i32* %strI, align 4\l  %183 = load i32* %strJ, align 4\l  %184 = load i32* %strK, align 4\l  %185 = load i32* %strI, align 4\l  %186 = load i32* %strK, align 4\l  %187 = load i32* %strI, align 4\l  call void @bmod(double* %179, double* %180, double* %181, i32 %182, i32\l... %183, i32 %184, i32 %185, i32 %186, i32 %187)\l  br label %if.end.206\l}"];
	Node0x490d550 -> Node0x490d5a0;
	Node0x490d5a0 [shape=record,label="{if.end.206:                                       \l  br label %for.inc.207\l}"];
	Node0x490d5a0 -> Node0x490d5f0;
	Node0x490d5f0 [shape=record,label="{for.inc.207:                                      \l  %188 = load i32* %bs.addr, align 4\l  %189 = load i32* %j, align 4\l  %add208 = add nsw i32 %189, %188\l  store i32 %add208, i32* %j, align 4\l  %190 = load i32* %J, align 4\l  %inc209 = add nsw i32 %190, 1\l  store i32 %inc209, i32* %J, align 4\l  br label %for.cond.183\l}"];
	Node0x490d5f0 -> Node0x490d3c0;
	Node0x490d640 [shape=record,label="{for.end.210:                                      \l  br label %for.inc.211\l}"];
	Node0x490d640 -> Node0x490d690;
	Node0x490d690 [shape=record,label="{for.inc.211:                                      \l  %191 = load i32* %bs.addr, align 4\l  %192 = load i32* %i, align 4\l  %add212 = add nsw i32 %192, %191\l  store i32 %add212, i32* %i, align 4\l  %193 = load i32* %I, align 4\l  %inc213 = add nsw i32 %193, 1\l  store i32 %inc213, i32* %I, align 4\l  br label %for.cond.166\l}"];
	Node0x490d690 -> Node0x490d230;
	Node0x490d6e0 [shape=record,label="{for.end.214:                                      \l  %194 = load i32* %MyNum.addr, align 4\l  %cmp215 = icmp eq i32 %194, 0\l  br i1 %cmp215, label %if.then.219, label %lor.lhs.false.217\l|{<s0>T|<s1>F}}"];
	Node0x490d6e0:s0 -> Node0x490d780;
	Node0x490d6e0:s1 -> Node0x490d730;
	Node0x490d730 [shape=record,label="{lor.lhs.false.217:                                \l  %195 = load i32* %dostats.addr, align 4\l  %tobool218 = icmp ne i32 %195, 0\l  br i1 %tobool218, label %if.then.219, label %if.end.236\l|{<s0>T|<s1>F}}"];
	Node0x490d730:s0 -> Node0x490d780;
	Node0x490d730:s1 -> Node0x490d7d0;
	Node0x490d780 [shape=record,label="{if.then.219:                                      \l  %call220 = call i64 @time(i64* null)\l  %conv221 = trunc i64 %call220 to i32\l  store i32 %conv221, i32* %t4, align 4\l  %196 = load i32* %t11, align 4\l  %197 = load i32* %t1, align 4\l  %sub222 = sub i32 %196, %197\l  %conv223 = uitofp i32 %sub222 to double\l  %198 = load %struct.LocalCopies** %lc.addr, align 8\l  %t_in_fac = getelementptr inbounds %struct.LocalCopies* %198, i32 0, i32 0\l  %199 = load double* %t_in_fac, align 8\l  %add224 = fadd double %199, %conv223\l  store double %add224, double* %t_in_fac, align 8\l  %200 = load i32* %t22, align 4\l  %201 = load i32* %t2, align 4\l  %sub225 = sub i32 %200, %201\l  %conv226 = uitofp i32 %sub225 to double\l  %202 = load %struct.LocalCopies** %lc.addr, align 8\l  %t_in_solve = getelementptr inbounds %struct.LocalCopies* %202, i32 0, i32 1\l  %203 = load double* %t_in_solve, align 8\l  %add227 = fadd double %203, %conv226\l  store double %add227, double* %t_in_solve, align 8\l  %204 = load i32* %t4, align 4\l  %205 = load i32* %t3, align 4\l  %sub228 = sub i32 %204, %205\l  %conv229 = uitofp i32 %sub228 to double\l  %206 = load %struct.LocalCopies** %lc.addr, align 8\l  %t_in_mod = getelementptr inbounds %struct.LocalCopies* %206, i32 0, i32 2\l  %207 = load double* %t_in_mod, align 8\l  %add230 = fadd double %207, %conv229\l  store double %add230, double* %t_in_mod, align 8\l  %208 = load i32* %t2, align 4\l  %209 = load i32* %t11, align 4\l  %sub231 = sub i32 %208, %209\l  %210 = load i32* %t3, align 4\l  %211 = load i32* %t22, align 4\l  %sub232 = sub i32 %210, %211\l  %add233 = add i32 %sub231, %sub232\l  %conv234 = uitofp i32 %add233 to double\l  %212 = load %struct.LocalCopies** %lc.addr, align 8\l  %t_in_bar = getelementptr inbounds %struct.LocalCopies* %212, i32 0, i32 3\l  %213 = load double* %t_in_bar, align 8\l  %add235 = fadd double %213, %conv234\l  store double %add235, double* %t_in_bar, align 8\l  br label %if.end.236\l}"];
	Node0x490d780 -> Node0x490d7d0;
	Node0x490d7d0 [shape=record,label="{if.end.236:                                       \l  br label %for.inc.237\l}"];
	Node0x490d7d0 -> Node0x490d820;
	Node0x490d820 [shape=record,label="{for.inc.237:                                      \l  %214 = load i32* %bs.addr, align 4\l  %215 = load i32* %k, align 4\l  %add238 = add nsw i32 %215, %214\l  store i32 %add238, i32* %k, align 4\l  %216 = load i32* %K, align 4\l  %inc239 = add nsw i32 %216, 1\l  store i32 %inc239, i32* %K, align 4\l  br label %for.cond\l}"];
	Node0x490d820 -> Node0x490be30;
	Node0x490d870 [shape=record,label="{for.end.240:                                      \l  ret void\l}"];
}
