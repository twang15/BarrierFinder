digraph "CFG for 'CheckResult' function" {
	label="CFG for 'CheckResult' function";

	Node0x48e5290 [shape=record,label="{entry:\l  %n.addr = alloca i32, align 4\l  %a.addr = alloca double**, align 8\l  %rhs.addr = alloca double*, align 8\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %bogus = alloca i32, align 4\l  %y = alloca double*, align 8\l  %diff = alloca double, align 8\l  %max_diff = alloca double, align 8\l  %ii = alloca i32, align 4\l  %jj = alloca i32, align 4\l  %edge = alloca i32, align 4\l  %ibs = alloca i32, align 4\l  %jbs = alloca i32, align 4\l  %skip = alloca i32, align 4\l  store i32 %n, i32* %n.addr, align 4\l  store double** %a, double*** %a.addr, align 8\l  store double* %rhs, double** %rhs.addr, align 8\l  store i32 0, i32* %bogus, align 4\l  %0 = load i32* %n.addr, align 4\l  %1 = load i32* @block_size, align 4\l  %rem = srem i32 %0, %1\l  store i32 %rem, i32* %edge, align 4\l  %2 = load i32* %n.addr, align 4\l  %conv = sext i32 %2 to i64\l  %mul = mul i64 %conv, 8\l  %call = call noalias i8* @malloc(i64 %mul)\l  %3 = bitcast i8* %call to double*\l  store double* %3, double** %y, align 8\l  %4 = load double** %y, align 8\l  %cmp = icmp eq double* %4, null\l  br i1 %cmp, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x48e5290:s0 -> Node0x48e52e0;
	Node0x48e5290:s1 -> Node0x48e5330;
	Node0x48e52e0 [shape=record,label="{if.then:                                          \l  call void @printerr(i8* getelementptr inbounds ([31 x i8]* @.str.46, i32 0,\l... i32 0))\l  call void @exit(i32 -1)\l  unreachable\l}"];
	Node0x48e5330 [shape=record,label="{if.end:                                           \l  store i32 0, i32* %j, align 4\l  br label %for.cond\l}"];
	Node0x48e5330 -> Node0x48e5380;
	Node0x48e5380 [shape=record,label="{for.cond:                                         \l  %5 = load i32* %j, align 4\l  %6 = load i32* %n.addr, align 4\l  %cmp2 = icmp slt i32 %5, %6\l  br i1 %cmp2, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x48e5380:s0 -> Node0x48e53d0;
	Node0x48e5380:s1 -> Node0x48e5470;
	Node0x48e53d0 [shape=record,label="{for.body:                                         \l  %7 = load i32* %j, align 4\l  %idxprom = sext i32 %7 to i64\l  %8 = load double** %rhs.addr, align 8\l  %arrayidx = getelementptr inbounds double* %8, i64 %idxprom\l  %9 = load double* %arrayidx, align 8\l  %10 = load i32* %j, align 4\l  %idxprom4 = sext i32 %10 to i64\l  %11 = load double** %y, align 8\l  %arrayidx5 = getelementptr inbounds double* %11, i64 %idxprom4\l  store double %9, double* %arrayidx5, align 8\l  br label %for.inc\l}"];
	Node0x48e53d0 -> Node0x48e5420;
	Node0x48e5420 [shape=record,label="{for.inc:                                          \l  %12 = load i32* %j, align 4\l  %inc = add nsw i32 %12, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond\l}"];
	Node0x48e5420 -> Node0x48e5380;
	Node0x48e5470 [shape=record,label="{for.end:                                          \l  store i32 0, i32* %j, align 4\l  br label %for.cond.6\l}"];
	Node0x48e5470 -> Node0x48e54c0;
	Node0x48e54c0 [shape=record,label="{for.cond.6:                                       \l  %13 = load i32* %j, align 4\l  %14 = load i32* %n.addr, align 4\l  %cmp7 = icmp slt i32 %13, %14\l  br i1 %cmp7, label %for.body.9, label %for.end.65\l|{<s0>T|<s1>F}}"];
	Node0x48e54c0:s0 -> Node0x48e5510;
	Node0x48e54c0:s1 -> Node0x48e6900;
	Node0x48e5510 [shape=record,label="{for.body.9:                                       \l  %15 = load i32* %n.addr, align 4\l  %16 = load i32* %j, align 4\l  %sub = sub nsw i32 %15, %16\l  %17 = load i32* %edge, align 4\l  %cmp10 = icmp sle i32 %sub, %17\l  br i1 %cmp10, label %if.then.12, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x48e5510:s0 -> Node0x48d5990;
	Node0x48e5510:s1 -> Node0x48e5560;
	Node0x48d5990 [shape=record,label="{if.then.12:                                       \l  %18 = load i32* %edge, align 4\l  store i32 %18, i32* %jbs, align 4\l  %19 = load i32* %n.addr, align 4\l  %20 = load i32* %edge, align 4\l  %sub13 = sub nsw i32 %19, %20\l  store i32 %sub13, i32* %jbs, align 4\l  %21 = load i32* %edge, align 4\l  store i32 %21, i32* %skip, align 4\l  br label %if.end.14\l}"];
	Node0x48d5990 -> Node0x48e6630;
	Node0x48e5560 [shape=record,label="{if.else:                                          \l  %22 = load i32* @block_size, align 4\l  store i32 %22, i32* %jbs, align 4\l  %23 = load i32* @block_size, align 4\l  store i32 %23, i32* %skip, align 4\l  br label %if.end.14\l}"];
	Node0x48e5560 -> Node0x48e6630;
	Node0x48e6630 [shape=record,label="{if.end.14:                                        \l  %24 = load i32* %j, align 4\l  %25 = load i32* @block_size, align 4\l  %div = sdiv i32 %24, %25\l  %26 = load i32* %j, align 4\l  %27 = load i32* @block_size, align 4\l  %div15 = sdiv i32 %26, %27\l  %28 = load i32* @nblocks, align 4\l  %mul16 = mul nsw i32 %div15, %28\l  %add = add nsw i32 %div, %mul16\l  store i32 %add, i32* %ii, align 4\l  %29 = load i32* %j, align 4\l  %30 = load i32* %jbs, align 4\l  %rem17 = srem i32 %29, %30\l  %31 = load i32* %j, align 4\l  %32 = load i32* %jbs, align 4\l  %rem18 = srem i32 %31, %32\l  %33 = load i32* %skip, align 4\l  %mul19 = mul nsw i32 %rem18, %33\l  %add20 = add nsw i32 %rem17, %mul19\l  store i32 %add20, i32* %jj, align 4\l  %34 = load i32* %j, align 4\l  %idxprom21 = sext i32 %34 to i64\l  %35 = load double** %y, align 8\l  %arrayidx22 = getelementptr inbounds double* %35, i64 %idxprom21\l  %36 = load double* %arrayidx22, align 8\l  %37 = load i32* %jj, align 4\l  %idxprom23 = sext i32 %37 to i64\l  %38 = load i32* %ii, align 4\l  %idxprom24 = sext i32 %38 to i64\l  %39 = load double*** %a.addr, align 8\l  %arrayidx25 = getelementptr inbounds double** %39, i64 %idxprom24\l  %40 = load double** %arrayidx25, align 8\l  %arrayidx26 = getelementptr inbounds double* %40, i64 %idxprom23\l  %41 = load double* %arrayidx26, align 8\l  %div27 = fdiv double %36, %41\l  %42 = load i32* %j, align 4\l  %idxprom28 = sext i32 %42 to i64\l  %43 = load double** %y, align 8\l  %arrayidx29 = getelementptr inbounds double* %43, i64 %idxprom28\l  store double %div27, double* %arrayidx29, align 8\l  %44 = load i32* %j, align 4\l  %add30 = add nsw i32 %44, 1\l  store i32 %add30, i32* %i, align 4\l  br label %for.cond.31\l}"];
	Node0x48e6630 -> Node0x48e6680;
	Node0x48e6680 [shape=record,label="{for.cond.31:                                      \l  %45 = load i32* %i, align 4\l  %46 = load i32* %n.addr, align 4\l  %cmp32 = icmp slt i32 %45, %46\l  br i1 %cmp32, label %for.body.34, label %for.end.62\l|{<s0>T|<s1>F}}"];
	Node0x48e6680:s0 -> Node0x48e66d0;
	Node0x48e6680:s1 -> Node0x48e6860;
	Node0x48e66d0 [shape=record,label="{for.body.34:                                      \l  %47 = load i32* %n.addr, align 4\l  %48 = load i32* %i, align 4\l  %sub35 = sub nsw i32 %47, %48\l  %49 = load i32* %edge, align 4\l  %cmp36 = icmp sle i32 %sub35, %49\l  br i1 %cmp36, label %if.then.38, label %if.else.40\l|{<s0>T|<s1>F}}"];
	Node0x48e66d0:s0 -> Node0x48e6720;
	Node0x48e66d0:s1 -> Node0x48e6770;
	Node0x48e6720 [shape=record,label="{if.then.38:                                       \l  %50 = load i32* %edge, align 4\l  store i32 %50, i32* %ibs, align 4\l  %51 = load i32* %n.addr, align 4\l  %52 = load i32* %edge, align 4\l  %sub39 = sub nsw i32 %51, %52\l  store i32 %sub39, i32* %ibs, align 4\l  %53 = load i32* %edge, align 4\l  store i32 %53, i32* %skip, align 4\l  br label %if.end.41\l}"];
	Node0x48e6720 -> Node0x48e67c0;
	Node0x48e6770 [shape=record,label="{if.else.40:                                       \l  %54 = load i32* @block_size, align 4\l  store i32 %54, i32* %ibs, align 4\l  %55 = load i32* @block_size, align 4\l  store i32 %55, i32* %skip, align 4\l  br label %if.end.41\l}"];
	Node0x48e6770 -> Node0x48e67c0;
	Node0x48e67c0 [shape=record,label="{if.end.41:                                        \l  %56 = load i32* %i, align 4\l  %57 = load i32* @block_size, align 4\l  %div42 = sdiv i32 %56, %57\l  %58 = load i32* %j, align 4\l  %59 = load i32* @block_size, align 4\l  %div43 = sdiv i32 %58, %59\l  %60 = load i32* @nblocks, align 4\l  %mul44 = mul nsw i32 %div43, %60\l  %add45 = add nsw i32 %div42, %mul44\l  store i32 %add45, i32* %ii, align 4\l  %61 = load i32* %i, align 4\l  %62 = load i32* %ibs, align 4\l  %rem46 = srem i32 %61, %62\l  %63 = load i32* %j, align 4\l  %64 = load i32* %jbs, align 4\l  %rem47 = srem i32 %63, %64\l  %65 = load i32* %skip, align 4\l  %mul48 = mul nsw i32 %rem47, %65\l  %add49 = add nsw i32 %rem46, %mul48\l  store i32 %add49, i32* %jj, align 4\l  %66 = load i32* %jj, align 4\l  %idxprom50 = sext i32 %66 to i64\l  %67 = load i32* %ii, align 4\l  %idxprom51 = sext i32 %67 to i64\l  %68 = load double*** %a.addr, align 8\l  %arrayidx52 = getelementptr inbounds double** %68, i64 %idxprom51\l  %69 = load double** %arrayidx52, align 8\l  %arrayidx53 = getelementptr inbounds double* %69, i64 %idxprom50\l  %70 = load double* %arrayidx53, align 8\l  %71 = load i32* %j, align 4\l  %idxprom54 = sext i32 %71 to i64\l  %72 = load double** %y, align 8\l  %arrayidx55 = getelementptr inbounds double* %72, i64 %idxprom54\l  %73 = load double* %arrayidx55, align 8\l  %mul56 = fmul double %70, %73\l  %74 = load i32* %i, align 4\l  %idxprom57 = sext i32 %74 to i64\l  %75 = load double** %y, align 8\l  %arrayidx58 = getelementptr inbounds double* %75, i64 %idxprom57\l  %76 = load double* %arrayidx58, align 8\l  %sub59 = fsub double %76, %mul56\l  store double %sub59, double* %arrayidx58, align 8\l  br label %for.inc.60\l}"];
	Node0x48e67c0 -> Node0x48e6810;
	Node0x48e6810 [shape=record,label="{for.inc.60:                                       \l  %77 = load i32* %i, align 4\l  %inc61 = add nsw i32 %77, 1\l  store i32 %inc61, i32* %i, align 4\l  br label %for.cond.31\l}"];
	Node0x48e6810 -> Node0x48e6680;
	Node0x48e6860 [shape=record,label="{for.end.62:                                       \l  br label %for.inc.63\l}"];
	Node0x48e6860 -> Node0x48e68b0;
	Node0x48e68b0 [shape=record,label="{for.inc.63:                                       \l  %78 = load i32* %j, align 4\l  %inc64 = add nsw i32 %78, 1\l  store i32 %inc64, i32* %j, align 4\l  br label %for.cond.6\l}"];
	Node0x48e68b0 -> Node0x48e54c0;
	Node0x48e6900 [shape=record,label="{for.end.65:                                       \l  %79 = load i32* %n.addr, align 4\l  %sub66 = sub nsw i32 %79, 1\l  store i32 %sub66, i32* %j, align 4\l  br label %for.cond.67\l}"];
	Node0x48e6900 -> Node0x48e6950;
	Node0x48e6950 [shape=record,label="{for.cond.67:                                      \l  %80 = load i32* %j, align 4\l  %cmp68 = icmp sge i32 %80, 0\l  br i1 %cmp68, label %for.body.70, label %for.end.111\l|{<s0>T|<s1>F}}"];
	Node0x48e6950:s0 -> Node0x48e69a0;
	Node0x48e6950:s1 -> Node0x48e6d60;
	Node0x48e69a0 [shape=record,label="{for.body.70:                                      \l  store i32 0, i32* %i, align 4\l  br label %for.cond.71\l}"];
	Node0x48e69a0 -> Node0x48e69f0;
	Node0x48e69f0 [shape=record,label="{for.cond.71:                                      \l  %81 = load i32* %i, align 4\l  %82 = load i32* %j, align 4\l  %cmp72 = icmp slt i32 %81, %82\l  br i1 %cmp72, label %for.body.74, label %for.end.109\l|{<s0>T|<s1>F}}"];
	Node0x48e69f0:s0 -> Node0x48e6a40;
	Node0x48e69f0:s1 -> Node0x48e6cc0;
	Node0x48e6a40 [shape=record,label="{for.body.74:                                      \l  %83 = load i32* %n.addr, align 4\l  %84 = load i32* %i, align 4\l  %sub75 = sub nsw i32 %83, %84\l  %85 = load i32* %edge, align 4\l  %cmp76 = icmp sle i32 %sub75, %85\l  br i1 %cmp76, label %if.then.78, label %if.else.80\l|{<s0>T|<s1>F}}"];
	Node0x48e6a40:s0 -> Node0x48e6a90;
	Node0x48e6a40:s1 -> Node0x48e6ae0;
	Node0x48e6a90 [shape=record,label="{if.then.78:                                       \l  %86 = load i32* %edge, align 4\l  store i32 %86, i32* %ibs, align 4\l  %87 = load i32* %n.addr, align 4\l  %88 = load i32* %edge, align 4\l  %sub79 = sub nsw i32 %87, %88\l  store i32 %sub79, i32* %ibs, align 4\l  %89 = load i32* %edge, align 4\l  store i32 %89, i32* %skip, align 4\l  br label %if.end.81\l}"];
	Node0x48e6a90 -> Node0x48e6b30;
	Node0x48e6ae0 [shape=record,label="{if.else.80:                                       \l  %90 = load i32* @block_size, align 4\l  store i32 %90, i32* %ibs, align 4\l  %91 = load i32* @block_size, align 4\l  store i32 %91, i32* %skip, align 4\l  br label %if.end.81\l}"];
	Node0x48e6ae0 -> Node0x48e6b30;
	Node0x48e6b30 [shape=record,label="{if.end.81:                                        \l  %92 = load i32* %n.addr, align 4\l  %93 = load i32* %j, align 4\l  %sub82 = sub nsw i32 %92, %93\l  %94 = load i32* %edge, align 4\l  %cmp83 = icmp sle i32 %sub82, %94\l  br i1 %cmp83, label %if.then.85, label %if.else.87\l|{<s0>T|<s1>F}}"];
	Node0x48e6b30:s0 -> Node0x48e6b80;
	Node0x48e6b30:s1 -> Node0x48e6bd0;
	Node0x48e6b80 [shape=record,label="{if.then.85:                                       \l  %95 = load i32* %edge, align 4\l  store i32 %95, i32* %jbs, align 4\l  %96 = load i32* %n.addr, align 4\l  %97 = load i32* %edge, align 4\l  %sub86 = sub nsw i32 %96, %97\l  store i32 %sub86, i32* %jbs, align 4\l  br label %if.end.88\l}"];
	Node0x48e6b80 -> Node0x48e6c20;
	Node0x48e6bd0 [shape=record,label="{if.else.87:                                       \l  %98 = load i32* @block_size, align 4\l  store i32 %98, i32* %jbs, align 4\l  br label %if.end.88\l}"];
	Node0x48e6bd0 -> Node0x48e6c20;
	Node0x48e6c20 [shape=record,label="{if.end.88:                                        \l  %99 = load i32* %i, align 4\l  %100 = load i32* @block_size, align 4\l  %div89 = sdiv i32 %99, %100\l  %101 = load i32* %j, align 4\l  %102 = load i32* @block_size, align 4\l  %div90 = sdiv i32 %101, %102\l  %103 = load i32* @nblocks, align 4\l  %mul91 = mul nsw i32 %div90, %103\l  %add92 = add nsw i32 %div89, %mul91\l  store i32 %add92, i32* %ii, align 4\l  %104 = load i32* %i, align 4\l  %105 = load i32* %ibs, align 4\l  %rem93 = srem i32 %104, %105\l  %106 = load i32* %j, align 4\l  %107 = load i32* %jbs, align 4\l  %rem94 = srem i32 %106, %107\l  %108 = load i32* %skip, align 4\l  %mul95 = mul nsw i32 %rem94, %108\l  %add96 = add nsw i32 %rem93, %mul95\l  store i32 %add96, i32* %jj, align 4\l  %109 = load i32* %jj, align 4\l  %idxprom97 = sext i32 %109 to i64\l  %110 = load i32* %ii, align 4\l  %idxprom98 = sext i32 %110 to i64\l  %111 = load double*** %a.addr, align 8\l  %arrayidx99 = getelementptr inbounds double** %111, i64 %idxprom98\l  %112 = load double** %arrayidx99, align 8\l  %arrayidx100 = getelementptr inbounds double* %112, i64 %idxprom97\l  %113 = load double* %arrayidx100, align 8\l  %114 = load i32* %j, align 4\l  %idxprom101 = sext i32 %114 to i64\l  %115 = load double** %y, align 8\l  %arrayidx102 = getelementptr inbounds double* %115, i64 %idxprom101\l  %116 = load double* %arrayidx102, align 8\l  %mul103 = fmul double %113, %116\l  %117 = load i32* %i, align 4\l  %idxprom104 = sext i32 %117 to i64\l  %118 = load double** %y, align 8\l  %arrayidx105 = getelementptr inbounds double* %118, i64 %idxprom104\l  %119 = load double* %arrayidx105, align 8\l  %sub106 = fsub double %119, %mul103\l  store double %sub106, double* %arrayidx105, align 8\l  br label %for.inc.107\l}"];
	Node0x48e6c20 -> Node0x48e6c70;
	Node0x48e6c70 [shape=record,label="{for.inc.107:                                      \l  %120 = load i32* %i, align 4\l  %inc108 = add nsw i32 %120, 1\l  store i32 %inc108, i32* %i, align 4\l  br label %for.cond.71\l}"];
	Node0x48e6c70 -> Node0x48e69f0;
	Node0x48e6cc0 [shape=record,label="{for.end.109:                                      \l  br label %for.inc.110\l}"];
	Node0x48e6cc0 -> Node0x48e6d10;
	Node0x48e6d10 [shape=record,label="{for.inc.110:                                      \l  %121 = load i32* %j, align 4\l  %dec = add nsw i32 %121, -1\l  store i32 %dec, i32* %j, align 4\l  br label %for.cond.67\l}"];
	Node0x48e6d10 -> Node0x48e6950;
	Node0x48e6d60 [shape=record,label="{for.end.111:                                      \l  store double 0.000000e+00, double* %max_diff, align 8\l  store i32 0, i32* %j, align 4\l  br label %for.cond.112\l}"];
	Node0x48e6d60 -> Node0x48e6db0;
	Node0x48e6db0 [shape=record,label="{for.cond.112:                                     \l  %122 = load i32* %j, align 4\l  %123 = load i32* %n.addr, align 4\l  %cmp113 = icmp slt i32 %122, %123\l  br i1 %cmp113, label %for.body.115, label %for.end.126\l|{<s0>T|<s1>F}}"];
	Node0x48e6db0:s0 -> Node0x48e6e00;
	Node0x48e6db0:s1 -> Node0x48e6f40;
	Node0x48e6e00 [shape=record,label="{for.body.115:                                     \l  %124 = load i32* %j, align 4\l  %idxprom116 = sext i32 %124 to i64\l  %125 = load double** %y, align 8\l  %arrayidx117 = getelementptr inbounds double* %125, i64 %idxprom116\l  %126 = load double* %arrayidx117, align 8\l  %sub118 = fsub double %126, 1.000000e+00\l  store double %sub118, double* %diff, align 8\l  %127 = load double* %diff, align 8\l  %call119 = call double @fabs(double %127)\l  %cmp120 = fcmp ogt double %call119, 1.000000e-05\l  br i1 %cmp120, label %if.then.122, label %if.end.123\l|{<s0>T|<s1>F}}"];
	Node0x48e6e00:s0 -> Node0x48e6e50;
	Node0x48e6e00:s1 -> Node0x48e6ea0;
	Node0x48e6e50 [shape=record,label="{if.then.122:                                      \l  store i32 1, i32* %bogus, align 4\l  %128 = load double* %diff, align 8\l  store double %128, double* %max_diff, align 8\l  br label %if.end.123\l}"];
	Node0x48e6e50 -> Node0x48e6ea0;
	Node0x48e6ea0 [shape=record,label="{if.end.123:                                       \l  br label %for.inc.124\l}"];
	Node0x48e6ea0 -> Node0x48e6ef0;
	Node0x48e6ef0 [shape=record,label="{for.inc.124:                                      \l  %129 = load i32* %j, align 4\l  %inc125 = add nsw i32 %129, 1\l  store i32 %inc125, i32* %j, align 4\l  br label %for.cond.112\l}"];
	Node0x48e6ef0 -> Node0x48e6db0;
	Node0x48e6f40 [shape=record,label="{for.end.126:                                      \l  %130 = load i32* %bogus, align 4\l  %tobool = icmp ne i32 %130, 0\l  br i1 %tobool, label %if.then.127, label %if.else.129\l|{<s0>T|<s1>F}}"];
	Node0x48e6f40:s0 -> Node0x48e6f90;
	Node0x48e6f40:s1 -> Node0x48e6fe0;
	Node0x48e6f90 [shape=record,label="{if.then.127:                                      \l  %131 = load double* %max_diff, align 8\l  %call128 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x\l... i8]* @.str.47, i32 0, i32 0), double %131)\l  br label %if.end.131\l}"];
	Node0x48e6f90 -> Node0x48e7030;
	Node0x48e6fe0 [shape=record,label="{if.else.129:                                      \l  %call130 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x\l... i8]* @.str.48, i32 0, i32 0))\l  br label %if.end.131\l}"];
	Node0x48e6fe0 -> Node0x48e7030;
	Node0x48e7030 [shape=record,label="{if.end.131:                                       \l  %132 = load double** %y, align 8\l  %133 = bitcast double* %132 to i8*\l  call void @free(i8* %133)\l  ret void\l}"];
}
