digraph "CFG for 'bmodd' function" {
	label="CFG for 'bmodd' function";

	Node0x48f1d50 [shape=record,label="{entry:\l  %a.addr = alloca double*, align 8\l  %c.addr = alloca double*, align 8\l  %dimi.addr = alloca i32, align 4\l  %dimj.addr = alloca i32, align 4\l  %stride_a.addr = alloca i32, align 4\l  %stride_c.addr = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %k = alloca i32, align 4\l  %length = alloca i32, align 4\l  %alpha = alloca double, align 8\l  store double* %a, double** %a.addr, align 8\l  store double* %c, double** %c.addr, align 8\l  store i32 %dimi, i32* %dimi.addr, align 4\l  store i32 %dimj, i32* %dimj.addr, align 4\l  store i32 %stride_a, i32* %stride_a.addr, align 4\l  store i32 %stride_c, i32* %stride_c.addr, align 4\l  store i32 0, i32* %k, align 4\l  br label %for.cond\l}"];
	Node0x48f1d50 -> Node0x48f1da0;
	Node0x48f1da0 [shape=record,label="{for.cond:                                         \l  %0 = load i32* %k, align 4\l  %1 = load i32* %dimi.addr, align 4\l  %cmp = icmp slt i32 %0, %1\l  br i1 %cmp, label %for.body, label %for.end.28\l|{<s0>T|<s1>F}}"];
	Node0x48f1da0:s0 -> Node0x48f1df0;
	Node0x48f1da0:s1 -> Node0x48f1fd0;
	Node0x48f1df0 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f1df0 -> Node0x48f1e40;
	Node0x48f1e40 [shape=record,label="{for.cond.1:                                       \l  %2 = load i32* %j, align 4\l  %3 = load i32* %dimj.addr, align 4\l  %cmp2 = icmp slt i32 %2, %3\l  br i1 %cmp2, label %for.body.3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x48f1e40:s0 -> Node0x48f1e90;
	Node0x48f1e40:s1 -> Node0x48f1f30;
	Node0x48f1e90 [shape=record,label="{for.body.3:                                       \l  %4 = load i32* %k, align 4\l  %5 = load i32* %k, align 4\l  %6 = load i32* %stride_a.addr, align 4\l  %mul = mul nsw i32 %5, %6\l  %add = add nsw i32 %4, %mul\l  %idxprom = sext i32 %add to i64\l  %7 = load double** %a.addr, align 8\l  %arrayidx = getelementptr inbounds double* %7, i64 %idxprom\l  %8 = load double* %arrayidx, align 8\l  %9 = load i32* %k, align 4\l  %10 = load i32* %j, align 4\l  %11 = load i32* %stride_c.addr, align 4\l  %mul4 = mul nsw i32 %10, %11\l  %add5 = add nsw i32 %9, %mul4\l  %idxprom6 = sext i32 %add5 to i64\l  %12 = load double** %c.addr, align 8\l  %arrayidx7 = getelementptr inbounds double* %12, i64 %idxprom6\l  %13 = load double* %arrayidx7, align 8\l  %div = fdiv double %13, %8\l  store double %div, double* %arrayidx7, align 8\l  %14 = load i32* %k, align 4\l  %15 = load i32* %j, align 4\l  %16 = load i32* %stride_c.addr, align 4\l  %mul8 = mul nsw i32 %15, %16\l  %add9 = add nsw i32 %14, %mul8\l  %idxprom10 = sext i32 %add9 to i64\l  %17 = load double** %c.addr, align 8\l  %arrayidx11 = getelementptr inbounds double* %17, i64 %idxprom10\l  %18 = load double* %arrayidx11, align 8\l  %sub = fsub double -0.000000e+00, %18\l  store double %sub, double* %alpha, align 8\l  %19 = load i32* %dimi.addr, align 4\l  %20 = load i32* %k, align 4\l  %sub12 = sub nsw i32 %19, %20\l  %sub13 = sub nsw i32 %sub12, 1\l  store i32 %sub13, i32* %length, align 4\l  %21 = load i32* %k, align 4\l  %add14 = add nsw i32 %21, 1\l  %22 = load i32* %j, align 4\l  %23 = load i32* %stride_c.addr, align 4\l  %mul15 = mul nsw i32 %22, %23\l  %add16 = add nsw i32 %add14, %mul15\l  %idxprom17 = sext i32 %add16 to i64\l  %24 = load double** %c.addr, align 8\l  %arrayidx18 = getelementptr inbounds double* %24, i64 %idxprom17\l  %25 = load i32* %k, align 4\l  %add19 = add nsw i32 %25, 1\l  %26 = load i32* %k, align 4\l  %27 = load i32* %stride_a.addr, align 4\l  %mul20 = mul nsw i32 %26, %27\l  %add21 = add nsw i32 %add19, %mul20\l  %idxprom22 = sext i32 %add21 to i64\l  %28 = load double** %a.addr, align 8\l  %arrayidx23 = getelementptr inbounds double* %28, i64 %idxprom22\l  %29 = load i32* %dimi.addr, align 4\l  %30 = load i32* %k, align 4\l  %sub24 = sub nsw i32 %29, %30\l  %sub25 = sub nsw i32 %sub24, 1\l  %31 = load double* %alpha, align 8\l  call void @daxpy(double* %arrayidx18, double* %arrayidx23, i32 %sub25,\l... double %31)\l  br label %for.inc\l}"];
	Node0x48f1e90 -> Node0x48f1ee0;
	Node0x48f1ee0 [shape=record,label="{for.inc:                                          \l  %32 = load i32* %j, align 4\l  %inc = add nsw i32 %32, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f1ee0 -> Node0x48f1e40;
	Node0x48f1f30 [shape=record,label="{for.end:                                          \l  br label %for.inc.26\l}"];
	Node0x48f1f30 -> Node0x48f1f80;
	Node0x48f1f80 [shape=record,label="{for.inc.26:                                       \l  %33 = load i32* %k, align 4\l  %inc27 = add nsw i32 %33, 1\l  store i32 %inc27, i32* %k, align 4\l  br label %for.cond\l}"];
	Node0x48f1f80 -> Node0x48f1da0;
	Node0x48f1fd0 [shape=record,label="{for.end.28:                                       \l  ret void\l}"];
}
