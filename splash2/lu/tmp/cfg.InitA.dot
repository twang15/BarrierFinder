digraph "CFG for 'InitA' function" {
	label="CFG for 'InitA' function";

	Node0x48d59f0 [shape=record,label="{entry:\l  %rhs.addr = alloca double*, align 8\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %ii = alloca i32, align 4\l  %jj = alloca i32, align 4\l  %edge = alloca i32, align 4\l  %ibs = alloca i32, align 4\l  %jbs = alloca i32, align 4\l  %skip = alloca i32, align 4\l  store double* %rhs, double** %rhs.addr, align 8\l  call void @srand48(i64 1)\l  %0 = load i32* @n, align 4\l  %1 = load i32* @block_size, align 4\l  %rem = srem i32 %0, %1\l  store i32 %rem, i32* %edge, align 4\l  store i32 0, i32* %j, align 4\l  br label %for.cond\l}"];
	Node0x48d59f0 -> Node0x48d5a40;
	Node0x48d5a40 [shape=record,label="{for.cond:                                         \l  %2 = load i32* %j, align 4\l  %3 = load i32* @n, align 4\l  %cmp = icmp slt i32 %2, %3\l  br i1 %cmp, label %for.body, label %for.end.31\l|{<s0>T|<s1>F}}"];
	Node0x48d5a40:s0 -> Node0x48d5a90;
	Node0x48d5a40:s1 -> Node0x48d5ef0;
	Node0x48d5a90 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %i, align 4\l  br label %for.cond.1\l}"];
	Node0x48d5a90 -> Node0x48d5ae0;
	Node0x48d5ae0 [shape=record,label="{for.cond.1:                                       \l  %4 = load i32* %i, align 4\l  %5 = load i32* @n, align 4\l  %cmp2 = icmp slt i32 %4, %5\l  br i1 %cmp2, label %for.body.3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x48d5ae0:s0 -> Node0x48d5b30;
	Node0x48d5ae0:s1 -> Node0x48d5e50;
	Node0x48d5b30 [shape=record,label="{for.body.3:                                       \l  %6 = load i32* @n, align 4\l  %7 = load i32* %i, align 4\l  %sub = sub nsw i32 %6, %7\l  %8 = load i32* %edge, align 4\l  %cmp4 = icmp sle i32 %sub, %8\l  br i1 %cmp4, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x48d5b30:s0 -> Node0x48d5b80;
	Node0x48d5b30:s1 -> Node0x48d5bd0;
	Node0x48d5b80 [shape=record,label="{if.then:                                          \l  %9 = load i32* %edge, align 4\l  store i32 %9, i32* %ibs, align 4\l  %10 = load i32* @n, align 4\l  %11 = load i32* %edge, align 4\l  %sub5 = sub nsw i32 %10, %11\l  store i32 %sub5, i32* %ibs, align 4\l  %12 = load i32* %edge, align 4\l  store i32 %12, i32* %skip, align 4\l  br label %if.end\l}"];
	Node0x48d5b80 -> Node0x48d5c20;
	Node0x48d5bd0 [shape=record,label="{if.else:                                          \l  %13 = load i32* @block_size, align 4\l  store i32 %13, i32* %ibs, align 4\l  %14 = load i32* @block_size, align 4\l  store i32 %14, i32* %skip, align 4\l  br label %if.end\l}"];
	Node0x48d5bd0 -> Node0x48d5c20;
	Node0x48d5c20 [shape=record,label="{if.end:                                           \l  %15 = load i32* @n, align 4\l  %16 = load i32* %j, align 4\l  %sub6 = sub nsw i32 %15, %16\l  %17 = load i32* %edge, align 4\l  %cmp7 = icmp sle i32 %sub6, %17\l  br i1 %cmp7, label %if.then.8, label %if.else.10\l|{<s0>T|<s1>F}}"];
	Node0x48d5c20:s0 -> Node0x48d5c70;
	Node0x48d5c20:s1 -> Node0x48d5cc0;
	Node0x48d5c70 [shape=record,label="{if.then.8:                                        \l  %18 = load i32* %edge, align 4\l  store i32 %18, i32* %jbs, align 4\l  %19 = load i32* @n, align 4\l  %20 = load i32* %edge, align 4\l  %sub9 = sub nsw i32 %19, %20\l  store i32 %sub9, i32* %jbs, align 4\l  br label %if.end.11\l}"];
	Node0x48d5c70 -> Node0x48d5d10;
	Node0x48d5cc0 [shape=record,label="{if.else.10:                                       \l  %21 = load i32* @block_size, align 4\l  store i32 %21, i32* %jbs, align 4\l  br label %if.end.11\l}"];
	Node0x48d5cc0 -> Node0x48d5d10;
	Node0x48d5d10 [shape=record,label="{if.end.11:                                        \l  %22 = load i32* %i, align 4\l  %23 = load i32* @block_size, align 4\l  %div = sdiv i32 %22, %23\l  %24 = load i32* %j, align 4\l  %25 = load i32* @block_size, align 4\l  %div12 = sdiv i32 %24, %25\l  %26 = load i32* @nblocks, align 4\l  %mul = mul nsw i32 %div12, %26\l  %add = add nsw i32 %div, %mul\l  store i32 %add, i32* %ii, align 4\l  %27 = load i32* %i, align 4\l  %28 = load i32* %ibs, align 4\l  %rem13 = srem i32 %27, %28\l  %29 = load i32* %j, align 4\l  %30 = load i32* %jbs, align 4\l  %rem14 = srem i32 %29, %30\l  %31 = load i32* %skip, align 4\l  %mul15 = mul nsw i32 %rem14, %31\l  %add16 = add nsw i32 %rem13, %mul15\l  store i32 %add16, i32* %jj, align 4\l  %call = call i64 @lrand48()\l  %conv = sitofp i64 %call to double\l  %div17 = fdiv double %conv, 3.276700e+04\l  %32 = load i32* %jj, align 4\l  %idxprom = sext i32 %32 to i64\l  %33 = load i32* %ii, align 4\l  %idxprom18 = sext i32 %33 to i64\l  %34 = load double*** @a, align 8\l  %arrayidx = getelementptr inbounds double** %34, i64 %idxprom18\l  %35 = load double** %arrayidx, align 8\l  %arrayidx19 = getelementptr inbounds double* %35, i64 %idxprom\l  store double %div17, double* %arrayidx19, align 8\l  %36 = load i32* %i, align 4\l  %37 = load i32* %j, align 4\l  %cmp20 = icmp eq i32 %36, %37\l  br i1 %cmp20, label %if.then.22, label %if.end.28\l|{<s0>T|<s1>F}}"];
	Node0x48d5d10:s0 -> Node0x48d5d60;
	Node0x48d5d10:s1 -> Node0x48d5db0;
	Node0x48d5d60 [shape=record,label="{if.then.22:                                       \l  %38 = load i32* %jj, align 4\l  %idxprom23 = sext i32 %38 to i64\l  %39 = load i32* %ii, align 4\l  %idxprom24 = sext i32 %39 to i64\l  %40 = load double*** @a, align 8\l  %arrayidx25 = getelementptr inbounds double** %40, i64 %idxprom24\l  %41 = load double** %arrayidx25, align 8\l  %arrayidx26 = getelementptr inbounds double* %41, i64 %idxprom23\l  %42 = load double* %arrayidx26, align 8\l  %mul27 = fmul double %42, 1.000000e+01\l  store double %mul27, double* %arrayidx26, align 8\l  br label %if.end.28\l}"];
	Node0x48d5d60 -> Node0x48d5db0;
	Node0x48d5db0 [shape=record,label="{if.end.28:                                        \l  br label %for.inc\l}"];
	Node0x48d5db0 -> Node0x48d5e00;
	Node0x48d5e00 [shape=record,label="{for.inc:                                          \l  %43 = load i32* %i, align 4\l  %inc = add nsw i32 %43, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond.1\l}"];
	Node0x48d5e00 -> Node0x48d5ae0;
	Node0x48d5e50 [shape=record,label="{for.end:                                          \l  br label %for.inc.29\l}"];
	Node0x48d5e50 -> Node0x48d5ea0;
	Node0x48d5ea0 [shape=record,label="{for.inc.29:                                       \l  %44 = load i32* %j, align 4\l  %inc30 = add nsw i32 %44, 1\l  store i32 %inc30, i32* %j, align 4\l  br label %for.cond\l}"];
	Node0x48d5ea0 -> Node0x48d5a40;
	Node0x48d5ef0 [shape=record,label="{for.end.31:                                       \l  store i32 0, i32* %j, align 4\l  br label %for.cond.32\l}"];
	Node0x48d5ef0 -> Node0x48d5f40;
	Node0x48d5f40 [shape=record,label="{for.cond.32:                                      \l  %45 = load i32* %j, align 4\l  %46 = load i32* @n, align 4\l  %cmp33 = icmp slt i32 %45, %46\l  br i1 %cmp33, label %for.body.35, label %for.end.40\l|{<s0>T|<s1>F}}"];
	Node0x48d5f40:s0 -> Node0x48d5f90;
	Node0x48d5f40:s1 -> Node0x48d6030;
	Node0x48d5f90 [shape=record,label="{for.body.35:                                      \l  %47 = load i32* %j, align 4\l  %idxprom36 = sext i32 %47 to i64\l  %48 = load double** %rhs.addr, align 8\l  %arrayidx37 = getelementptr inbounds double* %48, i64 %idxprom36\l  store double 0.000000e+00, double* %arrayidx37, align 8\l  br label %for.inc.38\l}"];
	Node0x48d5f90 -> Node0x48d5fe0;
	Node0x48d5fe0 [shape=record,label="{for.inc.38:                                       \l  %49 = load i32* %j, align 4\l  %inc39 = add nsw i32 %49, 1\l  store i32 %inc39, i32* %j, align 4\l  br label %for.cond.32\l}"];
	Node0x48d5fe0 -> Node0x48d5f40;
	Node0x48d6030 [shape=record,label="{for.end.40:                                       \l  store i32 0, i32* %j, align 4\l  br label %for.cond.41\l}"];
	Node0x48d6030 -> Node0x48d6080;
	Node0x48d6080 [shape=record,label="{for.cond.41:                                      \l  %50 = load i32* %j, align 4\l  %51 = load i32* @n, align 4\l  %cmp42 = icmp slt i32 %50, %51\l  br i1 %cmp42, label %for.body.44, label %for.end.83\l|{<s0>T|<s1>F}}"];
	Node0x48d6080:s0 -> Node0x48d60d0;
	Node0x48d6080:s1 -> Node0x48dd730;
	Node0x48d60d0 [shape=record,label="{for.body.44:                                      \l  store i32 0, i32* %i, align 4\l  br label %for.cond.45\l}"];
	Node0x48d60d0 -> Node0x48d6120;
	Node0x48d6120 [shape=record,label="{for.cond.45:                                      \l  %52 = load i32* %i, align 4\l  %53 = load i32* @n, align 4\l  %cmp46 = icmp slt i32 %52, %53\l  br i1 %cmp46, label %for.body.48, label %for.end.80\l|{<s0>T|<s1>F}}"];
	Node0x48d6120:s0 -> Node0x48d6170;
	Node0x48d6120:s1 -> Node0x48dd690;
	Node0x48d6170 [shape=record,label="{for.body.48:                                      \l  %54 = load i32* @n, align 4\l  %55 = load i32* %i, align 4\l  %sub49 = sub nsw i32 %54, %55\l  %56 = load i32* %edge, align 4\l  %cmp50 = icmp sle i32 %sub49, %56\l  br i1 %cmp50, label %if.then.52, label %if.else.54\l|{<s0>T|<s1>F}}"];
	Node0x48d6170:s0 -> Node0x48d61c0;
	Node0x48d6170:s1 -> Node0x48d6210;
	Node0x48d61c0 [shape=record,label="{if.then.52:                                       \l  %57 = load i32* %edge, align 4\l  store i32 %57, i32* %ibs, align 4\l  %58 = load i32* @n, align 4\l  %59 = load i32* %edge, align 4\l  %sub53 = sub nsw i32 %58, %59\l  store i32 %sub53, i32* %ibs, align 4\l  %60 = load i32* %edge, align 4\l  store i32 %60, i32* %skip, align 4\l  br label %if.end.55\l}"];
	Node0x48d61c0 -> Node0x48dd500;
	Node0x48d6210 [shape=record,label="{if.else.54:                                       \l  %61 = load i32* @block_size, align 4\l  store i32 %61, i32* %ibs, align 4\l  %62 = load i32* @block_size, align 4\l  store i32 %62, i32* %skip, align 4\l  br label %if.end.55\l}"];
	Node0x48d6210 -> Node0x48dd500;
	Node0x48dd500 [shape=record,label="{if.end.55:                                        \l  %63 = load i32* @n, align 4\l  %64 = load i32* %j, align 4\l  %sub56 = sub nsw i32 %63, %64\l  %65 = load i32* %edge, align 4\l  %cmp57 = icmp sle i32 %sub56, %65\l  br i1 %cmp57, label %if.then.59, label %if.else.61\l|{<s0>T|<s1>F}}"];
	Node0x48dd500:s0 -> Node0x48dd550;
	Node0x48dd500:s1 -> Node0x48dd5a0;
	Node0x48dd550 [shape=record,label="{if.then.59:                                       \l  %66 = load i32* %edge, align 4\l  store i32 %66, i32* %jbs, align 4\l  %67 = load i32* @n, align 4\l  %68 = load i32* %edge, align 4\l  %sub60 = sub nsw i32 %67, %68\l  store i32 %sub60, i32* %jbs, align 4\l  br label %if.end.62\l}"];
	Node0x48dd550 -> Node0x48dd5f0;
	Node0x48dd5a0 [shape=record,label="{if.else.61:                                       \l  %69 = load i32* @block_size, align 4\l  store i32 %69, i32* %jbs, align 4\l  br label %if.end.62\l}"];
	Node0x48dd5a0 -> Node0x48dd5f0;
	Node0x48dd5f0 [shape=record,label="{if.end.62:                                        \l  %70 = load i32* %i, align 4\l  %71 = load i32* @block_size, align 4\l  %div63 = sdiv i32 %70, %71\l  %72 = load i32* %j, align 4\l  %73 = load i32* @block_size, align 4\l  %div64 = sdiv i32 %72, %73\l  %74 = load i32* @nblocks, align 4\l  %mul65 = mul nsw i32 %div64, %74\l  %add66 = add nsw i32 %div63, %mul65\l  store i32 %add66, i32* %ii, align 4\l  %75 = load i32* %i, align 4\l  %76 = load i32* %ibs, align 4\l  %rem67 = srem i32 %75, %76\l  %77 = load i32* %j, align 4\l  %78 = load i32* %jbs, align 4\l  %rem68 = srem i32 %77, %78\l  %79 = load i32* %skip, align 4\l  %mul69 = mul nsw i32 %rem68, %79\l  %add70 = add nsw i32 %rem67, %mul69\l  store i32 %add70, i32* %jj, align 4\l  %80 = load i32* %jj, align 4\l  %idxprom71 = sext i32 %80 to i64\l  %81 = load i32* %ii, align 4\l  %idxprom72 = sext i32 %81 to i64\l  %82 = load double*** @a, align 8\l  %arrayidx73 = getelementptr inbounds double** %82, i64 %idxprom72\l  %83 = load double** %arrayidx73, align 8\l  %arrayidx74 = getelementptr inbounds double* %83, i64 %idxprom71\l  %84 = load double* %arrayidx74, align 8\l  %85 = load i32* %i, align 4\l  %idxprom75 = sext i32 %85 to i64\l  %86 = load double** %rhs.addr, align 8\l  %arrayidx76 = getelementptr inbounds double* %86, i64 %idxprom75\l  %87 = load double* %arrayidx76, align 8\l  %add77 = fadd double %87, %84\l  store double %add77, double* %arrayidx76, align 8\l  br label %for.inc.78\l}"];
	Node0x48dd5f0 -> Node0x48dd640;
	Node0x48dd640 [shape=record,label="{for.inc.78:                                       \l  %88 = load i32* %i, align 4\l  %inc79 = add nsw i32 %88, 1\l  store i32 %inc79, i32* %i, align 4\l  br label %for.cond.45\l}"];
	Node0x48dd640 -> Node0x48d6120;
	Node0x48dd690 [shape=record,label="{for.end.80:                                       \l  br label %for.inc.81\l}"];
	Node0x48dd690 -> Node0x48dd6e0;
	Node0x48dd6e0 [shape=record,label="{for.inc.81:                                       \l  %89 = load i32* %j, align 4\l  %inc82 = add nsw i32 %89, 1\l  store i32 %inc82, i32* %j, align 4\l  br label %for.cond.41\l}"];
	Node0x48dd6e0 -> Node0x48d6080;
	Node0x48dd730 [shape=record,label="{for.end.83:                                       \l  ret void\l}"];
}
