digraph "CFG for 'PrintA' function" {
	label="CFG for 'PrintA' function";

	Node0x490bbe0 [shape=record,label="{entry:\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %ii = alloca i32, align 4\l  %jj = alloca i32, align 4\l  %edge = alloca i32, align 4\l  %ibs = alloca i32, align 4\l  %jbs = alloca i32, align 4\l  %skip = alloca i32, align 4\l  %0 = load i32* @n, align 4\l  %1 = load i32* @block_size, align 4\l  %rem = srem i32 %0, %1\l  store i32 %rem, i32* %edge, align 4\l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x490bbe0 -> Node0x48f8a40;
	Node0x48f8a40 [shape=record,label="{for.cond:                                         \l  %2 = load i32* %i, align 4\l  %3 = load i32* @n, align 4\l  %cmp = icmp slt i32 %2, %3\l  br i1 %cmp, label %for.body, label %for.end.22\l|{<s0>T|<s1>F}}"];
	Node0x48f8a40:s0 -> Node0x48f8a90;
	Node0x48f8a40:s1 -> Node0x48f8e50;
	Node0x48f8a90 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f8a90 -> Node0x48f8ae0;
	Node0x48f8ae0 [shape=record,label="{for.cond.1:                                       \l  %4 = load i32* %j, align 4\l  %5 = load i32* @n, align 4\l  %cmp2 = icmp slt i32 %4, %5\l  br i1 %cmp2, label %for.body.3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x48f8ae0:s0 -> Node0x48f8b30;
	Node0x48f8ae0:s1 -> Node0x48f8db0;
	Node0x48f8b30 [shape=record,label="{for.body.3:                                       \l  %6 = load i32* @n, align 4\l  %7 = load i32* %i, align 4\l  %sub = sub nsw i32 %6, %7\l  %8 = load i32* %edge, align 4\l  %cmp4 = icmp sle i32 %sub, %8\l  br i1 %cmp4, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x48f8b30:s0 -> Node0x48f8b80;
	Node0x48f8b30:s1 -> Node0x48f8bd0;
	Node0x48f8b80 [shape=record,label="{if.then:                                          \l  %9 = load i32* %edge, align 4\l  store i32 %9, i32* %ibs, align 4\l  %10 = load i32* @n, align 4\l  %11 = load i32* %edge, align 4\l  %sub5 = sub nsw i32 %10, %11\l  store i32 %sub5, i32* %ibs, align 4\l  %12 = load i32* %edge, align 4\l  store i32 %12, i32* %skip, align 4\l  br label %if.end\l}"];
	Node0x48f8b80 -> Node0x48f8c20;
	Node0x48f8bd0 [shape=record,label="{if.else:                                          \l  %13 = load i32* @block_size, align 4\l  store i32 %13, i32* %ibs, align 4\l  %14 = load i32* @block_size, align 4\l  store i32 %14, i32* %skip, align 4\l  br label %if.end\l}"];
	Node0x48f8bd0 -> Node0x48f8c20;
	Node0x48f8c20 [shape=record,label="{if.end:                                           \l  %15 = load i32* @n, align 4\l  %16 = load i32* %j, align 4\l  %sub6 = sub nsw i32 %15, %16\l  %17 = load i32* %edge, align 4\l  %cmp7 = icmp sle i32 %sub6, %17\l  br i1 %cmp7, label %if.then.8, label %if.else.10\l|{<s0>T|<s1>F}}"];
	Node0x48f8c20:s0 -> Node0x48f8c70;
	Node0x48f8c20:s1 -> Node0x48f8cc0;
	Node0x48f8c70 [shape=record,label="{if.then.8:                                        \l  %18 = load i32* %edge, align 4\l  store i32 %18, i32* %jbs, align 4\l  %19 = load i32* @n, align 4\l  %20 = load i32* %edge, align 4\l  %sub9 = sub nsw i32 %19, %20\l  store i32 %sub9, i32* %jbs, align 4\l  br label %if.end.11\l}"];
	Node0x48f8c70 -> Node0x48f8d10;
	Node0x48f8cc0 [shape=record,label="{if.else.10:                                       \l  %21 = load i32* @block_size, align 4\l  store i32 %21, i32* %jbs, align 4\l  br label %if.end.11\l}"];
	Node0x48f8cc0 -> Node0x48f8d10;
	Node0x48f8d10 [shape=record,label="{if.end.11:                                        \l  %22 = load i32* %i, align 4\l  %23 = load i32* @block_size, align 4\l  %div = sdiv i32 %22, %23\l  %24 = load i32* %j, align 4\l  %25 = load i32* @block_size, align 4\l  %div12 = sdiv i32 %24, %25\l  %26 = load i32* @nblocks, align 4\l  %mul = mul nsw i32 %div12, %26\l  %add = add nsw i32 %div, %mul\l  store i32 %add, i32* %ii, align 4\l  %27 = load i32* %i, align 4\l  %28 = load i32* %ibs, align 4\l  %rem13 = srem i32 %27, %28\l  %29 = load i32* %j, align 4\l  %30 = load i32* %jbs, align 4\l  %rem14 = srem i32 %29, %30\l  %31 = load i32* %skip, align 4\l  %mul15 = mul nsw i32 %rem14, %31\l  %add16 = add nsw i32 %rem13, %mul15\l  store i32 %add16, i32* %jj, align 4\l  %32 = load i32* %jj, align 4\l  %idxprom = sext i32 %32 to i64\l  %33 = load i32* %ii, align 4\l  %idxprom17 = sext i32 %33 to i64\l  %34 = load double*** @a, align 8\l  %arrayidx = getelementptr inbounds double** %34, i64 %idxprom17\l  %35 = load double** %arrayidx, align 8\l  %arrayidx18 = getelementptr inbounds double* %35, i64 %idxprom\l  %36 = load double* %arrayidx18, align 8\l  %call = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([7 x i8]*\l... @.str.45, i32 0, i32 0), double %36)\l  br label %for.inc\l}"];
	Node0x48f8d10 -> Node0x48f8d60;
	Node0x48f8d60 [shape=record,label="{for.inc:                                          \l  %37 = load i32* %j, align 4\l  %inc = add nsw i32 %37, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond.1\l}"];
	Node0x48f8d60 -> Node0x48f8ae0;
	Node0x48f8db0 [shape=record,label="{for.end:                                          \l  %call19 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]*\l... @.str.13, i32 0, i32 0))\l  br label %for.inc.20\l}"];
	Node0x48f8db0 -> Node0x48f8e00;
	Node0x48f8e00 [shape=record,label="{for.inc.20:                                       \l  %38 = load i32* %i, align 4\l  %inc21 = add nsw i32 %38, 1\l  store i32 %inc21, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x48f8e00 -> Node0x48f8a40;
	Node0x48f8e50 [shape=record,label="{for.end.22:                                       \l  %39 = load %struct._IO_FILE** @stdout, align 8\l  %call23 = call i32 @fflush(%struct._IO_FILE* %39)\l  ret void\l}"];
}
