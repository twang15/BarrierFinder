; ModuleID = 'RAYTRACE.opt.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.view = type { [4 x double], [4 x double], [4 x [4 x double]], [4 x [4 x double]], [4 x [4 x double]], [3 x double], i64, double, [3 x double], i64, i64 }
%struct.display = type { i64, i64, i64, i64, double, i64, i64, i64, double, double, double, double, double, double, double, double, %struct.pixel* }
%struct.pixel = type { float, float, float }
%struct.light = type { [4 x double], [3 x double], i64, %struct.light* }
%struct.gmem = type { i64, i64, i64, %struct.object*, %struct.grid*, %struct.node*, [128 x [256 x i64]], [128 x [256 x %struct.wpjob*]], %struct.barrier_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, [128 x %union.pthread_mutex_t], i64, [128 x i64] }
%struct.object = type { i64, [30 x i8], %struct.bbox, %struct.element*, i64, %struct.pprocs*, %struct.surf*, %struct.object* }
%struct.bbox = type { [3 x double], [3 x double] }
%struct.element = type { i64, %struct.bbox, %struct.object*, i8* }
%struct.pprocs = type { i8* (...)*, void (...)*, void (...)*, void (...)*, void (...)*, i64 (...)*, i64 (...)*, void (...)*, void (...)*, void (...)* }
%struct.surf = type { [3 x double], [3 x double], double, double, double, double, double }
%struct.grid = type { i64, %struct.voxel**, i64*, %struct.element**, i64, [3 x i64], i64, [3 x double], [3 x double], i64, %struct.btnode*, %struct.grid* }
%struct.voxel = type { i64, i8*, i8, i64, %struct.voxel* }
%struct.btnode = type { %struct.element**, [3 x double], i64, [3 x i64], [3 x i64], i64, i64, [2 x %struct.btnode*] }
%struct.node = type { %struct.node*, i64, i64, i64 }
%struct.wpjob = type { i64, i64, i64, i64, %struct.wpjob* }
%struct.barrier_t = type { i32, i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.CTE = type { i8*, i8 }
%struct.anon = type { i8, i8, i8, i8 }
%struct.r_struct = type { [4096 x i64], %struct.ray*, i64, i64, [4096 x i64] }
%struct.ray = type { i64, i64, i64, [3 x double], [3 x double], i64, float, [3 x i64], %struct.rayinfo*, i64, [5 x %struct.rayinfo] }
%struct.rayinfo = type { %struct.grid*, [3 x double], i64, double, i64, double, [3 x double], [3 x i64], i64, [3 x i64], %struct.rayinfo* }
%struct.irecord = type { double, %struct.element*, double, double, double }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.poly = type { i64, [3 x double], double, [3 x double]*, i64*, i64 }
%struct.sphere = type { [4 x double], double, double }
%struct.rayjob = type { i64, i64, i64, i64, i64, i64 }
%struct.tri = type { [3 x double], double, [3 x double]*, [3 x double]*, [3 x i64], i64, i64, i64 }

@DataType = internal global i64 0, align 8
@TraversalType = internal global i64 0, align 8
@bundlex = internal global i64 0, align 8
@bundley = internal global i64 0, align 8
@blockx = internal global i64 0, align 8
@blocky = internal global i64 0, align 8
@GeoFile = internal global i64 0, align 8
@PicFile = internal global i64 0, align 8
@ModelNorm = internal global i64 0, align 8
@ModelTransform = internal global i64 0, align 8
@AntiAlias = internal global i64 0, align 8
@GeoFileName = internal global [80 x i8] zeroinitializer, align 16
@PicFileName = internal global [80 x i8] zeroinitializer, align 16
@View = internal global %struct.view zeroinitializer, align 8
@Display = internal global %struct.display zeroinitializer, align 8
@lights = internal global %struct.light* null, align 8
@nlights = internal global i64 0, align 8
@gm = internal global %struct.gmem* null, align 8
@world_level_grid = internal global %struct.grid* null, align 8
@hu_max_prims_cell = internal global i64 0, align 8
@hu_gridsize = internal global i64 0, align 8
@hu_numbuckets = internal global i64 0, align 8
@hu_max_subdiv_level = internal global i64 0, align 8
@hu_lazy = internal global i64 0, align 8
@prim_obj_cnt = internal global i64 0, align 8
@prim_elem_cnt = internal global i64 0, align 8
@subdiv_cnt = internal global i64 0, align 8
@bintree_cnt = internal global i64 0, align 8
@grids = internal global i64 0, align 8
@total_cells = internal global i64 0, align 8
@empty_voxels = internal global i64 0, align 8
@nonempty_voxels = internal global i64 0, align 8
@nonempty_leafs = internal global i64 0, align 8
@prims_in_leafs = internal global i64 0, align 8
@empty_masks = internal global [64 x i64] zeroinitializer, align 16
@nonempty_masks = internal global [64 x i64] zeroinitializer, align 16
@gridlist = internal global %struct.grid* null, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [21 x i8] c"    Print Gridlist \0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"    End Gridlist \0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"****** Hierarchical uniform grid data structure statistics ******\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [47 x i8] c"    Data structure evaluated as a preprocess.\0A\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"    gridsize                             %3ld \0A\00", align 1
@.str.6 = private unnamed_addr constant [48 x i8] c"    hashtable buckets                    %3ld \0A\00", align 1
@.str.7 = private unnamed_addr constant [48 x i8] c"    maximum subdivision level            %3ld \0A\00", align 1
@.str.8 = private unnamed_addr constant [48 x i8] c"    maximum primitives / cell            %3ld \0A\00", align 1
@.str.9 = private unnamed_addr constant [48 x i8] c"    grids                                %3ld \0A\00", align 1
@.str.10 = private unnamed_addr constant [54 x i8] c"    empty voxels                    %8ld    %3ld %% \0A\00", align 1
@.str.11 = private unnamed_addr constant [54 x i8] c"    nonempty voxels                 %8ld    %3ld %% \0A\00", align 1
@.str.12 = private unnamed_addr constant [54 x i8] c"    empty leafs                     %8ld    %3ld %% \0A\00", align 1
@.str.13 = private unnamed_addr constant [54 x i8] c"    nonempty leafs                  %8ld    %3ld %% \0A\00", align 1
@.str.14 = private unnamed_addr constant [47 x i8] c"    primitives / leaf                 %6.1lf \0A\00", align 1
@.str.15 = private unnamed_addr constant [66 x i8] c"bintree_lookup: gridsizes (%ld, %ld, %ld), axis %ld & nprims %ld\0A\00", align 1
@cmdtab = internal global [42 x %struct.CTE] [%struct.CTE { i8* getelementptr inbounds ([4 x i8]* @.str.16, i32 0, i32 0), i8 97 }, %struct.CTE { i8* getelementptr inbounds ([7 x i8]* @.str.1.17, i32 0, i32 0), i8 98 }, %struct.CTE { i8* getelementptr inbounds ([6 x i8]* @.str.2.18, i32 0, i32 0), i8 101 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.3.19, i32 0, i32 0), i8 102 }, %struct.CTE { i8* getelementptr inbounds ([8 x i8]* @.str.4.20, i32 0, i32 0), i8 109 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.5.21, i32 0, i32 0), i8 99 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.6.22, i32 0, i32 0), i8 100 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.7.23, i32 0, i32 0), i8 106 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.8.24, i32 0, i32 0), i8 104 }, %struct.CTE { i8* getelementptr inbounds ([8 x i8]* @.str.9.25, i32 0, i32 0), i8 105 }, %struct.CTE { i8* getelementptr inbounds ([14 x i8]* @.str.10.26, i32 0, i32 0), i8 107 }, %struct.CTE { i8* getelementptr inbounds ([9 x i8]* @.str.11.27, i32 0, i32 0), i8 103 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.12.28, i32 0, i32 0), i8 108 }, %struct.CTE { i8* getelementptr inbounds ([8 x i8]* @.str.13.29, i32 0, i32 0), i8 110 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.14.30, i32 0, i32 0), i8 111 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.15.31, i32 0, i32 0), i8 112 }, %struct.CTE { i8* getelementptr inbounds ([9 x i8]* @.str.16.32, i32 0, i32 0), i8 113 }, %struct.CTE { i8* getelementptr inbounds ([12 x i8]* @.str.17, i32 0, i32 0), i8 116 }, %struct.CTE { i8* getelementptr inbounds ([12 x i8]* @.str.18, i32 0, i32 0), i8 114 }, %struct.CTE { i8* getelementptr inbounds ([6 x i8]* @.str.19, i32 0, i32 0), i8 117 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.20, i32 0, i32 0), i8 118 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.21, i32 0, i32 0), i8 119 }, %struct.CTE { i8* getelementptr inbounds ([7 x i8]* @.str.22, i32 0, i32 0), i8 115 }, %struct.CTE { i8* getelementptr inbounds ([8 x i8]* @.str.23, i32 0, i32 0), i8 120 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.24, i32 0, i32 0), i8 121 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.25, i32 0, i32 0), i8 122 }, %struct.CTE { i8* getelementptr inbounds ([13 x i8]* @.str.26, i32 0, i32 0), i8 57 }, %struct.CTE { i8* getelementptr inbounds ([10 x i8]* @.str.27, i32 0, i32 0), i8 49 }, %struct.CTE { i8* getelementptr inbounds ([6 x i8]* @.str.28, i32 0, i32 0), i8 50 }, %struct.CTE { i8* getelementptr inbounds ([7 x i8]* @.str.29, i32 0, i32 0), i8 51 }, %struct.CTE { i8* getelementptr inbounds ([5 x i8]* @.str.30, i32 0, i32 0), i8 52 }, %struct.CTE { i8* getelementptr inbounds ([11 x i8]* @.str.31, i32 0, i32 0), i8 53 }, %struct.CTE { i8* getelementptr inbounds ([9 x i8]* @.str.32, i32 0, i32 0), i8 54 }, %struct.CTE { i8* getelementptr inbounds ([9 x i8]* @.str.33, i32 0, i32 0), i8 55 }, %struct.CTE { i8* getelementptr inbounds ([12 x i8]* @.str.34, i32 0, i32 0), i8 56 }, %struct.CTE { i8* getelementptr inbounds ([12 x i8]* @.str.35, i32 0, i32 0), i8 64 }, %struct.CTE { i8* getelementptr inbounds ([14 x i8]* @.str.36, i32 0, i32 0), i8 35 }, %struct.CTE { i8* getelementptr inbounds ([13 x i8]* @.str.37, i32 0, i32 0), i8 36 }, %struct.CTE { i8* getelementptr inbounds ([8 x i8]* @.str.38, i32 0, i32 0), i8 42 }, %struct.CTE { i8* getelementptr inbounds ([7 x i8]* @.str.39, i32 0, i32 0), i8 43 }, %struct.CTE { i8* getelementptr inbounds ([6 x i8]* @.str.40, i32 0, i32 0), i8 37 }, %struct.CTE { i8* getelementptr inbounds ([2 x i8]* @.str.41, i32 0, i32 0), i8 48 }], align 16
@stdout = external global %struct._IO_FILE*, align 8
@.str.42 = private unnamed_addr constant [15 x i8] c"\0AEnvironment:\0A\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"\09Eye pos:   \09 %f %f %f\0A\00", align 1
@.str.44 = private unnamed_addr constant [24 x i8] c"\09Center pos:\09 %f %f %f\0A\00", align 1
@.str.45 = private unnamed_addr constant [24 x i8] c"\09Background:\09 %f %f %f\0A\00", align 1
@.str.46 = private unnamed_addr constant [18 x i8] c"\09View Angle:\09 %f\0A\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"\0AAmbient Light:\09\09 %f %f %f\0A\00", align 1
@.str.48 = private unnamed_addr constant [10 x i8] c"\0ALights:\0A\00", align 1
@.str.49 = private unnamed_addr constant [23 x i8] c"\09[%ld] Pos:\09 %f %f %f\0A\00", align 1
@.str.50 = private unnamed_addr constant [21 x i8] c"\09    Col:\09 %f %f %f\0A\00", align 1
@.str.51 = private unnamed_addr constant [19 x i8] c"\09    Shadow:\09 %ld\0A\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"Options:\0A\00", align 1
@.str.54 = private unnamed_addr constant [15 x i8] c"\09Traversal:\09\09\09\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"list\0A\00", align 1
@.str.56 = private unnamed_addr constant [24 x i8] c"uniform grid hierarchy\0A\00", align 1
@.str.57 = private unnamed_addr constant [26 x i8] c"\09\09\09\09\09   grid size    %ld\0A\00", align 1
@.str.58 = private unnamed_addr constant [26 x i8] c"\09\09\09\09\09   max prims    %ld\0A\00", align 1
@.str.59 = private unnamed_addr constant [26 x i8] c"\09\09\09\09\09   max sublevel %ld\0A\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"\09\09\09\09\09   buckets      %ld\0A\00", align 1
@.str.61 = private unnamed_addr constant [26 x i8] c"\09\09\09\09\09   lazy         %ld\0A\00", align 1
@.str.62 = private unnamed_addr constant [21 x i8] c"\09Normalization DB:\09\09\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"yes\0A\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c"no\0A\00", align 1
@.str.65 = private unnamed_addr constant [20 x i8] c"\09Projection type:\09\09\00", align 1
@.str.66 = private unnamed_addr constant [13 x i8] c"perspective\0A\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"orthographic\0A\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"\09Shadows:\09\09\09\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"on\0A\00", align 1
@.str.70 = private unnamed_addr constant [5 x i8] c"off\0A\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"\09Shading:\09\09\09\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"\09Resolution:\09\09\09%ld %ld\0A\00", align 1
@.str.73 = private unnamed_addr constant [23 x i8] c"\09Min Ray Weight:\09\09\09%f\0A\00", align 1
@.str.74 = private unnamed_addr constant [33 x i8] c"\09Max Anti Subdivison Level:\09%ld\0A\00", align 1
@.str.75 = private unnamed_addr constant [23 x i8] c"\09Anti tolerance:\09\09\09%f\0A\00", align 1
@.str.76 = private unnamed_addr constant [21 x i8] c"\09Bundle: \09\09\09%ld %ld\0A\00", align 1
@.str.77 = private unnamed_addr constant [21 x i8] c"\09Block:  \09\09\09%ld %ld\0A\00", align 1
@.str.78 = private unnamed_addr constant [22 x i8] c"\09Geometry file:\09\09\09%s\0A\00", align 1
@.str.79 = private unnamed_addr constant [19 x i8] c"\09Image file:\09\09\09%s\0A\00", align 1
@.str.80 = private unnamed_addr constant [6 x i8] c"env.c\00", align 1
@.str.81 = private unnamed_addr constant [25 x i8] c"Invalid color %f %f %f.\0A\00", align 1
@.str.82 = private unnamed_addr constant [30 x i8] c"\0A\0AInvalid command string %s.\0A\00", align 1
@.str.83 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.84 = private unnamed_addr constant [37 x i8] c"Unable to open environment file %s.\0A\00", align 1
@.str.85 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.86 = private unnamed_addr constant [12 x i8] c"%lf %lf %lf\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"error: eye position.\0A\00", align 1
@.str.88 = private unnamed_addr constant [22 x i8] c"error: coi position.\0A\00", align 1
@.str.89 = private unnamed_addr constant [26 x i8] c"error: background color.\0A\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"error: viewing angle.\0A\00", align 1
@.str.92 = private unnamed_addr constant [19 x i8] c"Invalid angle %f.\0A\00", align 1
@.str.93 = private unnamed_addr constant [17 x i8] c"error: ambient.\0A\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.95 = private unnamed_addr constant [30 x i8] c"View error: antialias level.\0A\00", align 1
@.str.96 = private unnamed_addr constant [29 x i8] c"error: antialias level %ld.\0A\00", align 1
@.str.97 = private unnamed_addr constant [32 x i8] c"maxlevel of ray recursion = %d\0A\00", align 1
@.str.98 = private unnamed_addr constant [25 x i8] c"error: recursion level.\0A\00", align 1
@.str.99 = private unnamed_addr constant [29 x i8] c"error: recursion level %ld.\0A\00", align 1
@.str.100 = private unnamed_addr constant [29 x i8] c"error: miniumum ray weight.\0A\00", align 1
@.str.101 = private unnamed_addr constant [31 x i8] c"error: invalid ray weight %f.\0A\00", align 1
@.str.102 = private unnamed_addr constant [31 x i8] c"error: anti tolerance weight.\0A\00", align 1
@.str.103 = private unnamed_addr constant [42 x i8] c"error: invalid anti tolerance weight %f.\0A\00", align 1
@.str.104 = private unnamed_addr constant [8 x i8] c"%ld %ld\00", align 1
@.str.105 = private unnamed_addr constant [20 x i8] c"error: resolution.\0A\00", align 1
@.str.106 = private unnamed_addr constant [24 x i8] c"%lf %lf %lf %lf %lf %lf\00", align 1
@.str.107 = private unnamed_addr constant [16 x i8] c"error: Lights.\0A\00", align 1
@.str.108 = private unnamed_addr constant [33 x i8] c"error: Lights shadow indicator.\0A\00", align 1
@.str.109 = private unnamed_addr constant [18 x i8] c"Error in matrix.\0A\00", align 1
@.str.110 = private unnamed_addr constant [16 x i8] c"error: shadow.\0A\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.112 = private unnamed_addr constant [20 x i8] c"error: shading %s.\0A\00", align 1
@.str.113 = private unnamed_addr constant [23 x i8] c"error: projection %s.\0A\00", align 1
@.str.114 = private unnamed_addr constant [12 x i8] c"perspective\00", align 1
@.str.115 = private unnamed_addr constant [13 x i8] c"orthographic\00", align 1
@.str.116 = private unnamed_addr constant [24 x i8] c"Invalid projection %s.\0A\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"error: traversal %s.\0A\00", align 1
@.str.118 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"huniform\00", align 1
@.str.120 = private unnamed_addr constant [28 x i8] c"Invalid traversal code %s.\0A\00", align 1
@.str.121 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.122 = private unnamed_addr constant [23 x i8] c"error: geometry file.\0A\00", align 1
@.str.123 = private unnamed_addr constant [24 x i8] c"error: runlength file.\0A\00", align 1
@.str.124 = private unnamed_addr constant [24 x i8] c"error: Preview bkcull.\0A\00", align 1
@.str.125 = private unnamed_addr constant [22 x i8] c"error: Preview fill.\0A\00", align 1
@.str.126 = private unnamed_addr constant [21 x i8] c"error: sphere tess.\0A\00", align 1
@.str.127 = private unnamed_addr constant [23 x i8] c"error: norm database.\0A\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.129 = private unnamed_addr constant [18 x i8] c"error: datatype.\0A\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"binary\00", align 1
@.str.131 = private unnamed_addr constant [33 x i8] c"error: Huniform prims per cell.\0A\00", align 1
@.str.132 = private unnamed_addr constant [27 x i8] c"error: Huniform gridsize.\0A\00", align 1
@.str.133 = private unnamed_addr constant [29 x i8] c"error: Huniform numbuckets.\0A\00", align 1
@.str.134 = private unnamed_addr constant [35 x i8] c"error: Huniform max subdiv level.\0A\00", align 1
@.str.135 = private unnamed_addr constant [23 x i8] c"error: Huniform lazy.\0A\00", align 1
@.str.136 = private unnamed_addr constant [16 x i8] c"error: bundle.\0A\00", align 1
@.str.137 = private unnamed_addr constant [15 x i8] c"error: block.\0A\00", align 1
@.str.138 = private unnamed_addr constant [40 x i8] c"Warning: unrecognized env command: %s.\0A\00", align 1
@.str.139 = private unnamed_addr constant [54 x i8] c"Data must be normalized with this traversal method!.\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"eye\00", align 1
@.str.1.17 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@.str.2.18 = private unnamed_addr constant [6 x i8] c"light\00", align 1
@.str.3.19 = private unnamed_addr constant [11 x i8] c"resolution\00", align 1
@.str.4.20 = private unnamed_addr constant [8 x i8] c"shadows\00", align 1
@.str.5.21 = private unnamed_addr constant [11 x i8] c"background\00", align 1
@.str.6.22 = private unnamed_addr constant [10 x i8] c"viewangle\00", align 1
@.str.7.23 = private unnamed_addr constant [10 x i8] c"antilevel\00", align 1
@.str.8.24 = private unnamed_addr constant [10 x i8] c"minweight\00", align 1
@.str.9.25 = private unnamed_addr constant [8 x i8] c"project\00", align 1
@.str.10.26 = private unnamed_addr constant [14 x i8] c"antitolerance\00", align 1
@.str.11.27 = private unnamed_addr constant [9 x i8] c"maxlevel\00", align 1
@.str.12.28 = private unnamed_addr constant [11 x i8] c"modelxform\00", align 1
@.str.13.29 = private unnamed_addr constant [8 x i8] c"shading\00", align 1
@.str.14.30 = private unnamed_addr constant [10 x i8] c"displayin\00", align 1
@.str.15.31 = private unnamed_addr constant [11 x i8] c"displayout\00", align 1
@.str.16.32 = private unnamed_addr constant [9 x i8] c"geometry\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"texturetype\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"texturefile\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"image\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"footprint\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"traversal\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"rlfile\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"ambient\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"excellprim\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"excelldir\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"excellsubdiv\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"hsublevel\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"hprim\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"bfcull\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"fill\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"spheretess\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"normdata\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"datatype\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"hu_maxprims\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"hu_gridsize\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"hu_numbuckets\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"hu_maxsubdiv\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"hu_lazy\00", align 1
@.str.39 = private unnamed_addr constant [7 x i8] c"bundle\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"block\00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c" \00", align 1
@image = internal global [1280 x %struct.anon] zeroinitializer, align 16
@.str.140 = private unnamed_addr constant [9 x i8] c"%c%c%c%c\00", align 1
@.str.1.141 = private unnamed_addr constant [7 x i8] c"fbuf.c\00", align 1
@.str.2.142 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.143 = private unnamed_addr constant [33 x i8] c"Unable to open picture file %s.\0A\00", align 1
@.str.4.144 = private unnamed_addr constant [17 x i8] c"%c%c%c%c%c%c%c%c\00", align 1
@.str.145 = private unnamed_addr constant [12 x i8] c"Object  %s\0A\00", align 1
@.str.1.146 = private unnamed_addr constant [27 x i8] c"\09color  %f %f %f %f %f %f\0A\00", align 1
@.str.2.147 = private unnamed_addr constant [24 x i8] c"\09coeffs %f %f %f %f %f\0A\00", align 1
@.str.3.148 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.4.149 = private unnamed_addr constant [31 x i8] c"Unable to open model file %s.\0A\00", align 1
@.str.5.150 = private unnamed_addr constant [37 x i8] c"Incorrect comment in geometry file.\0A\00", align 1
@.str.6.151 = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@.str.7.152 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@.str.8.153 = private unnamed_addr constant [31 x i8] c"Invalid object definition %s.\0A\00", align 1
@.str.9.154 = private unnamed_addr constant [6 x i8] c"geo.c\00", align 1
@.str.10.155 = private unnamed_addr constant [24 x i8] c"%lf %lf %lf %lf %lf %lf\00", align 1
@.str.11.156 = private unnamed_addr constant [25 x i8] c"Object color incorrect.\0A\00", align 1
@.str.12.157 = private unnamed_addr constant [20 x i8] c"%lf %lf %lf %lf %lf\00", align 1
@.str.13.158 = private unnamed_addr constant [40 x i8] c"Object surface coefficients incorrect.\0A\00", align 1
@.str.14.159 = private unnamed_addr constant [17 x i8] c"%ld %ld %ld %ld\0A\00", align 1
@.str.15.160 = private unnamed_addr constant [50 x i8] c"Texture and/or flag information not all present.\0A\00", align 1
@.str.16.161 = private unnamed_addr constant [7 x i8] c"%c %ld\00", align 1
@.str.17.162 = private unnamed_addr constant [26 x i8] c"Object primitive opcode.\0A\00", align 1
@SphProcs = internal global %struct.pprocs { i8* (...)* bitcast (i8* ()* @SphName to i8* (...)*), void (...)* bitcast (void (%struct.object*)* @SphPrint to void (...)*), void (...)* bitcast (void (%struct.object*, %struct._IO_FILE*)* @SphRead to void (...)*), void (...)* null, void (...)* bitcast (void (%struct.object*, [4 x double]*, [4 x double]*)* @SphTransform to void (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.object*, %struct.irecord*)* @SphIntersect to i64 (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.element*, %struct.irecord*)* @SphPeIntersect to i64 (...)*), void (...)* bitcast (void (%struct.irecord*, double*, double*)* @SphNormal to void (...)*), void (...)* bitcast (void (%struct.object*, [4 x double]*)* @SphDataNormalize to void (...)*), void (...)* bitcast (void (%struct.object*)* @SphBoundBox to void (...)*) }, align 8
@PolyProcs = internal global %struct.pprocs { i8* (...)* bitcast (i8* ()* @PolyName to i8* (...)*), void (...)* bitcast (void (%struct.object*)* @PolyPrint to void (...)*), void (...)* bitcast (void (%struct.object*, %struct._IO_FILE*)* @PolyRead to void (...)*), void (...)* null, void (...)* bitcast (void (%struct.object*, [4 x double]*, [4 x double]*)* @PolyTransform to void (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.object*, %struct.irecord*)* @PolyIntersect to i64 (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.element*, %struct.irecord*)* @PolyPeIntersect to i64 (...)*), void (...)* bitcast (void (%struct.irecord*, double*, double*)* @PolyNormal to void (...)*), void (...)* bitcast (void (%struct.object*, [4 x double]*)* @PolyDataNormalize to void (...)*), void (...)* bitcast (void (%struct.object*)* @PolyBoundBox to void (...)*) }, align 8
@TriProcs = internal global %struct.pprocs { i8* (...)* bitcast (i8* ()* @TriName to i8* (...)*), void (...)* bitcast (void (%struct.object*)* @TriPrint to void (...)*), void (...)* bitcast (void (%struct.object*, %struct._IO_FILE*)* @TriRead to void (...)*), void (...)* null, void (...)* bitcast (void (%struct.object*, [4 x double]*, [4 x double]*)* @TriTransform to void (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.object*, %struct.irecord*)* @TriIntersect to i64 (...)*), i64 (...)* bitcast (i64 (%struct.ray*, %struct.element*, %struct.irecord*)* @TriPeIntersect to i64 (...)*), void (...)* bitcast (void (%struct.irecord*, double*, double*)* @TriNormal to void (...)*), void (...)* bitcast (void (%struct.object*, [4 x double]*)* @TriDataNormalize to void (...)*), void (...)* bitcast (void (%struct.object*)* @TriBoundBox to void (...)*) }, align 8
@.str.18.163 = private unnamed_addr constant [54 x i8] c"Code for cylinders and quadrics not implemented yet.\0A\00", align 1
@.str.19.164 = private unnamed_addr constant [30 x i8] c"Invalid primitive type '%c'.\0A\00", align 1
@.str.167 = private unnamed_addr constant [28 x i8] c"    Print Voxel  id = %ld \0A\00", align 1
@.str.1.168 = private unnamed_addr constant [23 x i8] c"        celltype %ld \0A\00", align 1
@.str.2.169 = private unnamed_addr constant [20 x i8] c"        gsm_voxel \0A\00", align 1
@.str.3.170 = private unnamed_addr constant [33 x i8] c"        primElement index list:\0A\00", align 1
@.str.4.171 = private unnamed_addr constant [18 x i8] c"            %ld \0A\00", align 1
@.str.5.172 = private unnamed_addr constant [26 x i8] c"        gsm_grid id %ld \0A\00", align 1
@.str.6.173 = private unnamed_addr constant [16 x i8] c"    End Voxel \0A\00", align 1
@.str.7.174 = private unnamed_addr constant [22 x i8] c"    Print  Grid %ld \0A\00", align 1
@.str.8.175 = private unnamed_addr constant [26 x i8] c"        num_prims = %ld \0A\00", align 1
@.str.9.176 = private unnamed_addr constant [42 x i8] c"        indx_inc[0,1,2] = %ld, %ld, %ld \0A\00", align 1
@.str.10.177 = private unnamed_addr constant [28 x i8] c"        num_buckets = %ld \0A\00", align 1
@.str.11.178 = private unnamed_addr constant [37 x i8] c"        min[0,1,2] = %lf, %lf, %lf \0A\00", align 1
@.str.12.179 = private unnamed_addr constant [42 x i8] c"        cellsize[0,1,2] = %lf, %lf, %lf \0A\00", align 1
@.str.13.180 = private unnamed_addr constant [29 x i8] c"        subdiv_level = %ld \0A\00", align 1
@.str.14.181 = private unnamed_addr constant [27 x i8] c"        next grid id %ld \0A\00", align 1
@.str.15.182 = private unnamed_addr constant [28 x i8] c"        next grid id NULL \0A\00", align 1
@.str.16.183 = private unnamed_addr constant [17 x i8] c"    Voxel List \0A\00", align 1
@.str.17.184 = private unnamed_addr constant [30 x i8] c"        Voxel %ld is empty. \0A\00", align 1
@.str.18.185 = private unnamed_addr constant [15 x i8] c"    End Grid \0A\00", align 1
@.str.19.186 = private unnamed_addr constant [24 x i8] c"    Print Ray  id %ld \0A\00", align 1
@.str.20.187 = private unnamed_addr constant [43 x i8] c"        origin:        ( %lf, %lf, %lf ) \0A\00", align 1
@.str.21.188 = private unnamed_addr constant [43 x i8] c"        direction:     ( %lf, %lf, %lf ) \0A\00", align 1
@.str.22.189 = private unnamed_addr constant [48 x i8] c"        indx_inc3D[0,1,2] = [ %ld, %ld, %ld ] \0A\00", align 1
@.str.23.190 = private unnamed_addr constant [24 x i8] c"        ri_indx = %ld \0A\00", align 1
@.str.24.191 = private unnamed_addr constant [19 x i8] c"        rayinfo: \0A\00", align 1
@.str.25.192 = private unnamed_addr constant [33 x i8] c"            ray is in grid %ld \0A\00", align 1
@.str.26.193 = private unnamed_addr constant [43 x i8] c"            d[0,1,2] = [ %lf, %lf, %lf ] \0A\00", align 1
@.str.27.194 = private unnamed_addr constant [30 x i8] c"            entry_plane %ld \0A\00", align 1
@.str.28.195 = private unnamed_addr constant [25 x i8] c"            t_in = %lf \0A\00", align 1
@.str.29.196 = private unnamed_addr constant [29 x i8] c"            exit_plane %ld \0A\00", align 1
@.str.30.197 = private unnamed_addr constant [26 x i8] c"            t_out = %lf \0A\00", align 1
@.str.31.198 = private unnamed_addr constant [47 x i8] c"            delta[0,1,2] = [ %lf, %lf, %lf ] \0A\00", align 1
@.str.32.199 = private unnamed_addr constant [49 x i8] c"            index3D[0,1,2] = [ %ld, %ld, %ld ] \0A\00", align 1
@.str.33.200 = private unnamed_addr constant [28 x i8] c"            index1D = %ld \0A\00", align 1
@.str.34.201 = private unnamed_addr constant [52 x i8] c"            indx_inc1D[0,1,2] = [ %ld, %ld, %ld ] \0A\00", align 1
@.str.35.202 = private unnamed_addr constant [14 x i8] c"    End Ray \0A\00", align 1
@.str.36.203 = private unnamed_addr constant [33 x i8] c"%s: prn_PrimElem: Null pointer.\0A\00", align 1
@.str.37.204 = private unnamed_addr constant [58 x i8] c"PrimElem: index %ld  ptr %lu, PrimObj index %ld ptr %lu \0A\00", align 1
@.str.38.205 = private unnamed_addr constant [60 x i8] c"   BBox: ( %lf, %lf, %lf ) -> \0A         ( %lf, %lf, %lf ) \0A\00", align 1
@.str.39.206 = private unnamed_addr constant [16 x i8] c"Bintree node: \0A\00", align 1
@.str.40.207 = private unnamed_addr constant [42 x i8] c"    indecies of cell: ( %ld, %ld, %ld ) \0A\00", align 1
@.str.41.208 = private unnamed_addr constant [35 x i8] c"    gridsizes: ( %ld, %ld, %ld ) \0A\00", align 1
@.str.42.209 = private unnamed_addr constant [38 x i8] c"    minimum point ( %lf, %lf, %lf ) \0A\00", align 1
@.str.43.210 = private unnamed_addr constant [22 x i8] c"    subdiv axis %ld \0A\00", align 1
@.str.44.211 = private unnamed_addr constant [31 x i8] c"    number of primitives %ld \0A\00", align 1
@.str.45.212 = private unnamed_addr constant [30 x i8] c"    Primitive element list: \0A\00", align 1
@.str.46.213 = private unnamed_addr constant [6 x i8] c"  %ld\00", align 1
@.str.47.214 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.48.215 = private unnamed_addr constant [27 x i8] c"\0A    End of bintree node \0A\00", align 1
@.str.216 = private unnamed_addr constant [26 x i8] c"Uniform Hierarchy built.\0A\00", align 1
@eps_t = internal global double 1.000000e-10, align 8
@.str.225 = private unnamed_addr constant [18 x i8] c"hashtable error \0A\00", align 1
@.str.1.226 = private unnamed_addr constant [42 x i8] c"push_down_grid: Ray origin not in voxel \0A\00", align 1
@ProgName = internal global i8* getelementptr inbounds ([9 x i8]* @.str.267, i32 0, i32 0), align 8
@nprocs = internal global i64 1, align 8
@MaxGlobMem = internal global i64 32, align 8
@NumSubRays = internal global i64 1, align 8
@dostats = internal global i64 0, align 8
@.str.1.231 = private unnamed_addr constant [26 x i8] c"%s - parallel ray tracer\0A\00", align 1
@.str.2.232 = private unnamed_addr constant [13 x i8] c"Version %s\0A\0A\00", align 1
@.str.3.233 = private unnamed_addr constant [5 x i8] c"1.00\00", align 1
@.str.4.234 = private unnamed_addr constant [30 x i8] c"Usage:\09%s [options] envfile\0A\0A\00", align 1
@.str.5.235 = private unnamed_addr constant [31 x i8] c"\09-h\09Print this usage message.\0A\00", align 1
@.str.6.236 = private unnamed_addr constant [136 x i8] c"\09-a<n>\09Enable antialiasing with n subpixels (default = 1).\0A\09When using with SPLASH suite for evaluation, use default (no antialiasing)\0A\00", align 1
@.str.7.237 = private unnamed_addr constant [61 x i8] c"\09-m<n>\09Request n megabytes of global memory (default = 32).\0A\00", align 1
@.str.8.238 = private unnamed_addr constant [43 x i8] c"\09-p<n>\09Run on n processors (default = 1).\0A\00", align 1
@.str.9.239 = private unnamed_addr constant [55 x i8] c"\09-s\09Measure and print per-process timing information.\0A\00", align 1
@.str.10.240 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11.241 = private unnamed_addr constant [26 x i8] c"%s: Invalid option '%c'.\0A\00", align 1
@.str.12.242 = private unnamed_addr constant [46 x i8] c"%s: Valid range for #processors is [1, %ld].\0A\00", align 1
@.str.13.243 = private unnamed_addr constant [32 x i8] c"Number of processors:     \09%ld\0A\00", align 1
@.str.14.244 = private unnamed_addr constant [35 x i8] c"Global shared memory size:\09%ld MB\0A\00", align 1
@.str.15.245 = private unnamed_addr constant [32 x i8] c"Samples per pixel:        \09%ld\0A\00", align 1
@.str.16.246 = private unnamed_addr constant [36 x i8] c"%s: Cannot initialize global heap.\0A\00", align 1
@.str.17.247 = private unnamed_addr constant [35 x i8] c"Number of primitive objects: \09%ld\0A\00", align 1
@.str.18.248 = private unnamed_addr constant [35 x i8] c"Number of primitive elements:\09%ld\0A\00", align 1
@.str.19.249 = private unnamed_addr constant [45 x i8] c"TIMING STATISTICS MEASURED BY MAIN PROCESS:\0A\00", align 1
@.str.20.250 = private unnamed_addr constant [38 x i8] c"        Overall start time     %20lu\0A\00", align 1
@.str.21.251 = private unnamed_addr constant [34 x i8] c"        Overall end time   %20lu\0A\00", align 1
@.str.22.252 = private unnamed_addr constant [47 x i8] c"        Total time with initialization  %20lu\0A\00", align 1
@.str.23.253 = private unnamed_addr constant [50 x i8] c"        Total time without initialization  %20lu\0A\00", align 1
@.str.24.254 = private unnamed_addr constant [28 x i8] c"\0A\0A\0APER-PROCESS STATISTICS:\0A\00", align 1
@.str.25.255 = private unnamed_addr constant [10 x i8] c"%20s%20s\0A\00", align 1
@.str.26.256 = private unnamed_addr constant [5 x i8] c"Proc\00", align 1
@.str.27.257 = private unnamed_addr constant [5 x i8] c"Time\00", align 1
@.str.28.258 = private unnamed_addr constant [11 x i8] c"%20s%20s\0A\0A\00", align 1
@.str.29.259 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.30.260 = private unnamed_addr constant [13 x i8] c"Tracing Rays\00", align 1
@.str.31.261 = private unnamed_addr constant [10 x i8] c"%20d%20d\0A\00", align 1
@.str.32.262 = private unnamed_addr constant [12 x i8] c"\0A\0A%20s%20d\0A\00", align 1
@.str.33.263 = private unnamed_addr constant [7 x i8] c"Max = \00", align 1
@.str.34.264 = private unnamed_addr constant [10 x i8] c"%20s%20d\0A\00", align 1
@.str.35.265 = private unnamed_addr constant [7 x i8] c"Min = \00", align 1
@.str.36.266 = private unnamed_addr constant [7 x i8] c"Avg = \00", align 1
@.str.267 = private unnamed_addr constant [9 x i8] c"RAYTRACE\00", align 1
@.str.286 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1
@.str.1.287 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.2.288 = private unnamed_addr constant [5 x i8] c"%f  \00", align 1
@.str.3.289 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.290 = private unnamed_addr constant [28 x i8] c"Unknown rotation axis %ld.\0A\00", align 1
@begmem = internal global %struct.node* null, align 8
@endmem = internal global %struct.node* null, align 8
@nodesize = internal global i64 0, align 8
@mem_grid = internal global i64 0, align 8
@maxmem_grid = internal global i64 0, align 8
@mem_voxel = internal global i64 0, align 8
@maxmem_voxel = internal global i64 0, align 8
@mem_hashtable = internal global i64 0, align 8
@maxmem_hashtable = internal global i64 0, align 8
@mem_emptycells = internal global i64 0, align 8
@maxmem_emptycells = internal global i64 0, align 8
@mem_bintree = internal global i64 0, align 8
@maxmem_bintree = internal global i64 0, align 8
@mem_pepArray = internal global i64 0, align 8
@maxmem_pepArray = internal global i64 0, align 8
@.str.307 = private unnamed_addr constant [38 x i8] c"%s: %s cannot allocate local memory.\0A\00", align 1
@.str.1.308 = private unnamed_addr constant [22 x i8] c"freelist ->\090x%08lX\0A\0A\00", align 1
@.str.2.309 = private unnamed_addr constant [56 x i8] c"node addr \09node->next\09node->size\09node->free\09node->cksm\0A\00", align 1
@.str.3.310 = private unnamed_addr constant [56 x i8] c"==========\09==========\09==========\09==========\09==========\0A\00", align 1
@.str.5.311 = private unnamed_addr constant [5 x i8] c"FREE\00", align 1
@.str.6.312 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4.313 = private unnamed_addr constant [35 x i8] c"0x%08lX\090x%08lX\09%10ld\09%s\09\090x%08lX\0A\00", align 1
@.str.7.314 = private unnamed_addr constant [43 x i8] c"GlobalHeapWalk: Invalid checksum in node.\0A\00", align 1
@.str.8.315 = private unnamed_addr constant [41 x i8] c"GlobalMalloc: Invalid checksum in node.\0A\00", align 1
@.str.9.316 = private unnamed_addr constant [53 x i8] c"GlobalMalloc: Node in free list not marked as free.\0A\00", align 1
@.str.10.317 = private unnamed_addr constant [39 x i8] c"%s: %s cannot allocate global memory.\0A\00", align 1
@.str.11.318 = private unnamed_addr constant [13 x i8] c"GlobalCalloc\00", align 1
@.str.12.319 = private unnamed_addr constant [14 x i8] c"GlobalRealloc\00", align 1
@.str.13.320 = private unnamed_addr constant [65 x i8] c"GlobalRealloc: Attempted to realloc node with invalid checksum.\0A\00", align 1
@.str.14.321 = private unnamed_addr constant [58 x i8] c"GlobalRealloc: Attempted to realloc an unallocated node.\0A\00", align 1
@.str.15.322 = private unnamed_addr constant [55 x i8] c"GlobalRealloc: Could not find next node in free list.\0A\00", align 1
@.str.16.323 = private unnamed_addr constant [59 x i8] c"GlobalFree: Attempted to free node with invalid checksum.\0A\00", align 1
@.str.17.324 = private unnamed_addr constant [49 x i8] c"GlobalFree: Attempted to free unallocated node.\0A\00", align 1
@.str.18.325 = private unnamed_addr constant [48 x i8] c"GlobalFree: Invalid checksum in previous node.\0A\00", align 1
@.str.19.326 = private unnamed_addr constant [74 x i8] c"freelist=0x%08lX, curr=0x%08lX, size=0x%08lX, pn=0x%08lX, endmem=0x%08lX\0A\00", align 1
@.str.20.327 = private unnamed_addr constant [63 x i8] c"GlobalFree: Search for previous block fell off end of memory.\0A\00", align 1
@.str.21.328 = private unnamed_addr constant [44 x i8] c"GlobalFree: Invalid checksum in next node.\0A\00", align 1
@.str.22.329 = private unnamed_addr constant [5 x i8] c"GRID\00", align 1
@.str.23.330 = private unnamed_addr constant [6 x i8] c"VOXEL\00", align 1
@.str.24.331 = private unnamed_addr constant [10 x i8] c"HASHTABLE\00", align 1
@.str.25.332 = private unnamed_addr constant [11 x i8] c"EMPTYCELLS\00", align 1
@.str.26.333 = private unnamed_addr constant [8 x i8] c"BINTREE\00", align 1
@.str.27.334 = private unnamed_addr constant [9 x i8] c"PEPARRAY\00", align 1
@.str.28.335 = private unnamed_addr constant [39 x i8] c"ObjectMalloc: Unknown object type: %d\0A\00", align 1
@.str.29.336 = private unnamed_addr constant [37 x i8] c"ObjectFree: Unknown object type: %d\0A\00", align 1
@.str.30.337 = private unnamed_addr constant [19 x i8] c"error ma_rayinfo \0A\00", align 1
@.str.31.338 = private unnamed_addr constant [70 x i8] c"\0A****** Hierarchial uniform grid memory allocation summary ******* \0A\0A\00", align 1
@.str.32.339 = private unnamed_addr constant [70 x i8] c"     < struct >:            < current >   < maximum >    < sizeof > \0A\00", align 1
@.str.33.340 = private unnamed_addr constant [71 x i8] c"     <  bytes >:             <  bytes >   <   bytes >    <  bytes > \0A\0A\00", align 1
@.str.34.341 = private unnamed_addr constant [49 x i8] c"     grid:                %11ld   %11ld   %11d \0A\00", align 1
@.str.35.342 = private unnamed_addr constant [49 x i8] c"     hashtable entries:   %11ld   %11ld   %11d \0A\00", align 1
@.str.36.343 = private unnamed_addr constant [49 x i8] c"     emptycell entries:   %11ld   %11ld   %11d \0A\00", align 1
@.str.37.344 = private unnamed_addr constant [49 x i8] c"     voxel:               %11ld   %11ld   %11d \0A\00", align 1
@.str.38.345 = private unnamed_addr constant [49 x i8] c"     bintree_node:        %11ld   %11ld   %11d \0A\00", align 1
@.str.39.346 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.40.347 = private unnamed_addr constant [48 x i8] c"     Totals:              %11ld   %11ld      \0A\0A\00", align 1
@.str.366 = private unnamed_addr constant [5 x i8] c"poly\00", align 1
@.str.1.367 = private unnamed_addr constant [25 x i8] c"\09polygon: %ld polygons.\0A\00", align 1
@.str.2.368 = private unnamed_addr constant [40 x i8] c"\09\09Vertices: %ld  Plane eq: %f %f %f %f\0A\00", align 1
@.str.3.369 = private unnamed_addr constant [13 x i8] c"\09\09%f %f %f \0A\00", align 1
@.str.4.370 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.5.371 = private unnamed_addr constant [32 x i8] c"Error in PolyRead: totalverts.\0A\00", align 1
@.str.6.372 = private unnamed_addr constant [7 x i8] c"poly.c\00", align 1
@.str.7.373 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8.374 = private unnamed_addr constant [43 x i8] c"Error in PolyRead: face normal indicator.\0A\00", align 1
@.str.9.375 = private unnamed_addr constant [12 x i8] c"%lf %lf %lf\00", align 1
@.str.10.376 = private unnamed_addr constant [32 x i8] c"Error in PolyRead: vertex %ld.\0A\00", align 1
@.str.11.377 = private unnamed_addr constant [34 x i8] c"Error in PolyRead: vertex count.\0A\00", align 1
@.str.12.378 = private unnamed_addr constant [45 x i8] c"Polygon vertex count, %ld, exceeds maximum.\0A\00", align 1
@.str.13.379 = private unnamed_addr constant [13 x i8] c" %lf %lf %lf\00", align 1
@.str.14.380 = private unnamed_addr constant [37 x i8] c"Error in PolyRead: face normal %ld.\0A\00", align 1
@.str.15.381 = private unnamed_addr constant [38 x i8] c"Error in PolyRead: vertex index %ld.\0A\00", align 1
@raystruct = internal global [128 x %struct.r_struct] zeroinitializer, align 16
@.str.384 = private unnamed_addr constant [11 x i8] c"raystack.c\00", align 1
@.str.1.385 = private unnamed_addr constant [30 x i8] c"%s: Ray tree stack overflow.\0A\00", align 1
@.str.404 = private unnamed_addr constant [7 x i8] c"sphere\00", align 1
@.str.1.405 = private unnamed_addr constant [16 x i8] c"\09Sphere object\0A\00", align 1
@.str.2.406 = private unnamed_addr constant [20 x i8] c"\09\09center  %f %f %f\0A\00", align 1
@.str.3.407 = private unnamed_addr constant [25 x i8] c"\09\09        radius %f %f\0A\0A\00", align 1
@.str.4.408 = private unnamed_addr constant [6 x i8] c"sph.c\00", align 1
@.str.5.409 = private unnamed_addr constant [16 x i8] c"%lf %lf %lf %lf\00", align 1
@.str.6.410 = private unnamed_addr constant [31 x i8] c"Error in SphRead: sphere %ld.\0A\00", align 1
@frand.lLastRand = internal global i64 0, align 8
@.str.429 = private unnamed_addr constant [5 x i8] c"poly\00", align 1
@.str.1.430 = private unnamed_addr constant [27 x i8] c"\09triangle: %ld triangles.\0A\00", align 1
@.str.2.431 = private unnamed_addr constant [39 x i8] c"\09\09Vertices: 3   Plane eq: %f %f %f %f\0A\00", align 1
@.str.3.432 = private unnamed_addr constant [13 x i8] c"\09\09%f %f %f \0A\00", align 1
@.str.4.433 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.5.434 = private unnamed_addr constant [31 x i8] c"Error in TriRead: totalverts.\0A\00", align 1
@.str.6.435 = private unnamed_addr constant [6 x i8] c"tri.c\00", align 1
@.str.7.436 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8.437 = private unnamed_addr constant [42 x i8] c"Error in TriRead: face normal indicator.\0A\00", align 1
@.str.9.438 = private unnamed_addr constant [44 x i8] c"Error in TriRead: vertex normal indicator.\0A\00", align 1
@.str.10.439 = private unnamed_addr constant [12 x i8] c"%lf %lf %lf\00", align 1
@.str.11.440 = private unnamed_addr constant [31 x i8] c"Error in TriRead: vertex %ld.\0A\00", align 1
@.str.12.441 = private unnamed_addr constant [38 x i8] c"Error in TriRead: vertex normal %ld.\0A\00", align 1
@.str.13.442 = private unnamed_addr constant [13 x i8] c" %lf %lf %lf\00", align 1
@.str.14.443 = private unnamed_addr constant [36 x i8] c"Error in TriRead: face normal %ld.\0A\00", align 1
@.str.15.444 = private unnamed_addr constant [12 x i8] c"%ld %ld %ld\00", align 1
@.str.16.445 = private unnamed_addr constant [37 x i8] c"Error in TriRead: vertex index %ld.\0A\00", align 1
@.str.450 = private unnamed_addr constant [11 x i8] c"workpool.c\00", align 1
@.str.1.451 = private unnamed_addr constant [73 x i8] c"Workpool entry:    pid=%3ld    xs=%3ld    ys=%3ld    xe=%3ld    ye=%3ld\0A\00", align 1
@index_out = internal global i32 0, align 4
@gSyncVar_0 = internal global i32 0, align 4
@gSyncVar_1 = internal global i32 0, align 4
@gSyncVar_2 = internal global i32 0, align 4
@gSyncVarsTotalNum = internal global i32 0, align 4
@counter0 = internal global i32 0, align 4
@counter1 = internal global i32 0, align 4
@firstSync = internal global i8 1, align 1
@mystring = internal global [200 x i8] zeroinitializer, align 16
@switches = internal global [3 x i8] zeroinitializer, align 1
@syncID = internal global [3 x i32] zeroinitializer, align 4
@.str.452 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define internal void @InquireBoundBoxValues(%struct.bbox* %pbb, double* %minx, double* %miny, double* %minz, double* %maxx, double* %maxy, double* %maxz) {
  %1 = alloca %struct.bbox*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  store %struct.bbox* %pbb, %struct.bbox** %1, align 8
  store double* %minx, double** %2, align 8
  store double* %miny, double** %3, align 8
  store double* %minz, double** %4, align 8
  store double* %maxx, double** %5, align 8
  store double* %maxy, double** %6, align 8
  store double* %maxz, double** %7, align 8
  %8 = load %struct.bbox** %1, align 8
  %9 = getelementptr inbounds %struct.bbox* %8, i32 0, i32 0
  %10 = getelementptr inbounds [3 x double]* %9, i32 0, i64 0
  %11 = load double* %10, align 8
  %12 = load double** %2, align 8
  store double %11, double* %12, align 8
  %13 = load %struct.bbox** %1, align 8
  %14 = getelementptr inbounds %struct.bbox* %13, i32 0, i32 0
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 1
  %16 = load double* %15, align 8
  %17 = load double** %3, align 8
  store double %16, double* %17, align 8
  %18 = load %struct.bbox** %1, align 8
  %19 = getelementptr inbounds %struct.bbox* %18, i32 0, i32 0
  %20 = getelementptr inbounds [3 x double]* %19, i32 0, i64 2
  %21 = load double* %20, align 8
  %22 = load double** %4, align 8
  store double %21, double* %22, align 8
  %23 = load %struct.bbox** %1, align 8
  %24 = getelementptr inbounds %struct.bbox* %23, i32 0, i32 1
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 0
  %26 = load double* %25, align 8
  %27 = load double** %5, align 8
  store double %26, double* %27, align 8
  %28 = load %struct.bbox** %1, align 8
  %29 = getelementptr inbounds %struct.bbox* %28, i32 0, i32 1
  %30 = getelementptr inbounds [3 x double]* %29, i32 0, i64 1
  %31 = load double* %30, align 8
  %32 = load double** %6, align 8
  store double %31, double* %32, align 8
  %33 = load %struct.bbox** %1, align 8
  %34 = getelementptr inbounds %struct.bbox* %33, i32 0, i32 1
  %35 = getelementptr inbounds [3 x double]* %34, i32 0, i64 2
  %36 = load double* %35, align 8
  %37 = load double** %7, align 8
  store double %36, double* %37, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @NormalizeBoundBox(%struct.bbox* %pbb, [4 x double]* %mat) {
  %1 = alloca %struct.bbox*, align 8
  %2 = alloca [4 x double]*, align 8
  %tmp = alloca [4 x double], align 16
  store %struct.bbox* %pbb, %struct.bbox** %1, align 8
  store [4 x double]* %mat, [4 x double]** %2, align 8
  %3 = load %struct.bbox** %1, align 8
  %4 = getelementptr inbounds %struct.bbox* %3, i32 0, i32 0
  %5 = getelementptr inbounds [3 x double]* %4, i32 0, i64 0
  %6 = load double* %5, align 8
  %7 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 0
  store double %6, double* %7, align 8
  %8 = load %struct.bbox** %1, align 8
  %9 = getelementptr inbounds %struct.bbox* %8, i32 0, i32 0
  %10 = getelementptr inbounds [3 x double]* %9, i32 0, i64 1
  %11 = load double* %10, align 8
  %12 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 1
  store double %11, double* %12, align 8
  %13 = load %struct.bbox** %1, align 8
  %14 = getelementptr inbounds %struct.bbox* %13, i32 0, i32 0
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 2
  %16 = load double* %15, align 8
  %17 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 2
  store double %16, double* %17, align 8
  %18 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 3
  store double 1.000000e+00, double* %18, align 8
  %19 = getelementptr inbounds [4 x double]* %tmp, i32 0, i32 0
  %20 = load [4 x double]** %2, align 8
  %21 = getelementptr inbounds [4 x double]* %tmp, i32 0, i32 0
  call void @VecMatMult(double* %19, [4 x double]* %20, double* %21)
  %22 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 0
  %23 = load double* %22, align 8
  %24 = load %struct.bbox** %1, align 8
  %25 = getelementptr inbounds %struct.bbox* %24, i32 0, i32 0
  %26 = getelementptr inbounds [3 x double]* %25, i32 0, i64 0
  store double %23, double* %26, align 8
  %27 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 1
  %28 = load double* %27, align 8
  %29 = load %struct.bbox** %1, align 8
  %30 = getelementptr inbounds %struct.bbox* %29, i32 0, i32 0
  %31 = getelementptr inbounds [3 x double]* %30, i32 0, i64 1
  store double %28, double* %31, align 8
  %32 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 2
  %33 = load double* %32, align 8
  %34 = load %struct.bbox** %1, align 8
  %35 = getelementptr inbounds %struct.bbox* %34, i32 0, i32 0
  %36 = getelementptr inbounds [3 x double]* %35, i32 0, i64 2
  store double %33, double* %36, align 8
  %37 = load %struct.bbox** %1, align 8
  %38 = getelementptr inbounds %struct.bbox* %37, i32 0, i32 1
  %39 = getelementptr inbounds [3 x double]* %38, i32 0, i64 0
  %40 = load double* %39, align 8
  %41 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 0
  store double %40, double* %41, align 8
  %42 = load %struct.bbox** %1, align 8
  %43 = getelementptr inbounds %struct.bbox* %42, i32 0, i32 1
  %44 = getelementptr inbounds [3 x double]* %43, i32 0, i64 1
  %45 = load double* %44, align 8
  %46 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 1
  store double %45, double* %46, align 8
  %47 = load %struct.bbox** %1, align 8
  %48 = getelementptr inbounds %struct.bbox* %47, i32 0, i32 1
  %49 = getelementptr inbounds [3 x double]* %48, i32 0, i64 2
  %50 = load double* %49, align 8
  %51 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 2
  store double %50, double* %51, align 8
  %52 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 3
  store double 1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [4 x double]* %tmp, i32 0, i32 0
  %54 = load [4 x double]** %2, align 8
  %55 = getelementptr inbounds [4 x double]* %tmp, i32 0, i32 0
  call void @VecMatMult(double* %53, [4 x double]* %54, double* %55)
  %56 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 0
  %57 = load double* %56, align 8
  %58 = load %struct.bbox** %1, align 8
  %59 = getelementptr inbounds %struct.bbox* %58, i32 0, i32 1
  %60 = getelementptr inbounds [3 x double]* %59, i32 0, i64 0
  store double %57, double* %60, align 8
  %61 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 1
  %62 = load double* %61, align 8
  %63 = load %struct.bbox** %1, align 8
  %64 = getelementptr inbounds %struct.bbox* %63, i32 0, i32 1
  %65 = getelementptr inbounds [3 x double]* %64, i32 0, i64 1
  store double %62, double* %65, align 8
  %66 = getelementptr inbounds [4 x double]* %tmp, i32 0, i64 2
  %67 = load double* %66, align 8
  %68 = load %struct.bbox** %1, align 8
  %69 = getelementptr inbounds %struct.bbox* %68, i32 0, i32 1
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 2
  store double %67, double* %70, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_gridlist() {
  %g = alloca %struct.grid*, align 8
  %1 = load %struct._IO_FILE** @stderr, align 8
  %2 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8]* @.str, i32 0, i32 0))
  %3 = load %struct.grid** @gridlist, align 8
  store %struct.grid* %3, %struct.grid** %g, align 8
  br label %4

; <label>:4                                       ; preds = %7, %0
  %5 = load %struct.grid** %g, align 8
  %6 = icmp ne %struct.grid* %5, null
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %4
  %8 = load %struct.grid** %g, align 8
  call void @prn_grid(%struct.grid* %8)
  %9 = load %struct.grid** %g, align 8
  %10 = getelementptr inbounds %struct.grid* %9, i32 0, i32 11
  %11 = load %struct.grid** %10, align 8
  store %struct.grid* %11, %struct.grid** %g, align 8
  br label %4

; <label>:12                                      ; preds = %4
  %13 = load %struct._IO_FILE** @stderr, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...)

; Function Attrs: nounwind uwtable
define internal void @prn_ds_stats() {
  %leafs = alloca i64, align 8
  %voxels = alloca i64, align 8
  %1 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.2, i32 0, i32 0))
  %2 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([68 x i8]* @.str.3, i32 0, i32 0))
  %3 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([47 x i8]* @.str.4, i32 0, i32 0))
  %4 = load i64* @hu_gridsize, align 8
  %5 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.5, i32 0, i32 0), i64 %4)
  %6 = load i64* @hu_numbuckets, align 8
  %7 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.6, i32 0, i32 0), i64 %6)
  %8 = load i64* @hu_max_subdiv_level, align 8
  %9 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.7, i32 0, i32 0), i64 %8)
  %10 = load i64* @hu_max_prims_cell, align 8
  %11 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.8, i32 0, i32 0), i64 %10)
  %12 = load i64* @grids, align 8
  %13 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([48 x i8]* @.str.9, i32 0, i32 0), i64 %12)
  %14 = load i64* @empty_voxels, align 8
  %15 = load i64* @nonempty_voxels, align 8
  %16 = add nsw i64 %14, %15
  store i64 %16, i64* %voxels, align 8
  %17 = load i64* @empty_voxels, align 8
  %18 = load i64* @nonempty_leafs, align 8
  %19 = add nsw i64 %17, %18
  store i64 %19, i64* %leafs, align 8
  %20 = load i64* @empty_voxels, align 8
  %21 = load i64* @empty_voxels, align 8
  %22 = mul nsw i64 100, %21
  %23 = load i64* %voxels, align 8
  %24 = sdiv i64 %22, %23
  %25 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.10, i32 0, i32 0), i64 %20, i64 %24)
  %26 = load i64* @nonempty_voxels, align 8
  %27 = load i64* @nonempty_voxels, align 8
  %28 = mul nsw i64 100, %27
  %29 = load i64* %voxels, align 8
  %30 = sdiv i64 %28, %29
  %31 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.11, i32 0, i32 0), i64 %26, i64 %30)
  %32 = load i64* @empty_voxels, align 8
  %33 = load i64* @empty_voxels, align 8
  %34 = mul nsw i64 100, %33
  %35 = load i64* %leafs, align 8
  %36 = sdiv i64 %34, %35
  %37 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.12, i32 0, i32 0), i64 %32, i64 %36)
  %38 = load i64* @nonempty_leafs, align 8
  %39 = load i64* @nonempty_leafs, align 8
  %40 = mul nsw i64 100, %39
  %41 = load i64* %leafs, align 8
  %42 = sdiv i64 %40, %41
  %43 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.13, i32 0, i32 0), i64 %38, i64 %42)
  %44 = load i64* @prims_in_leafs, align 8
  %45 = sitofp i64 %44 to double
  %46 = load i64* %leafs, align 8
  %47 = sitofp i64 %46 to double
  %48 = fdiv double %45, %47
  %49 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([47 x i8]* @.str.14, i32 0, i32 0), double %48)
  %50 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)

; Function Attrs: nounwind uwtable
define internal void @init_masks() {
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  store i64 64, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %1

; <label>:1                                       ; preds = %16, %0
  %2 = load i64* %i, align 8
  %3 = load i64* %n, align 8
  %4 = icmp slt i64 %2, %3
  br i1 %4, label %5, label %19

; <label>:5                                       ; preds = %1
  %6 = load i64* %i, align 8
  %7 = lshr i64 -9223372036854775808, %6
  %8 = load i64* %i, align 8
  %9 = getelementptr inbounds [64 x i64]* @empty_masks, i32 0, i64 %8
  store i64 %7, i64* %9, align 8
  %10 = load i64* %i, align 8
  %11 = getelementptr inbounds [64 x i64]* @empty_masks, i32 0, i64 %10
  %12 = load i64* %11, align 8
  %13 = xor i64 %12, -1
  %14 = load i64* %i, align 8
  %15 = getelementptr inbounds [64 x i64]* @nonempty_masks, i32 0, i64 %14
  store i64 %13, i64* %15, align 8
  br label %16

; <label>:16                                      ; preds = %5
  %17 = load i64* %i, align 8
  %18 = add nsw i64 %17, 1
  store i64 %18, i64* %i, align 8
  br label %1

; <label>:19                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.grid* @init_world_grid(%struct.voxel* %v, %struct.element** %pepa, i64 %num_pe) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.element**, align 8
  %3 = alloca i64, align 8
  %ec = alloca i64*, align 8
  %pc = alloca i64*, align 8
  %wbox = alloca %struct.bbox, align 8
  %g = alloca %struct.grid*, align 8
  %ht = alloca %struct.voxel**, align 8
  store %struct.voxel* %v, %struct.voxel** %1, align 8
  store %struct.element** %pepa, %struct.element*** %2, align 8
  store i64 %num_pe, i64* %3, align 8
  %4 = call i8* @ObjectMalloc(i64 0, i64 1)
  %5 = bitcast i8* %4 to %struct.grid*
  store %struct.grid* %5, %struct.grid** %g, align 8
  %6 = load i64* @grids, align 8
  %7 = add nsw i64 %6, 1
  store i64 %7, i64* @grids, align 8
  %8 = load %struct.grid** %g, align 8
  %9 = getelementptr inbounds %struct.grid* %8, i32 0, i32 0
  store i64 %6, i64* %9, align 8
  %10 = call i8* @ObjectMalloc(i64 2, i64 1)
  %11 = bitcast i8* %10 to %struct.voxel**
  store %struct.voxel** %11, %struct.voxel*** %ht, align 8
  %12 = load %struct.voxel*** %ht, align 8
  %13 = load %struct.grid** %g, align 8
  %14 = getelementptr inbounds %struct.grid* %13, i32 0, i32 1
  store %struct.voxel** %12, %struct.voxel*** %14, align 8
  %15 = load %struct.voxel** %1, align 8
  %16 = load %struct.grid** %g, align 8
  %17 = getelementptr inbounds %struct.grid* %16, i32 0, i32 1
  %18 = load %struct.voxel*** %17, align 8
  %19 = getelementptr inbounds %struct.voxel** %18, i64 0
  store %struct.voxel* %15, %struct.voxel** %19, align 8
  %20 = call i8* @ObjectMalloc(i64 3, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64* %21, i64** %ec, align 8
  %22 = load i64** %ec, align 8
  %23 = load %struct.grid** %g, align 8
  %24 = getelementptr inbounds %struct.grid* %23, i32 0, i32 2
  store i64* %22, i64** %24, align 8
  %25 = load %struct.grid** %g, align 8
  %26 = getelementptr inbounds %struct.grid* %25, i32 0, i32 2
  %27 = load i64** %26, align 8
  %28 = getelementptr inbounds i64* %27, i64 0
  store i64 0, i64* %28, align 8
  %29 = load %struct.grid** %g, align 8
  %30 = getelementptr inbounds %struct.grid* %29, i32 0, i32 5
  %31 = getelementptr inbounds [3 x i64]* %30, i32 0, i64 0
  store i64 1, i64* %31, align 8
  %32 = load %struct.grid** %g, align 8
  %33 = getelementptr inbounds %struct.grid* %32, i32 0, i32 5
  %34 = getelementptr inbounds [3 x i64]* %33, i32 0, i64 1
  store i64 1, i64* %34, align 8
  %35 = load %struct.grid** %g, align 8
  %36 = getelementptr inbounds %struct.grid* %35, i32 0, i32 5
  %37 = getelementptr inbounds [3 x i64]* %36, i32 0, i64 2
  store i64 1, i64* %37, align 8
  %38 = load %struct.grid** %g, align 8
  %39 = getelementptr inbounds %struct.grid* %38, i32 0, i32 6
  store i64 1, i64* %39, align 8
  %40 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 0
  store double 0.000000e+00, double* %41, align 8
  %42 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 1
  store double 0.000000e+00, double* %43, align 8
  %44 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %45 = getelementptr inbounds [3 x double]* %44, i32 0, i64 2
  store double 0.000000e+00, double* %45, align 8
  %46 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 0
  store double 1.000000e+00, double* %47, align 8
  %48 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %49 = getelementptr inbounds [3 x double]* %48, i32 0, i64 1
  store double 1.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 2
  store double 1.000000e+00, double* %51, align 8
  %52 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %53 = getelementptr inbounds [3 x double]* %52, i32 0, i64 0
  %54 = load double* %53, align 8
  %55 = load %struct.grid** %g, align 8
  %56 = getelementptr inbounds %struct.grid* %55, i32 0, i32 7
  %57 = getelementptr inbounds [3 x double]* %56, i32 0, i64 0
  store double %54, double* %57, align 8
  %58 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %59 = getelementptr inbounds [3 x double]* %58, i32 0, i64 1
  %60 = load double* %59, align 8
  %61 = load %struct.grid** %g, align 8
  %62 = getelementptr inbounds %struct.grid* %61, i32 0, i32 7
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 1
  store double %60, double* %63, align 8
  %64 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %65 = getelementptr inbounds [3 x double]* %64, i32 0, i64 2
  %66 = load double* %65, align 8
  %67 = load %struct.grid** %g, align 8
  %68 = getelementptr inbounds %struct.grid* %67, i32 0, i32 7
  %69 = getelementptr inbounds [3 x double]* %68, i32 0, i64 2
  store double %66, double* %69, align 8
  %70 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 0
  %72 = load double* %71, align 8
  %73 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %74 = getelementptr inbounds [3 x double]* %73, i32 0, i64 0
  %75 = load double* %74, align 8
  %76 = fsub double %72, %75
  %77 = load %struct.grid** %g, align 8
  %78 = getelementptr inbounds %struct.grid* %77, i32 0, i32 8
  %79 = getelementptr inbounds [3 x double]* %78, i32 0, i64 0
  store double %76, double* %79, align 8
  %80 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %81 = getelementptr inbounds [3 x double]* %80, i32 0, i64 1
  %82 = load double* %81, align 8
  %83 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 1
  %85 = load double* %84, align 8
  %86 = fsub double %82, %85
  %87 = load %struct.grid** %g, align 8
  %88 = getelementptr inbounds %struct.grid* %87, i32 0, i32 8
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 1
  store double %86, double* %89, align 8
  %90 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 1
  %91 = getelementptr inbounds [3 x double]* %90, i32 0, i64 2
  %92 = load double* %91, align 8
  %93 = getelementptr inbounds %struct.bbox* %wbox, i32 0, i32 0
  %94 = getelementptr inbounds [3 x double]* %93, i32 0, i64 2
  %95 = load double* %94, align 8
  %96 = fsub double %92, %95
  %97 = load %struct.grid** %g, align 8
  %98 = getelementptr inbounds %struct.grid* %97, i32 0, i32 8
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 2
  store double %96, double* %99, align 8
  %100 = load %struct.grid** %g, align 8
  %101 = getelementptr inbounds %struct.grid* %100, i32 0, i32 9
  store i64 -1, i64* %101, align 8
  %102 = load i64* %3, align 8
  %103 = load %struct.grid** %g, align 8
  %104 = getelementptr inbounds %struct.grid* %103, i32 0, i32 4
  store i64 %102, i64* %104, align 8
  %105 = load %struct.element*** %2, align 8
  %106 = load %struct.grid** %g, align 8
  %107 = getelementptr inbounds %struct.grid* %106, i32 0, i32 3
  store %struct.element** %105, %struct.element*** %107, align 8
  %108 = load %struct.grid** %g, align 8
  %109 = getelementptr inbounds %struct.grid* %108, i32 0, i32 11
  store %struct.grid* null, %struct.grid** %109, align 8
  %110 = load %struct.grid** %g, align 8
  store %struct.grid* %110, %struct.grid** @gridlist, align 8
  %111 = load %struct.grid** %g, align 8
  ret %struct.grid* %111
}

; Function Attrs: nounwind uwtable
define internal %struct.voxel* @init_world_voxel(%struct.element** %pepa, i64 %numelements) {
  %1 = alloca %struct.element**, align 8
  %2 = alloca i64, align 8
  %v = alloca %struct.voxel*, align 8
  store %struct.element** %pepa, %struct.element*** %1, align 8
  store i64 %numelements, i64* %2, align 8
  %3 = call i8* @ObjectMalloc(i64 1, i64 1)
  %4 = bitcast i8* %3 to %struct.voxel*
  store %struct.voxel* %4, %struct.voxel** %v, align 8
  %5 = load i64* @nonempty_voxels, align 8
  %6 = add nsw i64 %5, 1
  store i64 %6, i64* @nonempty_voxels, align 8
  %7 = load %struct.voxel** %v, align 8
  %8 = getelementptr inbounds %struct.voxel* %7, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = load %struct.element*** %1, align 8
  %10 = bitcast %struct.element** %9 to i8*
  %11 = load %struct.voxel** %v, align 8
  %12 = getelementptr inbounds %struct.voxel* %11, i32 0, i32 1
  store i8* %10, i8** %12, align 8
  %13 = load i64* %2, align 8
  %14 = load %struct.voxel** %v, align 8
  %15 = getelementptr inbounds %struct.voxel* %14, i32 0, i32 3
  store i64 %13, i64* %15, align 8
  %16 = load %struct.voxel** %v, align 8
  %17 = getelementptr inbounds %struct.voxel* %16, i32 0, i32 2
  store i8 2, i8* %17, align 1
  %18 = load %struct.voxel** %v, align 8
  %19 = getelementptr inbounds %struct.voxel* %18, i32 0, i32 4
  store %struct.voxel* null, %struct.voxel** %19, align 8
  %20 = load %struct.voxel** %v, align 8
  ret %struct.voxel* %20
}

; Function Attrs: nounwind uwtable
define internal void @mark_empty(i64 %index1D, %struct.grid* %g) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %r = alloca i64, align 8
  %w = alloca i64, align 8
  store i64 %index1D, i64* %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  %3 = load i64* %1, align 8
  %4 = udiv i64 %3, 64
  store i64 %4, i64* %i, align 8
  %5 = load i64* %1, align 8
  %6 = load i64* %i, align 8
  %7 = mul i64 %6, 8
  %8 = mul i64 %7, 8
  %9 = sub i64 %5, %8
  store i64 %9, i64* %r, align 8
  %10 = load i64* %i, align 8
  %11 = load %struct.grid** %2, align 8
  %12 = getelementptr inbounds %struct.grid* %11, i32 0, i32 2
  %13 = load i64** %12, align 8
  %14 = getelementptr inbounds i64* %13, i64 %10
  %15 = load i64* %14, align 8
  store i64 %15, i64* %w, align 8
  %16 = load i64* %w, align 8
  %17 = load i64* %r, align 8
  %18 = getelementptr inbounds [64 x i64]* @empty_masks, i32 0, i64 %17
  %19 = load i64* %18, align 8
  %20 = or i64 %16, %19
  store i64 %20, i64* %w, align 8
  %21 = load i64* %w, align 8
  %22 = load i64* %i, align 8
  %23 = load %struct.grid** %2, align 8
  %24 = getelementptr inbounds %struct.grid* %23, i32 0, i32 2
  %25 = load i64** %24, align 8
  %26 = getelementptr inbounds i64* %25, i64 %22
  store i64 %21, i64* %26, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_nonempty(i64 %index1D, %struct.grid* %g) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %r = alloca i64, align 8
  %w = alloca i64, align 8
  store i64 %index1D, i64* %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  %3 = load i64* %1, align 8
  %4 = udiv i64 %3, 64
  store i64 %4, i64* %i, align 8
  %5 = load i64* %1, align 8
  %6 = load i64* %i, align 8
  %7 = mul i64 %6, 8
  %8 = mul i64 %7, 8
  %9 = sub i64 %5, %8
  store i64 %9, i64* %r, align 8
  %10 = load i64* %i, align 8
  %11 = load %struct.grid** %2, align 8
  %12 = getelementptr inbounds %struct.grid* %11, i32 0, i32 2
  %13 = load i64** %12, align 8
  %14 = getelementptr inbounds i64* %13, i64 %10
  %15 = load i64* %14, align 8
  store i64 %15, i64* %w, align 8
  %16 = load i64* %w, align 8
  %17 = load i64* %r, align 8
  %18 = getelementptr inbounds [64 x i64]* @nonempty_masks, i32 0, i64 %17
  %19 = load i64* %18, align 8
  %20 = and i64 %16, %19
  store i64 %20, i64* %w, align 8
  %21 = load i64* %w, align 8
  %22 = load i64* %i, align 8
  %23 = load %struct.grid** %2, align 8
  %24 = getelementptr inbounds %struct.grid* %23, i32 0, i32 2
  %25 = load i64** %24, align 8
  %26 = getelementptr inbounds i64* %25, i64 %22
  store i64 %21, i64* %26, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @insert_in_hashtable(%struct.voxel* %v, %struct.grid* %g) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %r = alloca i64, align 8
  %vht = alloca %struct.voxel*, align 8
  store %struct.voxel* %v, %struct.voxel** %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  %3 = load %struct.voxel** %1, align 8
  %4 = getelementptr inbounds %struct.voxel* %3, i32 0, i32 0
  %5 = load i64* %4, align 8
  %6 = load i64* @hu_numbuckets, align 8
  %7 = sdiv i64 %5, %6
  store i64 %7, i64* %i, align 8
  %8 = load %struct.voxel** %1, align 8
  %9 = getelementptr inbounds %struct.voxel* %8, i32 0, i32 0
  %10 = load i64* %9, align 8
  %11 = load i64* %i, align 8
  %12 = load i64* @hu_numbuckets, align 8
  %13 = mul nsw i64 %11, %12
  %14 = sub nsw i64 %10, %13
  store i64 %14, i64* %r, align 8
  %15 = load i64* %r, align 8
  %16 = load %struct.grid** %2, align 8
  %17 = getelementptr inbounds %struct.grid* %16, i32 0, i32 1
  %18 = load %struct.voxel*** %17, align 8
  %19 = getelementptr inbounds %struct.voxel** %18, i64 %15
  %20 = load %struct.voxel** %19, align 8
  store %struct.voxel* %20, %struct.voxel** %vht, align 8
  %21 = load %struct.voxel** %vht, align 8
  %22 = load %struct.voxel** %1, align 8
  %23 = getelementptr inbounds %struct.voxel* %22, i32 0, i32 4
  store %struct.voxel* %21, %struct.voxel** %23, align 8
  %24 = load %struct.voxel** %1, align 8
  %25 = load i64* %r, align 8
  %26 = load %struct.grid** %2, align 8
  %27 = getelementptr inbounds %struct.grid* %26, i32 0, i32 1
  %28 = load %struct.voxel*** %27, align 8
  %29 = getelementptr inbounds %struct.voxel** %28, i64 %25
  store %struct.voxel* %24, %struct.voxel** %29, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.element** @prims_in_box2(%struct.element** %pepa, i64 %n_in, %struct.bbox* byval align 8 %b, i64* %n) {
  %1 = alloca %struct.element**, align 8
  %2 = alloca %struct.element**, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %ovlap = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %pe = alloca %struct.element*, align 8
  %npepa = alloca %struct.element**, align 8
  %bb = alloca %struct.bbox, align 8
  %max = alloca double, align 8
  %side = alloca double, align 8
  %eps = alloca double, align 8
  store %struct.element** %pepa, %struct.element*** %2, align 8
  store i64 %n_in, i64* %3, align 8
  store i64* %n, i64** %4, align 8
  %5 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %6 = getelementptr inbounds [3 x double]* %5, i32 0, i64 0
  %7 = load double* %6, align 8
  %8 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %9 = getelementptr inbounds [3 x double]* %8, i32 0, i64 0
  %10 = load double* %9, align 8
  %11 = fsub double %7, %10
  store double %11, double* %max, align 8
  %12 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %13 = getelementptr inbounds [3 x double]* %12, i32 0, i64 1
  %14 = load double* %13, align 8
  %15 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %16 = getelementptr inbounds [3 x double]* %15, i32 0, i64 1
  %17 = load double* %16, align 8
  %18 = fsub double %14, %17
  store double %18, double* %side, align 8
  %19 = load double* %max, align 8
  %20 = load double* %side, align 8
  %21 = fcmp ogt double %19, %20
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %0
  %23 = load double* %max, align 8
  br label %26

; <label>:24                                      ; preds = %0
  %25 = load double* %side, align 8
  br label %26

; <label>:26                                      ; preds = %24, %22
  %27 = phi double [ %23, %22 ], [ %25, %24 ]
  store double %27, double* %max, align 8
  %28 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %29 = getelementptr inbounds [3 x double]* %28, i32 0, i64 2
  %30 = load double* %29, align 8
  %31 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 2
  %33 = load double* %32, align 8
  %34 = fsub double %30, %33
  store double %34, double* %side, align 8
  %35 = load double* %max, align 8
  %36 = load double* %side, align 8
  %37 = fcmp ogt double %35, %36
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %26
  %39 = load double* %max, align 8
  br label %42

; <label>:40                                      ; preds = %26
  %41 = load double* %side, align 8
  br label %42

; <label>:42                                      ; preds = %40, %38
  %43 = phi double [ %39, %38 ], [ %41, %40 ]
  store double %43, double* %max, align 8
  %44 = load double* %max, align 8
  %45 = fmul double %44, 1.000000e-06
  store double %45, double* %eps, align 8
  %46 = load i64* %3, align 8
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %48, label %52

; <label>:48                                      ; preds = %42
  %49 = load i64* %3, align 8
  %50 = call i8* @ObjectMalloc(i64 7, i64 %49)
  %51 = bitcast i8* %50 to %struct.element**
  store %struct.element** %51, %struct.element*** %npepa, align 8
  br label %58

; <label>:52                                      ; preds = %42
  %53 = load %struct.element*** %npepa, align 8
  %54 = icmp eq %struct.element** %53, null
  %55 = zext i1 %54 to i32
  %56 = load i64** %4, align 8
  store i64 0, i64* %56, align 8
  %57 = load %struct.element*** %npepa, align 8
  store %struct.element** %57, %struct.element*** %1
  br label %167

; <label>:58                                      ; preds = %48
  %59 = load i64** %4, align 8
  store i64 0, i64* %59, align 8
  store i64 0, i64* %k, align 8
  store i64 0, i64* %j, align 8
  br label %60

; <label>:60                                      ; preds = %162, %58
  %61 = load i64* %j, align 8
  %62 = load i64* %3, align 8
  %63 = icmp slt i64 %61, %62
  br i1 %63, label %64, label %165

; <label>:64                                      ; preds = %60
  %65 = load i64* %j, align 8
  %66 = load %struct.element*** %2, align 8
  %67 = getelementptr inbounds %struct.element** %66, i64 %65
  %68 = load %struct.element** %67, align 8
  store %struct.element* %68, %struct.element** %pe, align 8
  %69 = load %struct.element** %pe, align 8
  %70 = getelementptr inbounds %struct.element* %69, i32 0, i32 1
  %71 = bitcast %struct.bbox* %bb to i8*
  %72 = bitcast %struct.bbox* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 48, i32 8, i1 false)
  store i64 1, i64* %ovlap, align 8
  store i64 0, i64* %i, align 8
  br label %73

; <label>:73                                      ; preds = %143, %64
  %74 = load i64* %i, align 8
  %75 = icmp slt i64 %74, 1
  br i1 %75, label %76, label %146

; <label>:76                                      ; preds = %73
  %77 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %78 = getelementptr inbounds [3 x double]* %77, i32 0, i64 0
  %79 = load double* %78, align 8
  %80 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 1
  %81 = getelementptr inbounds [3 x double]* %80, i32 0, i64 0
  %82 = load double* %81, align 8
  %83 = load double* %eps, align 8
  %84 = fadd double %82, %83
  %85 = fcmp ogt double %79, %84
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %76
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:87                                      ; preds = %76
  %88 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 1
  %90 = load double* %89, align 8
  %91 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 1
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 1
  %93 = load double* %92, align 8
  %94 = load double* %eps, align 8
  %95 = fadd double %93, %94
  %96 = fcmp ogt double %90, %95
  br i1 %96, label %97, label %98

; <label>:97                                      ; preds = %87
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:98                                      ; preds = %87
  %99 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %100 = getelementptr inbounds [3 x double]* %99, i32 0, i64 2
  %101 = load double* %100, align 8
  %102 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 1
  %103 = getelementptr inbounds [3 x double]* %102, i32 0, i64 2
  %104 = load double* %103, align 8
  %105 = load double* %eps, align 8
  %106 = fadd double %104, %105
  %107 = fcmp ogt double %101, %106
  br i1 %107, label %108, label %109

; <label>:108                                     ; preds = %98
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:109                                     ; preds = %98
  %110 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %111 = getelementptr inbounds [3 x double]* %110, i32 0, i64 0
  %112 = load double* %111, align 8
  %113 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 0
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 0
  %115 = load double* %114, align 8
  %116 = load double* %eps, align 8
  %117 = fsub double %115, %116
  %118 = fcmp olt double %112, %117
  br i1 %118, label %119, label %120

; <label>:119                                     ; preds = %109
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:120                                     ; preds = %109
  %121 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %122 = getelementptr inbounds [3 x double]* %121, i32 0, i64 1
  %123 = load double* %122, align 8
  %124 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 0
  %125 = getelementptr inbounds [3 x double]* %124, i32 0, i64 1
  %126 = load double* %125, align 8
  %127 = load double* %eps, align 8
  %128 = fsub double %126, %127
  %129 = fcmp olt double %123, %128
  br i1 %129, label %130, label %131

; <label>:130                                     ; preds = %120
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:131                                     ; preds = %120
  %132 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %133 = getelementptr inbounds [3 x double]* %132, i32 0, i64 2
  %134 = load double* %133, align 8
  %135 = getelementptr inbounds %struct.bbox* %bb, i32 0, i32 0
  %136 = getelementptr inbounds [3 x double]* %135, i32 0, i64 2
  %137 = load double* %136, align 8
  %138 = load double* %eps, align 8
  %139 = fsub double %137, %138
  %140 = fcmp olt double %134, %139
  br i1 %140, label %141, label %142

; <label>:141                                     ; preds = %131
  store i64 0, i64* %ovlap, align 8
  br label %146

; <label>:142                                     ; preds = %131
  br label %143

; <label>:143                                     ; preds = %142
  %144 = load i64* %i, align 8
  %145 = add nsw i64 %144, 1
  store i64 %145, i64* %i, align 8
  br label %73

; <label>:146                                     ; preds = %141, %130, %119, %108, %97, %86, %73
  %147 = load i64* %ovlap, align 8
  %148 = icmp eq i64 %147, 1
  br i1 %148, label %149, label %161

; <label>:149                                     ; preds = %146
  %150 = load i64* %j, align 8
  %151 = load %struct.element*** %2, align 8
  %152 = getelementptr inbounds %struct.element** %151, i64 %150
  %153 = load %struct.element** %152, align 8
  %154 = load i64* %k, align 8
  %155 = add nsw i64 %154, 1
  store i64 %155, i64* %k, align 8
  %156 = load %struct.element*** %npepa, align 8
  %157 = getelementptr inbounds %struct.element** %156, i64 %154
  store %struct.element* %153, %struct.element** %157, align 8
  %158 = load i64** %4, align 8
  %159 = load i64* %158, align 8
  %160 = add nsw i64 %159, 1
  store i64 %160, i64* %158, align 8
  br label %161

; <label>:161                                     ; preds = %149, %146
  br label %162

; <label>:162                                     ; preds = %161
  %163 = load i64* %j, align 8
  %164 = add nsw i64 %163, 1
  store i64 %164, i64* %j, align 8
  br label %60

; <label>:165                                     ; preds = %60
  %166 = load %struct.element*** %npepa, align 8
  store %struct.element** %166, %struct.element*** %1
  br label %167

; <label>:167                                     ; preds = %165, %52
  %168 = load %struct.element*** %1
  ret %struct.element** %168
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture , i64, i32, i1)

; Function Attrs: nounwind uwtable
define internal %struct.btnode* @init_bintree(%struct.grid* %ng) {
  %1 = alloca %struct.grid*, align 8
  %btn = alloca %struct.btnode*, align 8
  %pepa = alloca %struct.element**, align 8
  store %struct.grid* %ng, %struct.grid** %1, align 8
  %2 = call i8* @ObjectMalloc(i64 6, i64 1)
  %3 = bitcast i8* %2 to %struct.btnode*
  store %struct.btnode* %3, %struct.btnode** %btn, align 8
  %4 = load %struct.btnode** %btn, align 8
  %5 = getelementptr inbounds %struct.btnode* %4, i32 0, i32 7
  %6 = getelementptr inbounds [2 x %struct.btnode*]* %5, i32 0, i64 0
  store %struct.btnode* null, %struct.btnode** %6, align 8
  %7 = load %struct.btnode** %btn, align 8
  %8 = getelementptr inbounds %struct.btnode* %7, i32 0, i32 7
  %9 = getelementptr inbounds [2 x %struct.btnode*]* %8, i32 0, i64 1
  store %struct.btnode* null, %struct.btnode** %9, align 8
  %10 = load %struct.btnode** %btn, align 8
  %11 = getelementptr inbounds %struct.btnode* %10, i32 0, i32 5
  store i64 -1, i64* %11, align 8
  %12 = load %struct.grid** %1, align 8
  %13 = getelementptr inbounds %struct.grid* %12, i32 0, i32 7
  %14 = getelementptr inbounds [3 x double]* %13, i32 0, i64 0
  %15 = load double* %14, align 8
  %16 = load %struct.btnode** %btn, align 8
  %17 = getelementptr inbounds %struct.btnode* %16, i32 0, i32 1
  %18 = getelementptr inbounds [3 x double]* %17, i32 0, i64 0
  store double %15, double* %18, align 8
  %19 = load %struct.grid** %1, align 8
  %20 = getelementptr inbounds %struct.grid* %19, i32 0, i32 7
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 1
  %22 = load double* %21, align 8
  %23 = load %struct.btnode** %btn, align 8
  %24 = getelementptr inbounds %struct.btnode* %23, i32 0, i32 1
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 1
  store double %22, double* %25, align 8
  %26 = load %struct.grid** %1, align 8
  %27 = getelementptr inbounds %struct.grid* %26, i32 0, i32 7
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 2
  %29 = load double* %28, align 8
  %30 = load %struct.btnode** %btn, align 8
  %31 = getelementptr inbounds %struct.btnode* %30, i32 0, i32 1
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 2
  store double %29, double* %32, align 8
  %33 = load %struct.grid** %1, align 8
  %34 = getelementptr inbounds %struct.grid* %33, i32 0, i32 5
  %35 = getelementptr inbounds [3 x i64]* %34, i32 0, i64 1
  %36 = load i64* %35, align 8
  %37 = load %struct.btnode** %btn, align 8
  %38 = getelementptr inbounds %struct.btnode* %37, i32 0, i32 3
  %39 = getelementptr inbounds [3 x i64]* %38, i32 0, i64 0
  store i64 %36, i64* %39, align 8
  %40 = load %struct.grid** %1, align 8
  %41 = getelementptr inbounds %struct.grid* %40, i32 0, i32 5
  %42 = getelementptr inbounds [3 x i64]* %41, i32 0, i64 1
  %43 = load i64* %42, align 8
  %44 = load %struct.btnode** %btn, align 8
  %45 = getelementptr inbounds %struct.btnode* %44, i32 0, i32 3
  %46 = getelementptr inbounds [3 x i64]* %45, i32 0, i64 1
  store i64 %43, i64* %46, align 8
  %47 = load %struct.grid** %1, align 8
  %48 = getelementptr inbounds %struct.grid* %47, i32 0, i32 5
  %49 = getelementptr inbounds [3 x i64]* %48, i32 0, i64 1
  %50 = load i64* %49, align 8
  %51 = load %struct.btnode** %btn, align 8
  %52 = getelementptr inbounds %struct.btnode* %51, i32 0, i32 3
  %53 = getelementptr inbounds [3 x i64]* %52, i32 0, i64 2
  store i64 %50, i64* %53, align 8
  %54 = load %struct.btnode** %btn, align 8
  %55 = getelementptr inbounds %struct.btnode* %54, i32 0, i32 4
  %56 = getelementptr inbounds [3 x i64]* %55, i32 0, i64 0
  store i64 0, i64* %56, align 8
  %57 = load %struct.btnode** %btn, align 8
  %58 = getelementptr inbounds %struct.btnode* %57, i32 0, i32 4
  %59 = getelementptr inbounds [3 x i64]* %58, i32 0, i64 1
  store i64 0, i64* %59, align 8
  %60 = load %struct.btnode** %btn, align 8
  %61 = getelementptr inbounds %struct.btnode* %60, i32 0, i32 4
  %62 = getelementptr inbounds [3 x i64]* %61, i32 0, i64 2
  store i64 0, i64* %62, align 8
  %63 = load %struct.grid** %1, align 8
  %64 = getelementptr inbounds %struct.grid* %63, i32 0, i32 4
  %65 = load i64* %64, align 8
  %66 = load %struct.btnode** %btn, align 8
  %67 = getelementptr inbounds %struct.btnode* %66, i32 0, i32 2
  store i64 %65, i64* %67, align 8
  %68 = load %struct.btnode** %btn, align 8
  %69 = getelementptr inbounds %struct.btnode* %68, i32 0, i32 2
  %70 = load i64* %69, align 8
  %71 = load %struct.btnode** %btn, align 8
  %72 = getelementptr inbounds %struct.btnode* %71, i32 0, i32 6
  store i64 %70, i64* %72, align 8
  %73 = load %struct.grid** %1, align 8
  %74 = getelementptr inbounds %struct.grid* %73, i32 0, i32 4
  %75 = load i64* %74, align 8
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %77, label %83

; <label>:77                                      ; preds = %0
  %78 = load %struct.grid** %1, align 8
  %79 = getelementptr inbounds %struct.grid* %78, i32 0, i32 3
  %80 = load %struct.element*** %79, align 8
  %81 = load %struct.btnode** %btn, align 8
  %82 = getelementptr inbounds %struct.btnode* %81, i32 0, i32 0
  store %struct.element** %80, %struct.element*** %82, align 8
  br label %86

; <label>:83                                      ; preds = %0
  %84 = load %struct.btnode** %btn, align 8
  %85 = getelementptr inbounds %struct.btnode* %84, i32 0, i32 0
  store %struct.element** null, %struct.element*** %85, align 8
  br label %86

; <label>:86                                      ; preds = %83, %77
  %87 = load %struct.btnode** %btn, align 8
  ret %struct.btnode* %87
}

; Function Attrs: nounwind uwtable
define internal void @subdiv_bintree(%struct.btnode* %btn, %struct.grid* %g) {
  %1 = alloca %struct.btnode*, align 8
  %2 = alloca %struct.grid*, align 8
  %btn1 = alloca %struct.btnode*, align 8
  %btn2 = alloca %struct.btnode*, align 8
  %n1 = alloca i64, align 8
  %n2 = alloca i64, align 8
  %imax = alloca i64, align 8
  %dmax = alloca i64, align 8
  %b1 = alloca %struct.bbox, align 8
  %b2 = alloca %struct.bbox, align 8
  store %struct.btnode* %btn, %struct.btnode** %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  store i64 0, i64* %imax, align 8
  %3 = load %struct.btnode** %1, align 8
  %4 = getelementptr inbounds %struct.btnode* %3, i32 0, i32 3
  %5 = getelementptr inbounds [3 x i64]* %4, i32 0, i64 0
  %6 = load i64* %5, align 8
  store i64 %6, i64* %dmax, align 8
  %7 = load i64* %dmax, align 8
  %8 = load %struct.btnode** %1, align 8
  %9 = getelementptr inbounds %struct.btnode* %8, i32 0, i32 3
  %10 = getelementptr inbounds [3 x i64]* %9, i32 0, i64 1
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %7, %11
  br i1 %12, label %13, label %18

; <label>:13                                      ; preds = %0
  store i64 1, i64* %imax, align 8
  %14 = load %struct.btnode** %1, align 8
  %15 = getelementptr inbounds %struct.btnode* %14, i32 0, i32 3
  %16 = getelementptr inbounds [3 x i64]* %15, i32 0, i64 1
  %17 = load i64* %16, align 8
  store i64 %17, i64* %dmax, align 8
  br label %18

; <label>:18                                      ; preds = %13, %0
  %19 = load i64* %dmax, align 8
  %20 = load %struct.btnode** %1, align 8
  %21 = getelementptr inbounds %struct.btnode* %20, i32 0, i32 3
  %22 = getelementptr inbounds [3 x i64]* %21, i32 0, i64 2
  %23 = load i64* %22, align 8
  %24 = icmp slt i64 %19, %23
  br i1 %24, label %25, label %30

; <label>:25                                      ; preds = %18
  store i64 2, i64* %imax, align 8
  %26 = load %struct.btnode** %1, align 8
  %27 = getelementptr inbounds %struct.btnode* %26, i32 0, i32 3
  %28 = getelementptr inbounds [3 x i64]* %27, i32 0, i64 2
  %29 = load i64* %28, align 8
  store i64 %29, i64* %dmax, align 8
  br label %30

; <label>:30                                      ; preds = %25, %18
  %31 = load i64* %imax, align 8
  %32 = load %struct.btnode** %1, align 8
  %33 = getelementptr inbounds %struct.btnode* %32, i32 0, i32 5
  store i64 %31, i64* %33, align 8
  %34 = load %struct.btnode** %1, align 8
  %35 = getelementptr inbounds %struct.btnode* %34, i32 0, i32 7
  %36 = getelementptr inbounds [2 x %struct.btnode*]* %35, i32 0, i64 0
  store %struct.btnode* null, %struct.btnode** %36, align 8
  %37 = load %struct.btnode** %1, align 8
  %38 = getelementptr inbounds %struct.btnode* %37, i32 0, i32 7
  %39 = getelementptr inbounds [2 x %struct.btnode*]* %38, i32 0, i64 1
  store %struct.btnode* null, %struct.btnode** %39, align 8
  %40 = load i64* %imax, align 8
  %41 = load %struct.btnode** %1, align 8
  %42 = getelementptr inbounds %struct.btnode* %41, i32 0, i32 3
  %43 = getelementptr inbounds [3 x i64]* %42, i32 0, i64 %40
  %44 = load i64* %43, align 8
  %45 = icmp sgt i64 %44, 1
  br i1 %45, label %46, label %419

; <label>:46                                      ; preds = %30
  %47 = load i64* %imax, align 8
  %48 = load %struct.btnode** %1, align 8
  %49 = getelementptr inbounds %struct.btnode* %48, i32 0, i32 3
  %50 = getelementptr inbounds [3 x i64]* %49, i32 0, i64 %47
  %51 = load i64* %50, align 8
  %52 = sdiv i64 %51, 2
  store i64 %52, i64* %n1, align 8
  %53 = load i64* %imax, align 8
  %54 = load %struct.btnode** %1, align 8
  %55 = getelementptr inbounds %struct.btnode* %54, i32 0, i32 3
  %56 = getelementptr inbounds [3 x i64]* %55, i32 0, i64 %53
  %57 = load i64* %56, align 8
  %58 = load i64* %n1, align 8
  %59 = sub nsw i64 %57, %58
  store i64 %59, i64* %n2, align 8
  %60 = call i8* @ObjectMalloc(i64 6, i64 1)
  %61 = bitcast i8* %60 to %struct.btnode*
  store %struct.btnode* %61, %struct.btnode** %btn1, align 8
  %62 = call i8* @ObjectMalloc(i64 6, i64 1)
  %63 = bitcast i8* %62 to %struct.btnode*
  store %struct.btnode* %63, %struct.btnode** %btn2, align 8
  %64 = load %struct.btnode** %btn1, align 8
  %65 = load %struct.btnode** %1, align 8
  %66 = getelementptr inbounds %struct.btnode* %65, i32 0, i32 7
  %67 = getelementptr inbounds [2 x %struct.btnode*]* %66, i32 0, i64 0
  store %struct.btnode* %64, %struct.btnode** %67, align 8
  %68 = load %struct.btnode** %btn2, align 8
  %69 = load %struct.btnode** %1, align 8
  %70 = getelementptr inbounds %struct.btnode* %69, i32 0, i32 7
  %71 = getelementptr inbounds [2 x %struct.btnode*]* %70, i32 0, i64 1
  store %struct.btnode* %68, %struct.btnode** %71, align 8
  %72 = load %struct.btnode** %btn1, align 8
  %73 = getelementptr inbounds %struct.btnode* %72, i32 0, i32 7
  %74 = getelementptr inbounds [2 x %struct.btnode*]* %73, i32 0, i64 0
  store %struct.btnode* null, %struct.btnode** %74, align 8
  %75 = load %struct.btnode** %btn1, align 8
  %76 = getelementptr inbounds %struct.btnode* %75, i32 0, i32 7
  %77 = getelementptr inbounds [2 x %struct.btnode*]* %76, i32 0, i64 1
  store %struct.btnode* null, %struct.btnode** %77, align 8
  %78 = load %struct.btnode** %btn1, align 8
  %79 = getelementptr inbounds %struct.btnode* %78, i32 0, i32 5
  store i64 -1, i64* %79, align 8
  %80 = load %struct.btnode** %btn2, align 8
  %81 = getelementptr inbounds %struct.btnode* %80, i32 0, i32 7
  %82 = getelementptr inbounds [2 x %struct.btnode*]* %81, i32 0, i64 0
  store %struct.btnode* null, %struct.btnode** %82, align 8
  %83 = load %struct.btnode** %btn2, align 8
  %84 = getelementptr inbounds %struct.btnode* %83, i32 0, i32 7
  %85 = getelementptr inbounds [2 x %struct.btnode*]* %84, i32 0, i64 1
  store %struct.btnode* null, %struct.btnode** %85, align 8
  %86 = load %struct.btnode** %btn2, align 8
  %87 = getelementptr inbounds %struct.btnode* %86, i32 0, i32 5
  store i64 -1, i64* %87, align 8
  %88 = load %struct.btnode** %1, align 8
  %89 = getelementptr inbounds %struct.btnode* %88, i32 0, i32 4
  %90 = getelementptr inbounds [3 x i64]* %89, i32 0, i64 0
  %91 = load i64* %90, align 8
  %92 = load %struct.btnode** %btn1, align 8
  %93 = getelementptr inbounds %struct.btnode* %92, i32 0, i32 4
  %94 = getelementptr inbounds [3 x i64]* %93, i32 0, i64 0
  store i64 %91, i64* %94, align 8
  %95 = load %struct.btnode** %1, align 8
  %96 = getelementptr inbounds %struct.btnode* %95, i32 0, i32 4
  %97 = getelementptr inbounds [3 x i64]* %96, i32 0, i64 1
  %98 = load i64* %97, align 8
  %99 = load %struct.btnode** %btn1, align 8
  %100 = getelementptr inbounds %struct.btnode* %99, i32 0, i32 4
  %101 = getelementptr inbounds [3 x i64]* %100, i32 0, i64 1
  store i64 %98, i64* %101, align 8
  %102 = load %struct.btnode** %1, align 8
  %103 = getelementptr inbounds %struct.btnode* %102, i32 0, i32 4
  %104 = getelementptr inbounds [3 x i64]* %103, i32 0, i64 2
  %105 = load i64* %104, align 8
  %106 = load %struct.btnode** %btn1, align 8
  %107 = getelementptr inbounds %struct.btnode* %106, i32 0, i32 4
  %108 = getelementptr inbounds [3 x i64]* %107, i32 0, i64 2
  store i64 %105, i64* %108, align 8
  %109 = load %struct.btnode** %1, align 8
  %110 = getelementptr inbounds %struct.btnode* %109, i32 0, i32 4
  %111 = getelementptr inbounds [3 x i64]* %110, i32 0, i64 0
  %112 = load i64* %111, align 8
  %113 = load %struct.btnode** %btn2, align 8
  %114 = getelementptr inbounds %struct.btnode* %113, i32 0, i32 4
  %115 = getelementptr inbounds [3 x i64]* %114, i32 0, i64 0
  store i64 %112, i64* %115, align 8
  %116 = load %struct.btnode** %1, align 8
  %117 = getelementptr inbounds %struct.btnode* %116, i32 0, i32 4
  %118 = getelementptr inbounds [3 x i64]* %117, i32 0, i64 1
  %119 = load i64* %118, align 8
  %120 = load %struct.btnode** %btn2, align 8
  %121 = getelementptr inbounds %struct.btnode* %120, i32 0, i32 4
  %122 = getelementptr inbounds [3 x i64]* %121, i32 0, i64 1
  store i64 %119, i64* %122, align 8
  %123 = load %struct.btnode** %1, align 8
  %124 = getelementptr inbounds %struct.btnode* %123, i32 0, i32 4
  %125 = getelementptr inbounds [3 x i64]* %124, i32 0, i64 2
  %126 = load i64* %125, align 8
  %127 = load %struct.btnode** %btn2, align 8
  %128 = getelementptr inbounds %struct.btnode* %127, i32 0, i32 4
  %129 = getelementptr inbounds [3 x i64]* %128, i32 0, i64 2
  store i64 %126, i64* %129, align 8
  %130 = load i64* %n1, align 8
  %131 = load i64* %imax, align 8
  %132 = load %struct.btnode** %btn2, align 8
  %133 = getelementptr inbounds %struct.btnode* %132, i32 0, i32 4
  %134 = getelementptr inbounds [3 x i64]* %133, i32 0, i64 %131
  %135 = load i64* %134, align 8
  %136 = add nsw i64 %135, %130
  store i64 %136, i64* %134, align 8
  %137 = load %struct.btnode** %1, align 8
  %138 = getelementptr inbounds %struct.btnode* %137, i32 0, i32 3
  %139 = getelementptr inbounds [3 x i64]* %138, i32 0, i64 0
  %140 = load i64* %139, align 8
  %141 = load %struct.btnode** %btn1, align 8
  %142 = getelementptr inbounds %struct.btnode* %141, i32 0, i32 3
  %143 = getelementptr inbounds [3 x i64]* %142, i32 0, i64 0
  store i64 %140, i64* %143, align 8
  %144 = load %struct.btnode** %1, align 8
  %145 = getelementptr inbounds %struct.btnode* %144, i32 0, i32 3
  %146 = getelementptr inbounds [3 x i64]* %145, i32 0, i64 1
  %147 = load i64* %146, align 8
  %148 = load %struct.btnode** %btn1, align 8
  %149 = getelementptr inbounds %struct.btnode* %148, i32 0, i32 3
  %150 = getelementptr inbounds [3 x i64]* %149, i32 0, i64 1
  store i64 %147, i64* %150, align 8
  %151 = load %struct.btnode** %1, align 8
  %152 = getelementptr inbounds %struct.btnode* %151, i32 0, i32 3
  %153 = getelementptr inbounds [3 x i64]* %152, i32 0, i64 2
  %154 = load i64* %153, align 8
  %155 = load %struct.btnode** %btn1, align 8
  %156 = getelementptr inbounds %struct.btnode* %155, i32 0, i32 3
  %157 = getelementptr inbounds [3 x i64]* %156, i32 0, i64 2
  store i64 %154, i64* %157, align 8
  %158 = load i64* %n1, align 8
  %159 = load i64* %imax, align 8
  %160 = load %struct.btnode** %btn1, align 8
  %161 = getelementptr inbounds %struct.btnode* %160, i32 0, i32 3
  %162 = getelementptr inbounds [3 x i64]* %161, i32 0, i64 %159
  store i64 %158, i64* %162, align 8
  %163 = load %struct.btnode** %1, align 8
  %164 = getelementptr inbounds %struct.btnode* %163, i32 0, i32 3
  %165 = getelementptr inbounds [3 x i64]* %164, i32 0, i64 0
  %166 = load i64* %165, align 8
  %167 = load %struct.btnode** %btn2, align 8
  %168 = getelementptr inbounds %struct.btnode* %167, i32 0, i32 3
  %169 = getelementptr inbounds [3 x i64]* %168, i32 0, i64 0
  store i64 %166, i64* %169, align 8
  %170 = load %struct.btnode** %1, align 8
  %171 = getelementptr inbounds %struct.btnode* %170, i32 0, i32 3
  %172 = getelementptr inbounds [3 x i64]* %171, i32 0, i64 1
  %173 = load i64* %172, align 8
  %174 = load %struct.btnode** %btn2, align 8
  %175 = getelementptr inbounds %struct.btnode* %174, i32 0, i32 3
  %176 = getelementptr inbounds [3 x i64]* %175, i32 0, i64 1
  store i64 %173, i64* %176, align 8
  %177 = load %struct.btnode** %1, align 8
  %178 = getelementptr inbounds %struct.btnode* %177, i32 0, i32 3
  %179 = getelementptr inbounds [3 x i64]* %178, i32 0, i64 2
  %180 = load i64* %179, align 8
  %181 = load %struct.btnode** %btn2, align 8
  %182 = getelementptr inbounds %struct.btnode* %181, i32 0, i32 3
  %183 = getelementptr inbounds [3 x i64]* %182, i32 0, i64 2
  store i64 %180, i64* %183, align 8
  %184 = load i64* %n2, align 8
  %185 = load i64* %imax, align 8
  %186 = load %struct.btnode** %btn2, align 8
  %187 = getelementptr inbounds %struct.btnode* %186, i32 0, i32 3
  %188 = getelementptr inbounds [3 x i64]* %187, i32 0, i64 %185
  store i64 %184, i64* %188, align 8
  %189 = load %struct.btnode** %1, align 8
  %190 = getelementptr inbounds %struct.btnode* %189, i32 0, i32 1
  %191 = getelementptr inbounds [3 x double]* %190, i32 0, i64 0
  %192 = load double* %191, align 8
  %193 = load %struct.btnode** %btn1, align 8
  %194 = getelementptr inbounds %struct.btnode* %193, i32 0, i32 1
  %195 = getelementptr inbounds [3 x double]* %194, i32 0, i64 0
  store double %192, double* %195, align 8
  %196 = load %struct.btnode** %1, align 8
  %197 = getelementptr inbounds %struct.btnode* %196, i32 0, i32 1
  %198 = getelementptr inbounds [3 x double]* %197, i32 0, i64 1
  %199 = load double* %198, align 8
  %200 = load %struct.btnode** %btn1, align 8
  %201 = getelementptr inbounds %struct.btnode* %200, i32 0, i32 1
  %202 = getelementptr inbounds [3 x double]* %201, i32 0, i64 1
  store double %199, double* %202, align 8
  %203 = load %struct.btnode** %1, align 8
  %204 = getelementptr inbounds %struct.btnode* %203, i32 0, i32 1
  %205 = getelementptr inbounds [3 x double]* %204, i32 0, i64 2
  %206 = load double* %205, align 8
  %207 = load %struct.btnode** %btn1, align 8
  %208 = getelementptr inbounds %struct.btnode* %207, i32 0, i32 1
  %209 = getelementptr inbounds [3 x double]* %208, i32 0, i64 2
  store double %206, double* %209, align 8
  %210 = load %struct.btnode** %1, align 8
  %211 = getelementptr inbounds %struct.btnode* %210, i32 0, i32 1
  %212 = getelementptr inbounds [3 x double]* %211, i32 0, i64 0
  %213 = load double* %212, align 8
  %214 = load %struct.btnode** %btn2, align 8
  %215 = getelementptr inbounds %struct.btnode* %214, i32 0, i32 1
  %216 = getelementptr inbounds [3 x double]* %215, i32 0, i64 0
  store double %213, double* %216, align 8
  %217 = load %struct.btnode** %1, align 8
  %218 = getelementptr inbounds %struct.btnode* %217, i32 0, i32 1
  %219 = getelementptr inbounds [3 x double]* %218, i32 0, i64 1
  %220 = load double* %219, align 8
  %221 = load %struct.btnode** %btn2, align 8
  %222 = getelementptr inbounds %struct.btnode* %221, i32 0, i32 1
  %223 = getelementptr inbounds [3 x double]* %222, i32 0, i64 1
  store double %220, double* %223, align 8
  %224 = load %struct.btnode** %1, align 8
  %225 = getelementptr inbounds %struct.btnode* %224, i32 0, i32 1
  %226 = getelementptr inbounds [3 x double]* %225, i32 0, i64 2
  %227 = load double* %226, align 8
  %228 = load %struct.btnode** %btn2, align 8
  %229 = getelementptr inbounds %struct.btnode* %228, i32 0, i32 1
  %230 = getelementptr inbounds [3 x double]* %229, i32 0, i64 2
  store double %227, double* %230, align 8
  %231 = load i64* %imax, align 8
  %232 = load %struct.btnode** %1, align 8
  %233 = getelementptr inbounds %struct.btnode* %232, i32 0, i32 1
  %234 = getelementptr inbounds [3 x double]* %233, i32 0, i64 %231
  %235 = load double* %234, align 8
  %236 = load i64* %n1, align 8
  %237 = sitofp i64 %236 to double
  %238 = load i64* %imax, align 8
  %239 = load %struct.grid** %2, align 8
  %240 = getelementptr inbounds %struct.grid* %239, i32 0, i32 8
  %241 = getelementptr inbounds [3 x double]* %240, i32 0, i64 %238
  %242 = load double* %241, align 8
  %243 = fmul double %237, %242
  %244 = fadd double %235, %243
  %245 = load i64* %imax, align 8
  %246 = load %struct.btnode** %btn2, align 8
  %247 = getelementptr inbounds %struct.btnode* %246, i32 0, i32 1
  %248 = getelementptr inbounds [3 x double]* %247, i32 0, i64 %245
  store double %244, double* %248, align 8
  %249 = load %struct.btnode** %btn1, align 8
  %250 = getelementptr inbounds %struct.btnode* %249, i32 0, i32 1
  %251 = getelementptr inbounds [3 x double]* %250, i32 0, i64 0
  %252 = load double* %251, align 8
  %253 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 0
  %254 = getelementptr inbounds [3 x double]* %253, i32 0, i64 0
  store double %252, double* %254, align 8
  %255 = load %struct.btnode** %btn1, align 8
  %256 = getelementptr inbounds %struct.btnode* %255, i32 0, i32 1
  %257 = getelementptr inbounds [3 x double]* %256, i32 0, i64 1
  %258 = load double* %257, align 8
  %259 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 0
  %260 = getelementptr inbounds [3 x double]* %259, i32 0, i64 1
  store double %258, double* %260, align 8
  %261 = load %struct.btnode** %btn1, align 8
  %262 = getelementptr inbounds %struct.btnode* %261, i32 0, i32 1
  %263 = getelementptr inbounds [3 x double]* %262, i32 0, i64 2
  %264 = load double* %263, align 8
  %265 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 0
  %266 = getelementptr inbounds [3 x double]* %265, i32 0, i64 2
  store double %264, double* %266, align 8
  %267 = load %struct.btnode** %btn1, align 8
  %268 = getelementptr inbounds %struct.btnode* %267, i32 0, i32 1
  %269 = getelementptr inbounds [3 x double]* %268, i32 0, i64 0
  %270 = load double* %269, align 8
  %271 = load %struct.btnode** %btn1, align 8
  %272 = getelementptr inbounds %struct.btnode* %271, i32 0, i32 3
  %273 = getelementptr inbounds [3 x i64]* %272, i32 0, i64 0
  %274 = load i64* %273, align 8
  %275 = sitofp i64 %274 to double
  %276 = load %struct.grid** %2, align 8
  %277 = getelementptr inbounds %struct.grid* %276, i32 0, i32 8
  %278 = getelementptr inbounds [3 x double]* %277, i32 0, i64 0
  %279 = load double* %278, align 8
  %280 = fmul double %275, %279
  %281 = fadd double %270, %280
  %282 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 1
  %283 = getelementptr inbounds [3 x double]* %282, i32 0, i64 0
  store double %281, double* %283, align 8
  %284 = load %struct.btnode** %btn1, align 8
  %285 = getelementptr inbounds %struct.btnode* %284, i32 0, i32 1
  %286 = getelementptr inbounds [3 x double]* %285, i32 0, i64 1
  %287 = load double* %286, align 8
  %288 = load %struct.btnode** %btn1, align 8
  %289 = getelementptr inbounds %struct.btnode* %288, i32 0, i32 3
  %290 = getelementptr inbounds [3 x i64]* %289, i32 0, i64 1
  %291 = load i64* %290, align 8
  %292 = sitofp i64 %291 to double
  %293 = load %struct.grid** %2, align 8
  %294 = getelementptr inbounds %struct.grid* %293, i32 0, i32 8
  %295 = getelementptr inbounds [3 x double]* %294, i32 0, i64 1
  %296 = load double* %295, align 8
  %297 = fmul double %292, %296
  %298 = fadd double %287, %297
  %299 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 1
  %300 = getelementptr inbounds [3 x double]* %299, i32 0, i64 1
  store double %298, double* %300, align 8
  %301 = load %struct.btnode** %btn1, align 8
  %302 = getelementptr inbounds %struct.btnode* %301, i32 0, i32 1
  %303 = getelementptr inbounds [3 x double]* %302, i32 0, i64 2
  %304 = load double* %303, align 8
  %305 = load %struct.btnode** %btn1, align 8
  %306 = getelementptr inbounds %struct.btnode* %305, i32 0, i32 3
  %307 = getelementptr inbounds [3 x i64]* %306, i32 0, i64 2
  %308 = load i64* %307, align 8
  %309 = sitofp i64 %308 to double
  %310 = load %struct.grid** %2, align 8
  %311 = getelementptr inbounds %struct.grid* %310, i32 0, i32 8
  %312 = getelementptr inbounds [3 x double]* %311, i32 0, i64 2
  %313 = load double* %312, align 8
  %314 = fmul double %309, %313
  %315 = fadd double %304, %314
  %316 = getelementptr inbounds %struct.bbox* %b1, i32 0, i32 1
  %317 = getelementptr inbounds [3 x double]* %316, i32 0, i64 2
  store double %315, double* %317, align 8
  %318 = load %struct.btnode** %1, align 8
  %319 = getelementptr inbounds %struct.btnode* %318, i32 0, i32 0
  %320 = load %struct.element*** %319, align 8
  %321 = load %struct.btnode** %1, align 8
  %322 = getelementptr inbounds %struct.btnode* %321, i32 0, i32 2
  %323 = load i64* %322, align 8
  %324 = load %struct.btnode** %btn1, align 8
  %325 = getelementptr inbounds %struct.btnode* %324, i32 0, i32 2
  %326 = call %struct.element** @prims_in_box2(%struct.element** %320, i64 %323, %struct.bbox* byval align 8 %b1, i64* %325)
  %327 = load %struct.btnode** %btn1, align 8
  %328 = getelementptr inbounds %struct.btnode* %327, i32 0, i32 0
  store %struct.element** %326, %struct.element*** %328, align 8
  %329 = load %struct.btnode** %1, align 8
  %330 = getelementptr inbounds %struct.btnode* %329, i32 0, i32 2
  %331 = load i64* %330, align 8
  %332 = load %struct.btnode** %btn1, align 8
  %333 = getelementptr inbounds %struct.btnode* %332, i32 0, i32 6
  store i64 %331, i64* %333, align 8
  %334 = load %struct.btnode** %btn2, align 8
  %335 = getelementptr inbounds %struct.btnode* %334, i32 0, i32 1
  %336 = getelementptr inbounds [3 x double]* %335, i32 0, i64 0
  %337 = load double* %336, align 8
  %338 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 0
  %339 = getelementptr inbounds [3 x double]* %338, i32 0, i64 0
  store double %337, double* %339, align 8
  %340 = load %struct.btnode** %btn2, align 8
  %341 = getelementptr inbounds %struct.btnode* %340, i32 0, i32 1
  %342 = getelementptr inbounds [3 x double]* %341, i32 0, i64 1
  %343 = load double* %342, align 8
  %344 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 0
  %345 = getelementptr inbounds [3 x double]* %344, i32 0, i64 1
  store double %343, double* %345, align 8
  %346 = load %struct.btnode** %btn2, align 8
  %347 = getelementptr inbounds %struct.btnode* %346, i32 0, i32 1
  %348 = getelementptr inbounds [3 x double]* %347, i32 0, i64 2
  %349 = load double* %348, align 8
  %350 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 0
  %351 = getelementptr inbounds [3 x double]* %350, i32 0, i64 2
  store double %349, double* %351, align 8
  %352 = load %struct.btnode** %btn2, align 8
  %353 = getelementptr inbounds %struct.btnode* %352, i32 0, i32 1
  %354 = getelementptr inbounds [3 x double]* %353, i32 0, i64 0
  %355 = load double* %354, align 8
  %356 = load %struct.btnode** %btn2, align 8
  %357 = getelementptr inbounds %struct.btnode* %356, i32 0, i32 3
  %358 = getelementptr inbounds [3 x i64]* %357, i32 0, i64 0
  %359 = load i64* %358, align 8
  %360 = sitofp i64 %359 to double
  %361 = load %struct.grid** %2, align 8
  %362 = getelementptr inbounds %struct.grid* %361, i32 0, i32 8
  %363 = getelementptr inbounds [3 x double]* %362, i32 0, i64 0
  %364 = load double* %363, align 8
  %365 = fmul double %360, %364
  %366 = fadd double %355, %365
  %367 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 1
  %368 = getelementptr inbounds [3 x double]* %367, i32 0, i64 0
  store double %366, double* %368, align 8
  %369 = load %struct.btnode** %btn2, align 8
  %370 = getelementptr inbounds %struct.btnode* %369, i32 0, i32 1
  %371 = getelementptr inbounds [3 x double]* %370, i32 0, i64 1
  %372 = load double* %371, align 8
  %373 = load %struct.btnode** %btn2, align 8
  %374 = getelementptr inbounds %struct.btnode* %373, i32 0, i32 3
  %375 = getelementptr inbounds [3 x i64]* %374, i32 0, i64 1
  %376 = load i64* %375, align 8
  %377 = sitofp i64 %376 to double
  %378 = load %struct.grid** %2, align 8
  %379 = getelementptr inbounds %struct.grid* %378, i32 0, i32 8
  %380 = getelementptr inbounds [3 x double]* %379, i32 0, i64 1
  %381 = load double* %380, align 8
  %382 = fmul double %377, %381
  %383 = fadd double %372, %382
  %384 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 1
  %385 = getelementptr inbounds [3 x double]* %384, i32 0, i64 1
  store double %383, double* %385, align 8
  %386 = load %struct.btnode** %btn2, align 8
  %387 = getelementptr inbounds %struct.btnode* %386, i32 0, i32 1
  %388 = getelementptr inbounds [3 x double]* %387, i32 0, i64 2
  %389 = load double* %388, align 8
  %390 = load %struct.btnode** %btn2, align 8
  %391 = getelementptr inbounds %struct.btnode* %390, i32 0, i32 3
  %392 = getelementptr inbounds [3 x i64]* %391, i32 0, i64 2
  %393 = load i64* %392, align 8
  %394 = sitofp i64 %393 to double
  %395 = load %struct.grid** %2, align 8
  %396 = getelementptr inbounds %struct.grid* %395, i32 0, i32 8
  %397 = getelementptr inbounds [3 x double]* %396, i32 0, i64 2
  %398 = load double* %397, align 8
  %399 = fmul double %394, %398
  %400 = fadd double %389, %399
  %401 = getelementptr inbounds %struct.bbox* %b2, i32 0, i32 1
  %402 = getelementptr inbounds [3 x double]* %401, i32 0, i64 2
  store double %400, double* %402, align 8
  %403 = load %struct.btnode** %1, align 8
  %404 = getelementptr inbounds %struct.btnode* %403, i32 0, i32 0
  %405 = load %struct.element*** %404, align 8
  %406 = load %struct.btnode** %1, align 8
  %407 = getelementptr inbounds %struct.btnode* %406, i32 0, i32 2
  %408 = load i64* %407, align 8
  %409 = load %struct.btnode** %btn2, align 8
  %410 = getelementptr inbounds %struct.btnode* %409, i32 0, i32 2
  %411 = call %struct.element** @prims_in_box2(%struct.element** %405, i64 %408, %struct.bbox* byval align 8 %b2, i64* %410)
  %412 = load %struct.btnode** %btn2, align 8
  %413 = getelementptr inbounds %struct.btnode* %412, i32 0, i32 0
  store %struct.element** %411, %struct.element*** %413, align 8
  %414 = load %struct.btnode** %1, align 8
  %415 = getelementptr inbounds %struct.btnode* %414, i32 0, i32 2
  %416 = load i64* %415, align 8
  %417 = load %struct.btnode** %btn2, align 8
  %418 = getelementptr inbounds %struct.btnode* %417, i32 0, i32 6
  store i64 %416, i64* %418, align 8
  br label %419

; <label>:419                                     ; preds = %46, %30
  %420 = load %struct.btnode** %btn1, align 8
  %421 = getelementptr inbounds %struct.btnode* %420, i32 0, i32 3
  %422 = getelementptr inbounds [3 x i64]* %421, i32 0, i64 0
  %423 = load i64* %422, align 8
  %424 = icmp eq i64 %423, 1
  br i1 %424, label %425, label %438

; <label>:425                                     ; preds = %419
  %426 = load %struct.btnode** %btn1, align 8
  %427 = getelementptr inbounds %struct.btnode* %426, i32 0, i32 3
  %428 = getelementptr inbounds [3 x i64]* %427, i32 0, i64 1
  %429 = load i64* %428, align 8
  %430 = icmp eq i64 %429, 1
  br i1 %430, label %431, label %438

; <label>:431                                     ; preds = %425
  %432 = load %struct.btnode** %btn1, align 8
  %433 = getelementptr inbounds %struct.btnode* %432, i32 0, i32 3
  %434 = getelementptr inbounds [3 x i64]* %433, i32 0, i64 2
  %435 = load i64* %434, align 8
  %436 = icmp eq i64 %435, 1
  br i1 %436, label %437, label %438

; <label>:437                                     ; preds = %431
  br label %438

; <label>:438                                     ; preds = %437, %431, %425, %419
  %439 = load %struct.btnode** %btn2, align 8
  %440 = getelementptr inbounds %struct.btnode* %439, i32 0, i32 3
  %441 = getelementptr inbounds [3 x i64]* %440, i32 0, i64 0
  %442 = load i64* %441, align 8
  %443 = icmp eq i64 %442, 1
  br i1 %443, label %444, label %457

; <label>:444                                     ; preds = %438
  %445 = load %struct.btnode** %btn2, align 8
  %446 = getelementptr inbounds %struct.btnode* %445, i32 0, i32 3
  %447 = getelementptr inbounds [3 x i64]* %446, i32 0, i64 1
  %448 = load i64* %447, align 8
  %449 = icmp eq i64 %448, 1
  br i1 %449, label %450, label %457

; <label>:450                                     ; preds = %444
  %451 = load %struct.btnode** %btn2, align 8
  %452 = getelementptr inbounds %struct.btnode* %451, i32 0, i32 3
  %453 = getelementptr inbounds [3 x i64]* %452, i32 0, i64 2
  %454 = load i64* %453, align 8
  %455 = icmp eq i64 %454, 1
  br i1 %455, label %456, label %457

; <label>:456                                     ; preds = %450
  br label %457

; <label>:457                                     ; preds = %456, %450, %444, %438
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @create_bintree(%struct.btnode* %root, %struct.grid* %g) {
  %1 = alloca %struct.btnode*, align 8
  %2 = alloca %struct.grid*, align 8
  %btn = alloca %struct.btnode*, align 8
  store %struct.btnode* %root, %struct.btnode** %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  %3 = load %struct.btnode** %1, align 8
  store %struct.btnode* %3, %struct.btnode** %btn, align 8
  %4 = load %struct.btnode** %btn, align 8
  %5 = getelementptr inbounds %struct.btnode* %4, i32 0, i32 3
  %6 = getelementptr inbounds [3 x i64]* %5, i32 0, i64 0
  %7 = load i64* %6, align 8
  %8 = icmp ne i64 %7, 1
  br i1 %8, label %21, label %9

; <label>:9                                       ; preds = %0
  %10 = load %struct.btnode** %btn, align 8
  %11 = getelementptr inbounds %struct.btnode* %10, i32 0, i32 3
  %12 = getelementptr inbounds [3 x i64]* %11, i32 0, i64 1
  %13 = load i64* %12, align 8
  %14 = icmp ne i64 %13, 1
  br i1 %14, label %21, label %15

; <label>:15                                      ; preds = %9
  %16 = load %struct.btnode** %btn, align 8
  %17 = getelementptr inbounds %struct.btnode* %16, i32 0, i32 3
  %18 = getelementptr inbounds [3 x i64]* %17, i32 0, i64 2
  %19 = load i64* %18, align 8
  %20 = icmp ne i64 %19, 1
  br i1 %20, label %21, label %40

; <label>:21                                      ; preds = %15, %9, %0
  %22 = load %struct.btnode** %btn, align 8
  %23 = load %struct.grid** %2, align 8
  call void @subdiv_bintree(%struct.btnode* %22, %struct.grid* %23)
  %24 = load %struct.btnode** %btn, align 8
  %25 = getelementptr inbounds %struct.btnode* %24, i32 0, i32 7
  %26 = getelementptr inbounds [2 x %struct.btnode*]* %25, i32 0, i64 0
  %27 = load %struct.btnode** %26, align 8
  %28 = load %struct.grid** %2, align 8
  call void @create_bintree(%struct.btnode* %27, %struct.grid* %28)
  %29 = load %struct.btnode** %btn, align 8
  %30 = getelementptr inbounds %struct.btnode* %29, i32 0, i32 7
  %31 = getelementptr inbounds [2 x %struct.btnode*]* %30, i32 0, i64 1
  %32 = load %struct.btnode** %31, align 8
  %33 = load %struct.grid** %2, align 8
  call void @create_bintree(%struct.btnode* %32, %struct.grid* %33)
  %34 = load %struct.btnode** %btn, align 8
  %35 = getelementptr inbounds %struct.btnode* %34, i32 0, i32 2
  %36 = load i64* %35, align 8
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %21
  br label %39

; <label>:39                                      ; preds = %38, %21
  br label %40

; <label>:40                                      ; preds = %39, %15
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.element** @bintree_lookup(%struct.btnode* %root, i64 %i, i64 %j, i64 %k, %struct.grid* %g, i64* %n) {
  %1 = alloca %struct.element**, align 8
  %2 = alloca %struct.btnode*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.grid*, align 8
  %7 = alloca i64*, align 8
  %l = alloca i64, align 8
  %x = alloca i64, align 8
  %ijk = alloca [3 x i64], align 16
  %child = alloca i64, align 8
  %idiv = alloca i64, align 8
  %pepa = alloca %struct.element**, align 8
  %btn = alloca %struct.btnode*, align 8
  store %struct.btnode* %root, %struct.btnode** %2, align 8
  store i64 %i, i64* %3, align 8
  store i64 %j, i64* %4, align 8
  store i64 %k, i64* %5, align 8
  store %struct.grid* %g, %struct.grid** %6, align 8
  store i64* %n, i64** %7, align 8
  %8 = load i64* %3, align 8
  %9 = getelementptr inbounds [3 x i64]* %ijk, i32 0, i64 0
  store i64 %8, i64* %9, align 8
  %10 = load i64* %4, align 8
  %11 = getelementptr inbounds [3 x i64]* %ijk, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  %12 = load i64* %5, align 8
  %13 = getelementptr inbounds [3 x i64]* %ijk, i32 0, i64 2
  store i64 %12, i64* %13, align 8
  %14 = load %struct.btnode** %2, align 8
  store %struct.btnode* %14, %struct.btnode** %btn, align 8
  %15 = load %struct.btnode** %btn, align 8
  %16 = icmp eq %struct.btnode* %15, null
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %0
  %18 = load i64** %7, align 8
  store i64 0, i64* %18, align 8
  store %struct.element** null, %struct.element*** %1
  br label %111

; <label>:19                                      ; preds = %0
  br label %20

; <label>:20                                      ; preds = %101, %19
  %21 = load %struct.btnode** %btn, align 8
  %22 = getelementptr inbounds %struct.btnode* %21, i32 0, i32 3
  %23 = getelementptr inbounds [3 x i64]* %22, i32 0, i64 0
  %24 = load i64* %23, align 8
  %25 = icmp ne i64 %24, 1
  br i1 %25, label %38, label %26

; <label>:26                                      ; preds = %20
  %27 = load %struct.btnode** %btn, align 8
  %28 = getelementptr inbounds %struct.btnode* %27, i32 0, i32 3
  %29 = getelementptr inbounds [3 x i64]* %28, i32 0, i64 1
  %30 = load i64* %29, align 8
  %31 = icmp ne i64 %30, 1
  br i1 %31, label %38, label %32

; <label>:32                                      ; preds = %26
  %33 = load %struct.btnode** %btn, align 8
  %34 = getelementptr inbounds %struct.btnode* %33, i32 0, i32 3
  %35 = getelementptr inbounds [3 x i64]* %34, i32 0, i64 2
  %36 = load i64* %35, align 8
  %37 = icmp ne i64 %36, 1
  br label %38

; <label>:38                                      ; preds = %32, %26, %20
  %39 = phi i1 [ true, %26 ], [ true, %20 ], [ %37, %32 ]
  br i1 %39, label %40, label %102

; <label>:40                                      ; preds = %38
  %41 = load %struct.btnode** %btn, align 8
  %42 = getelementptr inbounds %struct.btnode* %41, i32 0, i32 5
  %43 = load i64* %42, align 8
  %44 = icmp eq i64 %43, -1
  br i1 %44, label %45, label %66

; <label>:45                                      ; preds = %40
  %46 = load %struct._IO_FILE** @stderr, align 8
  %47 = load %struct.btnode** %btn, align 8
  %48 = getelementptr inbounds %struct.btnode* %47, i32 0, i32 3
  %49 = getelementptr inbounds [3 x i64]* %48, i32 0, i64 0
  %50 = load i64* %49, align 8
  %51 = load %struct.btnode** %btn, align 8
  %52 = getelementptr inbounds %struct.btnode* %51, i32 0, i32 3
  %53 = getelementptr inbounds [3 x i64]* %52, i32 0, i64 1
  %54 = load i64* %53, align 8
  %55 = load %struct.btnode** %btn, align 8
  %56 = getelementptr inbounds %struct.btnode* %55, i32 0, i32 3
  %57 = getelementptr inbounds [3 x i64]* %56, i32 0, i64 2
  %58 = load i64* %57, align 8
  %59 = load %struct.btnode** %btn, align 8
  %60 = getelementptr inbounds %struct.btnode* %59, i32 0, i32 5
  %61 = load i64* %60, align 8
  %62 = load %struct.btnode** %btn, align 8
  %63 = getelementptr inbounds %struct.btnode* %62, i32 0, i32 2
  %64 = load i64* %63, align 8
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([66 x i8]* @.str.15, i32 0, i32 0), i64 %50, i64 %54, i64 %58, i64 %61, i64 %64)
  call void @exit(i32 -1)
  unreachable

; <label>:66                                      ; preds = %40
  store i64 0, i64* %child, align 8
  %67 = load %struct.btnode** %btn, align 8
  %68 = getelementptr inbounds %struct.btnode* %67, i32 0, i32 5
  %69 = load i64* %68, align 8
  %70 = load %struct.btnode** %btn, align 8
  %71 = getelementptr inbounds %struct.btnode* %70, i32 0, i32 3
  %72 = getelementptr inbounds [3 x i64]* %71, i32 0, i64 %69
  %73 = load i64* %72, align 8
  %74 = sdiv i64 %73, 2
  store i64 %74, i64* %idiv, align 8
  %75 = load %struct.btnode** %btn, align 8
  %76 = getelementptr inbounds %struct.btnode* %75, i32 0, i32 5
  %77 = load i64* %76, align 8
  %78 = getelementptr inbounds [3 x i64]* %ijk, i32 0, i64 %77
  %79 = load i64* %78, align 8
  %80 = add nsw i64 %79, 1
  %81 = load i64* %idiv, align 8
  %82 = icmp sgt i64 %80, %81
  br i1 %82, label %83, label %91

; <label>:83                                      ; preds = %66
  store i64 1, i64* %child, align 8
  %84 = load i64* %idiv, align 8
  %85 = load %struct.btnode** %btn, align 8
  %86 = getelementptr inbounds %struct.btnode* %85, i32 0, i32 5
  %87 = load i64* %86, align 8
  %88 = getelementptr inbounds [3 x i64]* %ijk, i32 0, i64 %87
  %89 = load i64* %88, align 8
  %90 = sub nsw i64 %89, %84
  store i64 %90, i64* %88, align 8
  br label %91

; <label>:91                                      ; preds = %83, %66
  %92 = load i64* %child, align 8
  %93 = load %struct.btnode** %btn, align 8
  %94 = getelementptr inbounds %struct.btnode* %93, i32 0, i32 7
  %95 = getelementptr inbounds [2 x %struct.btnode*]* %94, i32 0, i64 %92
  %96 = load %struct.btnode** %95, align 8
  store %struct.btnode* %96, %struct.btnode** %btn, align 8
  %97 = load %struct.btnode** %btn, align 8
  %98 = icmp eq %struct.btnode* %97, null
  br i1 %98, label %99, label %101

; <label>:99                                      ; preds = %91
  %100 = load i64** %7, align 8
  store i64 0, i64* %100, align 8
  store %struct.element** null, %struct.element*** %1
  br label %111

; <label>:101                                     ; preds = %91
  br label %20

; <label>:102                                     ; preds = %38
  %103 = load %struct.btnode** %btn, align 8
  %104 = getelementptr inbounds %struct.btnode* %103, i32 0, i32 2
  %105 = load i64* %104, align 8
  %106 = load i64** %7, align 8
  store i64 %105, i64* %106, align 8
  %107 = load %struct.btnode** %btn, align 8
  %108 = getelementptr inbounds %struct.btnode* %107, i32 0, i32 0
  %109 = load %struct.element*** %108, align 8
  store %struct.element** %109, %struct.element*** %pepa, align 8
  %110 = load %struct.element*** %pepa, align 8
  store %struct.element** %110, %struct.element*** %1
  br label %111

; <label>:111                                     ; preds = %102, %99, %17
  %112 = load %struct.element*** %1
  ret %struct.element** %112
}

; Function Attrs: noreturn
declare void @exit(i32)

; Function Attrs: nounwind uwtable
define internal void @deleteBinTree(%struct.btnode* %binTree) {
  %1 = alloca %struct.btnode*, align 8
  %left = alloca %struct.btnode*, align 8
  %right = alloca %struct.btnode*, align 8
  store %struct.btnode* %binTree, %struct.btnode** %1, align 8
  %2 = load %struct.btnode** %1, align 8
  %3 = icmp ne %struct.btnode* %2, null
  br i1 %3, label %4, label %15

; <label>:4                                       ; preds = %0
  %5 = load %struct.btnode** %1, align 8
  %6 = getelementptr inbounds %struct.btnode* %5, i32 0, i32 7
  %7 = getelementptr inbounds [2 x %struct.btnode*]* %6, i32 0, i64 0
  %8 = load %struct.btnode** %7, align 8
  store %struct.btnode* %8, %struct.btnode** %left, align 8
  %9 = load %struct.btnode** %1, align 8
  %10 = getelementptr inbounds %struct.btnode* %9, i32 0, i32 7
  %11 = getelementptr inbounds [2 x %struct.btnode*]* %10, i32 0, i64 1
  %12 = load %struct.btnode** %11, align 8
  store %struct.btnode* %12, %struct.btnode** %right, align 8
  %13 = load %struct.btnode** %left, align 8
  call void @deleteBinTree(%struct.btnode* %13)
  %14 = load %struct.btnode** %right, align 8
  call void @deleteBinTree(%struct.btnode* %14)
  br label %15

; <label>:15                                      ; preds = %4, %0
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.grid* @create_grid(%struct.voxel* %v, %struct.grid* %g, i64 %num_prims) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.grid*, align 8
  %3 = alloca i64, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %r = alloca i64, align 8
  %nprims = alloca i64, align 8
  %index1D = alloca i64, align 8
  %ec = alloca i64*, align 8
  %pc = alloca i64*, align 8
  %nec = alloca double, align 8
  %unsgn = alloca double, align 8
  %ncells = alloca double, align 8
  %ng = alloca %struct.grid*, align 8
  %nng = alloca %struct.grid*, align 8
  %b = alloca %struct.bbox, align 8
  %nv = alloca %struct.voxel*, align 8
  %ht = alloca %struct.voxel**, align 8
  %bintree = alloca %struct.btnode*, align 8
  %pepa = alloca %struct.element**, align 8
  store %struct.voxel* %v, %struct.voxel** %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  store i64 %num_prims, i64* %3, align 8
  %4 = call i8* @ObjectMalloc(i64 0, i64 1)
  %5 = bitcast i8* %4 to %struct.grid*
  store %struct.grid* %5, %struct.grid** %ng, align 8
  %6 = load i64* @grids, align 8
  %7 = add nsw i64 %6, 1
  store i64 %7, i64* @grids, align 8
  %8 = load %struct.grid** %ng, align 8
  %9 = getelementptr inbounds %struct.grid* %8, i32 0, i32 0
  store i64 %6, i64* %9, align 8
  %10 = load i64* @hu_numbuckets, align 8
  %11 = call i8* @ObjectMalloc(i64 2, i64 %10)
  %12 = bitcast i8* %11 to %struct.voxel**
  store %struct.voxel** %12, %struct.voxel*** %ht, align 8
  %13 = load %struct.voxel*** %ht, align 8
  %14 = load %struct.grid** %ng, align 8
  %15 = getelementptr inbounds %struct.grid* %14, i32 0, i32 1
  store %struct.voxel** %13, %struct.voxel*** %15, align 8
  %16 = load i64* @hu_gridsize, align 8
  %17 = load i64* @hu_gridsize, align 8
  %18 = mul nsw i64 %16, %17
  %19 = load i64* @hu_gridsize, align 8
  %20 = mul nsw i64 %18, %19
  %21 = sitofp i64 %20 to double
  store double %21, double* %ncells, align 8
  %22 = load double* %ncells, align 8
  %23 = load i64* @total_cells, align 8
  %24 = sitofp i64 %23 to double
  %25 = fadd double %24, %22
  %26 = fptosi double %25 to i64
  store i64 %26, i64* @total_cells, align 8
  %27 = load double* %ncells, align 8
  %28 = fptosi double %27 to i64
  %29 = call i8* @ObjectMalloc(i64 3, i64 %28)
  %30 = bitcast i8* %29 to i64*
  store i64* %30, i64** %ec, align 8
  %31 = load i64** %ec, align 8
  %32 = load %struct.grid** %ng, align 8
  %33 = getelementptr inbounds %struct.grid* %32, i32 0, i32 2
  store i64* %31, i64** %33, align 8
  %34 = load i64* %3, align 8
  %35 = load %struct.grid** %ng, align 8
  %36 = getelementptr inbounds %struct.grid* %35, i32 0, i32 4
  store i64 %34, i64* %36, align 8
  %37 = load %struct.voxel** %1, align 8
  %38 = getelementptr inbounds %struct.voxel* %37, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to %struct.element**
  %41 = load %struct.grid** %ng, align 8
  %42 = getelementptr inbounds %struct.grid* %41, i32 0, i32 3
  store %struct.element** %40, %struct.element*** %42, align 8
  %43 = load %struct.grid** %ng, align 8
  %44 = getelementptr inbounds %struct.grid* %43, i32 0, i32 5
  %45 = getelementptr inbounds [3 x i64]* %44, i32 0, i64 0
  store i64 1, i64* %45, align 8
  %46 = load i64* @hu_gridsize, align 8
  %47 = load %struct.grid** %ng, align 8
  %48 = getelementptr inbounds %struct.grid* %47, i32 0, i32 5
  %49 = getelementptr inbounds [3 x i64]* %48, i32 0, i64 1
  store i64 %46, i64* %49, align 8
  %50 = load i64* @hu_gridsize, align 8
  %51 = load i64* @hu_gridsize, align 8
  %52 = mul nsw i64 %50, %51
  %53 = load %struct.grid** %ng, align 8
  %54 = getelementptr inbounds %struct.grid* %53, i32 0, i32 5
  %55 = getelementptr inbounds [3 x i64]* %54, i32 0, i64 2
  store i64 %52, i64* %55, align 8
  %56 = load i64* @hu_numbuckets, align 8
  %57 = load %struct.grid** %ng, align 8
  %58 = getelementptr inbounds %struct.grid* %57, i32 0, i32 6
  store i64 %56, i64* %58, align 8
  %59 = load %struct.voxel** %1, align 8
  %60 = getelementptr inbounds %struct.voxel* %59, i32 0, i32 0
  %61 = load i64* %60, align 8
  %62 = load %struct.grid** %2, align 8
  %63 = getelementptr inbounds %struct.grid* %62, i32 0, i32 5
  %64 = getelementptr inbounds [3 x i64]* %63, i32 0, i64 2
  %65 = load i64* %64, align 8
  %66 = sdiv i64 %61, %65
  store i64 %66, i64* %k, align 8
  %67 = load %struct.voxel** %1, align 8
  %68 = getelementptr inbounds %struct.voxel* %67, i32 0, i32 0
  %69 = load i64* %68, align 8
  %70 = load i64* %k, align 8
  %71 = load %struct.grid** %2, align 8
  %72 = getelementptr inbounds %struct.grid* %71, i32 0, i32 5
  %73 = getelementptr inbounds [3 x i64]* %72, i32 0, i64 2
  %74 = load i64* %73, align 8
  %75 = mul nsw i64 %70, %74
  %76 = sub nsw i64 %69, %75
  store i64 %76, i64* %r, align 8
  %77 = load i64* %r, align 8
  %78 = load %struct.grid** %2, align 8
  %79 = getelementptr inbounds %struct.grid* %78, i32 0, i32 5
  %80 = getelementptr inbounds [3 x i64]* %79, i32 0, i64 1
  %81 = load i64* %80, align 8
  %82 = sdiv i64 %77, %81
  store i64 %82, i64* %j, align 8
  %83 = load i64* %r, align 8
  %84 = load i64* %j, align 8
  %85 = load %struct.grid** %2, align 8
  %86 = getelementptr inbounds %struct.grid* %85, i32 0, i32 5
  %87 = getelementptr inbounds [3 x i64]* %86, i32 0, i64 1
  %88 = load i64* %87, align 8
  %89 = mul nsw i64 %84, %88
  %90 = sub nsw i64 %83, %89
  store i64 %90, i64* %i, align 8
  %91 = load %struct.grid** %2, align 8
  %92 = getelementptr inbounds %struct.grid* %91, i32 0, i32 7
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 0
  %94 = load double* %93, align 8
  %95 = load i64* %i, align 8
  %96 = sitofp i64 %95 to double
  %97 = load %struct.grid** %2, align 8
  %98 = getelementptr inbounds %struct.grid* %97, i32 0, i32 8
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 0
  %100 = load double* %99, align 8
  %101 = fmul double %96, %100
  %102 = fadd double %94, %101
  %103 = load %struct.grid** %ng, align 8
  %104 = getelementptr inbounds %struct.grid* %103, i32 0, i32 7
  %105 = getelementptr inbounds [3 x double]* %104, i32 0, i64 0
  store double %102, double* %105, align 8
  %106 = load %struct.grid** %2, align 8
  %107 = getelementptr inbounds %struct.grid* %106, i32 0, i32 7
  %108 = getelementptr inbounds [3 x double]* %107, i32 0, i64 1
  %109 = load double* %108, align 8
  %110 = load i64* %j, align 8
  %111 = sitofp i64 %110 to double
  %112 = load %struct.grid** %2, align 8
  %113 = getelementptr inbounds %struct.grid* %112, i32 0, i32 8
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 1
  %115 = load double* %114, align 8
  %116 = fmul double %111, %115
  %117 = fadd double %109, %116
  %118 = load %struct.grid** %ng, align 8
  %119 = getelementptr inbounds %struct.grid* %118, i32 0, i32 7
  %120 = getelementptr inbounds [3 x double]* %119, i32 0, i64 1
  store double %117, double* %120, align 8
  %121 = load %struct.grid** %2, align 8
  %122 = getelementptr inbounds %struct.grid* %121, i32 0, i32 7
  %123 = getelementptr inbounds [3 x double]* %122, i32 0, i64 2
  %124 = load double* %123, align 8
  %125 = load i64* %k, align 8
  %126 = sitofp i64 %125 to double
  %127 = load %struct.grid** %2, align 8
  %128 = getelementptr inbounds %struct.grid* %127, i32 0, i32 8
  %129 = getelementptr inbounds [3 x double]* %128, i32 0, i64 2
  %130 = load double* %129, align 8
  %131 = fmul double %126, %130
  %132 = fadd double %124, %131
  %133 = load %struct.grid** %ng, align 8
  %134 = getelementptr inbounds %struct.grid* %133, i32 0, i32 7
  %135 = getelementptr inbounds [3 x double]* %134, i32 0, i64 2
  store double %132, double* %135, align 8
  %136 = load %struct.grid** %2, align 8
  %137 = getelementptr inbounds %struct.grid* %136, i32 0, i32 8
  %138 = getelementptr inbounds [3 x double]* %137, i32 0, i64 0
  %139 = load double* %138, align 8
  %140 = load %struct.grid** %ng, align 8
  %141 = getelementptr inbounds %struct.grid* %140, i32 0, i32 5
  %142 = getelementptr inbounds [3 x i64]* %141, i32 0, i64 1
  %143 = load i64* %142, align 8
  %144 = sitofp i64 %143 to double
  %145 = fdiv double %139, %144
  %146 = load %struct.grid** %ng, align 8
  %147 = getelementptr inbounds %struct.grid* %146, i32 0, i32 8
  %148 = getelementptr inbounds [3 x double]* %147, i32 0, i64 0
  store double %145, double* %148, align 8
  %149 = load %struct.grid** %2, align 8
  %150 = getelementptr inbounds %struct.grid* %149, i32 0, i32 8
  %151 = getelementptr inbounds [3 x double]* %150, i32 0, i64 1
  %152 = load double* %151, align 8
  %153 = load %struct.grid** %ng, align 8
  %154 = getelementptr inbounds %struct.grid* %153, i32 0, i32 5
  %155 = getelementptr inbounds [3 x i64]* %154, i32 0, i64 1
  %156 = load i64* %155, align 8
  %157 = sitofp i64 %156 to double
  %158 = fdiv double %152, %157
  %159 = load %struct.grid** %ng, align 8
  %160 = getelementptr inbounds %struct.grid* %159, i32 0, i32 8
  %161 = getelementptr inbounds [3 x double]* %160, i32 0, i64 1
  store double %158, double* %161, align 8
  %162 = load %struct.grid** %2, align 8
  %163 = getelementptr inbounds %struct.grid* %162, i32 0, i32 8
  %164 = getelementptr inbounds [3 x double]* %163, i32 0, i64 2
  %165 = load double* %164, align 8
  %166 = load %struct.grid** %ng, align 8
  %167 = getelementptr inbounds %struct.grid* %166, i32 0, i32 5
  %168 = getelementptr inbounds [3 x i64]* %167, i32 0, i64 1
  %169 = load i64* %168, align 8
  %170 = sitofp i64 %169 to double
  %171 = fdiv double %165, %170
  %172 = load %struct.grid** %ng, align 8
  %173 = getelementptr inbounds %struct.grid* %172, i32 0, i32 8
  %174 = getelementptr inbounds [3 x double]* %173, i32 0, i64 2
  store double %171, double* %174, align 8
  %175 = load %struct.grid** %2, align 8
  %176 = getelementptr inbounds %struct.grid* %175, i32 0, i32 9
  %177 = load i64* %176, align 8
  %178 = add nsw i64 %177, 1
  %179 = load %struct.grid** %ng, align 8
  %180 = getelementptr inbounds %struct.grid* %179, i32 0, i32 9
  store i64 %178, i64* %180, align 8
  %181 = load %struct.grid** @gridlist, align 8
  %182 = load %struct.grid** %ng, align 8
  %183 = getelementptr inbounds %struct.grid* %182, i32 0, i32 11
  store %struct.grid* %181, %struct.grid** %183, align 8
  %184 = load %struct.grid** %ng, align 8
  store %struct.grid* %184, %struct.grid** @gridlist, align 8
  %185 = load %struct.grid** %ng, align 8
  %186 = call %struct.btnode* @init_bintree(%struct.grid* %185)
  store %struct.btnode* %186, %struct.btnode** %bintree, align 8
  %187 = load %struct.btnode** %bintree, align 8
  %188 = load %struct.grid** %ng, align 8
  call void @create_bintree(%struct.btnode* %187, %struct.grid* %188)
  store i64 0, i64* %index1D, align 8
  %189 = load i64* @hu_gridsize, align 8
  store i64 %189, i64* %n, align 8
  store i64 0, i64* %k, align 8
  br label %190

; <label>:190                                     ; preds = %271, %0
  %191 = load i64* %k, align 8
  %192 = load i64* %n, align 8
  %193 = icmp slt i64 %191, %192
  br i1 %193, label %194, label %274

; <label>:194                                     ; preds = %190
  store i64 0, i64* %j, align 8
  br label %195

; <label>:195                                     ; preds = %267, %194
  %196 = load i64* %j, align 8
  %197 = load i64* %n, align 8
  %198 = icmp slt i64 %196, %197
  br i1 %198, label %199, label %270

; <label>:199                                     ; preds = %195
  store i64 0, i64* %i, align 8
  br label %200

; <label>:200                                     ; preds = %263, %199
  %201 = load i64* %i, align 8
  %202 = load i64* %n, align 8
  %203 = icmp slt i64 %201, %202
  br i1 %203, label %204, label %266

; <label>:204                                     ; preds = %200
  %205 = load %struct.btnode** %bintree, align 8
  %206 = load i64* %i, align 8
  %207 = load i64* %j, align 8
  %208 = load i64* %k, align 8
  %209 = load %struct.grid** %ng, align 8
  %210 = call %struct.element** @bintree_lookup(%struct.btnode* %205, i64 %206, i64 %207, i64 %208, %struct.grid* %209, i64* %nprims)
  store %struct.element** %210, %struct.element*** %pepa, align 8
  %211 = load %struct.element*** %pepa, align 8
  %212 = icmp ne %struct.element** %211, null
  br i1 %212, label %213, label %255

; <label>:213                                     ; preds = %204
  %214 = load i64* @nonempty_voxels, align 8
  %215 = add nsw i64 %214, 1
  store i64 %215, i64* @nonempty_voxels, align 8
  %216 = load i64* %index1D, align 8
  %217 = load %struct.grid** %ng, align 8
  call void @mark_nonempty(i64 %216, %struct.grid* %217)
  %218 = call i8* @ObjectMalloc(i64 1, i64 1)
  %219 = bitcast i8* %218 to %struct.voxel*
  store %struct.voxel* %219, %struct.voxel** %nv, align 8
  %220 = load i64* %index1D, align 8
  %221 = load %struct.voxel** %nv, align 8
  %222 = getelementptr inbounds %struct.voxel* %221, i32 0, i32 0
  store i64 %220, i64* %222, align 8
  %223 = load %struct.voxel** %nv, align 8
  %224 = getelementptr inbounds %struct.voxel* %223, i32 0, i32 2
  store i8 2, i8* %224, align 1
  %225 = load %struct.element*** %pepa, align 8
  %226 = bitcast %struct.element** %225 to i8*
  %227 = load %struct.voxel** %nv, align 8
  %228 = getelementptr inbounds %struct.voxel* %227, i32 0, i32 1
  store i8* %226, i8** %228, align 8
  %229 = load i64* %nprims, align 8
  %230 = load %struct.voxel** %nv, align 8
  %231 = getelementptr inbounds %struct.voxel* %230, i32 0, i32 3
  store i64 %229, i64* %231, align 8
  %232 = load i64* %nprims, align 8
  %233 = load i64* @hu_max_prims_cell, align 8
  %234 = icmp sgt i64 %232, %233
  br i1 %234, label %235, label %246

; <label>:235                                     ; preds = %213
  %236 = load %struct.grid** %ng, align 8
  %237 = getelementptr inbounds %struct.grid* %236, i32 0, i32 9
  %238 = load i64* %237, align 8
  %239 = load i64* @hu_max_subdiv_level, align 8
  %240 = icmp slt i64 %238, %239
  br i1 %240, label %241, label %246

; <label>:241                                     ; preds = %235
  %242 = load %struct.voxel** %nv, align 8
  %243 = load %struct.grid** %ng, align 8
  %244 = load i64* %nprims, align 8
  %245 = call %struct.grid* @create_grid(%struct.voxel* %242, %struct.grid* %243, i64 %244)
  store %struct.grid* %245, %struct.grid** %nng, align 8
  br label %252

; <label>:246                                     ; preds = %235, %213
  %247 = load i64* @nonempty_leafs, align 8
  %248 = add nsw i64 %247, 1
  store i64 %248, i64* @nonempty_leafs, align 8
  %249 = load i64* %nprims, align 8
  %250 = load i64* @prims_in_leafs, align 8
  %251 = add nsw i64 %250, %249
  store i64 %251, i64* @prims_in_leafs, align 8
  br label %252

; <label>:252                                     ; preds = %246, %241
  %253 = load %struct.voxel** %nv, align 8
  %254 = load %struct.grid** %ng, align 8
  call void @insert_in_hashtable(%struct.voxel* %253, %struct.grid* %254)
  br label %260

; <label>:255                                     ; preds = %204
  %256 = load i64* @empty_voxels, align 8
  %257 = add nsw i64 %256, 1
  store i64 %257, i64* @empty_voxels, align 8
  %258 = load i64* %index1D, align 8
  %259 = load %struct.grid** %ng, align 8
  call void @mark_empty(i64 %258, %struct.grid* %259)
  br label %260

; <label>:260                                     ; preds = %255, %252
  %261 = load i64* %index1D, align 8
  %262 = add nsw i64 %261, 1
  store i64 %262, i64* %index1D, align 8
  br label %263

; <label>:263                                     ; preds = %260
  %264 = load i64* %i, align 8
  %265 = add nsw i64 %264, 1
  store i64 %265, i64* %i, align 8
  br label %200

; <label>:266                                     ; preds = %200
  br label %267

; <label>:267                                     ; preds = %266
  %268 = load i64* %j, align 8
  %269 = add nsw i64 %268, 1
  store i64 %269, i64* %j, align 8
  br label %195

; <label>:270                                     ; preds = %195
  br label %271

; <label>:271                                     ; preds = %270
  %272 = load i64* %k, align 8
  %273 = add nsw i64 %272, 1
  store i64 %273, i64* %k, align 8
  br label %190

; <label>:274                                     ; preds = %190
  %275 = load %struct.grid** %ng, align 8
  %276 = bitcast %struct.grid* %275 to i8*
  %277 = load %struct.voxel** %1, align 8
  %278 = getelementptr inbounds %struct.voxel* %277, i32 0, i32 1
  store i8* %276, i8** %278, align 8
  %279 = load %struct.voxel** %1, align 8
  %280 = getelementptr inbounds %struct.voxel* %279, i32 0, i32 3
  store i64 -1, i64* %280, align 8
  %281 = load %struct.voxel** %1, align 8
  %282 = getelementptr inbounds %struct.voxel* %281, i32 0, i32 2
  store i8 3, i8* %282, align 1
  %283 = load %struct.btnode** %bintree, align 8
  call void @deleteBinTree(%struct.btnode* %283)
  %284 = load %struct.grid** %ng, align 8
  ret %struct.grid* %284
}

; Function Attrs: nounwind uwtable
define internal void @PrintEnv() {
  %i = alloca i64, align 8
  %lp = alloca %struct.light*, align 8
  %1 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.42, i32 0, i32 0))
  %2 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), align 8
  %3 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), align 8
  %4 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2), align 8
  %5 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.43, i32 0, i32 0), double %2, double %3, double %4)
  %6 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 0), align 8
  %7 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 1), align 8
  %8 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 2), align 8
  %9 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.44, i32 0, i32 0), double %6, double %7, double %8)
  %10 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 0), align 8
  %11 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 1), align 8
  %12 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 2), align 8
  %13 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.45, i32 0, i32 0), double %10, double %11, double %12)
  %14 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  %15 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.46, i32 0, i32 0), double %14)
  %16 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 0), align 8
  %17 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 1), align 8
  %18 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 2), align 8
  %19 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.47, i32 0, i32 0), double %16, double %17, double %18)
  %20 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.48, i32 0, i32 0))
  %21 = load %struct.light** @lights, align 8
  store %struct.light* %21, %struct.light** %lp, align 8
  store i64 0, i64* %i, align 8
  br label %22

; <label>:22                                      ; preds = %61, %0
  %23 = load i64* %i, align 8
  %24 = load i64* @nlights, align 8
  %25 = icmp slt i64 %23, %24
  br i1 %25, label %26, label %64

; <label>:26                                      ; preds = %22
  %27 = load i64* %i, align 8
  %28 = load %struct.light** %lp, align 8
  %29 = getelementptr inbounds %struct.light* %28, i32 0, i32 0
  %30 = getelementptr inbounds [4 x double]* %29, i32 0, i64 0
  %31 = load double* %30, align 8
  %32 = load %struct.light** %lp, align 8
  %33 = getelementptr inbounds %struct.light* %32, i32 0, i32 0
  %34 = getelementptr inbounds [4 x double]* %33, i32 0, i64 1
  %35 = load double* %34, align 8
  %36 = load %struct.light** %lp, align 8
  %37 = getelementptr inbounds %struct.light* %36, i32 0, i32 0
  %38 = getelementptr inbounds [4 x double]* %37, i32 0, i64 2
  %39 = load double* %38, align 8
  %40 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.49, i32 0, i32 0), i64 %27, double %31, double %35, double %39)
  %41 = load %struct.light** %lp, align 8
  %42 = getelementptr inbounds %struct.light* %41, i32 0, i32 1
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 0
  %44 = load double* %43, align 8
  %45 = load %struct.light** %lp, align 8
  %46 = getelementptr inbounds %struct.light* %45, i32 0, i32 1
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 1
  %48 = load double* %47, align 8
  %49 = load %struct.light** %lp, align 8
  %50 = getelementptr inbounds %struct.light* %49, i32 0, i32 1
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 2
  %52 = load double* %51, align 8
  %53 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.50, i32 0, i32 0), double %44, double %48, double %52)
  %54 = load %struct.light** %lp, align 8
  %55 = getelementptr inbounds %struct.light* %54, i32 0, i32 2
  %56 = load i64* %55, align 8
  %57 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([19 x i8]* @.str.51, i32 0, i32 0), i64 %56)
  %58 = load %struct.light** %lp, align 8
  %59 = getelementptr inbounds %struct.light* %58, i32 0, i32 3
  %60 = load %struct.light** %59, align 8
  store %struct.light* %60, %struct.light** %lp, align 8
  br label %61

; <label>:61                                      ; preds = %26
  %62 = load i64* %i, align 8
  %63 = add nsw i64 %62, 1
  store i64 %63, i64* %i, align 8
  br label %22

; <label>:64                                      ; preds = %22
  %65 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.52, i32 0, i32 0))
  %66 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.53, i32 0, i32 0))
  %67 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.54, i32 0, i32 0))
  %68 = load i64* @TraversalType, align 8
  switch i64 %68, label %83 [
    i64 0, label %69
    i64 1, label %71
  ]

; <label>:69                                      ; preds = %64
  %70 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([6 x i8]* @.str.55, i32 0, i32 0))
  br label %83

; <label>:71                                      ; preds = %64
  %72 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.56, i32 0, i32 0))
  %73 = load i64* @hu_gridsize, align 8
  %74 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.57, i32 0, i32 0), i64 %73)
  %75 = load i64* @hu_max_prims_cell, align 8
  %76 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.58, i32 0, i32 0), i64 %75)
  %77 = load i64* @hu_max_subdiv_level, align 8
  %78 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.59, i32 0, i32 0), i64 %77)
  %79 = load i64* @hu_numbuckets, align 8
  %80 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.60, i32 0, i32 0), i64 %79)
  %81 = load i64* @hu_lazy, align 8
  %82 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.61, i32 0, i32 0), i64 %81)
  br label %83

; <label>:83                                      ; preds = %71, %69, %64
  %84 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.62, i32 0, i32 0))
  %85 = load i64* @ModelNorm, align 8
  %86 = icmp ne i64 %85, 0
  %87 = select i1 %86, i8* getelementptr inbounds ([5 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str.64, i32 0, i32 0)
  %88 = call i32 (i8*, ...) *@printf(i8* %87)
  %89 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([20 x i8]* @.str.65, i32 0, i32 0))
  %90 = load i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 6), align 8
  %91 = icmp eq i64 %90, 0
  %92 = select i1 %91, i8* getelementptr inbounds ([13 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str.67, i32 0, i32 0)
  %93 = call i32 (i8*, ...) *@printf(i8* %92)
  %94 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.68, i32 0, i32 0))
  %95 = load i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 9), align 8
  %96 = icmp ne i64 %95, 0
  %97 = select i1 %96, i8* getelementptr inbounds ([4 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.70, i32 0, i32 0)
  %98 = call i32 (i8*, ...) *@printf(i8* %97)
  %99 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([13 x i8]* @.str.71, i32 0, i32 0))
  %100 = load i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 10), align 8
  %101 = icmp ne i64 %100, 0
  %102 = select i1 %101, i8* getelementptr inbounds ([4 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.70, i32 0, i32 0)
  %103 = call i32 (i8*, ...) *@printf(i8* %102)
  %104 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %105 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %106 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.72, i32 0, i32 0), i64 %104, i64 %105)
  %107 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %108 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.73, i32 0, i32 0), double %107)
  %109 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1), align 8
  %110 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([33 x i8]* @.str.74, i32 0, i32 0), i64 %109)
  %111 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4), align 8
  %112 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.75, i32 0, i32 0), double %111)
  %113 = load i64* @bundlex, align 8
  %114 = load i64* @bundley, align 8
  %115 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.76, i32 0, i32 0), i64 %113, i64 %114)
  %116 = load i64* @blockx, align 8
  %117 = load i64* @blocky, align 8
  %118 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.77, i32 0, i32 0), i64 %116, i64 %117)
  %119 = load i64* @GeoFile, align 8
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %121, label %123

; <label>:121                                     ; preds = %83
  %122 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8]* @GeoFileName, i32 0, i32 0))
  br label %123

; <label>:123                                     ; preds = %121, %83
  %124 = load i64* @PicFile, align 8
  %125 = icmp ne i64 %124, 0
  br i1 %125, label %126, label %128

; <label>:126                                     ; preds = %123
  %127 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([19 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8]* @PicFileName, i32 0, i32 0))
  br label %128

; <label>:128                                     ; preds = %126, %123
  %129 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.52, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitEnv() {
  store double 5.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), align 8
  store double 5.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), align 8
  store double -1.500000e+00, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2), align 8
  store double 5.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 0), align 8
  store double 5.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 1), align 8
  store double 5.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 2), align 8
  store double 0.000000e+00, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 0), align 8
  store double 0.000000e+00, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 1), align 8
  store double 8.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 2), align 8
  store double 6.000000e+01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  store double 1.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 0), align 8
  store double 1.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 1), align 8
  store double 1.000000e-01, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 2), align 8
  store i64 1, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 9), align 8
  store i64 1, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 10), align 8
  store i64 0, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 6), align 8
  store i64 100, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  store i64 100, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  store i64 10000, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 7), align 8
  store i64 5, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1), align 8
  store double 2.000000e-02, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4), align 8
  store i64 8, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 2), align 8
  store i64 8, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 3), align 8
  store double 1.000000e-03, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  store double 1.645000e+02, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 9), align 8
  store double 1.900000e+02, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  store double 1.900000e+02, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %1 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %2 = fmul double %1, 5.000000e-01
  store double %2, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 12), align 8
  %3 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %4 = fmul double %3, 5.000000e-01
  store double %4, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 13), align 8
  %5 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %6 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  store double %8, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 14), align 8
  %9 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %10 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %11 = sitofp i64 %10 to double
  %12 = fdiv double %9, %11
  store double %12, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 15), align 8
  call void @MatrixIdentity([4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0))
  call void @MatrixIdentity([4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 4, i32 0))
  store i64 0, i64* @GeoFile, align 8
  store i64 0, i64* @PicFile, align 8
  store i64 1, i64* @ModelNorm, align 8
  store i64 0, i64* @ModelTransform, align 8
  store i64 0, i64* @DataType, align 8
  store i64 0, i64* @TraversalType, align 8
  %13 = call i8* @GlobalMalloc(i64 72, i8* getelementptr inbounds ([6 x i8]* @.str.80, i32 0, i32 0))
  %14 = bitcast i8* %13 to %struct.light*
  store %struct.light* %14, %struct.light** @lights, align 8
  store i64 25, i64* @bundlex, align 8
  store i64 25, i64* @bundley, align 8
  store i64 2, i64* @blockx, align 8
  store i64 2, i64* @blocky, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitLights() {
  store i64 1, i64* @nlights, align 8
  %1 = load %struct.light** @lights, align 8
  %2 = getelementptr inbounds %struct.light* %1, i32 0, i32 0
  %3 = getelementptr inbounds [4 x double]* %2, i32 0, i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = load %struct.light** @lights, align 8
  %5 = getelementptr inbounds %struct.light* %4, i32 0, i32 0
  %6 = getelementptr inbounds [4 x double]* %5, i32 0, i64 1
  store double 0.000000e+00, double* %6, align 8
  %7 = load %struct.light** @lights, align 8
  %8 = getelementptr inbounds %struct.light* %7, i32 0, i32 0
  %9 = getelementptr inbounds [4 x double]* %8, i32 0, i64 2
  store double -2.000000e+03, double* %9, align 8
  %10 = load %struct.light** @lights, align 8
  %11 = getelementptr inbounds %struct.light* %10, i32 0, i32 0
  %12 = getelementptr inbounds [4 x double]* %11, i32 0, i64 3
  store double 1.000000e+00, double* %12, align 8
  %13 = load %struct.light** @lights, align 8
  %14 = getelementptr inbounds %struct.light* %13, i32 0, i32 1
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 0
  store double 1.000000e+00, double* %15, align 8
  %16 = load %struct.light** @lights, align 8
  %17 = getelementptr inbounds %struct.light* %16, i32 0, i32 1
  %18 = getelementptr inbounds [3 x double]* %17, i32 0, i64 1
  store double 1.000000e+00, double* %18, align 8
  %19 = load %struct.light** @lights, align 8
  %20 = getelementptr inbounds %struct.light* %19, i32 0, i32 1
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 2
  store double 1.000000e+00, double* %21, align 8
  %22 = load %struct.light** @lights, align 8
  %23 = getelementptr inbounds %struct.light* %22, i32 0, i32 2
  store i64 1, i64* %23, align 8
  %24 = load %struct.light** @lights, align 8
  %25 = getelementptr inbounds %struct.light* %24, i32 0, i32 3
  store %struct.light* null, %struct.light** %25, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitDisplay() {
  %aspect = alloca double, align 8
  %theta = alloca double, align 8
  %1 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %2 = sitofp i64 %1 to double
  %3 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %4 = sitofp i64 %3 to double
  %5 = fdiv double %2, %4
  store double %5, double* %aspect, align 8
  %6 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  %7 = fmul double %6, 5.000000e-01
  %8 = fmul double %7, 1.750000e-02
  store double %8, double* %theta, align 8
  %9 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %10 = load double* %aspect, align 8
  %11 = fmul double %9, %10
  store double %11, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %12 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %13 = fmul double 5.000000e-01, %12
  %14 = load double* %theta, align 8
  %15 = call double @tan(double %14)
  %16 = fdiv double %13, %15
  store double %16, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 9), align 8
  %17 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %18 = fmul double %17, 5.000000e-01
  store double %18, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 12), align 8
  %19 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %20 = fmul double %19, 5.000000e-01
  store double %20, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 13), align 8
  %21 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %22 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %23 = sitofp i64 %22 to double
  %24 = fdiv double %21, %23
  store double %24, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 14), align 8
  %25 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %26 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %27 = sitofp i64 %26 to double
  %28 = fdiv double %25, %27
  store double %28, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 15), align 8
  ret void
}

; Function Attrs: nounwind
declare double @tan(double)

; Function Attrs: nounwind uwtable
define internal i64 @VerifyColorRange(double* %c) {
  %1 = alloca i64, align 8
  %2 = alloca double*, align 8
  store double* %c, double** %2, align 8
  %3 = load double** %2, align 8
  %4 = getelementptr inbounds double* %3, i64 0
  %5 = load double* %4, align 8
  %6 = fcmp olt double %5, 0.000000e+00
  br i1 %6, label %32, label %7

; <label>:7                                       ; preds = %0
  %8 = load double** %2, align 8
  %9 = getelementptr inbounds double* %8, i64 0
  %10 = load double* %9, align 8
  %11 = fcmp ogt double %10, 1.000000e+00
  br i1 %11, label %32, label %12

; <label>:12                                      ; preds = %7
  %13 = load double** %2, align 8
  %14 = getelementptr inbounds double* %13, i64 1
  %15 = load double* %14, align 8
  %16 = fcmp olt double %15, 0.000000e+00
  br i1 %16, label %32, label %17

; <label>:17                                      ; preds = %12
  %18 = load double** %2, align 8
  %19 = getelementptr inbounds double* %18, i64 1
  %20 = load double* %19, align 8
  %21 = fcmp ogt double %20, 1.000000e+00
  br i1 %21, label %32, label %22

; <label>:22                                      ; preds = %17
  %23 = load double** %2, align 8
  %24 = getelementptr inbounds double* %23, i64 2
  %25 = load double* %24, align 8
  %26 = fcmp olt double %25, 0.000000e+00
  br i1 %26, label %32, label %27

; <label>:27                                      ; preds = %22
  %28 = load double** %2, align 8
  %29 = getelementptr inbounds double* %28, i64 2
  %30 = load double* %29, align 8
  %31 = fcmp ogt double %30, 1.000000e+00
  br i1 %31, label %32, label %43

; <label>:32                                      ; preds = %27, %22, %17, %12, %7, %0
  %33 = load double** %2, align 8
  %34 = getelementptr inbounds double* %33, i64 0
  %35 = load double* %34, align 8
  %36 = load double** %2, align 8
  %37 = getelementptr inbounds double* %36, i64 1
  %38 = load double* %37, align 8
  %39 = load double** %2, align 8
  %40 = getelementptr inbounds double* %39, i64 2
  %41 = load double* %40, align 8
  %42 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.81, i32 0, i32 0), double %35, double %38, double %41)
  store i64 0, i64* %1
  br label %44

; <label>:43                                      ; preds = %27
  store i64 1, i64* %1
  br label %44

; <label>:44                                      ; preds = %43, %32
  %45 = load i64* %1
  ret i64 %45
}

; Function Attrs: nounwind uwtable
define internal void @TransformLights([4 x double]* %m) {
  %1 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %lp = alloca %struct.light*, align 8
  store [4 x double]* %m, [4 x double]** %1, align 8
  %2 = load %struct.light** @lights, align 8
  store %struct.light* %2, %struct.light** %lp, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %18, %0
  %4 = load i64* %i, align 8
  %5 = load i64* @nlights, align 8
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %7, label %21

; <label>:7                                       ; preds = %3
  %8 = load %struct.light** %lp, align 8
  %9 = getelementptr inbounds %struct.light* %8, i32 0, i32 0
  %10 = getelementptr inbounds [4 x double]* %9, i32 0, i32 0
  %11 = load [4 x double]** %1, align 8
  %12 = load %struct.light** %lp, align 8
  %13 = getelementptr inbounds %struct.light* %12, i32 0, i32 0
  %14 = getelementptr inbounds [4 x double]* %13, i32 0, i32 0
  call void @VecMatMult(double* %10, [4 x double]* %11, double* %14)
  %15 = load %struct.light** %lp, align 8
  %16 = getelementptr inbounds %struct.light* %15, i32 0, i32 3
  %17 = load %struct.light** %16, align 8
  store %struct.light* %17, %struct.light** %lp, align 8
  br label %18

; <label>:18                                      ; preds = %7
  %19 = load i64* %i, align 8
  %20 = add nsw i64 %19, 1
  store i64 %20, i64* %i, align 8
  br label %3

; <label>:21                                      ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ViewRotate([4 x double]* %M, double %x, double %y, double %z) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %r = alloca double, align 8
  %rx = alloca double, align 8
  store [4 x double]* %M, [4 x double]** %1, align 8
  store double %x, double* %2, align 8
  store double %y, double* %3, align 8
  store double %z, double* %4, align 8
  %5 = load double* %2, align 8
  %6 = load double* %2, align 8
  %7 = fmul double %5, %6
  %8 = load double* %4, align 8
  %9 = load double* %4, align 8
  %10 = fmul double %8, %9
  %11 = fadd double %7, %10
  %12 = call double @sqrt(double %11)
  store double %12, double* %rx, align 8
  %13 = load double* %rx, align 8
  %14 = fcmp ogt double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %0
  %16 = load double* %rx, align 8
  br label %20

; <label>:17                                      ; preds = %0
  %18 = load double* %rx, align 8
  %19 = fsub double -0.000000e+00, %18
  br label %20

; <label>:20                                      ; preds = %17, %15
  %21 = phi double [ %16, %15 ], [ %19, %17 ]
  %22 = fcmp olt double %21, 1.000000e-07
  br i1 %22, label %23, label %30

; <label>:23                                      ; preds = %20
  %24 = load [4 x double]** %1, align 8
  call void @MatrixIdentity([4 x double]* %24)
  %25 = load [4 x double]** %1, align 8
  %26 = load double* %3, align 8
  %27 = fcmp ogt double %26, 0.000000e+00
  %28 = select i1 %27, double 1.000000e+00, double -1.000000e+00
  %29 = fmul double 0x3FF921FB54524550, %28
  call void @Rotate(i64 1, [4 x double]* %25, double %29)
  br label %126

; <label>:30                                      ; preds = %20
  %31 = load double* %2, align 8
  %32 = load double* %2, align 8
  %33 = fmul double %31, %32
  %34 = load double* %3, align 8
  %35 = load double* %3, align 8
  %36 = fmul double %34, %35
  %37 = fadd double %33, %36
  %38 = load double* %4, align 8
  %39 = load double* %4, align 8
  %40 = fmul double %38, %39
  %41 = fadd double %37, %40
  %42 = call double @sqrt(double %41)
  store double %42, double* %r, align 8
  %43 = load double* %4, align 8
  %44 = load double* %rx, align 8
  %45 = fdiv double %43, %44
  %46 = load [4 x double]** %1, align 8
  %47 = getelementptr inbounds [4 x double]* %46, i64 0
  %48 = getelementptr inbounds [4 x double]* %47, i32 0, i64 0
  store double %45, double* %48, align 8
  %49 = load double* %2, align 8
  %50 = fsub double -0.000000e+00, %49
  %51 = load double* %3, align 8
  %52 = fmul double %50, %51
  %53 = load double* %r, align 8
  %54 = load double* %rx, align 8
  %55 = fmul double %53, %54
  %56 = fdiv double %52, %55
  %57 = load [4 x double]** %1, align 8
  %58 = getelementptr inbounds [4 x double]* %57, i64 0
  %59 = getelementptr inbounds [4 x double]* %58, i32 0, i64 1
  store double %56, double* %59, align 8
  %60 = load double* %2, align 8
  %61 = load double* %r, align 8
  %62 = fdiv double %60, %61
  %63 = load [4 x double]** %1, align 8
  %64 = getelementptr inbounds [4 x double]* %63, i64 0
  %65 = getelementptr inbounds [4 x double]* %64, i32 0, i64 2
  store double %62, double* %65, align 8
  %66 = load [4 x double]** %1, align 8
  %67 = getelementptr inbounds [4 x double]* %66, i64 0
  %68 = getelementptr inbounds [4 x double]* %67, i32 0, i64 3
  store double 0.000000e+00, double* %68, align 8
  %69 = load [4 x double]** %1, align 8
  %70 = getelementptr inbounds [4 x double]* %69, i64 1
  %71 = getelementptr inbounds [4 x double]* %70, i32 0, i64 0
  store double 0.000000e+00, double* %71, align 8
  %72 = load double* %rx, align 8
  %73 = load double* %r, align 8
  %74 = fdiv double %72, %73
  %75 = load [4 x double]** %1, align 8
  %76 = getelementptr inbounds [4 x double]* %75, i64 1
  %77 = getelementptr inbounds [4 x double]* %76, i32 0, i64 1
  store double %74, double* %77, align 8
  %78 = load double* %3, align 8
  %79 = load double* %r, align 8
  %80 = fdiv double %78, %79
  %81 = load [4 x double]** %1, align 8
  %82 = getelementptr inbounds [4 x double]* %81, i64 1
  %83 = getelementptr inbounds [4 x double]* %82, i32 0, i64 2
  store double %80, double* %83, align 8
  %84 = load [4 x double]** %1, align 8
  %85 = getelementptr inbounds [4 x double]* %84, i64 1
  %86 = getelementptr inbounds [4 x double]* %85, i32 0, i64 3
  store double 0.000000e+00, double* %86, align 8
  %87 = load double* %2, align 8
  %88 = fsub double -0.000000e+00, %87
  %89 = load double* %rx, align 8
  %90 = fdiv double %88, %89
  %91 = load [4 x double]** %1, align 8
  %92 = getelementptr inbounds [4 x double]* %91, i64 2
  %93 = getelementptr inbounds [4 x double]* %92, i32 0, i64 0
  store double %90, double* %93, align 8
  %94 = load double* %3, align 8
  %95 = fsub double -0.000000e+00, %94
  %96 = load double* %4, align 8
  %97 = fmul double %95, %96
  %98 = load double* %r, align 8
  %99 = load double* %rx, align 8
  %100 = fmul double %98, %99
  %101 = fdiv double %97, %100
  %102 = load [4 x double]** %1, align 8
  %103 = getelementptr inbounds [4 x double]* %102, i64 2
  %104 = getelementptr inbounds [4 x double]* %103, i32 0, i64 1
  store double %101, double* %104, align 8
  %105 = load double* %4, align 8
  %106 = load double* %r, align 8
  %107 = fdiv double %105, %106
  %108 = load [4 x double]** %1, align 8
  %109 = getelementptr inbounds [4 x double]* %108, i64 2
  %110 = getelementptr inbounds [4 x double]* %109, i32 0, i64 2
  store double %107, double* %110, align 8
  %111 = load [4 x double]** %1, align 8
  %112 = getelementptr inbounds [4 x double]* %111, i64 2
  %113 = getelementptr inbounds [4 x double]* %112, i32 0, i64 3
  store double 0.000000e+00, double* %113, align 8
  %114 = load [4 x double]** %1, align 8
  %115 = getelementptr inbounds [4 x double]* %114, i64 3
  %116 = getelementptr inbounds [4 x double]* %115, i32 0, i64 0
  store double 0.000000e+00, double* %116, align 8
  %117 = load [4 x double]** %1, align 8
  %118 = getelementptr inbounds [4 x double]* %117, i64 3
  %119 = getelementptr inbounds [4 x double]* %118, i32 0, i64 1
  store double 0.000000e+00, double* %119, align 8
  %120 = load [4 x double]** %1, align 8
  %121 = getelementptr inbounds [4 x double]* %120, i64 3
  %122 = getelementptr inbounds [4 x double]* %121, i32 0, i64 2
  store double 0.000000e+00, double* %122, align 8
  %123 = load [4 x double]** %1, align 8
  %124 = getelementptr inbounds [4 x double]* %123, i64 3
  %125 = getelementptr inbounds [4 x double]* %124, i32 0, i64 3
  store double 1.000000e+00, double* %125, align 8
  br label %126

; <label>:126                                     ; preds = %30, %23
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double)

; Function Attrs: nounwind uwtable
define internal void @CreateViewMatrix() {
  %T = alloca [4 x [4 x double]], align 16
  %R = alloca [4 x [4 x double]], align 16
  %1 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i32 0
  %2 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), align 8
  %3 = fsub double -0.000000e+00, %2
  %4 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), align 8
  %5 = fsub double -0.000000e+00, %4
  %6 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2), align 8
  %7 = fsub double -0.000000e+00, %6
  call void @Translate([4 x double]* %1, double %3, double %5, double %7)
  %8 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i32 0
  call void @MatrixMult([4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0), [4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0), [4 x double]* %8)
  %9 = getelementptr inbounds [4 x [4 x double]]* %R, i32 0, i32 0
  %10 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 0), align 8
  %11 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), align 8
  %12 = fsub double %10, %11
  %13 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 1), align 8
  %14 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), align 8
  %15 = fsub double %13, %14
  %16 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 2), align 8
  %17 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2), align 8
  %18 = fsub double %16, %17
  call void @ViewRotate([4 x double]* %9, double %12, double %15, double %18)
  %19 = getelementptr inbounds [4 x [4 x double]]* %R, i32 0, i32 0
  call void @MatrixMult([4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0), [4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0), [4 x double]* %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TransformViewRay(double* %tray) {
  %1 = alloca double*, align 8
  store double* %tray, double** %1, align 8
  %2 = load double** %1, align 8
  %3 = load double** %1, align 8
  call void @VecMatMult(double* %2, [4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 3, i32 0), double* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @NormalizeEnv([4 x double]* %normMat) {
  %1 = alloca [4 x double]*, align 8
  %tmp = alloca [4 x double], align 16
  store [4 x double]* %normMat, [4 x double]** %1, align 8
  store double 1.000000e+00, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 3), align 8
  %2 = load [4 x double]** %1, align 8
  call void @VecMatMult(double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i32 0), [4 x double]* %2, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i32 0))
  store double 1.000000e+00, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 3), align 8
  %3 = load [4 x double]** %1, align 8
  call void @VecMatMult(double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i32 0), [4 x double]* %3, double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i32 0))
  %4 = load [4 x double]** %1, align 8
  call void @TransformLights([4 x double]* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal signext i8 @LookupCommand(i8* %s) {
  %1 = alloca i8, align 1
  %2 = alloca i8*, align 8
  %i = alloca i64, align 8
  store i8* %s, i8** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %20, %0
  %4 = load i64* %i, align 8
  %5 = icmp ult i64 %4, 42
  br i1 %5, label %6, label %23

; <label>:6                                       ; preds = %3
  %7 = load i8** %2, align 8
  %8 = load i64* %i, align 8
  %9 = getelementptr inbounds [42 x %struct.CTE]* @cmdtab, i32 0, i64 %8
  %10 = getelementptr inbounds %struct.CTE* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  %12 = call i32 @strcmp(i8* %7, i8* %11)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %6
  %15 = load i64* %i, align 8
  %16 = getelementptr inbounds [42 x %struct.CTE]* @cmdtab, i32 0, i64 %15
  %17 = getelementptr inbounds %struct.CTE* %16, i32 0, i32 1
  %18 = load i8* %17, align 1
  store i8 %18, i8* %1
  br label %26

; <label>:19                                      ; preds = %6
  br label %20

; <label>:20                                      ; preds = %19
  %21 = load i64* %i, align 8
  %22 = add nsw i64 %21, 1
  store i64 %22, i64* %i, align 8
  br label %3

; <label>:23                                      ; preds = %3
  %24 = load i8** %2, align 8
  %25 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.82, i32 0, i32 0), i8* %24)
  store i8 48, i8* %1
  br label %26

; <label>:26                                      ; preds = %23, %14
  %27 = load i8* %1
  ret i8 %27
}

declare i32 @strcmp(i8*, i8*)

; Function Attrs: nounwind uwtable
define internal void @ReadEnvFile(i8* %EnvFileName) {
  %1 = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %stat = alloca i64, align 8
  %dummy = alloca i64, align 8
  %opcode = alloca i8, align 1
  %command = alloca [30 x i8], align 16
  %opparam = alloca [30 x i8], align 16
  %dummy_char = alloca [60 x i8], align 16
  %datafile = alloca [10 x i8], align 1
  %lights_set = alloca i64, align 8
  %pf = alloca %struct._IO_FILE*, align 8
  %lptr = alloca %struct.light*, align 8
  %lastlight = alloca %struct.light*, align 8
  store i8* %EnvFileName, i8** %1, align 8
  %2 = load i8** %1, align 8
  %3 = call %struct._IO_FILE* @fopen(i8* %2, i8* getelementptr inbounds ([2 x i8]* @.str.83, i32 0, i32 0))
  store %struct._IO_FILE* %3, %struct._IO_FILE** %pf, align 8
  %4 = load %struct._IO_FILE** %pf, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = load i8** %1, align 8
  %8 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([37 x i8]* @.str.84, i32 0, i32 0), i8* %7)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:9                                       ; preds = %0
  call void @InitEnv()
  store i64 0, i64* @nlights, align 8
  store i64 0, i64* %lights_set, align 8
  br label %10

; <label>:10                                      ; preds = %491, %9
  %11 = load %struct._IO_FILE** %pf, align 8
  %12 = getelementptr inbounds [30 x i8]* %command, i32 0, i32 0
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %12)
  %14 = icmp ne i32 %13, -1
  br i1 %14, label %15, label %492

; <label>:15                                      ; preds = %10
  %16 = getelementptr inbounds [30 x i8]* %command, i32 0, i32 0
  %17 = call signext i8 @LookupCommand(i8* %16)
  store i8 %17, i8* %opcode, align 1
  %18 = load i8* %opcode, align 1
  %19 = sext i8 %18 to i32
  switch i32 %19, label %488 [
    i32 97, label %20
    i32 98, label %29
    i32 99, label %38
    i32 100, label %51
    i32 120, label %69
    i32 106, label %82
    i32 103, label %100
    i32 104, label %122
    i32 107, label %140
    i32 102, label %158
    i32 101, label %167
    i32 108, label %234
    i32 109, label %263
    i32 110, label %279
    i32 105, label %296
    i32 119, label %321
    i32 113, label %346
    i32 115, label %355
    i32 51, label %364
    i32 52, label %373
    i32 53, label %382
    i32 54, label %392
    i32 55, label %407
    i32 56, label %422
    i32 64, label %431
    i32 35, label %440
    i32 36, label %449
    i32 42, label %461
    i32 43, label %470
    i32 37, label %479
  ]

; <label>:20                                      ; preds = %15
  %21 = load %struct._IO_FILE** %pf, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([12 x i8]* @.str.86, i32 0, i32 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2))
  %23 = sext i32 %22 to i64
  store i64 %23, i64* %stat, align 8
  %24 = load i64* %stat, align 8
  %25 = icmp ne i64 %24, 3
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %20
  %27 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.87, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:28                                      ; preds = %20
  br label %491

; <label>:29                                      ; preds = %15
  %30 = load %struct._IO_FILE** %pf, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([12 x i8]* @.str.86, i32 0, i32 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 1), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 1, i64 2))
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %stat, align 8
  %33 = load i64* %stat, align 8
  %34 = icmp ne i64 %33, 3
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %29
  %36 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.88, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:37                                      ; preds = %29
  br label %491

; <label>:38                                      ; preds = %15
  %39 = load %struct._IO_FILE** %pf, align 8
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([12 x i8]* @.str.86, i32 0, i32 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 1), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 2))
  %41 = sext i32 %40 to i64
  store i64 %41, i64* %stat, align 8
  %42 = load i64* %stat, align 8
  %43 = icmp ne i64 %42, 3
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %38
  %45 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.89, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:46                                      ; preds = %38
  %47 = call i64 @VerifyColorRange(double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i32 0))
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %50, label %49

; <label>:49                                      ; preds = %46
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:50                                      ; preds = %46
  br label %491

; <label>:51                                      ; preds = %15
  %52 = load %struct._IO_FILE** %pf, align 8
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([4 x i8]* @.str.90, i32 0, i32 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7))
  %54 = sext i32 %53 to i64
  store i64 %54, i64* %stat, align 8
  %55 = load i64* %stat, align 8
  %56 = icmp ne i64 %55, 1
  br i1 %56, label %57, label %59

; <label>:57                                      ; preds = %51
  %58 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.91, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:59                                      ; preds = %51
  %60 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  %61 = fcmp olt double %60, 0.000000e+00
  br i1 %61, label %65, label %62

; <label>:62                                      ; preds = %59
  %63 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  %64 = fcmp ogt double %63, 1.000000e+02
  br i1 %64, label %65, label %68

; <label>:65                                      ; preds = %62, %59
  %66 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 7), align 8
  %67 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([19 x i8]* @.str.92, i32 0, i32 0), double %66)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:68                                      ; preds = %62
  br label %491

; <label>:69                                      ; preds = %15
  %70 = load %struct._IO_FILE** %pf, align 8
  %71 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([12 x i8]* @.str.86, i32 0, i32 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 0), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 1), double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 2))
  %72 = sext i32 %71 to i64
  store i64 %72, i64* %stat, align 8
  %73 = load i64* %stat, align 8
  %74 = icmp ne i64 %73, 3
  br i1 %74, label %75, label %77

; <label>:75                                      ; preds = %69
  %76 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([17 x i8]* @.str.93, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:77                                      ; preds = %69
  %78 = call i64 @VerifyColorRange(double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i32 0))
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %81, label %80

; <label>:80                                      ; preds = %77
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:81                                      ; preds = %77
  br label %491

; <label>:82                                      ; preds = %15
  %83 = load %struct._IO_FILE** %pf, align 8
  %84 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1))
  %85 = sext i32 %84 to i64
  store i64 %85, i64* %stat, align 8
  %86 = load i64* %stat, align 8
  %87 = icmp ne i64 %86, 1
  br i1 %87, label %88, label %90

; <label>:88                                      ; preds = %82
  %89 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.95, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:90                                      ; preds = %82
  %91 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1), align 8
  %92 = icmp slt i64 %91, 0
  br i1 %92, label %96, label %93

; <label>:93                                      ; preds = %90
  %94 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1), align 8
  %95 = icmp sgt i64 %94, 3
  br i1 %95, label %96, label %99

; <label>:96                                      ; preds = %93, %90
  %97 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 1), align 8
  %98 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([29 x i8]* @.str.96, i32 0, i32 0), i64 %97)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:99                                      ; preds = %93
  br label %491

; <label>:100                                     ; preds = %15
  %101 = load %struct._IO_FILE** %pf, align 8
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0))
  %103 = sext i32 %102 to i64
  store i64 %103, i64* %stat, align 8
  %104 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %105 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.97, i32 0, i32 0), i64 %104)
  %106 = load %struct._IO_FILE** @stdout, align 8
  %107 = call i32 @fflush(%struct._IO_FILE* %106)
  %108 = load i64* %stat, align 8
  %109 = icmp ne i64 %108, 1
  br i1 %109, label %110, label %112

; <label>:110                                     ; preds = %100
  %111 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.98, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:112                                     ; preds = %100
  %113 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %114 = icmp sgt i64 %113, 5
  br i1 %114, label %118, label %115

; <label>:115                                     ; preds = %112
  %116 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %117 = icmp slt i64 %116, 0
  br i1 %117, label %118, label %121

; <label>:118                                     ; preds = %115, %112
  %119 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %120 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([29 x i8]* @.str.99, i32 0, i32 0), i64 %119)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:121                                     ; preds = %115
  br label %491

; <label>:122                                     ; preds = %15
  %123 = load %struct._IO_FILE** %pf, align 8
  %124 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([4 x i8]* @.str.90, i32 0, i32 0), double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8))
  %125 = sext i32 %124 to i64
  store i64 %125, i64* %stat, align 8
  %126 = load i64* %stat, align 8
  %127 = icmp ne i64 %126, 1
  br i1 %127, label %128, label %130

; <label>:128                                     ; preds = %122
  %129 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([29 x i8]* @.str.100, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:130                                     ; preds = %122
  %131 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %132 = fcmp olt double %131, 0.000000e+00
  br i1 %132, label %136, label %133

; <label>:133                                     ; preds = %130
  %134 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %135 = fcmp ogt double %134, 1.000000e+00
  br i1 %135, label %136, label %139

; <label>:136                                     ; preds = %133, %130
  %137 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %138 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.101, i32 0, i32 0), double %137)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:139                                     ; preds = %133
  br label %491

; <label>:140                                     ; preds = %15
  %141 = load %struct._IO_FILE** %pf, align 8
  %142 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([4 x i8]* @.str.90, i32 0, i32 0), double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4))
  %143 = sext i32 %142 to i64
  store i64 %143, i64* %stat, align 8
  %144 = load i64* %stat, align 8
  %145 = icmp ne i64 %144, 1
  br i1 %145, label %146, label %148

; <label>:146                                     ; preds = %140
  %147 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.102, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:148                                     ; preds = %140
  %149 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4), align 8
  %150 = fcmp olt double %149, 0.000000e+00
  br i1 %150, label %154, label %151

; <label>:151                                     ; preds = %148
  %152 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4), align 8
  %153 = fcmp ogt double %152, 1.000000e+00
  br i1 %153, label %154, label %157

; <label>:154                                     ; preds = %151, %148
  %155 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 4), align 8
  %156 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.103, i32 0, i32 0), double %155)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:157                                     ; preds = %151
  br label %491

; <label>:158                                     ; preds = %15
  %159 = load %struct._IO_FILE** %pf, align 8
  %160 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([8 x i8]* @.str.104, i32 0, i32 0), i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6))
  %161 = sext i32 %160 to i64
  store i64 %161, i64* %stat, align 8
  %162 = load i64* %stat, align 8
  %163 = icmp ne i64 %162, 2
  br i1 %163, label %164, label %166

; <label>:164                                     ; preds = %158
  %165 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([20 x i8]* @.str.105, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:166                                     ; preds = %158
  br label %491

; <label>:167                                     ; preds = %15
  store i64 1, i64* %lights_set, align 8
  %168 = load i64* @nlights, align 8
  %169 = icmp sgt i64 %168, 0
  br i1 %169, label %170, label %173

; <label>:170                                     ; preds = %167
  %171 = call i8* @GlobalMalloc(i64 72, i8* getelementptr inbounds ([6 x i8]* @.str.80, i32 0, i32 0))
  %172 = bitcast i8* %171 to %struct.light*
  store %struct.light* %172, %struct.light** %lptr, align 8
  br label %175

; <label>:173                                     ; preds = %167
  %174 = load %struct.light** @lights, align 8
  store %struct.light* %174, %struct.light** %lptr, align 8
  br label %175

; <label>:175                                     ; preds = %173, %170
  %176 = load %struct._IO_FILE** %pf, align 8
  %177 = load %struct.light** %lptr, align 8
  %178 = getelementptr inbounds %struct.light* %177, i32 0, i32 0
  %179 = getelementptr inbounds [4 x double]* %178, i32 0, i64 0
  %180 = load %struct.light** %lptr, align 8
  %181 = getelementptr inbounds %struct.light* %180, i32 0, i32 0
  %182 = getelementptr inbounds [4 x double]* %181, i32 0, i64 1
  %183 = load %struct.light** %lptr, align 8
  %184 = getelementptr inbounds %struct.light* %183, i32 0, i32 0
  %185 = getelementptr inbounds [4 x double]* %184, i32 0, i64 2
  %186 = load %struct.light** %lptr, align 8
  %187 = getelementptr inbounds %struct.light* %186, i32 0, i32 1
  %188 = getelementptr inbounds [3 x double]* %187, i32 0, i64 0
  %189 = load %struct.light** %lptr, align 8
  %190 = getelementptr inbounds %struct.light* %189, i32 0, i32 1
  %191 = getelementptr inbounds [3 x double]* %190, i32 0, i64 1
  %192 = load %struct.light** %lptr, align 8
  %193 = getelementptr inbounds %struct.light* %192, i32 0, i32 1
  %194 = getelementptr inbounds [3 x double]* %193, i32 0, i64 2
  %195 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %176, i8* getelementptr inbounds ([24 x i8]* @.str.106, i32 0, i32 0), double* %179, double* %182, double* %185, double* %188, double* %191, double* %194)
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %stat, align 8
  %197 = load i64* %stat, align 8
  %198 = icmp ne i64 %197, 6
  br i1 %198, label %199, label %201

; <label>:199                                     ; preds = %175
  %200 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([16 x i8]* @.str.107, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:201                                     ; preds = %175
  %202 = load %struct.light** %lptr, align 8
  %203 = getelementptr inbounds %struct.light* %202, i32 0, i32 1
  %204 = getelementptr inbounds [3 x double]* %203, i32 0, i32 0
  %205 = call i64 @VerifyColorRange(double* %204)
  %206 = icmp ne i64 %205, 0
  br i1 %206, label %208, label %207

; <label>:207                                     ; preds = %201
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:208                                     ; preds = %201
  %209 = load %struct.light** %lptr, align 8
  %210 = getelementptr inbounds %struct.light* %209, i32 0, i32 0
  %211 = getelementptr inbounds [4 x double]* %210, i32 0, i64 3
  store double 1.000000e+00, double* %211, align 8
  %212 = load %struct._IO_FILE** %pf, align 8
  %213 = load %struct.light** %lptr, align 8
  %214 = getelementptr inbounds %struct.light* %213, i32 0, i32 2
  %215 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %212, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* %214)
  %216 = sext i32 %215 to i64
  store i64 %216, i64* %stat, align 8
  %217 = load i64* %stat, align 8
  %218 = icmp ne i64 %217, 1
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %208
  %220 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([33 x i8]* @.str.108, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:221                                     ; preds = %208
  %222 = load %struct.light** %lptr, align 8
  %223 = getelementptr inbounds %struct.light* %222, i32 0, i32 3
  store %struct.light* null, %struct.light** %223, align 8
  %224 = load i64* @nlights, align 8
  %225 = icmp sgt i64 %224, 0
  br i1 %225, label %226, label %230

; <label>:226                                     ; preds = %221
  %227 = load %struct.light** %lptr, align 8
  %228 = load %struct.light** %lastlight, align 8
  %229 = getelementptr inbounds %struct.light* %228, i32 0, i32 3
  store %struct.light* %227, %struct.light** %229, align 8
  br label %230

; <label>:230                                     ; preds = %226, %221
  %231 = load i64* @nlights, align 8
  %232 = add nsw i64 %231, 1
  store i64 %232, i64* @nlights, align 8
  %233 = load %struct.light** %lptr, align 8
  store %struct.light* %233, %struct.light** %lastlight, align 8
  br label %491

; <label>:234                                     ; preds = %15
  store i64 0, i64* %i, align 8
  br label %235

; <label>:235                                     ; preds = %259, %234
  %236 = load i64* %i, align 8
  %237 = icmp slt i64 %236, 4
  br i1 %237, label %238, label %262

; <label>:238                                     ; preds = %235
  store i64 0, i64* %j, align 8
  br label %239

; <label>:239                                     ; preds = %255, %238
  %240 = load i64* %j, align 8
  %241 = icmp slt i64 %240, 4
  br i1 %241, label %242, label %258

; <label>:242                                     ; preds = %239
  %243 = load %struct._IO_FILE** %pf, align 8
  %244 = load i64* %j, align 8
  %245 = load i64* %i, align 8
  %246 = getelementptr inbounds [4 x [4 x double]]* getelementptr inbounds (%struct.view* @View, i32 0, i32 4), i32 0, i64 %245
  %247 = getelementptr inbounds [4 x double]* %246, i32 0, i64 %244
  %248 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %243, i8* getelementptr inbounds ([4 x i8]* @.str.90, i32 0, i32 0), double* %247)
  %249 = sext i32 %248 to i64
  store i64 %249, i64* %stat, align 8
  %250 = load i64* %stat, align 8
  %251 = icmp ne i64 %250, 1
  br i1 %251, label %252, label %254

; <label>:252                                     ; preds = %242
  %253 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.109, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:254                                     ; preds = %242
  br label %255

; <label>:255                                     ; preds = %254
  %256 = load i64* %j, align 8
  %257 = add nsw i64 %256, 1
  store i64 %257, i64* %j, align 8
  br label %239

; <label>:258                                     ; preds = %239
  br label %259

; <label>:259                                     ; preds = %258
  %260 = load i64* %i, align 8
  %261 = add nsw i64 %260, 1
  store i64 %261, i64* %i, align 8
  br label %235

; <label>:262                                     ; preds = %235
  store i64 1, i64* @ModelTransform, align 8
  br label %491

; <label>:263                                     ; preds = %15
  %264 = load %struct._IO_FILE** %pf, align 8
  %265 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %266 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %264, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %265)
  %267 = sext i32 %266 to i64
  store i64 %267, i64* %stat, align 8
  %268 = load i64* %stat, align 8
  %269 = icmp ne i64 %268, 1
  br i1 %269, label %270, label %272

; <label>:270                                     ; preds = %263
  %271 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([16 x i8]* @.str.110, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:272                                     ; preds = %263
  %273 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %274 = call i32 @strcmp(i8* %273, i8* getelementptr inbounds ([3 x i8]* @.str.111, i32 0, i32 0))
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %277

; <label>:276                                     ; preds = %272
  store i64 1, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 9), align 8
  br label %278

; <label>:277                                     ; preds = %272
  store i64 0, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 9), align 8
  br label %278

; <label>:278                                     ; preds = %277, %276
  br label %491

; <label>:279                                     ; preds = %15
  %280 = load %struct._IO_FILE** %pf, align 8
  %281 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %282 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %280, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %281)
  %283 = sext i32 %282 to i64
  store i64 %283, i64* %stat, align 8
  %284 = load i64* %stat, align 8
  %285 = icmp ne i64 %284, 1
  br i1 %285, label %286, label %289

; <label>:286                                     ; preds = %279
  %287 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %288 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([20 x i8]* @.str.112, i32 0, i32 0), i8* %287)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:289                                     ; preds = %279
  %290 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* getelementptr inbounds ([3 x i8]* @.str.111, i32 0, i32 0))
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %294

; <label>:293                                     ; preds = %289
  store i64 1, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 10), align 8
  br label %295

; <label>:294                                     ; preds = %289
  store i64 0, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 10), align 8
  br label %295

; <label>:295                                     ; preds = %294, %293
  br label %491

; <label>:296                                     ; preds = %15
  %297 = load %struct._IO_FILE** %pf, align 8
  %298 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %299 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %297, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %298)
  %300 = sext i32 %299 to i64
  store i64 %300, i64* %stat, align 8
  %301 = load i64* %stat, align 8
  %302 = icmp ne i64 %301, 1
  br i1 %302, label %303, label %306

; <label>:303                                     ; preds = %296
  %304 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %305 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.113, i32 0, i32 0), i8* %304)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:306                                     ; preds = %296
  %307 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %308 = call i32 @strcmp(i8* %307, i8* getelementptr inbounds ([12 x i8]* @.str.114, i32 0, i32 0))
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %311

; <label>:310                                     ; preds = %306
  store i64 0, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 6), align 8
  br label %320

; <label>:311                                     ; preds = %306
  %312 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %313 = call i32 @strcmp(i8* %312, i8* getelementptr inbounds ([13 x i8]* @.str.115, i32 0, i32 0))
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %316

; <label>:315                                     ; preds = %311
  store i64 1, i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 6), align 8
  br label %319

; <label>:316                                     ; preds = %311
  %317 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %318 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.116, i32 0, i32 0), i8* %317)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:319                                     ; preds = %315
  br label %320

; <label>:320                                     ; preds = %319, %310
  br label %491

; <label>:321                                     ; preds = %15
  %322 = load %struct._IO_FILE** %pf, align 8
  %323 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %324 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %322, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %323)
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %stat, align 8
  %326 = load i64* %stat, align 8
  %327 = icmp ne i64 %326, 1
  br i1 %327, label %328, label %331

; <label>:328                                     ; preds = %321
  %329 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %330 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.117, i32 0, i32 0), i8* %329)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:331                                     ; preds = %321
  %332 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %333 = call i32 @strcmp(i8* %332, i8* getelementptr inbounds ([5 x i8]* @.str.118, i32 0, i32 0))
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %336

; <label>:335                                     ; preds = %331
  store i64 0, i64* @TraversalType, align 8
  br label %345

; <label>:336                                     ; preds = %331
  %337 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %338 = call i32 @strcmp(i8* %337, i8* getelementptr inbounds ([9 x i8]* @.str.119, i32 0, i32 0))
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %341

; <label>:340                                     ; preds = %336
  store i64 1, i64* @TraversalType, align 8
  br label %344

; <label>:341                                     ; preds = %336
  %342 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %343 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.120, i32 0, i32 0), i8* %342)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:344                                     ; preds = %340
  br label %345

; <label>:345                                     ; preds = %344, %335
  br label %491

; <label>:346                                     ; preds = %15
  %347 = load %struct._IO_FILE** %pf, align 8
  %348 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %347, i8* getelementptr inbounds ([4 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8]* @GeoFileName, i32 0, i32 0))
  %349 = sext i32 %348 to i64
  store i64 %349, i64* %stat, align 8
  %350 = load i64* %stat, align 8
  %351 = icmp ne i64 %350, 1
  br i1 %351, label %352, label %354

; <label>:352                                     ; preds = %346
  %353 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.122, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:354                                     ; preds = %346
  store i64 1, i64* @GeoFile, align 8
  br label %491

; <label>:355                                     ; preds = %15
  %356 = load %struct._IO_FILE** %pf, align 8
  %357 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %356, i8* getelementptr inbounds ([4 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8]* @PicFileName, i32 0, i32 0))
  %358 = sext i32 %357 to i64
  store i64 %358, i64* %stat, align 8
  %359 = load i64* %stat, align 8
  %360 = icmp ne i64 %359, 1
  br i1 %360, label %361, label %363

; <label>:361                                     ; preds = %355
  %362 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.123, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:363                                     ; preds = %355
  store i64 1, i64* @PicFile, align 8
  br label %491

; <label>:364                                     ; preds = %15
  %365 = load %struct._IO_FILE** %pf, align 8
  %366 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %365, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* %dummy)
  %367 = sext i32 %366 to i64
  store i64 %367, i64* %stat, align 8
  %368 = load i64* %stat, align 8
  %369 = icmp ne i64 %368, 1
  br i1 %369, label %370, label %372

; <label>:370                                     ; preds = %364
  %371 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([24 x i8]* @.str.124, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:372                                     ; preds = %364
  br label %491

; <label>:373                                     ; preds = %15
  %374 = load %struct._IO_FILE** %pf, align 8
  %375 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %374, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* %dummy)
  %376 = sext i32 %375 to i64
  store i64 %376, i64* %stat, align 8
  %377 = load i64* %stat, align 8
  %378 = icmp ne i64 %377, 1
  br i1 %378, label %379, label %381

; <label>:379                                     ; preds = %373
  %380 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.125, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:381                                     ; preds = %373
  br label %491

; <label>:382                                     ; preds = %15
  %383 = load %struct._IO_FILE** %pf, align 8
  %384 = getelementptr inbounds [60 x i8]* %dummy_char, i32 0, i32 0
  %385 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %383, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %384)
  %386 = sext i32 %385 to i64
  store i64 %386, i64* %stat, align 8
  %387 = load i64* %stat, align 8
  %388 = icmp ne i64 %387, 1
  br i1 %388, label %389, label %391

; <label>:389                                     ; preds = %382
  %390 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([21 x i8]* @.str.126, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:391                                     ; preds = %382
  br label %491

; <label>:392                                     ; preds = %15
  %393 = load %struct._IO_FILE** %pf, align 8
  %394 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %395 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %393, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %394)
  %396 = sext i32 %395 to i64
  store i64 %396, i64* %stat, align 8
  %397 = load i64* %stat, align 8
  %398 = icmp ne i64 %397, 1
  br i1 %398, label %399, label %401

; <label>:399                                     ; preds = %392
  %400 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.127, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:401                                     ; preds = %392
  %402 = getelementptr inbounds [30 x i8]* %opparam, i32 0, i32 0
  %403 = call i32 @strcmp(i8* %402, i8* getelementptr inbounds ([3 x i8]* @.str.128, i32 0, i32 0))
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %405, label %406

; <label>:405                                     ; preds = %401
  store i64 0, i64* @ModelNorm, align 8
  br label %406

; <label>:406                                     ; preds = %405, %401
  br label %491

; <label>:407                                     ; preds = %15
  %408 = load %struct._IO_FILE** %pf, align 8
  %409 = getelementptr inbounds [10 x i8]* %datafile, i32 0, i32 0
  %410 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %408, i8* getelementptr inbounds ([3 x i8]* @.str.85, i32 0, i32 0), i8* %409)
  %411 = sext i32 %410 to i64
  store i64 %411, i64* %stat, align 8
  %412 = load i64* %stat, align 8
  %413 = icmp ne i64 %412, 1
  br i1 %413, label %414, label %416

; <label>:414                                     ; preds = %407
  %415 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([18 x i8]* @.str.129, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:416                                     ; preds = %407
  %417 = getelementptr inbounds [10 x i8]* %datafile, i32 0, i32 0
  %418 = call i32 @strcmp(i8* %417, i8* getelementptr inbounds ([7 x i8]* @.str.130, i32 0, i32 0))
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %421

; <label>:420                                     ; preds = %416
  store i64 1, i64* @DataType, align 8
  br label %421

; <label>:421                                     ; preds = %420, %416
  br label %491

; <label>:422                                     ; preds = %15
  %423 = load %struct._IO_FILE** %pf, align 8
  %424 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %423, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* @hu_max_prims_cell)
  %425 = sext i32 %424 to i64
  store i64 %425, i64* %stat, align 8
  %426 = load i64* %stat, align 8
  %427 = icmp ne i64 %426, 1
  br i1 %427, label %428, label %430

; <label>:428                                     ; preds = %422
  %429 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([33 x i8]* @.str.131, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:430                                     ; preds = %422
  br label %491

; <label>:431                                     ; preds = %15
  %432 = load %struct._IO_FILE** %pf, align 8
  %433 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %432, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* @hu_gridsize)
  %434 = sext i32 %433 to i64
  store i64 %434, i64* %stat, align 8
  %435 = load i64* %stat, align 8
  %436 = icmp ne i64 %435, 1
  br i1 %436, label %437, label %439

; <label>:437                                     ; preds = %431
  %438 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([27 x i8]* @.str.132, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:439                                     ; preds = %431
  br label %491

; <label>:440                                     ; preds = %15
  %441 = load %struct._IO_FILE** %pf, align 8
  %442 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %441, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* @hu_numbuckets)
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %stat, align 8
  %444 = load i64* %stat, align 8
  %445 = icmp ne i64 %444, 1
  br i1 %445, label %446, label %448

; <label>:446                                     ; preds = %440
  %447 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([29 x i8]* @.str.133, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:448                                     ; preds = %440
  br label %491

; <label>:449                                     ; preds = %15
  %450 = load %struct._IO_FILE** %pf, align 8
  %451 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %450, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* @hu_max_subdiv_level)
  %452 = sext i32 %451 to i64
  store i64 %452, i64* %stat, align 8
  %453 = load i64* %stat, align 8
  %454 = icmp ne i64 %453, 1
  br i1 %454, label %458, label %455

; <label>:455                                     ; preds = %449
  %456 = load i64* @hu_max_subdiv_level, align 8
  %457 = icmp sgt i64 %456, 3
  br i1 %457, label %458, label %460

; <label>:458                                     ; preds = %455, %449
  %459 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.134, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:460                                     ; preds = %455
  br label %491

; <label>:461                                     ; preds = %15
  %462 = load %struct._IO_FILE** %pf, align 8
  %463 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %462, i8* getelementptr inbounds ([4 x i8]* @.str.94, i32 0, i32 0), i64* @hu_lazy)
  %464 = sext i32 %463 to i64
  store i64 %464, i64* %stat, align 8
  %465 = load i64* %stat, align 8
  %466 = icmp ne i64 %465, 1
  br i1 %466, label %467, label %469

; <label>:467                                     ; preds = %461
  %468 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([23 x i8]* @.str.135, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:469                                     ; preds = %461
  br label %491

; <label>:470                                     ; preds = %15
  %471 = load %struct._IO_FILE** %pf, align 8
  %472 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %471, i8* getelementptr inbounds ([8 x i8]* @.str.104, i32 0, i32 0), i64* @bundlex, i64* @bundley)
  %473 = sext i32 %472 to i64
  store i64 %473, i64* %stat, align 8
  %474 = load i64* %stat, align 8
  %475 = icmp ne i64 %474, 2
  br i1 %475, label %476, label %478

; <label>:476                                     ; preds = %470
  %477 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([16 x i8]* @.str.136, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:478                                     ; preds = %470
  br label %491

; <label>:479                                     ; preds = %15
  %480 = load %struct._IO_FILE** %pf, align 8
  %481 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %480, i8* getelementptr inbounds ([8 x i8]* @.str.104, i32 0, i32 0), i64* @blockx, i64* @blocky)
  %482 = sext i32 %481 to i64
  store i64 %482, i64* %stat, align 8
  %483 = load i64* %stat, align 8
  %484 = icmp ne i64 %483, 2
  br i1 %484, label %485, label %487

; <label>:485                                     ; preds = %479
  %486 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([15 x i8]* @.str.137, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:487                                     ; preds = %479
  br label %491

; <label>:488                                     ; preds = %15
  %489 = getelementptr inbounds [30 x i8]* %command, i32 0, i32 0
  %490 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([40 x i8]* @.str.138, i32 0, i32 0), i8* %489)
  br label %491

; <label>:491                                     ; preds = %488, %487, %478, %469, %460, %448, %439, %430, %421, %406, %391, %381, %372, %363, %354, %345, %320, %295, %278, %262, %230, %166, %157, %139, %121, %99, %81, %68, %50, %37, %28
  br label %10

; <label>:492                                     ; preds = %10
  %493 = load %struct._IO_FILE** %pf, align 8
  %494 = call i32 @fclose(%struct._IO_FILE* %493)
  %495 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %496 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %497 = mul nsw i64 %495, %496
  store i64 %497, i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 7), align 8
  %498 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 10), align 8
  %499 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %500 = sitofp i64 %499 to double
  %501 = fdiv double %498, %500
  store double %501, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 14), align 8
  %502 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 11), align 8
  %503 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %504 = sitofp i64 %503 to double
  %505 = fdiv double %502, %504
  store double %505, double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 15), align 8
  %506 = load i64* %lights_set, align 8
  %507 = icmp ne i64 %506, 0
  br i1 %507, label %509, label %508

; <label>:508                                     ; preds = %492
  call void @InitLights()
  br label %509

; <label>:509                                     ; preds = %508, %492
  call void @InitDisplay()
  %510 = load i64* @TraversalType, align 8
  %511 = icmp ne i64 %510, 0
  br i1 %511, label %512, label %517

; <label>:512                                     ; preds = %509
  %513 = load i64* @ModelNorm, align 8
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %517

; <label>:515                                     ; preds = %512
  %516 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.139, i32 0, i32 0))
  store i64 1, i64* @ModelNorm, align 8
  br label %517

; <label>:517                                     ; preds = %515, %512, %509
  ret void

UnifiedUnreachableBlock:                          ; preds = %485, %476, %467, %458, %446, %437, %428, %414, %399, %389, %379, %370, %361, %352, %341, %328, %316, %303, %286, %270, %252, %219, %207, %199, %164, %154, %146, %136, %128, %118, %110, %96, %88, %80, %75, %65, %57, %49, %44, %35, %26, %6
  unreachable
}

declare %struct._IO_FILE* @fopen(i8*, i8*)

declare i32 @fscanf(%struct._IO_FILE*, i8*, ...)

declare i32 @fflush(%struct._IO_FILE*)

declare i32 @fclose(%struct._IO_FILE*)

; Function Attrs: nounwind uwtable
define internal void @RunLengthEncode(%struct._IO_FILE* %pf, %struct.pixel* %fb, i64 %xsize) {
  %1 = alloca %struct._IO_FILE*, align 8
  %2 = alloca %struct.pixel*, align 8
  %3 = alloca i64, align 8
  %x = alloca i64, align 8
  %rl = alloca i64, align 8
  %numpixels = alloca i64, align 8
  %red = alloca i8, align 1
  %green = alloca i8, align 1
  %blue = alloca i8, align 1
  store %struct._IO_FILE* %pf, %struct._IO_FILE** %1, align 8
  store %struct.pixel* %fb, %struct.pixel** %2, align 8
  store i64 %xsize, i64* %3, align 8
  store i64 0, i64* %rl, align 8
  store i64 0, i64* %numpixels, align 8
  %4 = load %struct.pixel** %2, align 8
  %5 = getelementptr inbounds %struct.pixel* %4, i64 0
  %6 = getelementptr inbounds %struct.pixel* %5, i32 0, i32 0
  %7 = load float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fmul double %8, 2.550000e+02
  %10 = fptosi double %9 to i64
  %11 = trunc i64 %10 to i8
  store i8 %11, i8* getelementptr inbounds ([1280 x %struct.anon]* @image, i32 0, i64 0, i32 0), align 1
  %12 = load %struct.pixel** %2, align 8
  %13 = getelementptr inbounds %struct.pixel* %12, i64 0
  %14 = getelementptr inbounds %struct.pixel* %13, i32 0, i32 1
  %15 = load float* %14, align 4
  %16 = fpext float %15 to double
  %17 = fmul double %16, 2.550000e+02
  %18 = fptosi double %17 to i64
  %19 = trunc i64 %18 to i8
  store i8 %19, i8* getelementptr inbounds ([1280 x %struct.anon]* @image, i32 0, i64 0, i32 1), align 1
  %20 = load %struct.pixel** %2, align 8
  %21 = getelementptr inbounds %struct.pixel* %20, i64 0
  %22 = getelementptr inbounds %struct.pixel* %21, i32 0, i32 2
  %23 = load float* %22, align 4
  %24 = fpext float %23 to double
  %25 = fmul double %24, 2.550000e+02
  %26 = fptosi double %25 to i64
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* getelementptr inbounds ([1280 x %struct.anon]* @image, i32 0, i64 0, i32 2), align 1
  store i64 1, i64* %x, align 8
  br label %28

; <label>:28                                      ; preds = %113, %0
  %29 = load i64* %x, align 8
  %30 = load i64* %3, align 8
  %31 = icmp slt i64 %29, %30
  br i1 %31, label %32, label %116

; <label>:32                                      ; preds = %28
  %33 = load i64* %x, align 8
  %34 = load %struct.pixel** %2, align 8
  %35 = getelementptr inbounds %struct.pixel* %34, i64 %33
  %36 = getelementptr inbounds %struct.pixel* %35, i32 0, i32 0
  %37 = load float* %36, align 4
  %38 = fpext float %37 to double
  %39 = fmul double %38, 2.550000e+02
  %40 = fptosi double %39 to i64
  %41 = trunc i64 %40 to i8
  store i8 %41, i8* %red, align 1
  %42 = load i64* %x, align 8
  %43 = load %struct.pixel** %2, align 8
  %44 = getelementptr inbounds %struct.pixel* %43, i64 %42
  %45 = getelementptr inbounds %struct.pixel* %44, i32 0, i32 1
  %46 = load float* %45, align 4
  %47 = fpext float %46 to double
  %48 = fmul double %47, 2.550000e+02
  %49 = fptosi double %48 to i64
  %50 = trunc i64 %49 to i8
  store i8 %50, i8* %green, align 1
  %51 = load i64* %x, align 8
  %52 = load %struct.pixel** %2, align 8
  %53 = getelementptr inbounds %struct.pixel* %52, i64 %51
  %54 = getelementptr inbounds %struct.pixel* %53, i32 0, i32 2
  %55 = load float* %54, align 4
  %56 = fpext float %55 to double
  %57 = fmul double %56, 2.550000e+02
  %58 = fptosi double %57 to i64
  %59 = trunc i64 %58 to i8
  store i8 %59, i8* %blue, align 1
  %60 = load i8* %red, align 1
  %61 = zext i8 %60 to i32
  %62 = load i64* %rl, align 8
  %63 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %62
  %64 = getelementptr inbounds %struct.anon* %63, i32 0, i32 0
  %65 = load i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = icmp eq i32 %61, %66
  br i1 %67, label %68, label %92

; <label>:68                                      ; preds = %32
  %69 = load i8* %green, align 1
  %70 = zext i8 %69 to i32
  %71 = load i64* %rl, align 8
  %72 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %71
  %73 = getelementptr inbounds %struct.anon* %72, i32 0, i32 1
  %74 = load i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = icmp eq i32 %70, %75
  br i1 %76, label %77, label %92

; <label>:77                                      ; preds = %68
  %78 = load i8* %blue, align 1
  %79 = zext i8 %78 to i32
  %80 = load i64* %rl, align 8
  %81 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %80
  %82 = getelementptr inbounds %struct.anon* %81, i32 0, i32 2
  %83 = load i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = icmp eq i32 %79, %84
  br i1 %85, label %86, label %92

; <label>:86                                      ; preds = %77
  %87 = load i64* %numpixels, align 8
  %88 = icmp slt i64 %87, 255
  br i1 %88, label %89, label %92

; <label>:89                                      ; preds = %86
  %90 = load i64* %numpixels, align 8
  %91 = add nsw i64 %90, 1
  store i64 %91, i64* %numpixels, align 8
  br label %112

; <label>:92                                      ; preds = %86, %77, %68, %32
  %93 = load i64* %numpixels, align 8
  %94 = trunc i64 %93 to i8
  %95 = load i64* %rl, align 8
  %96 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %95
  %97 = getelementptr inbounds %struct.anon* %96, i32 0, i32 3
  store i8 %94, i8* %97, align 1
  %98 = load i64* %rl, align 8
  %99 = add nsw i64 %98, 1
  store i64 %99, i64* %rl, align 8
  %100 = load i8* %red, align 1
  %101 = load i64* %rl, align 8
  %102 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %101
  %103 = getelementptr inbounds %struct.anon* %102, i32 0, i32 0
  store i8 %100, i8* %103, align 1
  %104 = load i8* %green, align 1
  %105 = load i64* %rl, align 8
  %106 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %105
  %107 = getelementptr inbounds %struct.anon* %106, i32 0, i32 1
  store i8 %104, i8* %107, align 1
  %108 = load i8* %blue, align 1
  %109 = load i64* %rl, align 8
  %110 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %109
  %111 = getelementptr inbounds %struct.anon* %110, i32 0, i32 2
  store i8 %108, i8* %111, align 1
  store i64 0, i64* %numpixels, align 8
  br label %112

; <label>:112                                     ; preds = %92, %89
  br label %113

; <label>:113                                     ; preds = %112
  %114 = load i64* %x, align 8
  %115 = add nsw i64 %114, 1
  store i64 %115, i64* %x, align 8
  br label %28

; <label>:116                                     ; preds = %28
  %117 = load i64* %numpixels, align 8
  %118 = trunc i64 %117 to i8
  %119 = load i64* %rl, align 8
  %120 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %119
  %121 = getelementptr inbounds %struct.anon* %120, i32 0, i32 3
  store i8 %118, i8* %121, align 1
  store i64 0, i64* %x, align 8
  br label %122

; <label>:122                                     ; preds = %149, %116
  %123 = load i64* %x, align 8
  %124 = load i64* %rl, align 8
  %125 = icmp sle i64 %123, %124
  br i1 %125, label %126, label %152

; <label>:126                                     ; preds = %122
  %127 = load %struct._IO_FILE** %1, align 8
  %128 = load i64* %x, align 8
  %129 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %128
  %130 = getelementptr inbounds %struct.anon* %129, i32 0, i32 0
  %131 = load i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = load i64* %x, align 8
  %134 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %133
  %135 = getelementptr inbounds %struct.anon* %134, i32 0, i32 1
  %136 = load i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = load i64* %x, align 8
  %139 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %138
  %140 = getelementptr inbounds %struct.anon* %139, i32 0, i32 2
  %141 = load i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load i64* %x, align 8
  %144 = getelementptr inbounds [1280 x %struct.anon]* @image, i32 0, i64 %143
  %145 = getelementptr inbounds %struct.anon* %144, i32 0, i32 3
  %146 = load i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([9 x i8]* @.str.140, i32 0, i32 0), i32 %132, i32 %137, i32 %142, i32 %147)
  br label %149

; <label>:149                                     ; preds = %126
  %150 = load i64* %x, align 8
  %151 = add nsw i64 %150, 1
  store i64 %151, i64* %x, align 8
  br label %122

; <label>:152                                     ; preds = %122
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @OpenFrameBuffer() {
  %i = alloca i64, align 8
  %fb = alloca %struct.pixel*, align 8
  %1 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 7), align 8
  %2 = mul i64 %1, 12
  %3 = call i8* @GlobalMalloc(i64 %2, i8* getelementptr inbounds ([7 x i8]* @.str.1.141, i32 0, i32 0))
  %4 = bitcast i8* %3 to %struct.pixel*
  store %struct.pixel* %4, %struct.pixel** getelementptr inbounds (%struct.display* @Display, i32 0, i32 16), align 8
  store %struct.pixel* %4, %struct.pixel** %fb, align 8
  store i64 0, i64* %i, align 8
  br label %5

; <label>:5                                       ; preds = %18, %0
  %6 = load i64* %i, align 8
  %7 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 7), align 8
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %9, label %21

; <label>:9                                       ; preds = %5
  %10 = load %struct.pixel** %fb, align 8
  %11 = getelementptr inbounds %struct.pixel* %10, i32 0, i32 0
  store float 0.000000e+00, float* %11, align 4
  %12 = load %struct.pixel** %fb, align 8
  %13 = getelementptr inbounds %struct.pixel* %12, i32 0, i32 1
  store float 0.000000e+00, float* %13, align 4
  %14 = load %struct.pixel** %fb, align 8
  %15 = getelementptr inbounds %struct.pixel* %14, i32 0, i32 2
  store float 0.000000e+00, float* %15, align 4
  %16 = load %struct.pixel** %fb, align 8
  %17 = getelementptr inbounds %struct.pixel* %16, i32 1
  store %struct.pixel* %17, %struct.pixel** %fb, align 8
  br label %18

; <label>:18                                      ; preds = %9
  %19 = load i64* %i, align 8
  %20 = add nsw i64 %19, 1
  store i64 %20, i64* %i, align 8
  br label %5

; <label>:21                                      ; preds = %5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @AddPixelColor(double* %c, i64 %x, i64 %y) {
  %1 = alloca double*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %addr = alloca i64, align 8
  %fb = alloca %struct.pixel*, align 8
  store double* %c, double** %1, align 8
  store i64 %x, i64* %2, align 8
  store i64 %y, i64* %3, align 8
  %4 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %5 = load i64* %3, align 8
  %6 = mul nsw i64 %4, %5
  %7 = load i64* %2, align 8
  %8 = add nsw i64 %6, %7
  store i64 %8, i64* %addr, align 8
  %9 = load %struct.pixel** getelementptr inbounds (%struct.display* @Display, i32 0, i32 16), align 8
  store %struct.pixel* %9, %struct.pixel** %fb, align 8
  %10 = load double** %1, align 8
  %11 = getelementptr inbounds double* %10, i64 0
  %12 = load double* %11, align 8
  %13 = load i64* %addr, align 8
  %14 = load %struct.pixel** %fb, align 8
  %15 = getelementptr inbounds %struct.pixel* %14, i64 %13
  %16 = getelementptr inbounds %struct.pixel* %15, i32 0, i32 0
  %17 = load float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fadd double %18, %12
  %20 = fptrunc double %19 to float
  store float %20, float* %16, align 4
  %21 = load double** %1, align 8
  %22 = getelementptr inbounds double* %21, i64 1
  %23 = load double* %22, align 8
  %24 = load i64* %addr, align 8
  %25 = load %struct.pixel** %fb, align 8
  %26 = getelementptr inbounds %struct.pixel* %25, i64 %24
  %27 = getelementptr inbounds %struct.pixel* %26, i32 0, i32 1
  %28 = load float* %27, align 4
  %29 = fpext float %28 to double
  %30 = fadd double %29, %23
  %31 = fptrunc double %30 to float
  store float %31, float* %27, align 4
  %32 = load double** %1, align 8
  %33 = getelementptr inbounds double* %32, i64 2
  %34 = load double* %33, align 8
  %35 = load i64* %addr, align 8
  %36 = load %struct.pixel** %fb, align 8
  %37 = getelementptr inbounds %struct.pixel* %36, i64 %35
  %38 = getelementptr inbounds %struct.pixel* %37, i32 0, i32 2
  %39 = load float* %38, align 4
  %40 = fpext float %39 to double
  %41 = fadd double %40, %34
  %42 = fptrunc double %41 to float
  store float %42, float* %38, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @CloseFrameBuffer(i8* %PicFileName) {
  %1 = alloca i8*, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %fb = alloca %struct.pixel*, align 8
  %pf = alloca %struct._IO_FILE*, align 8
  store i8* %PicFileName, i8** %1, align 8
  %2 = load i8** %1, align 8
  %3 = call %struct._IO_FILE* @fopen(i8* %2, i8* getelementptr inbounds ([3 x i8]* @.str.2.142, i32 0, i32 0))
  store %struct._IO_FILE* %3, %struct._IO_FILE** %pf, align 8
  %4 = load %struct._IO_FILE** %pf, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = load i8** %1, align 8
  %8 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([33 x i8]* @.str.3.143, i32 0, i32 0), i8* %7)
  call void @exit(i32 -1)
  unreachable

; <label>:9                                       ; preds = %0
  %10 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  store i64 %10, i64* %x, align 8
  %11 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  store i64 %11, i64* %y, align 8
  %12 = load %struct.pixel** getelementptr inbounds (%struct.display* @Display, i32 0, i32 16), align 8
  store %struct.pixel* %12, %struct.pixel** %fb, align 8
  %13 = load %struct._IO_FILE** %pf, align 8
  %14 = load i64* %x, align 8
  %15 = sdiv i64 %14, 256
  %16 = trunc i64 %15 to i8
  %17 = sext i8 %16 to i32
  %18 = load i64* %x, align 8
  %19 = srem i64 %18, 256
  %20 = trunc i64 %19 to i8
  %21 = sext i8 %20 to i32
  %22 = load i64* %y, align 8
  %23 = sdiv i64 %22, 256
  %24 = trunc i64 %23 to i8
  %25 = sext i8 %24 to i32
  %26 = load i64* %y, align 8
  %27 = srem i64 %26, 256
  %28 = trunc i64 %27 to i8
  %29 = sext i8 %28 to i32
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([17 x i8]* @.str.4.144, i32 0, i32 0), i32 0, i32 0, i32 %17, i32 %21, i32 0, i32 0, i32 %25, i32 %29)
  store i64 0, i64* %y, align 8
  br label %31

; <label>:31                                      ; preds = %183, %9
  %32 = load i64* %y, align 8
  %33 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %34 = icmp slt i64 %32, %33
  br i1 %34, label %35, label %186

; <label>:35                                      ; preds = %31
  store i64 0, i64* %x, align 8
  br label %36

; <label>:36                                      ; preds = %173, %35
  %37 = load i64* %x, align 8
  %38 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %39 = icmp slt i64 %37, %38
  br i1 %39, label %40, label %176

; <label>:40                                      ; preds = %36
  %41 = load i64* %x, align 8
  %42 = load %struct.pixel** %fb, align 8
  %43 = getelementptr inbounds %struct.pixel* %42, i64 %41
  %44 = getelementptr inbounds %struct.pixel* %43, i32 0, i32 0
  %45 = load float* %44, align 4
  %46 = fpext float %45 to double
  %47 = fcmp olt double %46, 1.000000e+00
  br i1 %47, label %48, label %55

; <label>:48                                      ; preds = %40
  %49 = load i64* %x, align 8
  %50 = load %struct.pixel** %fb, align 8
  %51 = getelementptr inbounds %struct.pixel* %50, i64 %49
  %52 = getelementptr inbounds %struct.pixel* %51, i32 0, i32 0
  %53 = load float* %52, align 4
  %54 = fpext float %53 to double
  br label %56

; <label>:55                                      ; preds = %40
  br label %56

; <label>:56                                      ; preds = %55, %48
  %57 = phi double [ %54, %48 ], [ 1.000000e+00, %55 ]
  %58 = fptrunc double %57 to float
  %59 = load i64* %x, align 8
  %60 = load %struct.pixel** %fb, align 8
  %61 = getelementptr inbounds %struct.pixel* %60, i64 %59
  %62 = getelementptr inbounds %struct.pixel* %61, i32 0, i32 0
  store float %58, float* %62, align 4
  %63 = load i64* %x, align 8
  %64 = load %struct.pixel** %fb, align 8
  %65 = getelementptr inbounds %struct.pixel* %64, i64 %63
  %66 = getelementptr inbounds %struct.pixel* %65, i32 0, i32 1
  %67 = load float* %66, align 4
  %68 = fpext float %67 to double
  %69 = fcmp olt double %68, 1.000000e+00
  br i1 %69, label %70, label %77

; <label>:70                                      ; preds = %56
  %71 = load i64* %x, align 8
  %72 = load %struct.pixel** %fb, align 8
  %73 = getelementptr inbounds %struct.pixel* %72, i64 %71
  %74 = getelementptr inbounds %struct.pixel* %73, i32 0, i32 1
  %75 = load float* %74, align 4
  %76 = fpext float %75 to double
  br label %78

; <label>:77                                      ; preds = %56
  br label %78

; <label>:78                                      ; preds = %77, %70
  %79 = phi double [ %76, %70 ], [ 1.000000e+00, %77 ]
  %80 = fptrunc double %79 to float
  %81 = load i64* %x, align 8
  %82 = load %struct.pixel** %fb, align 8
  %83 = getelementptr inbounds %struct.pixel* %82, i64 %81
  %84 = getelementptr inbounds %struct.pixel* %83, i32 0, i32 1
  store float %80, float* %84, align 4
  %85 = load i64* %x, align 8
  %86 = load %struct.pixel** %fb, align 8
  %87 = getelementptr inbounds %struct.pixel* %86, i64 %85
  %88 = getelementptr inbounds %struct.pixel* %87, i32 0, i32 2
  %89 = load float* %88, align 4
  %90 = fpext float %89 to double
  %91 = fcmp olt double %90, 1.000000e+00
  br i1 %91, label %92, label %99

; <label>:92                                      ; preds = %78
  %93 = load i64* %x, align 8
  %94 = load %struct.pixel** %fb, align 8
  %95 = getelementptr inbounds %struct.pixel* %94, i64 %93
  %96 = getelementptr inbounds %struct.pixel* %95, i32 0, i32 2
  %97 = load float* %96, align 4
  %98 = fpext float %97 to double
  br label %100

; <label>:99                                      ; preds = %78
  br label %100

; <label>:100                                     ; preds = %99, %92
  %101 = phi double [ %98, %92 ], [ 1.000000e+00, %99 ]
  %102 = fptrunc double %101 to float
  %103 = load i64* %x, align 8
  %104 = load %struct.pixel** %fb, align 8
  %105 = getelementptr inbounds %struct.pixel* %104, i64 %103
  %106 = getelementptr inbounds %struct.pixel* %105, i32 0, i32 2
  store float %102, float* %106, align 4
  %107 = load i64* %x, align 8
  %108 = load %struct.pixel** %fb, align 8
  %109 = getelementptr inbounds %struct.pixel* %108, i64 %107
  %110 = getelementptr inbounds %struct.pixel* %109, i32 0, i32 0
  %111 = load float* %110, align 4
  %112 = fpext float %111 to double
  %113 = fcmp ogt double %112, 0.000000e+00
  br i1 %113, label %114, label %121

; <label>:114                                     ; preds = %100
  %115 = load i64* %x, align 8
  %116 = load %struct.pixel** %fb, align 8
  %117 = getelementptr inbounds %struct.pixel* %116, i64 %115
  %118 = getelementptr inbounds %struct.pixel* %117, i32 0, i32 0
  %119 = load float* %118, align 4
  %120 = fpext float %119 to double
  br label %122

; <label>:121                                     ; preds = %100
  br label %122

; <label>:122                                     ; preds = %121, %114
  %123 = phi double [ %120, %114 ], [ 0.000000e+00, %121 ]
  %124 = fptrunc double %123 to float
  %125 = load i64* %x, align 8
  %126 = load %struct.pixel** %fb, align 8
  %127 = getelementptr inbounds %struct.pixel* %126, i64 %125
  %128 = getelementptr inbounds %struct.pixel* %127, i32 0, i32 0
  store float %124, float* %128, align 4
  %129 = load i64* %x, align 8
  %130 = load %struct.pixel** %fb, align 8
  %131 = getelementptr inbounds %struct.pixel* %130, i64 %129
  %132 = getelementptr inbounds %struct.pixel* %131, i32 0, i32 1
  %133 = load float* %132, align 4
  %134 = fpext float %133 to double
  %135 = fcmp ogt double %134, 0.000000e+00
  br i1 %135, label %136, label %143

; <label>:136                                     ; preds = %122
  %137 = load i64* %x, align 8
  %138 = load %struct.pixel** %fb, align 8
  %139 = getelementptr inbounds %struct.pixel* %138, i64 %137
  %140 = getelementptr inbounds %struct.pixel* %139, i32 0, i32 1
  %141 = load float* %140, align 4
  %142 = fpext float %141 to double
  br label %144

; <label>:143                                     ; preds = %122
  br label %144

; <label>:144                                     ; preds = %143, %136
  %145 = phi double [ %142, %136 ], [ 0.000000e+00, %143 ]
  %146 = fptrunc double %145 to float
  %147 = load i64* %x, align 8
  %148 = load %struct.pixel** %fb, align 8
  %149 = getelementptr inbounds %struct.pixel* %148, i64 %147
  %150 = getelementptr inbounds %struct.pixel* %149, i32 0, i32 1
  store float %146, float* %150, align 4
  %151 = load i64* %x, align 8
  %152 = load %struct.pixel** %fb, align 8
  %153 = getelementptr inbounds %struct.pixel* %152, i64 %151
  %154 = getelementptr inbounds %struct.pixel* %153, i32 0, i32 2
  %155 = load float* %154, align 4
  %156 = fpext float %155 to double
  %157 = fcmp ogt double %156, 0.000000e+00
  br i1 %157, label %158, label %165

; <label>:158                                     ; preds = %144
  %159 = load i64* %x, align 8
  %160 = load %struct.pixel** %fb, align 8
  %161 = getelementptr inbounds %struct.pixel* %160, i64 %159
  %162 = getelementptr inbounds %struct.pixel* %161, i32 0, i32 2
  %163 = load float* %162, align 4
  %164 = fpext float %163 to double
  br label %166

; <label>:165                                     ; preds = %144
  br label %166

; <label>:166                                     ; preds = %165, %158
  %167 = phi double [ %164, %158 ], [ 0.000000e+00, %165 ]
  %168 = fptrunc double %167 to float
  %169 = load i64* %x, align 8
  %170 = load %struct.pixel** %fb, align 8
  %171 = getelementptr inbounds %struct.pixel* %170, i64 %169
  %172 = getelementptr inbounds %struct.pixel* %171, i32 0, i32 2
  store float %168, float* %172, align 4
  br label %173

; <label>:173                                     ; preds = %166
  %174 = load i64* %x, align 8
  %175 = add nsw i64 %174, 1
  store i64 %175, i64* %x, align 8
  br label %36

; <label>:176                                     ; preds = %36
  %177 = load %struct._IO_FILE** %pf, align 8
  %178 = load %struct.pixel** %fb, align 8
  %179 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  call void @RunLengthEncode(%struct._IO_FILE* %177, %struct.pixel* %178, i64 %179)
  %180 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %181 = load %struct.pixel** %fb, align 8
  %182 = getelementptr inbounds %struct.pixel* %181, i64 %180
  store %struct.pixel* %182, %struct.pixel** %fb, align 8
  br label %183

; <label>:183                                     ; preds = %176
  %184 = load i64* %y, align 8
  %185 = add nsw i64 %184, 1
  store i64 %185, i64* %y, align 8
  br label %31

; <label>:186                                     ; preds = %31
  %187 = load %struct._IO_FILE** %pf, align 8
  %188 = call i32 @fclose(%struct._IO_FILE* %187)
  %189 = load %struct.pixel** getelementptr inbounds (%struct.display* @Display, i32 0, i32 16), align 8
  %190 = bitcast %struct.pixel* %189 to i8*
  call void @GlobalFree(i8* %190)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.element** @MakeElementArray(i64* %totalElements) {
  %1 = alloca i64*, align 8
  %i = alloca i64, align 8
  %po = alloca %struct.object*, align 8
  %currArrayPosition = alloca i64, align 8
  %npepa = alloca %struct.element**, align 8
  store i64* %totalElements, i64** %1, align 8
  store i64 0, i64* %currArrayPosition, align 8
  %2 = load %struct.gmem** @gm, align 8
  %3 = getelementptr inbounds %struct.gmem* %2, i32 0, i32 3
  %4 = load %struct.object** %3, align 8
  store %struct.object* %4, %struct.object** %po, align 8
  %5 = load i64** %1, align 8
  store i64 0, i64* %5, align 8
  br label %6

; <label>:6                                       ; preds = %9, %0
  %7 = load %struct.object** %po, align 8
  %8 = icmp ne %struct.object* %7, null
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %6
  %10 = load %struct.object** %po, align 8
  %11 = getelementptr inbounds %struct.object* %10, i32 0, i32 4
  %12 = load i64* %11, align 8
  %13 = load i64** %1, align 8
  %14 = load i64* %13, align 8
  %15 = add nsw i64 %14, %12
  store i64 %15, i64* %13, align 8
  %16 = load %struct.object** %po, align 8
  %17 = getelementptr inbounds %struct.object* %16, i32 0, i32 7
  %18 = load %struct.object** %17, align 8
  store %struct.object* %18, %struct.object** %po, align 8
  br label %6

; <label>:19                                      ; preds = %6
  %20 = load %struct.gmem** @gm, align 8
  %21 = getelementptr inbounds %struct.gmem* %20, i32 0, i32 3
  %22 = load %struct.object** %21, align 8
  store %struct.object* %22, %struct.object** %po, align 8
  %23 = load i64** %1, align 8
  %24 = load i64* %23, align 8
  %25 = call i8* @ObjectMalloc(i64 7, i64 %24)
  %26 = bitcast i8* %25 to %struct.element**
  store %struct.element** %26, %struct.element*** %npepa, align 8
  br label %27

; <label>:27                                      ; preds = %50, %19
  %28 = load %struct.object** %po, align 8
  %29 = icmp ne %struct.object* %28, null
  br i1 %29, label %30, label %54

; <label>:30                                      ; preds = %27
  store i64 0, i64* %i, align 8
  br label %31

; <label>:31                                      ; preds = %47, %30
  %32 = load i64* %i, align 8
  %33 = load %struct.object** %po, align 8
  %34 = getelementptr inbounds %struct.object* %33, i32 0, i32 4
  %35 = load i64* %34, align 8
  %36 = icmp slt i64 %32, %35
  br i1 %36, label %37, label %50

; <label>:37                                      ; preds = %31
  %38 = load %struct.object** %po, align 8
  %39 = getelementptr inbounds %struct.object* %38, i32 0, i32 3
  %40 = load %struct.element** %39, align 8
  %41 = load i64* %i, align 8
  %42 = getelementptr inbounds %struct.element* %40, i64 %41
  %43 = load i64* %currArrayPosition, align 8
  %44 = add nsw i64 %43, 1
  store i64 %44, i64* %currArrayPosition, align 8
  %45 = load %struct.element*** %npepa, align 8
  %46 = getelementptr inbounds %struct.element** %45, i64 %43
  store %struct.element* %42, %struct.element** %46, align 8
  br label %47

; <label>:47                                      ; preds = %37
  %48 = load i64* %i, align 8
  %49 = add nsw i64 %48, 1
  store i64 %49, i64* %i, align 8
  br label %31

; <label>:50                                      ; preds = %31
  %51 = load %struct.object** %po, align 8
  %52 = getelementptr inbounds %struct.object* %51, i32 0, i32 7
  %53 = load %struct.object** %52, align 8
  store %struct.object* %53, %struct.object** %po, align 8
  br label %27

; <label>:54                                      ; preds = %27
  %55 = load %struct.element*** %npepa, align 8
  ret %struct.element** %55
}

; Function Attrs: nounwind uwtable
define internal void @PrintGeo(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  br label %2

; <label>:2                                       ; preds = %5, %0
  %3 = load %struct.object** %1, align 8
  %4 = icmp ne %struct.object* %3, null
  br i1 %4, label %5, label %86

; <label>:5                                       ; preds = %2
  %6 = load %struct._IO_FILE** @stdout, align 8
  %7 = load %struct.object** %1, align 8
  %8 = getelementptr inbounds %struct.object* %7, i32 0, i32 1
  %9 = getelementptr inbounds [30 x i8]* %8, i32 0, i32 0
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([12 x i8]* @.str.145, i32 0, i32 0), i8* %9)
  %11 = load %struct._IO_FILE** @stdout, align 8
  %12 = load %struct.object** %1, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 6
  %14 = load %struct.surf** %13, align 8
  %15 = getelementptr inbounds %struct.surf* %14, i32 0, i32 0
  %16 = getelementptr inbounds [3 x double]* %15, i32 0, i64 0
  %17 = load double* %16, align 8
  %18 = load %struct.object** %1, align 8
  %19 = getelementptr inbounds %struct.object* %18, i32 0, i32 6
  %20 = load %struct.surf** %19, align 8
  %21 = getelementptr inbounds %struct.surf* %20, i32 0, i32 0
  %22 = getelementptr inbounds [3 x double]* %21, i32 0, i64 1
  %23 = load double* %22, align 8
  %24 = load %struct.object** %1, align 8
  %25 = getelementptr inbounds %struct.object* %24, i32 0, i32 6
  %26 = load %struct.surf** %25, align 8
  %27 = getelementptr inbounds %struct.surf* %26, i32 0, i32 0
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 2
  %29 = load double* %28, align 8
  %30 = load %struct.object** %1, align 8
  %31 = getelementptr inbounds %struct.object* %30, i32 0, i32 6
  %32 = load %struct.surf** %31, align 8
  %33 = getelementptr inbounds %struct.surf* %32, i32 0, i32 1
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 0
  %35 = load double* %34, align 8
  %36 = load %struct.object** %1, align 8
  %37 = getelementptr inbounds %struct.object* %36, i32 0, i32 6
  %38 = load %struct.surf** %37, align 8
  %39 = getelementptr inbounds %struct.surf* %38, i32 0, i32 1
  %40 = getelementptr inbounds [3 x double]* %39, i32 0, i64 1
  %41 = load double* %40, align 8
  %42 = load %struct.object** %1, align 8
  %43 = getelementptr inbounds %struct.object* %42, i32 0, i32 6
  %44 = load %struct.surf** %43, align 8
  %45 = getelementptr inbounds %struct.surf* %44, i32 0, i32 1
  %46 = getelementptr inbounds [3 x double]* %45, i32 0, i64 2
  %47 = load double* %46, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([27 x i8]* @.str.1.146, i32 0, i32 0), double %17, double %23, double %29, double %35, double %41, double %47)
  %49 = load %struct._IO_FILE** @stdout, align 8
  %50 = load %struct.object** %1, align 8
  %51 = getelementptr inbounds %struct.object* %50, i32 0, i32 6
  %52 = load %struct.surf** %51, align 8
  %53 = getelementptr inbounds %struct.surf* %52, i32 0, i32 2
  %54 = load double* %53, align 8
  %55 = load %struct.object** %1, align 8
  %56 = getelementptr inbounds %struct.object* %55, i32 0, i32 6
  %57 = load %struct.surf** %56, align 8
  %58 = getelementptr inbounds %struct.surf* %57, i32 0, i32 3
  %59 = load double* %58, align 8
  %60 = load %struct.object** %1, align 8
  %61 = getelementptr inbounds %struct.object* %60, i32 0, i32 6
  %62 = load %struct.surf** %61, align 8
  %63 = getelementptr inbounds %struct.surf* %62, i32 0, i32 4
  %64 = load double* %63, align 8
  %65 = load %struct.object** %1, align 8
  %66 = getelementptr inbounds %struct.object* %65, i32 0, i32 6
  %67 = load %struct.surf** %66, align 8
  %68 = getelementptr inbounds %struct.surf* %67, i32 0, i32 5
  %69 = load double* %68, align 8
  %70 = load %struct.object** %1, align 8
  %71 = getelementptr inbounds %struct.object* %70, i32 0, i32 6
  %72 = load %struct.surf** %71, align 8
  %73 = getelementptr inbounds %struct.surf* %72, i32 0, i32 6
  %74 = load double* %73, align 8
  %75 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([24 x i8]* @.str.2.147, i32 0, i32 0), double %54, double %59, double %64, double %69, double %74)
  %76 = load %struct.object** %1, align 8
  %77 = getelementptr inbounds %struct.object* %76, i32 0, i32 5
  %78 = load %struct.pprocs** %77, align 8
  %79 = getelementptr inbounds %struct.pprocs* %78, i32 0, i32 1
  %80 = load void (...)** %79, align 8
  %81 = load %struct.object** %1, align 8
  %82 = bitcast void (...)* %80 to void (%struct.object*, ...)*
  call void (%struct.object*, ...) %82(%struct.object* %81)
  %83 = load %struct.object** %1, align 8
  %84 = getelementptr inbounds %struct.object* %83, i32 0, i32 7
  %85 = load %struct.object** %84, align 8
  store %struct.object* %85, %struct.object** %1, align 8
  br label %2

; <label>:86                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @NormalizeGeo(%struct.object* %po, [4 x double]* %model, [4 x double]* %modelInvT) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca [4 x double]*, align 8
  %norm_minx = alloca double, align 8
  %norm_miny = alloca double, align 8
  %norm_minz = alloca double, align 8
  %norm_maxx = alloca double, align 8
  %norm_maxy = alloca double, align 8
  %norm_maxz = alloca double, align 8
  %scale_min = alloca double, align 8
  %scale_max = alloca double, align 8
  %scale = alloca double, align 8
  %trans = alloca double, align 8
  %poHead = alloca %struct.object*, align 8
  %normMat = alloca [4 x [4 x double]], align 16
  %tempMat = alloca [4 x [4 x double]], align 16
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %model, [4 x double]** %2, align 8
  store [4 x double]* %modelInvT, [4 x double]** %3, align 8
  %4 = load %struct.object** %1, align 8
  store %struct.object* %4, %struct.object** %poHead, align 8
  %5 = load i64* @TraversalType, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = load i64* @ModelNorm, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %193, label %10

; <label>:10                                      ; preds = %7, %0
  store double 1.000000e+32, double* %norm_minz, align 8
  store double 1.000000e+32, double* %norm_miny, align 8
  store double 1.000000e+32, double* %norm_minx, align 8
  store double -1.000000e+32, double* %norm_maxz, align 8
  store double -1.000000e+32, double* %norm_maxy, align 8
  store double -1.000000e+32, double* %norm_maxx, align 8
  br label %11

; <label>:11                                      ; preds = %115, %10
  %12 = load %struct.object** %1, align 8
  %13 = icmp ne %struct.object* %12, null
  br i1 %13, label %14, label %120

; <label>:14                                      ; preds = %11
  %15 = load double* %norm_minx, align 8
  %16 = load %struct.object** %1, align 8
  %17 = getelementptr inbounds %struct.object* %16, i32 0, i32 2
  %18 = getelementptr inbounds %struct.bbox* %17, i32 0, i32 0
  %19 = getelementptr inbounds [3 x double]* %18, i32 0, i64 0
  %20 = load double* %19, align 8
  %21 = fcmp olt double %15, %20
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %14
  %23 = load double* %norm_minx, align 8
  br label %30

; <label>:24                                      ; preds = %14
  %25 = load %struct.object** %1, align 8
  %26 = getelementptr inbounds %struct.object* %25, i32 0, i32 2
  %27 = getelementptr inbounds %struct.bbox* %26, i32 0, i32 0
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 0
  %29 = load double* %28, align 8
  br label %30

; <label>:30                                      ; preds = %24, %22
  %31 = phi double [ %23, %22 ], [ %29, %24 ]
  store double %31, double* %norm_minx, align 8
  %32 = load double* %norm_miny, align 8
  %33 = load %struct.object** %1, align 8
  %34 = getelementptr inbounds %struct.object* %33, i32 0, i32 2
  %35 = getelementptr inbounds %struct.bbox* %34, i32 0, i32 0
  %36 = getelementptr inbounds [3 x double]* %35, i32 0, i64 1
  %37 = load double* %36, align 8
  %38 = fcmp olt double %32, %37
  br i1 %38, label %39, label %41

; <label>:39                                      ; preds = %30
  %40 = load double* %norm_miny, align 8
  br label %47

; <label>:41                                      ; preds = %30
  %42 = load %struct.object** %1, align 8
  %43 = getelementptr inbounds %struct.object* %42, i32 0, i32 2
  %44 = getelementptr inbounds %struct.bbox* %43, i32 0, i32 0
  %45 = getelementptr inbounds [3 x double]* %44, i32 0, i64 1
  %46 = load double* %45, align 8
  br label %47

; <label>:47                                      ; preds = %41, %39
  %48 = phi double [ %40, %39 ], [ %46, %41 ]
  store double %48, double* %norm_miny, align 8
  %49 = load double* %norm_minz, align 8
  %50 = load %struct.object** %1, align 8
  %51 = getelementptr inbounds %struct.object* %50, i32 0, i32 2
  %52 = getelementptr inbounds %struct.bbox* %51, i32 0, i32 0
  %53 = getelementptr inbounds [3 x double]* %52, i32 0, i64 2
  %54 = load double* %53, align 8
  %55 = fcmp olt double %49, %54
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %47
  %57 = load double* %norm_minz, align 8
  br label %64

; <label>:58                                      ; preds = %47
  %59 = load %struct.object** %1, align 8
  %60 = getelementptr inbounds %struct.object* %59, i32 0, i32 2
  %61 = getelementptr inbounds %struct.bbox* %60, i32 0, i32 0
  %62 = getelementptr inbounds [3 x double]* %61, i32 0, i64 2
  %63 = load double* %62, align 8
  br label %64

; <label>:64                                      ; preds = %58, %56
  %65 = phi double [ %57, %56 ], [ %63, %58 ]
  store double %65, double* %norm_minz, align 8
  %66 = load double* %norm_maxx, align 8
  %67 = load %struct.object** %1, align 8
  %68 = getelementptr inbounds %struct.object* %67, i32 0, i32 2
  %69 = getelementptr inbounds %struct.bbox* %68, i32 0, i32 1
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 0
  %71 = load double* %70, align 8
  %72 = fcmp ogt double %66, %71
  br i1 %72, label %73, label %75

; <label>:73                                      ; preds = %64
  %74 = load double* %norm_maxx, align 8
  br label %81

; <label>:75                                      ; preds = %64
  %76 = load %struct.object** %1, align 8
  %77 = getelementptr inbounds %struct.object* %76, i32 0, i32 2
  %78 = getelementptr inbounds %struct.bbox* %77, i32 0, i32 1
  %79 = getelementptr inbounds [3 x double]* %78, i32 0, i64 0
  %80 = load double* %79, align 8
  br label %81

; <label>:81                                      ; preds = %75, %73
  %82 = phi double [ %74, %73 ], [ %80, %75 ]
  store double %82, double* %norm_maxx, align 8
  %83 = load double* %norm_maxy, align 8
  %84 = load %struct.object** %1, align 8
  %85 = getelementptr inbounds %struct.object* %84, i32 0, i32 2
  %86 = getelementptr inbounds %struct.bbox* %85, i32 0, i32 1
  %87 = getelementptr inbounds [3 x double]* %86, i32 0, i64 1
  %88 = load double* %87, align 8
  %89 = fcmp ogt double %83, %88
  br i1 %89, label %90, label %92

; <label>:90                                      ; preds = %81
  %91 = load double* %norm_maxy, align 8
  br label %98

; <label>:92                                      ; preds = %81
  %93 = load %struct.object** %1, align 8
  %94 = getelementptr inbounds %struct.object* %93, i32 0, i32 2
  %95 = getelementptr inbounds %struct.bbox* %94, i32 0, i32 1
  %96 = getelementptr inbounds [3 x double]* %95, i32 0, i64 1
  %97 = load double* %96, align 8
  br label %98

; <label>:98                                      ; preds = %92, %90
  %99 = phi double [ %91, %90 ], [ %97, %92 ]
  store double %99, double* %norm_maxy, align 8
  %100 = load double* %norm_maxz, align 8
  %101 = load %struct.object** %1, align 8
  %102 = getelementptr inbounds %struct.object* %101, i32 0, i32 2
  %103 = getelementptr inbounds %struct.bbox* %102, i32 0, i32 1
  %104 = getelementptr inbounds [3 x double]* %103, i32 0, i64 2
  %105 = load double* %104, align 8
  %106 = fcmp ogt double %100, %105
  br i1 %106, label %107, label %109

; <label>:107                                     ; preds = %98
  %108 = load double* %norm_maxz, align 8
  br label %115

; <label>:109                                     ; preds = %98
  %110 = load %struct.object** %1, align 8
  %111 = getelementptr inbounds %struct.object* %110, i32 0, i32 2
  %112 = getelementptr inbounds %struct.bbox* %111, i32 0, i32 1
  %113 = getelementptr inbounds [3 x double]* %112, i32 0, i64 2
  %114 = load double* %113, align 8
  br label %115

; <label>:115                                     ; preds = %109, %107
  %116 = phi double [ %108, %107 ], [ %114, %109 ]
  store double %116, double* %norm_maxz, align 8
  %117 = load %struct.object** %1, align 8
  %118 = getelementptr inbounds %struct.object* %117, i32 0, i32 7
  %119 = load %struct.object** %118, align 8
  store %struct.object* %119, %struct.object** %1, align 8
  br label %11

; <label>:120                                     ; preds = %11
  %121 = load double* %norm_minx, align 8
  %122 = load double* %norm_miny, align 8
  %123 = fcmp olt double %121, %122
  br i1 %123, label %124, label %126

; <label>:124                                     ; preds = %120
  %125 = load double* %norm_minx, align 8
  br label %128

; <label>:126                                     ; preds = %120
  %127 = load double* %norm_miny, align 8
  br label %128

; <label>:128                                     ; preds = %126, %124
  %129 = phi double [ %125, %124 ], [ %127, %126 ]
  store double %129, double* %scale_min, align 8
  %130 = load double* %scale_min, align 8
  %131 = load double* %norm_minz, align 8
  %132 = fcmp olt double %130, %131
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %128
  %134 = load double* %scale_min, align 8
  br label %137

; <label>:135                                     ; preds = %128
  %136 = load double* %norm_minz, align 8
  br label %137

; <label>:137                                     ; preds = %135, %133
  %138 = phi double [ %134, %133 ], [ %136, %135 ]
  store double %138, double* %scale_min, align 8
  %139 = load double* %norm_maxx, align 8
  %140 = load double* %norm_maxy, align 8
  %141 = fcmp ogt double %139, %140
  br i1 %141, label %142, label %144

; <label>:142                                     ; preds = %137
  %143 = load double* %norm_maxx, align 8
  br label %146

; <label>:144                                     ; preds = %137
  %145 = load double* %norm_maxy, align 8
  br label %146

; <label>:146                                     ; preds = %144, %142
  %147 = phi double [ %143, %142 ], [ %145, %144 ]
  store double %147, double* %scale_max, align 8
  %148 = load double* %scale_max, align 8
  %149 = load double* %norm_maxz, align 8
  %150 = fcmp ogt double %148, %149
  br i1 %150, label %151, label %153

; <label>:151                                     ; preds = %146
  %152 = load double* %scale_max, align 8
  br label %155

; <label>:153                                     ; preds = %146
  %154 = load double* %norm_maxz, align 8
  br label %155

; <label>:155                                     ; preds = %153, %151
  %156 = phi double [ %152, %151 ], [ %154, %153 ]
  store double %156, double* %scale_max, align 8
  %157 = load double* %scale_max, align 8
  %158 = load double* %scale_min, align 8
  %159 = fsub double %157, %158
  %160 = fdiv double 1.000000e+00, %159
  store double %160, double* %scale, align 8
  %161 = load double* %scale_min, align 8
  %162 = fsub double -0.000000e+00, %161
  %163 = load double* %scale, align 8
  %164 = fmul double %162, %163
  store double %164, double* %trans, align 8
  %165 = getelementptr inbounds [4 x [4 x double]]* %tempMat, i32 0, i32 0
  %166 = load double* %scale, align 8
  %167 = load double* %scale, align 8
  %168 = load double* %scale, align 8
  call void @Scale([4 x double]* %165, double %166, double %167, double %168)
  %169 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0, i32 0
  %170 = load double* %trans, align 8
  %171 = load double* %trans, align 8
  %172 = load double* %trans, align 8
  call void @Translate([4 x double]* %169, double %170, double %171, double %172)
  %173 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0, i32 0
  %174 = getelementptr inbounds [4 x [4 x double]]* %tempMat, i32 0, i32 0
  %175 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0, i32 0
  call void @MatrixMult([4 x double]* %173, [4 x double]* %174, [4 x double]* %175)
  %176 = load %struct.object** %poHead, align 8
  store %struct.object* %176, %struct.object** %1, align 8
  br label %177

; <label>:177                                     ; preds = %180, %155
  %178 = load %struct.object** %1, align 8
  %179 = icmp ne %struct.object* %178, null
  br i1 %179, label %180, label %192

; <label>:180                                     ; preds = %177
  %181 = load %struct.object** %1, align 8
  %182 = getelementptr inbounds %struct.object* %181, i32 0, i32 5
  %183 = load %struct.pprocs** %182, align 8
  %184 = getelementptr inbounds %struct.pprocs* %183, i32 0, i32 8
  %185 = load void (...)** %184, align 8
  %186 = load %struct.object** %1, align 8
  %187 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0, i32 0
  %188 = bitcast void (...)* %185 to void (%struct.object*, [4 x double]*, ...)*
  call void (%struct.object*, [4 x double]*, ...) %188(%struct.object* %186, [4 x double]* %187)
  %189 = load %struct.object** %1, align 8
  %190 = getelementptr inbounds %struct.object* %189, i32 0, i32 7
  %191 = load %struct.object** %190, align 8
  store %struct.object* %191, %struct.object** %1, align 8
  br label %177

; <label>:192                                     ; preds = %177
  br label %193

; <label>:193                                     ; preds = %192, %7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ReadGeoFile(i8* %GeoFileName) {
  %1 = alloca i8*, align 8
  %i = alloca i64, align 8
  %dummy = alloca i64, align 8
  %stat = alloca i64, align 8
  %comchar = alloca i8, align 1
  %primop = alloca i8, align 1
  %objstr = alloca [30 x i8], align 16
  %objname = alloca [30 x i8], align 16
  %pf = alloca %struct._IO_FILE*, align 8
  %ps = alloca %struct.surf*, align 8
  %model = alloca [4 x [4 x double]], align 16
  %modelInv = alloca [4 x [4 x double]], align 16
  %modelInvT = alloca [4 x [4 x double]], align 16
  %po = alloca %struct.object*, align 8
  %prev = alloca %struct.object*, align 8
  %curr = alloca %struct.object*, align 8
  %pe = alloca %struct.element*, align 8
  store i8* %GeoFileName, i8** %1, align 8
  %2 = load i8** %1, align 8
  %3 = call %struct._IO_FILE* @fopen(i8* %2, i8* getelementptr inbounds ([2 x i8]* @.str.3.148, i32 0, i32 0))
  store %struct._IO_FILE* %3, %struct._IO_FILE** %pf, align 8
  %4 = load %struct._IO_FILE** %pf, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = load i8** %1, align 8
  %8 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.4.149, i32 0, i32 0), i8* %7)
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:9                                       ; preds = %0
  store %struct.object* null, %struct.object** %curr, align 8
  store %struct.object* null, %struct.object** %prev, align 8
  %10 = load %struct.gmem** @gm, align 8
  %11 = getelementptr inbounds %struct.gmem* %10, i32 0, i32 3
  store %struct.object* null, %struct.object** %11, align 8
  store i64 0, i64* @prim_obj_cnt, align 8
  store i64 0, i64* @prim_elem_cnt, align 8
  %12 = getelementptr inbounds [4 x [4 x double]]* %model, i32 0, i32 0
  call void @MatrixCopy([4 x double]* %12, [4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 4, i32 0))
  %13 = getelementptr inbounds [4 x [4 x double]]* %modelInv, i32 0, i32 0
  %14 = getelementptr inbounds [4 x [4 x double]]* %model, i32 0, i32 0
  call void @MatrixInverse([4 x double]* %13, [4 x double]* %14)
  %15 = getelementptr inbounds [4 x [4 x double]]* %modelInvT, i32 0, i32 0
  %16 = getelementptr inbounds [4 x [4 x double]]* %modelInv, i32 0, i32 0
  call void @MatrixTranspose([4 x double]* %15, [4 x double]* %16)
  %17 = load %struct._IO_FILE** %pf, align 8
  %18 = call i32 @_IO_getc(%struct._IO_FILE* %17)
  %19 = trunc i32 %18 to i8
  store i8 %19, i8* %comchar, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 35
  br i1 %21, label %22, label %27

; <label>:22                                      ; preds = %9
  %23 = load i8* %comchar, align 1
  %24 = sext i8 %23 to i32
  %25 = load %struct._IO_FILE** %pf, align 8
  %26 = call i32 @ungetc(i32 %24, %struct._IO_FILE* %25)
  br label %43

; <label>:27                                      ; preds = %9
  store i8 0, i8* %comchar, align 1
  br label %28

; <label>:28                                      ; preds = %41, %27
  %29 = load i8* %comchar, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp ne i32 %30, 35
  br i1 %31, label %32, label %42

; <label>:32                                      ; preds = %28
  %33 = load %struct._IO_FILE** %pf, align 8
  %34 = call i32 @_IO_getc(%struct._IO_FILE* %33)
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %comchar, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %41

; <label>:38                                      ; preds = %32
  %39 = load %struct._IO_FILE** @stderr, align 8
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([37 x i8]* @.str.5.150, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:41                                      ; preds = %32
  br label %28

; <label>:42                                      ; preds = %28
  br label %43

; <label>:43                                      ; preds = %42, %22
  br label %44

; <label>:44                                      ; preds = %203, %43
  %45 = load %struct._IO_FILE** %pf, align 8
  %46 = getelementptr inbounds [30 x i8]* %objstr, i32 0, i32 0
  %47 = getelementptr inbounds [30 x i8]* %objname, i32 0, i32 0
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([6 x i8]* @.str.6.151, i32 0, i32 0), i8* %46, i8* %47)
  %49 = sext i32 %48 to i64
  store i64 %49, i64* %stat, align 8
  %50 = icmp ne i64 %49, -1
  br i1 %50, label %51, label %229

; <label>:51                                      ; preds = %44
  %52 = load i64* %stat, align 8
  %53 = icmp ne i64 %52, 2
  br i1 %53, label %58, label %54

; <label>:54                                      ; preds = %51
  %55 = getelementptr inbounds [30 x i8]* %objstr, i32 0, i32 0
  %56 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([7 x i8]* @.str.7.152, i32 0, i32 0))
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %61

; <label>:58                                      ; preds = %54, %51
  %59 = getelementptr inbounds [30 x i8]* %objstr, i32 0, i32 0
  %60 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.8.153, i32 0, i32 0), i8* %59)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:61                                      ; preds = %54
  %62 = load i64* @prim_obj_cnt, align 8
  %63 = add nsw i64 %62, 1
  store i64 %63, i64* @prim_obj_cnt, align 8
  %64 = call i8* @GlobalMalloc(i64 128, i8* getelementptr inbounds ([6 x i8]* @.str.9.154, i32 0, i32 0))
  %65 = bitcast i8* %64 to %struct.object*
  store %struct.object* %65, %struct.object** %curr, align 8
  %66 = load i64* @prim_obj_cnt, align 8
  %67 = load %struct.object** %curr, align 8
  %68 = getelementptr inbounds %struct.object* %67, i32 0, i32 0
  store i64 %66, i64* %68, align 8
  %69 = load %struct.object** %curr, align 8
  %70 = getelementptr inbounds %struct.object* %69, i32 0, i32 7
  store %struct.object* null, %struct.object** %70, align 8
  %71 = load %struct.object** %curr, align 8
  %72 = getelementptr inbounds %struct.object* %71, i32 0, i32 1
  %73 = getelementptr inbounds [30 x i8]* %72, i32 0, i32 0
  %74 = getelementptr inbounds [30 x i8]* %objname, i32 0, i32 0
  %75 = call i8* @strcpy(i8* %73, i8* %74)
  %76 = load %struct.gmem** @gm, align 8
  %77 = getelementptr inbounds %struct.gmem* %76, i32 0, i32 3
  %78 = load %struct.object** %77, align 8
  %79 = icmp eq %struct.object* %78, null
  br i1 %79, label %80, label %84

; <label>:80                                      ; preds = %61
  %81 = load %struct.object** %curr, align 8
  %82 = load %struct.gmem** @gm, align 8
  %83 = getelementptr inbounds %struct.gmem* %82, i32 0, i32 3
  store %struct.object* %81, %struct.object** %83, align 8
  br label %88

; <label>:84                                      ; preds = %61
  %85 = load %struct.object** %curr, align 8
  %86 = load %struct.object** %prev, align 8
  %87 = getelementptr inbounds %struct.object* %86, i32 0, i32 7
  store %struct.object* %85, %struct.object** %87, align 8
  br label %88

; <label>:88                                      ; preds = %84, %80
  %89 = call i8* @GlobalMalloc(i64 88, i8* getelementptr inbounds ([6 x i8]* @.str.9.154, i32 0, i32 0))
  %90 = bitcast i8* %89 to %struct.surf*
  store %struct.surf* %90, %struct.surf** %ps, align 8
  %91 = load %struct.surf** %ps, align 8
  %92 = load %struct.object** %curr, align 8
  %93 = getelementptr inbounds %struct.object* %92, i32 0, i32 6
  store %struct.surf* %91, %struct.surf** %93, align 8
  %94 = load %struct._IO_FILE** %pf, align 8
  %95 = load %struct.surf** %ps, align 8
  %96 = getelementptr inbounds %struct.surf* %95, i32 0, i32 0
  %97 = getelementptr inbounds [3 x double]* %96, i32 0, i64 0
  %98 = load %struct.surf** %ps, align 8
  %99 = getelementptr inbounds %struct.surf* %98, i32 0, i32 0
  %100 = getelementptr inbounds [3 x double]* %99, i32 0, i64 1
  %101 = load %struct.surf** %ps, align 8
  %102 = getelementptr inbounds %struct.surf* %101, i32 0, i32 0
  %103 = getelementptr inbounds [3 x double]* %102, i32 0, i64 2
  %104 = load %struct.surf** %ps, align 8
  %105 = getelementptr inbounds %struct.surf* %104, i32 0, i32 1
  %106 = getelementptr inbounds [3 x double]* %105, i32 0, i64 0
  %107 = load %struct.surf** %ps, align 8
  %108 = getelementptr inbounds %struct.surf* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 1
  %110 = load %struct.surf** %ps, align 8
  %111 = getelementptr inbounds %struct.surf* %110, i32 0, i32 1
  %112 = getelementptr inbounds [3 x double]* %111, i32 0, i64 2
  %113 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([24 x i8]* @.str.10.155, i32 0, i32 0), double* %97, double* %100, double* %103, double* %106, double* %109, double* %112)
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %stat, align 8
  %115 = load i64* %stat, align 8
  %116 = icmp ne i64 %115, 6
  br i1 %116, label %117, label %119

; <label>:117                                     ; preds = %88
  %118 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([25 x i8]* @.str.11.156, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:119                                     ; preds = %88
  %120 = load %struct._IO_FILE** %pf, align 8
  %121 = load %struct.surf** %ps, align 8
  %122 = getelementptr inbounds %struct.surf* %121, i32 0, i32 2
  %123 = load %struct.surf** %ps, align 8
  %124 = getelementptr inbounds %struct.surf* %123, i32 0, i32 3
  %125 = load %struct.surf** %ps, align 8
  %126 = getelementptr inbounds %struct.surf* %125, i32 0, i32 4
  %127 = load %struct.surf** %ps, align 8
  %128 = getelementptr inbounds %struct.surf* %127, i32 0, i32 5
  %129 = load %struct.surf** %ps, align 8
  %130 = getelementptr inbounds %struct.surf* %129, i32 0, i32 6
  %131 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([20 x i8]* @.str.12.157, i32 0, i32 0), double* %122, double* %124, double* %126, double* %128, double* %130)
  %132 = sext i32 %131 to i64
  store i64 %132, i64* %stat, align 8
  %133 = load i64* %stat, align 8
  %134 = icmp ne i64 %133, 5
  br i1 %134, label %135, label %137

; <label>:135                                     ; preds = %119
  %136 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([40 x i8]* @.str.13.158, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:137                                     ; preds = %119
  %138 = load %struct._IO_FILE** %pf, align 8
  %139 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %138, i8* getelementptr inbounds ([17 x i8]* @.str.14.159, i32 0, i32 0), i64* %dummy, i64* %dummy, i64* %dummy, i64* %dummy)
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %stat, align 8
  %141 = load i64* %stat, align 8
  %142 = icmp ne i64 %141, 4
  br i1 %142, label %143, label %145

; <label>:143                                     ; preds = %137
  %144 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([50 x i8]* @.str.15.160, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:145                                     ; preds = %137
  %146 = load %struct._IO_FILE** %pf, align 8
  %147 = load %struct.object** %curr, align 8
  %148 = getelementptr inbounds %struct.object* %147, i32 0, i32 4
  %149 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %146, i8* getelementptr inbounds ([7 x i8]* @.str.16.161, i32 0, i32 0), i8* %primop, i64* %148)
  %150 = sext i32 %149 to i64
  store i64 %150, i64* %stat, align 8
  %151 = load i64* %stat, align 8
  %152 = icmp ne i64 %151, 2
  br i1 %152, label %153, label %155

; <label>:153                                     ; preds = %145
  %154 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([26 x i8]* @.str.17.162, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:155                                     ; preds = %145
  %156 = load i8* %primop, align 1
  %157 = sext i8 %156 to i32
  switch i32 %157, label %169 [
    i32 115, label %158
    i32 112, label %161
    i32 116, label %164
    i32 99, label %167
    i32 113, label %167
  ]

; <label>:158                                     ; preds = %155
  %159 = load %struct.object** %curr, align 8
  %160 = getelementptr inbounds %struct.object* %159, i32 0, i32 5
  store %struct.pprocs* @SphProcs, %struct.pprocs** %160, align 8
  br label %173

; <label>:161                                     ; preds = %155
  %162 = load %struct.object** %curr, align 8
  %163 = getelementptr inbounds %struct.object* %162, i32 0, i32 5
  store %struct.pprocs* @PolyProcs, %struct.pprocs** %163, align 8
  br label %173

; <label>:164                                     ; preds = %155
  %165 = load %struct.object** %curr, align 8
  %166 = getelementptr inbounds %struct.object* %165, i32 0, i32 5
  store %struct.pprocs* @TriProcs, %struct.pprocs** %166, align 8
  br label %173

; <label>:167                                     ; preds = %155, %155
  %168 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([54 x i8]* @.str.18.163, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:169                                     ; preds = %155
  %170 = load i8* %primop, align 1
  %171 = sext i8 %170 to i32
  %172 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([30 x i8]* @.str.19.164, i32 0, i32 0), i32 %171)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:173                                     ; preds = %164, %161, %158
  %174 = load %struct.object** %curr, align 8
  %175 = getelementptr inbounds %struct.object* %174, i32 0, i32 4
  %176 = load i64* %175, align 8
  %177 = mul i64 72, %176
  %178 = call i8* @GlobalMalloc(i64 %177, i8* getelementptr inbounds ([6 x i8]* @.str.9.154, i32 0, i32 0))
  %179 = bitcast i8* %178 to %struct.element*
  store %struct.element* %179, %struct.element** %pe, align 8
  %180 = load %struct.element** %pe, align 8
  %181 = load %struct.object** %curr, align 8
  %182 = getelementptr inbounds %struct.object* %181, i32 0, i32 3
  store %struct.element* %180, %struct.element** %182, align 8
  %183 = load %struct.object** %curr, align 8
  %184 = getelementptr inbounds %struct.object* %183, i32 0, i32 4
  %185 = load i64* %184, align 8
  %186 = load i64* @prim_elem_cnt, align 8
  %187 = add nsw i64 %186, %185
  store i64 %187, i64* @prim_elem_cnt, align 8
  store i64 1, i64* %i, align 8
  br label %188

; <label>:188                                     ; preds = %198, %173
  %189 = load i64* %i, align 8
  %190 = load %struct.object** %curr, align 8
  %191 = getelementptr inbounds %struct.object* %190, i32 0, i32 4
  %192 = load i64* %191, align 8
  %193 = icmp sle i64 %189, %192
  br i1 %193, label %194, label %203

; <label>:194                                     ; preds = %188
  %195 = load i64* %i, align 8
  %196 = load %struct.element** %pe, align 8
  %197 = getelementptr inbounds %struct.element* %196, i32 0, i32 0
  store i64 %195, i64* %197, align 8
  br label %198

; <label>:198                                     ; preds = %194
  %199 = load i64* %i, align 8
  %200 = add nsw i64 %199, 1
  store i64 %200, i64* %i, align 8
  %201 = load %struct.element** %pe, align 8
  %202 = getelementptr inbounds %struct.element* %201, i32 1
  store %struct.element* %202, %struct.element** %pe, align 8
  br label %188

; <label>:203                                     ; preds = %188
  %204 = load %struct.object** %curr, align 8
  %205 = getelementptr inbounds %struct.object* %204, i32 0, i32 5
  %206 = load %struct.pprocs** %205, align 8
  %207 = getelementptr inbounds %struct.pprocs* %206, i32 0, i32 2
  %208 = load void (...)** %207, align 8
  %209 = load %struct.object** %curr, align 8
  %210 = load %struct._IO_FILE** %pf, align 8
  %211 = bitcast void (...)* %208 to void (%struct.object*, %struct._IO_FILE*, ...)*
  call void (%struct.object*, %struct._IO_FILE*, ...) %211(%struct.object* %209, %struct._IO_FILE* %210)
  %212 = load %struct.object** %curr, align 8
  %213 = getelementptr inbounds %struct.object* %212, i32 0, i32 5
  %214 = load %struct.pprocs** %213, align 8
  %215 = getelementptr inbounds %struct.pprocs* %214, i32 0, i32 4
  %216 = load void (...)** %215, align 8
  %217 = load %struct.object** %curr, align 8
  %218 = getelementptr inbounds [4 x [4 x double]]* %model, i32 0, i32 0
  %219 = getelementptr inbounds [4 x [4 x double]]* %modelInvT, i32 0, i32 0
  %220 = bitcast void (...)* %216 to void (%struct.object*, [4 x double]*, [4 x double]*, ...)*
  call void (%struct.object*, [4 x double]*, [4 x double]*, ...) %220(%struct.object* %217, [4 x double]* %218, [4 x double]* %219)
  %221 = load %struct.object** %curr, align 8
  %222 = getelementptr inbounds %struct.object* %221, i32 0, i32 5
  %223 = load %struct.pprocs** %222, align 8
  %224 = getelementptr inbounds %struct.pprocs* %223, i32 0, i32 9
  %225 = load void (...)** %224, align 8
  %226 = load %struct.object** %curr, align 8
  %227 = bitcast void (...)* %225 to void (%struct.object*, ...)*
  call void (%struct.object*, ...) %227(%struct.object* %226)
  %228 = load %struct.object** %curr, align 8
  store %struct.object* %228, %struct.object** %prev, align 8
  br label %44

; <label>:229                                     ; preds = %44
  %230 = load %struct.gmem** @gm, align 8
  %231 = getelementptr inbounds %struct.gmem* %230, i32 0, i32 3
  %232 = load %struct.object** %231, align 8
  %233 = getelementptr inbounds [4 x [4 x double]]* %model, i32 0, i32 0
  %234 = getelementptr inbounds [4 x [4 x double]]* %modelInvT, i32 0, i32 0
  call void @NormalizeGeo(%struct.object* %232, [4 x double]* %233, [4 x double]* %234)
  %235 = load %struct._IO_FILE** %pf, align 8
  %236 = call i32 @fclose(%struct._IO_FILE* %235)
  ret void

UnifiedUnreachableBlock:                          ; preds = %169, %167, %153, %143, %135, %117, %58, %38, %6
  unreachable
}

declare i32 @_IO_getc(%struct._IO_FILE*)

declare i32 @ungetc(i32, %struct._IO_FILE*)

declare i8* @strcpy(i8*, i8*)

; Function Attrs: nounwind uwtable
define internal void @prn_voxel(%struct.voxel* %v) {
  %1 = alloca %struct.voxel*, align 8
  %pe = alloca %struct.element*, align 8
  %pepa = alloca %struct.element**, align 8
  %g = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  store %struct.voxel* %v, %struct.voxel** %1, align 8
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = load %struct.voxel** %1, align 8
  %4 = getelementptr inbounds %struct.voxel* %3, i32 0, i32 0
  %5 = load i64* %4, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([28 x i8]* @.str.167, i32 0, i32 0), i64 %5)
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = load %struct.voxel** %1, align 8
  %9 = getelementptr inbounds %struct.voxel* %8, i32 0, i32 2
  %10 = load i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([23 x i8]* @.str.1.168, i32 0, i32 0), i32 %11)
  %13 = load %struct.voxel** %1, align 8
  %14 = getelementptr inbounds %struct.voxel* %13, i32 0, i32 2
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %47

; <label>:18                                      ; preds = %0
  %19 = load %struct._IO_FILE** @stderr, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([20 x i8]* @.str.2.169, i32 0, i32 0))
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([33 x i8]* @.str.3.170, i32 0, i32 0))
  %23 = load %struct.voxel** %1, align 8
  %24 = getelementptr inbounds %struct.voxel* %23, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to %struct.element**
  store %struct.element** %26, %struct.element*** %pepa, align 8
  store i64 0, i64* %i, align 8
  br label %27

; <label>:27                                      ; preds = %43, %18
  %28 = load i64* %i, align 8
  %29 = load %struct.voxel** %1, align 8
  %30 = getelementptr inbounds %struct.voxel* %29, i32 0, i32 3
  %31 = load i64* %30, align 8
  %32 = icmp slt i64 %28, %31
  br i1 %32, label %33, label %46

; <label>:33                                      ; preds = %27
  %34 = load i64* %i, align 8
  %35 = load %struct.element*** %pepa, align 8
  %36 = getelementptr inbounds %struct.element** %35, i64 %34
  %37 = load %struct.element** %36, align 8
  store %struct.element* %37, %struct.element** %pe, align 8
  %38 = load %struct._IO_FILE** @stderr, align 8
  %39 = load %struct.element** %pe, align 8
  %40 = getelementptr inbounds %struct.element* %39, i32 0, i32 0
  %41 = load i64* %40, align 8
  %42 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([18 x i8]* @.str.4.171, i32 0, i32 0), i64 %41)
  br label %43

; <label>:43                                      ; preds = %33
  %44 = load i64* %i, align 8
  %45 = add nsw i64 %44, 1
  store i64 %45, i64* %i, align 8
  br label %27

; <label>:46                                      ; preds = %27
  br label %47

; <label>:47                                      ; preds = %46, %0
  %48 = load %struct.voxel** %1, align 8
  %49 = getelementptr inbounds %struct.voxel* %48, i32 0, i32 2
  %50 = load i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 3
  br i1 %52, label %53, label %64

; <label>:53                                      ; preds = %47
  %54 = load %struct.voxel** %1, align 8
  %55 = getelementptr inbounds %struct.voxel* %54, i32 0, i32 1
  %56 = load i8** %55, align 8
  %57 = bitcast i8* %56 to %struct.grid*
  store %struct.grid* %57, %struct.grid** %g, align 8
  %58 = load %struct.grid** %g, align 8
  call void @prn_grid(%struct.grid* %58)
  %59 = load %struct._IO_FILE** @stderr, align 8
  %60 = load %struct.grid** %g, align 8
  %61 = getelementptr inbounds %struct.grid* %60, i32 0, i32 0
  %62 = load i64* %61, align 8
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([26 x i8]* @.str.5.172, i32 0, i32 0), i64 %62)
  br label %64

; <label>:64                                      ; preds = %53, %47
  %65 = load %struct._IO_FILE** @stderr, align 8
  %66 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([16 x i8]* @.str.6.173, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_grid(%struct.grid* %g) {
  %1 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %cnt = alloca i64, align 8
  %ng = alloca %struct.grid*, align 8
  %v = alloca %struct.voxel*, align 8
  store %struct.grid* %g, %struct.grid** %1, align 8
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = load %struct.grid** %1, align 8
  %4 = getelementptr inbounds %struct.grid* %3, i32 0, i32 0
  %5 = load i64* %4, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([22 x i8]* @.str.7.174, i32 0, i32 0), i64 %5)
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = load %struct.grid** %1, align 8
  %9 = getelementptr inbounds %struct.grid* %8, i32 0, i32 4
  %10 = load i64* %9, align 8
  %11 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([26 x i8]* @.str.8.175, i32 0, i32 0), i64 %10)
  %12 = load %struct._IO_FILE** @stderr, align 8
  %13 = load %struct.grid** %1, align 8
  %14 = getelementptr inbounds %struct.grid* %13, i32 0, i32 5
  %15 = getelementptr inbounds [3 x i64]* %14, i32 0, i64 0
  %16 = load i64* %15, align 8
  %17 = load %struct.grid** %1, align 8
  %18 = getelementptr inbounds %struct.grid* %17, i32 0, i32 5
  %19 = getelementptr inbounds [3 x i64]* %18, i32 0, i64 1
  %20 = load i64* %19, align 8
  %21 = load %struct.grid** %1, align 8
  %22 = getelementptr inbounds %struct.grid* %21, i32 0, i32 5
  %23 = getelementptr inbounds [3 x i64]* %22, i32 0, i64 2
  %24 = load i64* %23, align 8
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([42 x i8]* @.str.9.176, i32 0, i32 0), i64 %16, i64 %20, i64 %24)
  %26 = load %struct._IO_FILE** @stderr, align 8
  %27 = load %struct.grid** %1, align 8
  %28 = getelementptr inbounds %struct.grid* %27, i32 0, i32 6
  %29 = load i64* %28, align 8
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([28 x i8]* @.str.10.177, i32 0, i32 0), i64 %29)
  %31 = load %struct._IO_FILE** @stderr, align 8
  %32 = load %struct.grid** %1, align 8
  %33 = getelementptr inbounds %struct.grid* %32, i32 0, i32 7
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 0
  %35 = load double* %34, align 8
  %36 = load %struct.grid** %1, align 8
  %37 = getelementptr inbounds %struct.grid* %36, i32 0, i32 7
  %38 = getelementptr inbounds [3 x double]* %37, i32 0, i64 1
  %39 = load double* %38, align 8
  %40 = load %struct.grid** %1, align 8
  %41 = getelementptr inbounds %struct.grid* %40, i32 0, i32 7
  %42 = getelementptr inbounds [3 x double]* %41, i32 0, i64 2
  %43 = load double* %42, align 8
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([37 x i8]* @.str.11.178, i32 0, i32 0), double %35, double %39, double %43)
  %45 = load %struct._IO_FILE** @stderr, align 8
  %46 = load %struct.grid** %1, align 8
  %47 = getelementptr inbounds %struct.grid* %46, i32 0, i32 8
  %48 = getelementptr inbounds [3 x double]* %47, i32 0, i64 0
  %49 = load double* %48, align 8
  %50 = load %struct.grid** %1, align 8
  %51 = getelementptr inbounds %struct.grid* %50, i32 0, i32 8
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 1
  %53 = load double* %52, align 8
  %54 = load %struct.grid** %1, align 8
  %55 = getelementptr inbounds %struct.grid* %54, i32 0, i32 8
  %56 = getelementptr inbounds [3 x double]* %55, i32 0, i64 2
  %57 = load double* %56, align 8
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([42 x i8]* @.str.12.179, i32 0, i32 0), double %49, double %53, double %57)
  %59 = load %struct._IO_FILE** @stderr, align 8
  %60 = load %struct.grid** %1, align 8
  %61 = getelementptr inbounds %struct.grid* %60, i32 0, i32 9
  %62 = load i64* %61, align 8
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([29 x i8]* @.str.13.180, i32 0, i32 0), i64 %62)
  %64 = load %struct.grid** %1, align 8
  %65 = getelementptr inbounds %struct.grid* %64, i32 0, i32 11
  %66 = load %struct.grid** %65, align 8
  %67 = icmp ne %struct.grid* %66, null
  br i1 %67, label %68, label %77

; <label>:68                                      ; preds = %0
  %69 = load %struct.grid** %1, align 8
  %70 = getelementptr inbounds %struct.grid* %69, i32 0, i32 11
  %71 = load %struct.grid** %70, align 8
  store %struct.grid* %71, %struct.grid** %ng, align 8
  %72 = load %struct._IO_FILE** @stderr, align 8
  %73 = load %struct.grid** %ng, align 8
  %74 = getelementptr inbounds %struct.grid* %73, i32 0, i32 0
  %75 = load i64* %74, align 8
  %76 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([27 x i8]* @.str.14.181, i32 0, i32 0), i64 %75)
  br label %80

; <label>:77                                      ; preds = %0
  %78 = load %struct._IO_FILE** @stderr, align 8
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([28 x i8]* @.str.15.182, i32 0, i32 0))
  br label %80

; <label>:80                                      ; preds = %77, %68
  %81 = load %struct._IO_FILE** @stderr, align 8
  %82 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([17 x i8]* @.str.16.183, i32 0, i32 0))
  %83 = load %struct.grid** %1, align 8
  %84 = getelementptr inbounds %struct.grid* %83, i32 0, i32 5
  %85 = getelementptr inbounds [3 x i64]* %84, i32 0, i64 1
  %86 = load i64* %85, align 8
  %87 = load %struct.grid** %1, align 8
  %88 = getelementptr inbounds %struct.grid* %87, i32 0, i32 5
  %89 = getelementptr inbounds [3 x i64]* %88, i32 0, i64 2
  %90 = load i64* %89, align 8
  %91 = mul nsw i64 %86, %90
  store i64 %91, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %92

; <label>:92                                      ; preds = %111, %80
  %93 = load i64* %i, align 8
  %94 = load i64* %n, align 8
  %95 = icmp slt i64 %93, %94
  br i1 %95, label %96, label %114

; <label>:96                                      ; preds = %92
  %97 = load i64* %i, align 8
  %98 = load %struct.grid** %1, align 8
  %99 = call i64 @lookup_emptycells(i64 %97, %struct.grid* %98)
  %100 = icmp eq i64 %99, 1
  br i1 %100, label %101, label %105

; <label>:101                                     ; preds = %96
  %102 = load %struct._IO_FILE** @stderr, align 8
  %103 = load i64* %i, align 8
  %104 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([30 x i8]* @.str.17.184, i32 0, i32 0), i64 %103)
  br label %110

; <label>:105                                     ; preds = %96
  %106 = load i64* %i, align 8
  %107 = load %struct.grid** %1, align 8
  %108 = call %struct.voxel* @lookup_hashtable(i64 %106, %struct.grid* %107)
  store %struct.voxel* %108, %struct.voxel** %v, align 8
  %109 = load %struct.voxel** %v, align 8
  call void @prn_voxel(%struct.voxel* %109)
  br label %110

; <label>:110                                     ; preds = %105, %101
  br label %111

; <label>:111                                     ; preds = %110
  %112 = load i64* %i, align 8
  %113 = add nsw i64 %112, 1
  store i64 %113, i64* %i, align 8
  br label %92

; <label>:114                                     ; preds = %92
  %115 = load %struct._IO_FILE** @stderr, align 8
  %116 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %115, i8* getelementptr inbounds ([15 x i8]* @.str.18.185, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_ray(%struct.ray* %r) {
  %1 = alloca %struct.ray*, align 8
  %ri = alloca %struct.rayinfo*, align 8
  %g = alloca %struct.grid*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = load %struct.ray** %1, align 8
  %4 = getelementptr inbounds %struct.ray* %3, i32 0, i32 0
  %5 = load i64* %4, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8]* @.str.19.186, i32 0, i32 0), i64 %5)
  %7 = load %struct._IO_FILE** @stderr, align 8
  %8 = load %struct.ray** %1, align 8
  %9 = getelementptr inbounds %struct.ray* %8, i32 0, i32 3
  %10 = getelementptr inbounds [3 x double]* %9, i32 0, i64 0
  %11 = load double* %10, align 8
  %12 = load %struct.ray** %1, align 8
  %13 = getelementptr inbounds %struct.ray* %12, i32 0, i32 3
  %14 = getelementptr inbounds [3 x double]* %13, i32 0, i64 1
  %15 = load double* %14, align 8
  %16 = load %struct.ray** %1, align 8
  %17 = getelementptr inbounds %struct.ray* %16, i32 0, i32 3
  %18 = getelementptr inbounds [3 x double]* %17, i32 0, i64 2
  %19 = load double* %18, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([43 x i8]* @.str.20.187, i32 0, i32 0), double %11, double %15, double %19)
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = load %struct.ray** %1, align 8
  %23 = getelementptr inbounds %struct.ray* %22, i32 0, i32 4
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = load %struct.ray** %1, align 8
  %27 = getelementptr inbounds %struct.ray* %26, i32 0, i32 4
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 1
  %29 = load double* %28, align 8
  %30 = load %struct.ray** %1, align 8
  %31 = getelementptr inbounds %struct.ray* %30, i32 0, i32 4
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 2
  %33 = load double* %32, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([43 x i8]* @.str.21.188, i32 0, i32 0), double %25, double %29, double %33)
  %35 = load %struct._IO_FILE** @stderr, align 8
  %36 = load %struct.ray** %1, align 8
  %37 = getelementptr inbounds %struct.ray* %36, i32 0, i32 7
  %38 = getelementptr inbounds [3 x i64]* %37, i32 0, i64 0
  %39 = load i64* %38, align 8
  %40 = load %struct.ray** %1, align 8
  %41 = getelementptr inbounds %struct.ray* %40, i32 0, i32 7
  %42 = getelementptr inbounds [3 x i64]* %41, i32 0, i64 1
  %43 = load i64* %42, align 8
  %44 = load %struct.ray** %1, align 8
  %45 = getelementptr inbounds %struct.ray* %44, i32 0, i32 7
  %46 = getelementptr inbounds [3 x i64]* %45, i32 0, i64 2
  %47 = load i64* %46, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([48 x i8]* @.str.22.189, i32 0, i32 0), i64 %39, i64 %43, i64 %47)
  %49 = load %struct._IO_FILE** @stderr, align 8
  %50 = load %struct.ray** %1, align 8
  %51 = getelementptr inbounds %struct.ray* %50, i32 0, i32 9
  %52 = load i64* %51, align 8
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([24 x i8]* @.str.23.190, i32 0, i32 0), i64 %52)
  %54 = load %struct._IO_FILE** @stderr, align 8
  %55 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([19 x i8]* @.str.24.191, i32 0, i32 0))
  %56 = load %struct.ray** %1, align 8
  %57 = getelementptr inbounds %struct.ray* %56, i32 0, i32 8
  %58 = load %struct.rayinfo** %57, align 8
  store %struct.rayinfo* %58, %struct.rayinfo** %ri, align 8
  %59 = load %struct.rayinfo** %ri, align 8
  %60 = getelementptr inbounds %struct.rayinfo* %59, i32 0, i32 0
  %61 = load %struct.grid** %60, align 8
  store %struct.grid* %61, %struct.grid** %g, align 8
  %62 = load %struct._IO_FILE** @stderr, align 8
  %63 = load %struct.grid** %g, align 8
  %64 = getelementptr inbounds %struct.grid* %63, i32 0, i32 0
  %65 = load i64* %64, align 8
  %66 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([33 x i8]* @.str.25.192, i32 0, i32 0), i64 %65)
  %67 = load %struct._IO_FILE** @stderr, align 8
  %68 = load %struct.rayinfo** %ri, align 8
  %69 = getelementptr inbounds %struct.rayinfo* %68, i32 0, i32 1
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 0
  %71 = load double* %70, align 8
  %72 = load %struct.rayinfo** %ri, align 8
  %73 = getelementptr inbounds %struct.rayinfo* %72, i32 0, i32 1
  %74 = getelementptr inbounds [3 x double]* %73, i32 0, i64 1
  %75 = load double* %74, align 8
  %76 = load %struct.rayinfo** %ri, align 8
  %77 = getelementptr inbounds %struct.rayinfo* %76, i32 0, i32 1
  %78 = getelementptr inbounds [3 x double]* %77, i32 0, i64 2
  %79 = load double* %78, align 8
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([43 x i8]* @.str.26.193, i32 0, i32 0), double %71, double %75, double %79)
  %81 = load %struct._IO_FILE** @stderr, align 8
  %82 = load %struct.rayinfo** %ri, align 8
  %83 = getelementptr inbounds %struct.rayinfo* %82, i32 0, i32 2
  %84 = load i64* %83, align 8
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([30 x i8]* @.str.27.194, i32 0, i32 0), i64 %84)
  %86 = load %struct._IO_FILE** @stderr, align 8
  %87 = load %struct.rayinfo** %ri, align 8
  %88 = getelementptr inbounds %struct.rayinfo* %87, i32 0, i32 3
  %89 = load double* %88, align 8
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([25 x i8]* @.str.28.195, i32 0, i32 0), double %89)
  %91 = load %struct._IO_FILE** @stderr, align 8
  %92 = load %struct.rayinfo** %ri, align 8
  %93 = getelementptr inbounds %struct.rayinfo* %92, i32 0, i32 4
  %94 = load i64* %93, align 8
  %95 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([29 x i8]* @.str.29.196, i32 0, i32 0), i64 %94)
  %96 = load %struct._IO_FILE** @stderr, align 8
  %97 = load %struct.rayinfo** %ri, align 8
  %98 = getelementptr inbounds %struct.rayinfo* %97, i32 0, i32 5
  %99 = load double* %98, align 8
  %100 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([26 x i8]* @.str.30.197, i32 0, i32 0), double %99)
  %101 = load %struct._IO_FILE** @stderr, align 8
  %102 = load %struct.rayinfo** %ri, align 8
  %103 = getelementptr inbounds %struct.rayinfo* %102, i32 0, i32 6
  %104 = getelementptr inbounds [3 x double]* %103, i32 0, i64 0
  %105 = load double* %104, align 8
  %106 = load %struct.rayinfo** %ri, align 8
  %107 = getelementptr inbounds %struct.rayinfo* %106, i32 0, i32 6
  %108 = getelementptr inbounds [3 x double]* %107, i32 0, i64 1
  %109 = load double* %108, align 8
  %110 = load %struct.rayinfo** %ri, align 8
  %111 = getelementptr inbounds %struct.rayinfo* %110, i32 0, i32 6
  %112 = getelementptr inbounds [3 x double]* %111, i32 0, i64 2
  %113 = load double* %112, align 8
  %114 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([47 x i8]* @.str.31.198, i32 0, i32 0), double %105, double %109, double %113)
  %115 = load %struct._IO_FILE** @stderr, align 8
  %116 = load %struct.rayinfo** %ri, align 8
  %117 = getelementptr inbounds %struct.rayinfo* %116, i32 0, i32 7
  %118 = getelementptr inbounds [3 x i64]* %117, i32 0, i64 0
  %119 = load i64* %118, align 8
  %120 = load %struct.rayinfo** %ri, align 8
  %121 = getelementptr inbounds %struct.rayinfo* %120, i32 0, i32 7
  %122 = getelementptr inbounds [3 x i64]* %121, i32 0, i64 1
  %123 = load i64* %122, align 8
  %124 = load %struct.rayinfo** %ri, align 8
  %125 = getelementptr inbounds %struct.rayinfo* %124, i32 0, i32 7
  %126 = getelementptr inbounds [3 x i64]* %125, i32 0, i64 2
  %127 = load i64* %126, align 8
  %128 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %115, i8* getelementptr inbounds ([49 x i8]* @.str.32.199, i32 0, i32 0), i64 %119, i64 %123, i64 %127)
  %129 = load %struct._IO_FILE** @stderr, align 8
  %130 = load %struct.rayinfo** %ri, align 8
  %131 = getelementptr inbounds %struct.rayinfo* %130, i32 0, i32 8
  %132 = load i64* %131, align 8
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %129, i8* getelementptr inbounds ([28 x i8]* @.str.33.200, i32 0, i32 0), i64 %132)
  %134 = load %struct._IO_FILE** @stderr, align 8
  %135 = load %struct.rayinfo** %ri, align 8
  %136 = getelementptr inbounds %struct.rayinfo* %135, i32 0, i32 9
  %137 = getelementptr inbounds [3 x i64]* %136, i32 0, i64 0
  %138 = load i64* %137, align 8
  %139 = load %struct.rayinfo** %ri, align 8
  %140 = getelementptr inbounds %struct.rayinfo* %139, i32 0, i32 9
  %141 = getelementptr inbounds [3 x i64]* %140, i32 0, i64 1
  %142 = load i64* %141, align 8
  %143 = load %struct.rayinfo** %ri, align 8
  %144 = getelementptr inbounds %struct.rayinfo* %143, i32 0, i32 9
  %145 = getelementptr inbounds [3 x i64]* %144, i32 0, i64 2
  %146 = load i64* %145, align 8
  %147 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([52 x i8]* @.str.34.201, i32 0, i32 0), i64 %138, i64 %142, i64 %146)
  %148 = load %struct._IO_FILE** @stderr, align 8
  %149 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %148, i8* getelementptr inbounds ([14 x i8]* @.str.35.202, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_PrimElem(%struct.element* %p) {
  %1 = alloca %struct.element*, align 8
  %b = alloca %struct.bbox, align 8
  store %struct.element* %p, %struct.element** %1, align 8
  %2 = load %struct.element** %1, align 8
  %3 = icmp eq %struct.element* %2, null
  br i1 %3, label %4, label %8

; <label>:4                                       ; preds = %0
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = load i8** @ProgName, align 8
  %7 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([33 x i8]* @.str.36.203, i32 0, i32 0), i8* %6)
  call void @exit(i32 -1)
  unreachable

; <label>:8                                       ; preds = %0
  %9 = load %struct._IO_FILE** @stderr, align 8
  %10 = load %struct.element** %1, align 8
  %11 = getelementptr inbounds %struct.element* %10, i32 0, i32 0
  %12 = load i64* %11, align 8
  %13 = load %struct.element** %1, align 8
  %14 = load %struct.element** %1, align 8
  %15 = getelementptr inbounds %struct.element* %14, i32 0, i32 2
  %16 = load %struct.object** %15, align 8
  %17 = getelementptr inbounds %struct.object* %16, i32 0, i32 0
  %18 = load i64* %17, align 8
  %19 = load %struct.element** %1, align 8
  %20 = getelementptr inbounds %struct.element* %19, i32 0, i32 2
  %21 = load %struct.object** %20, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([58 x i8]* @.str.37.204, i32 0, i32 0), i64 %12, %struct.element* %13, i64 %18, %struct.object* %21)
  %23 = load %struct.element** %1, align 8
  %24 = getelementptr inbounds %struct.element* %23, i32 0, i32 1
  %25 = bitcast %struct.bbox* %b to i8*
  %26 = bitcast %struct.bbox* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 48, i32 8, i1 false)
  %27 = load %struct._IO_FILE** @stderr, align 8
  %28 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %29 = getelementptr inbounds [3 x double]* %28, i32 0, i64 0
  %30 = load double* %29, align 8
  %31 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 1
  %33 = load double* %32, align 8
  %34 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 0
  %35 = getelementptr inbounds [3 x double]* %34, i32 0, i64 2
  %36 = load double* %35, align 8
  %37 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %38 = getelementptr inbounds [3 x double]* %37, i32 0, i64 0
  %39 = load double* %38, align 8
  %40 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 1
  %42 = load double* %41, align 8
  %43 = getelementptr inbounds %struct.bbox* %b, i32 0, i32 1
  %44 = getelementptr inbounds [3 x double]* %43, i32 0, i64 2
  %45 = load double* %44, align 8
  %46 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([60 x i8]* @.str.38.205, i32 0, i32 0), double %30, double %33, double %36, double %39, double %42, double %45)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_bintree_node(%struct.btnode* %b) {
  %1 = alloca %struct.btnode*, align 8
  %i = alloca i64, align 8
  store %struct.btnode* %b, %struct.btnode** %1, align 8
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8]* @.str.39.206, i32 0, i32 0))
  %4 = load %struct._IO_FILE** @stderr, align 8
  %5 = load %struct.btnode** %1, align 8
  %6 = getelementptr inbounds %struct.btnode* %5, i32 0, i32 4
  %7 = getelementptr inbounds [3 x i64]* %6, i32 0, i64 0
  %8 = load i64* %7, align 8
  %9 = load %struct.btnode** %1, align 8
  %10 = getelementptr inbounds %struct.btnode* %9, i32 0, i32 4
  %11 = getelementptr inbounds [3 x i64]* %10, i32 0, i64 1
  %12 = load i64* %11, align 8
  %13 = load %struct.btnode** %1, align 8
  %14 = getelementptr inbounds %struct.btnode* %13, i32 0, i32 4
  %15 = getelementptr inbounds [3 x i64]* %14, i32 0, i64 2
  %16 = load i64* %15, align 8
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([42 x i8]* @.str.40.207, i32 0, i32 0), i64 %8, i64 %12, i64 %16)
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = load %struct.btnode** %1, align 8
  %20 = getelementptr inbounds %struct.btnode* %19, i32 0, i32 3
  %21 = getelementptr inbounds [3 x i64]* %20, i32 0, i64 0
  %22 = load i64* %21, align 8
  %23 = load %struct.btnode** %1, align 8
  %24 = getelementptr inbounds %struct.btnode* %23, i32 0, i32 3
  %25 = getelementptr inbounds [3 x i64]* %24, i32 0, i64 1
  %26 = load i64* %25, align 8
  %27 = load %struct.btnode** %1, align 8
  %28 = getelementptr inbounds %struct.btnode* %27, i32 0, i32 3
  %29 = getelementptr inbounds [3 x i64]* %28, i32 0, i64 2
  %30 = load i64* %29, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([35 x i8]* @.str.41.208, i32 0, i32 0), i64 %22, i64 %26, i64 %30)
  %32 = load %struct._IO_FILE** @stderr, align 8
  %33 = load %struct.btnode** %1, align 8
  %34 = getelementptr inbounds %struct.btnode* %33, i32 0, i32 1
  %35 = getelementptr inbounds [3 x double]* %34, i32 0, i64 0
  %36 = load double* %35, align 8
  %37 = load %struct.btnode** %1, align 8
  %38 = getelementptr inbounds %struct.btnode* %37, i32 0, i32 1
  %39 = getelementptr inbounds [3 x double]* %38, i32 0, i64 1
  %40 = load double* %39, align 8
  %41 = load %struct.btnode** %1, align 8
  %42 = getelementptr inbounds %struct.btnode* %41, i32 0, i32 1
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 2
  %44 = load double* %43, align 8
  %45 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([38 x i8]* @.str.42.209, i32 0, i32 0), double %36, double %40, double %44)
  %46 = load %struct._IO_FILE** @stderr, align 8
  %47 = load %struct.btnode** %1, align 8
  %48 = getelementptr inbounds %struct.btnode* %47, i32 0, i32 5
  %49 = load i64* %48, align 8
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([22 x i8]* @.str.43.210, i32 0, i32 0), i64 %49)
  %51 = load %struct._IO_FILE** @stderr, align 8
  %52 = load %struct.btnode** %1, align 8
  %53 = getelementptr inbounds %struct.btnode* %52, i32 0, i32 2
  %54 = load i64* %53, align 8
  %55 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([31 x i8]* @.str.44.211, i32 0, i32 0), i64 %54)
  %56 = load %struct._IO_FILE** @stderr, align 8
  %57 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([30 x i8]* @.str.45.212, i32 0, i32 0))
  %58 = load %struct.btnode** %1, align 8
  %59 = getelementptr inbounds %struct.btnode* %58, i32 0, i32 2
  %60 = load i64* %59, align 8
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %62, label %91

; <label>:62                                      ; preds = %0
  store i64 0, i64* %i, align 8
  br label %63

; <label>:63                                      ; preds = %87, %62
  %64 = load i64* %i, align 8
  %65 = load %struct.btnode** %1, align 8
  %66 = getelementptr inbounds %struct.btnode* %65, i32 0, i32 2
  %67 = load i64* %66, align 8
  %68 = icmp slt i64 %64, %67
  br i1 %68, label %69, label %90

; <label>:69                                      ; preds = %63
  %70 = load %struct._IO_FILE** @stderr, align 8
  %71 = load i64* %i, align 8
  %72 = load %struct.btnode** %1, align 8
  %73 = getelementptr inbounds %struct.btnode* %72, i32 0, i32 0
  %74 = load %struct.element*** %73, align 8
  %75 = getelementptr inbounds %struct.element** %74, i64 %71
  %76 = load %struct.element** %75, align 8
  %77 = getelementptr inbounds %struct.element* %76, i32 0, i32 0
  %78 = load i64* %77, align 8
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([6 x i8]* @.str.46.213, i32 0, i32 0), i64 %78)
  %80 = load i64* %i, align 8
  %81 = srem i64 %80, 8
  %82 = icmp eq i64 %81, 7
  br i1 %82, label %83, label %86

; <label>:83                                      ; preds = %69
  %84 = load %struct._IO_FILE** @stderr, align 8
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([2 x i8]* @.str.47.214, i32 0, i32 0))
  br label %86

; <label>:86                                      ; preds = %83, %69
  br label %87

; <label>:87                                      ; preds = %86
  %88 = load i64* %i, align 8
  %89 = add nsw i64 %88, 1
  store i64 %89, i64* %i, align 8
  br label %63

; <label>:90                                      ; preds = %63
  br label %91

; <label>:91                                      ; preds = %90, %0
  %92 = load %struct._IO_FILE** @stderr, align 8
  %93 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([27 x i8]* @.str.48.215, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_bintree_leaves(%struct.btnode* %root) {
  %1 = alloca %struct.btnode*, align 8
  %b = alloca %struct.btnode*, align 8
  store %struct.btnode* %root, %struct.btnode** %1, align 8
  %2 = load %struct.btnode** %1, align 8
  store %struct.btnode* %2, %struct.btnode** %b, align 8
  %3 = load %struct.btnode** %b, align 8
  %4 = getelementptr inbounds %struct.btnode* %3, i32 0, i32 5
  %5 = load i64* %4, align 8
  %6 = icmp eq i64 %5, -1
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %0
  %8 = load %struct.btnode** %b, align 8
  call void @prn_bintree_node(%struct.btnode* %8)
  br label %18

; <label>:9                                       ; preds = %0
  %10 = load %struct.btnode** %b, align 8
  %11 = getelementptr inbounds %struct.btnode* %10, i32 0, i32 7
  %12 = getelementptr inbounds [2 x %struct.btnode*]* %11, i32 0, i64 0
  %13 = load %struct.btnode** %12, align 8
  call void @prn_bintree_leaves(%struct.btnode* %13)
  %14 = load %struct.btnode** %b, align 8
  %15 = getelementptr inbounds %struct.btnode* %14, i32 0, i32 7
  %16 = getelementptr inbounds [2 x %struct.btnode*]* %15, i32 0, i64 1
  %17 = load %struct.btnode** %16, align 8
  call void @prn_bintree_leaves(%struct.btnode* %17)
  br label %18

; <label>:18                                      ; preds = %9, %7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @prn_pepa_prim_list(%struct.element** %pepa, i64 %nprims) {
  %1 = alloca %struct.element**, align 8
  %2 = alloca i64, align 8
  %i = alloca i64, align 8
  store %struct.element** %pepa, %struct.element*** %1, align 8
  store i64 %nprims, i64* %2, align 8
  %3 = load i64* %2, align 8
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %5, label %30

; <label>:5                                       ; preds = %0
  store i64 0, i64* %i, align 8
  br label %6

; <label>:6                                       ; preds = %26, %5
  %7 = load i64* %i, align 8
  %8 = load i64* %2, align 8
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %10, label %29

; <label>:10                                      ; preds = %6
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = load i64* %i, align 8
  %13 = load %struct.element*** %1, align 8
  %14 = getelementptr inbounds %struct.element** %13, i64 %12
  %15 = load %struct.element** %14, align 8
  %16 = getelementptr inbounds %struct.element* %15, i32 0, i32 0
  %17 = load i64* %16, align 8
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([6 x i8]* @.str.46.213, i32 0, i32 0), i64 %17)
  %19 = load i64* %i, align 8
  %20 = srem i64 %19, 8
  %21 = icmp eq i64 %20, 7
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %10
  %23 = load %struct._IO_FILE** @stderr, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8]* @.str.47.214, i32 0, i32 0))
  br label %25

; <label>:25                                      ; preds = %22, %10
  br label %26

; <label>:26                                      ; preds = %25
  %27 = load i64* %i, align 8
  %28 = add nsw i64 %27, 1
  store i64 %28, i64* %i, align 8
  br label %6

; <label>:29                                      ; preds = %6
  br label %30

; <label>:30                                      ; preds = %29, %0
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @Huniform_defaults() {
  store i64 2, i64* @hu_max_prims_cell, align 8
  store i64 5, i64* @hu_gridsize, align 8
  store i64 23, i64* @hu_numbuckets, align 8
  store i64 1, i64* @hu_max_subdiv_level, align 8
  store i64 0, i64* @hu_lazy, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @BuildHierarchy_Uniform() {
  %i = alloca i64, align 8
  %num = alloca i64, align 8
  %num_pe = alloca i64, align 8
  %status = alloca i64, align 8
  %den = alloca double, align 8
  %g = alloca %struct.grid*, align 8
  %gr = alloca %struct.grid*, align 8
  %ng = alloca %struct.grid*, align 8
  %testgrid = alloca %struct.grid, align 8
  %v = alloca %struct.voxel*, align 8
  %r = alloca %struct.ray, align 8
  %rinfo = alloca %struct.rayinfo*, align 8
  %pepa = alloca %struct.element**, align 8
  call void @init_masks()
  %1 = call %struct.element** @MakeElementArray(i64* %num_pe)
  store %struct.element** %1, %struct.element*** %pepa, align 8
  %2 = load %struct.element*** %pepa, align 8
  %3 = load i64* %num_pe, align 8
  %4 = call %struct.voxel* @init_world_voxel(%struct.element** %2, i64 %3)
  store %struct.voxel* %4, %struct.voxel** %v, align 8
  %5 = load %struct.voxel** %v, align 8
  %6 = load %struct.element*** %pepa, align 8
  %7 = load i64* %num_pe, align 8
  %8 = call %struct.grid* @init_world_grid(%struct.voxel* %5, %struct.element** %6, i64 %7)
  %9 = load %struct.gmem** @gm, align 8
  %10 = getelementptr inbounds %struct.gmem* %9, i32 0, i32 4
  store %struct.grid* %8, %struct.grid** %10, align 8
  %11 = load %struct.gmem** @gm, align 8
  %12 = getelementptr inbounds %struct.gmem* %11, i32 0, i32 4
  %13 = load %struct.grid** %12, align 8
  store %struct.grid* %13, %struct.grid** %g, align 8
  %14 = load %struct.voxel** %v, align 8
  %15 = load %struct.grid** %g, align 8
  %16 = load i64* %num_pe, align 8
  %17 = call %struct.grid* @create_grid(%struct.voxel* %14, %struct.grid* %15, i64 %16)
  store %struct.grid* %17, %struct.grid** %ng, align 8
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([26 x i8]* @.str.216, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @IntersectHuniformPrimlist(i64* %intersectPrim, %struct.irecord* %hit, %struct.voxel* %v, %struct.ray* %r, i64 %pid) {
  %1 = alloca i64*, align 8
  %2 = alloca %struct.irecord*, align 8
  %3 = alloca %struct.voxel*, align 8
  %4 = alloca %struct.ray*, align 8
  %5 = alloca i64, align 8
  %pptr = alloca %struct.element**, align 8
  %peParent = alloca %struct.object*, align 8
  %pe = alloca %struct.element*, align 8
  %newhit = alloca [2 x %struct.irecord], align 16
  %hitcode = alloca i64, align 8
  %i = alloca i64, align 8
  %t_out = alloca double, align 8
  store i64* %intersectPrim, i64** %1, align 8
  store %struct.irecord* %hit, %struct.irecord** %2, align 8
  store %struct.voxel* %v, %struct.voxel** %3, align 8
  store %struct.ray* %r, %struct.ray** %4, align 8
  store i64 %pid, i64* %5, align 8
  %6 = load %struct.ray** %4, align 8
  %7 = getelementptr inbounds %struct.ray* %6, i32 0, i32 8
  %8 = load %struct.rayinfo** %7, align 8
  %9 = getelementptr inbounds %struct.rayinfo* %8, i32 0, i32 5
  %10 = load double* %9, align 8
  store double %10, double* %t_out, align 8
  %11 = load %struct.irecord** %2, align 8
  %12 = getelementptr inbounds %struct.irecord* %11, i64 0
  %13 = getelementptr inbounds %struct.irecord* %12, i32 0, i32 0
  store double 1.000000e+32, double* %13, align 8
  %14 = load %struct.voxel** %3, align 8
  %15 = getelementptr inbounds %struct.voxel* %14, i32 0, i32 1
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.element**
  store %struct.element** %17, %struct.element*** %pptr, align 8
  store i64 0, i64* %i, align 8
  br label %18

; <label>:18                                      ; preds = %67, %0
  %19 = load i64* %i, align 8
  %20 = load %struct.voxel** %3, align 8
  %21 = getelementptr inbounds %struct.voxel* %20, i32 0, i32 3
  %22 = load i64* %21, align 8
  %23 = icmp slt i64 %19, %22
  br i1 %23, label %24, label %70

; <label>:24                                      ; preds = %18
  %25 = load i64* %i, align 8
  %26 = load %struct.element*** %pptr, align 8
  %27 = getelementptr inbounds %struct.element** %26, i64 %25
  %28 = load %struct.element** %27, align 8
  store %struct.element* %28, %struct.element** %pe, align 8
  %29 = load %struct.element** %pe, align 8
  %30 = getelementptr inbounds %struct.element* %29, i32 0, i32 2
  %31 = load %struct.object** %30, align 8
  store %struct.object* %31, %struct.object** %peParent, align 8
  %32 = load %struct.object** %peParent, align 8
  %33 = getelementptr inbounds %struct.object* %32, i32 0, i32 5
  %34 = load %struct.pprocs** %33, align 8
  %35 = getelementptr inbounds %struct.pprocs* %34, i32 0, i32 6
  %36 = load i64 (...)** %35, align 8
  %37 = load %struct.ray** %4, align 8
  %38 = load %struct.element** %pe, align 8
  %39 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i32 0
  %40 = bitcast i64 (...)* %36 to i64 (%struct.ray*, %struct.element*, %struct.irecord*, ...)*
  %41 = call i64 (%struct.ray*, %struct.element*, %struct.irecord*, ...) %40(%struct.ray* %37, %struct.element* %38, %struct.irecord* %39)
  store i64 %41, i64* %hitcode, align 8
  %42 = load i64* %hitcode, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %66

; <label>:44                                      ; preds = %24
  %45 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %46 = getelementptr inbounds %struct.irecord* %45, i32 0, i32 0
  %47 = load double* %46, align 8
  %48 = load %struct.irecord** %2, align 8
  %49 = getelementptr inbounds %struct.irecord* %48, i64 0
  %50 = getelementptr inbounds %struct.irecord* %49, i32 0, i32 0
  %51 = load double* %50, align 8
  %52 = fcmp olt double %47, %51
  br i1 %52, label %53, label %65

; <label>:53                                      ; preds = %44
  %54 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %55 = getelementptr inbounds %struct.irecord* %54, i32 0, i32 0
  %56 = load double* %55, align 8
  %57 = load double* %t_out, align 8
  %58 = fcmp olt double %56, %57
  br i1 %58, label %59, label %65

; <label>:59                                      ; preds = %53
  %60 = load %struct.irecord** %2, align 8
  %61 = getelementptr inbounds %struct.irecord* %60, i64 0
  %62 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %63 = bitcast %struct.irecord* %61 to i8*
  %64 = bitcast %struct.irecord* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 40, i32 8, i1 false)
  br label %65

; <label>:65                                      ; preds = %59, %53, %44
  br label %66

; <label>:66                                      ; preds = %65, %24
  br label %67

; <label>:67                                      ; preds = %66
  %68 = load i64* %i, align 8
  %69 = add nsw i64 %68, 1
  store i64 %69, i64* %i, align 8
  br label %18

; <label>:70                                      ; preds = %18
  %71 = load %struct.irecord** %2, align 8
  %72 = getelementptr inbounds %struct.irecord* %71, i64 0
  %73 = getelementptr inbounds %struct.irecord* %72, i32 0, i32 0
  %74 = load double* %73, align 8
  %75 = fcmp olt double %74, 1.000000e+32
  br i1 %75, label %76, label %78

; <label>:76                                      ; preds = %70
  %77 = load i64** %1, align 8
  store i64 1, i64* %77, align 8
  br label %80

; <label>:78                                      ; preds = %70
  %79 = load i64** %1, align 8
  store i64 0, i64* %79, align 8
  br label %80

; <label>:80                                      ; preds = %78, %76
  ret void
}

; Function Attrs: nounwind uwtable
define internal double @HuniformShadowIntersect(%struct.ray* %r, double %lightlength, %struct.element* %pe, i64 %pid) {
  %1 = alloca double, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca double, align 8
  %4 = alloca %struct.element*, align 8
  %5 = alloca i64, align 8
  %status = alloca i64, align 8
  %hitcode = alloca i64, align 8
  %i = alloca i64, align 8
  %trans = alloca double, align 8
  %peParent = alloca %struct.object*, align 8
  %pptr = alloca %struct.element**, align 8
  %pe2 = alloca %struct.element*, align 8
  %newhit = alloca [2 x %struct.irecord], align 16
  %v = alloca %struct.voxel*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  store double %lightlength, double* %3, align 8
  store %struct.element* %pe, %struct.element** %4, align 8
  store i64 %pid, i64* %5, align 8
  store double 1.000000e+00, double* %trans, align 8
  %6 = load %struct.ray** %2, align 8
  %7 = getelementptr inbounds %struct.ray* %6, i32 0, i32 8
  store %struct.rayinfo* null, %struct.rayinfo** %7, align 8
  %8 = load %struct.ray** %2, align 8
  %9 = load %struct.gmem** @gm, align 8
  %10 = getelementptr inbounds %struct.gmem* %9, i32 0, i32 4
  %11 = load %struct.grid** %10, align 8
  %12 = call %struct.voxel* @init_ray(%struct.ray* %8, %struct.grid* %11)
  store %struct.voxel* %12, %struct.voxel** %v, align 8
  %13 = load %struct.voxel** %v, align 8
  %14 = icmp eq %struct.voxel* %13, null
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %0
  %16 = load %struct.ray** %2, align 8
  call void @reset_rayinfo(%struct.ray* %16)
  %17 = load double* %trans, align 8
  store double %17, double* %1
  br label %103

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %20 = getelementptr inbounds %struct.irecord* %19, i32 0, i32 0
  store double 1.000000e+32, double* %20, align 8
  store i64 2, i64* %status, align 8
  br label %21

; <label>:21                                      ; preds = %99, %18
  %22 = load double* %trans, align 8
  %23 = fcmp ogt double %22, 0.000000e+00
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %21
  %25 = load i64* %status, align 8
  %26 = icmp ne i64 %25, 0
  br label %27

; <label>:27                                      ; preds = %24, %21
  %28 = phi i1 [ false, %21 ], [ %26, %24 ]
  br i1 %28, label %29, label %100

; <label>:29                                      ; preds = %27
  %30 = load %struct.voxel** %v, align 8
  %31 = getelementptr inbounds %struct.voxel* %30, i32 0, i32 1
  %32 = load i8** %31, align 8
  %33 = bitcast i8* %32 to %struct.element**
  store %struct.element** %33, %struct.element*** %pptr, align 8
  store i64 0, i64* %i, align 8
  br label %34

; <label>:34                                      ; preds = %90, %29
  %35 = load i64* %i, align 8
  %36 = load %struct.voxel** %v, align 8
  %37 = getelementptr inbounds %struct.voxel* %36, i32 0, i32 3
  %38 = load i64* %37, align 8
  %39 = icmp slt i64 %35, %38
  br i1 %39, label %40, label %43

; <label>:40                                      ; preds = %34
  %41 = load double* %trans, align 8
  %42 = fcmp ogt double %41, 0.000000e+00
  br label %43

; <label>:43                                      ; preds = %40, %34
  %44 = phi i1 [ false, %34 ], [ %42, %40 ]
  br i1 %44, label %45, label %93

; <label>:45                                      ; preds = %43
  %46 = load i64* %i, align 8
  %47 = load %struct.element*** %pptr, align 8
  %48 = getelementptr inbounds %struct.element** %47, i64 %46
  %49 = load %struct.element** %48, align 8
  store %struct.element* %49, %struct.element** %pe2, align 8
  %50 = load %struct.element** %pe2, align 8
  %51 = getelementptr inbounds %struct.element* %50, i32 0, i32 2
  %52 = load %struct.object** %51, align 8
  store %struct.object* %52, %struct.object** %peParent, align 8
  %53 = load %struct.object** %peParent, align 8
  %54 = getelementptr inbounds %struct.object* %53, i32 0, i32 5
  %55 = load %struct.pprocs** %54, align 8
  %56 = getelementptr inbounds %struct.pprocs* %55, i32 0, i32 6
  %57 = load i64 (...)** %56, align 8
  %58 = load %struct.ray** %2, align 8
  %59 = load %struct.element** %pe2, align 8
  %60 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i32 0
  %61 = bitcast i64 (...)* %57 to i64 (%struct.ray*, %struct.element*, %struct.irecord*, ...)*
  %62 = call i64 (%struct.ray*, %struct.element*, %struct.irecord*, ...) %61(%struct.ray* %58, %struct.element* %59, %struct.irecord* %60)
  store i64 %62, i64* %hitcode, align 8
  %63 = load i64* %hitcode, align 8
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %65, label %89

; <label>:65                                      ; preds = %45
  %66 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %67 = getelementptr inbounds %struct.irecord* %66, i32 0, i32 1
  %68 = load %struct.element** %67, align 8
  %69 = load %struct.element** %4, align 8
  %70 = icmp ne %struct.element* %68, %69
  br i1 %70, label %71, label %89

; <label>:71                                      ; preds = %65
  %72 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %73 = getelementptr inbounds %struct.irecord* %72, i32 0, i32 0
  %74 = load double* %73, align 8
  %75 = load double* %3, align 8
  %76 = fcmp olt double %74, %75
  br i1 %76, label %77, label %89

; <label>:77                                      ; preds = %71
  %78 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %79 = getelementptr inbounds %struct.irecord* %78, i32 0, i32 1
  %80 = load %struct.element** %79, align 8
  %81 = getelementptr inbounds %struct.element* %80, i32 0, i32 2
  %82 = load %struct.object** %81, align 8
  %83 = getelementptr inbounds %struct.object* %82, i32 0, i32 6
  %84 = load %struct.surf** %83, align 8
  %85 = getelementptr inbounds %struct.surf* %84, i32 0, i32 4
  %86 = load double* %85, align 8
  %87 = load double* %trans, align 8
  %88 = fmul double %87, %86
  store double %88, double* %trans, align 8
  br label %89

; <label>:89                                      ; preds = %77, %71, %65, %45
  br label %90

; <label>:90                                      ; preds = %89
  %91 = load i64* %i, align 8
  %92 = add nsw i64 %91, 1
  store i64 %92, i64* %i, align 8
  br label %34

; <label>:93                                      ; preds = %43
  %94 = load double* %trans, align 8
  %95 = fcmp ogt double %94, 0.000000e+00
  br i1 %95, label %96, label %99

; <label>:96                                      ; preds = %93
  %97 = load %struct.ray** %2, align 8
  %98 = call %struct.voxel* @next_nonempty_leaf(%struct.ray* %97, i64 1, i64* %status)
  store %struct.voxel* %98, %struct.voxel** %v, align 8
  br label %99

; <label>:99                                      ; preds = %96, %93
  br label %21

; <label>:100                                     ; preds = %27
  %101 = load %struct.ray** %2, align 8
  call void @reset_rayinfo(%struct.ray* %101)
  %102 = load double* %trans, align 8
  store double %102, double* %1
  br label %103

; <label>:103                                     ; preds = %100, %15
  %104 = load double* %1
  ret double %104
}

; Function Attrs: nounwind uwtable
define internal i64 @TraverseHierarchyUniform(%struct.ray* %r, %struct.irecord* %hit, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.irecord*, align 8
  %4 = alloca i64, align 8
  %status = alloca i64, align 8
  %intersectPrim = alloca i64, align 8
  %v = alloca %struct.voxel*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  store %struct.irecord* %hit, %struct.irecord** %3, align 8
  store i64 %pid, i64* %4, align 8
  %5 = load %struct.ray** %2, align 8
  %6 = getelementptr inbounds %struct.ray* %5, i32 0, i32 8
  store %struct.rayinfo* null, %struct.rayinfo** %6, align 8
  %7 = load %struct.ray** %2, align 8
  %8 = load %struct.gmem** @gm, align 8
  %9 = getelementptr inbounds %struct.gmem* %8, i32 0, i32 4
  %10 = load %struct.grid** %9, align 8
  %11 = call %struct.voxel* @init_ray(%struct.ray* %7, %struct.grid* %10)
  store %struct.voxel* %11, %struct.voxel** %v, align 8
  %12 = load %struct.voxel** %v, align 8
  %13 = icmp eq %struct.voxel* %12, null
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = load %struct.ray** %2, align 8
  call void @reset_rayinfo(%struct.ray* %15)
  store i64 0, i64* %1
  br label %42

; <label>:16                                      ; preds = %0
  store i64 0, i64* %intersectPrim, align 8
  %17 = load %struct.irecord** %3, align 8
  %18 = getelementptr inbounds %struct.irecord* %17, i64 0
  %19 = getelementptr inbounds %struct.irecord* %18, i32 0, i32 0
  store double 1.000000e+32, double* %19, align 8
  store i64 2, i64* %status, align 8
  br label %20

; <label>:20                                      ; preds = %38, %16
  %21 = load i64* %intersectPrim, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %26, label %23

; <label>:23                                      ; preds = %20
  %24 = load i64* %status, align 8
  %25 = icmp ne i64 %24, 0
  br label %26

; <label>:26                                      ; preds = %23, %20
  %27 = phi i1 [ false, %20 ], [ %25, %23 ]
  br i1 %27, label %28, label %39

; <label>:28                                      ; preds = %26
  %29 = load %struct.irecord** %3, align 8
  %30 = load %struct.voxel** %v, align 8
  %31 = load %struct.ray** %2, align 8
  %32 = load i64* %4, align 8
  call void @IntersectHuniformPrimlist(i64* %intersectPrim, %struct.irecord* %29, %struct.voxel* %30, %struct.ray* %31, i64 %32)
  %33 = load i64* %intersectPrim, align 8
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %38, label %35

; <label>:35                                      ; preds = %28
  %36 = load %struct.ray** %2, align 8
  %37 = call %struct.voxel* @next_nonempty_leaf(%struct.ray* %36, i64 1, i64* %status)
  store %struct.voxel* %37, %struct.voxel** %v, align 8
  br label %38

; <label>:38                                      ; preds = %35, %28
  br label %20

; <label>:39                                      ; preds = %26
  %40 = load %struct.ray** %2, align 8
  call void @reset_rayinfo(%struct.ray* %40)
  %41 = load i64* %intersectPrim, align 8
  store i64 %41, i64* %1
  br label %42

; <label>:42                                      ; preds = %39, %14
  %43 = load i64* %1
  ret i64 %43
}

; Function Attrs: nounwind uwtable
define internal void @prn_tv_stats() {
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @send_ray(%struct.ray* %r, %struct.voxel* %v) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.voxel*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  store %struct.voxel* %v, %struct.voxel** %3, align 8
  %4 = load i64* %1
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define internal %struct.voxel* @lookup_hashtable(i64 %indx, %struct.grid* %g) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %v = alloca %struct.voxel*, align 8
  store i64 %indx, i64* %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  %3 = load i64* %1, align 8
  %4 = load i64* %1, align 8
  %5 = load %struct.grid** %2, align 8
  %6 = getelementptr inbounds %struct.grid* %5, i32 0, i32 6
  %7 = load i64* %6, align 8
  %8 = sdiv i64 %4, %7
  %9 = load %struct.grid** %2, align 8
  %10 = getelementptr inbounds %struct.grid* %9, i32 0, i32 6
  %11 = load i64* %10, align 8
  %12 = mul nsw i64 %8, %11
  %13 = sub nsw i64 %3, %12
  store i64 %13, i64* %i, align 8
  %14 = load i64* %i, align 8
  %15 = load %struct.grid** %2, align 8
  %16 = getelementptr inbounds %struct.grid* %15, i32 0, i32 1
  %17 = load %struct.voxel*** %16, align 8
  %18 = getelementptr inbounds %struct.voxel** %17, i64 %14
  %19 = load %struct.voxel** %18, align 8
  store %struct.voxel* %19, %struct.voxel** %v, align 8
  br label %20

; <label>:20                                      ; preds = %35, %0
  %21 = load %struct.voxel** %v, align 8
  %22 = getelementptr inbounds %struct.voxel* %21, i32 0, i32 0
  %23 = load i64* %22, align 8
  %24 = load i64* %1, align 8
  %25 = icmp ne i64 %23, %24
  br i1 %25, label %26, label %36

; <label>:26                                      ; preds = %20
  %27 = load %struct.voxel** %v, align 8
  %28 = getelementptr inbounds %struct.voxel* %27, i32 0, i32 4
  %29 = load %struct.voxel** %28, align 8
  store %struct.voxel* %29, %struct.voxel** %v, align 8
  %30 = load %struct.voxel** %v, align 8
  %31 = icmp eq %struct.voxel* %30, null
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %26
  %33 = load %struct._IO_FILE** @stderr, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([18 x i8]* @.str.225, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

; <label>:35                                      ; preds = %26
  br label %20

; <label>:36                                      ; preds = %20
  %37 = load %struct.voxel** %v, align 8
  ret %struct.voxel* %37
}

; Function Attrs: nounwind uwtable
define internal i64 @lookup_emptycells(i64 %indx, %struct.grid* %g) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.grid*, align 8
  %i = alloca i64, align 8
  %w = alloca i64, align 8
  %r = alloca i64, align 8
  %num_bits = alloca i64, align 8
  %p = alloca i64, align 8
  %b = alloca i64, align 8
  store i64 %indx, i64* %1, align 8
  store %struct.grid* %g, %struct.grid** %2, align 8
  store i64 64, i64* %num_bits, align 8
  %3 = load i64* %1, align 8
  %4 = load i64* %num_bits, align 8
  %5 = sdiv i64 %3, %4
  store i64 %5, i64* %w, align 8
  %6 = load i64* %1, align 8
  %7 = load i64* %w, align 8
  %8 = load i64* %num_bits, align 8
  %9 = mul nsw i64 %7, %8
  %10 = sub nsw i64 %6, %9
  store i64 %10, i64* %r, align 8
  %11 = load i64* %w, align 8
  %12 = load %struct.grid** %2, align 8
  %13 = getelementptr inbounds %struct.grid* %12, i32 0, i32 2
  %14 = load i64** %13, align 8
  %15 = getelementptr inbounds i64* %14, i64 %11
  %16 = load i64* %15, align 8
  store i64 %16, i64* %p, align 8
  %17 = load i64* %p, align 8
  %18 = load i64* %r, align 8
  %19 = lshr i64 -9223372036854775808, %18
  %20 = and i64 %17, %19
  store i64 %20, i64* %b, align 8
  %21 = load i64* %b, align 8
  %22 = icmp ugt i64 %21, 0
  %23 = select i1 %22, i32 1, i32 0
  %24 = sext i32 %23 to i64
  store i64 %24, i64* %i, align 8
  %25 = load i64* %i, align 8
  ret i64 %25
}

; Function Attrs: nounwind uwtable
define internal void @pop_up_a_grid(%struct.ray* %r) {
  %1 = alloca %struct.ray*, align 8
  %old_ri = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  %2 = load %struct.ray** %1, align 8
  %3 = getelementptr inbounds %struct.ray* %2, i32 0, i32 8
  %4 = load %struct.rayinfo** %3, align 8
  store %struct.rayinfo* %4, %struct.rayinfo** %old_ri, align 8
  %5 = load %struct.rayinfo** %old_ri, align 8
  %6 = getelementptr inbounds %struct.rayinfo* %5, i32 0, i32 10
  %7 = load %struct.rayinfo** %6, align 8
  %8 = load %struct.ray** %1, align 8
  %9 = getelementptr inbounds %struct.ray* %8, i32 0, i32 8
  store %struct.rayinfo* %7, %struct.rayinfo** %9, align 8
  %10 = load %struct.ray** %1, align 8
  call void @free_rayinfo(%struct.ray* %10)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @push_down_grid(%struct.ray* %r, %struct.voxel* %v) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca %struct.voxel*, align 8
  %n = alloca i64, align 8
  %small = alloca i64, align 8
  %i_in = alloca i64, align 8
  %i_out = alloca i64, align 8
  %i = alloca i64, align 8
  %il = alloca i64, align 8
  %ih = alloca i64, align 8
  %wc = alloca [3 x double], align 16
  %ti = alloca double, align 8
  %del1 = alloca double, align 8
  %del2 = alloca double, align 8
  %t_in = alloca double, align 8
  %t_out = alloca double, align 8
  %tl = alloca double, align 8
  %th = alloca double, align 8
  %t = alloca [6 x double], align 16
  %min = alloca [3 x double], align 16
  %new_g = alloca %struct.grid*, align 8
  %new_ri = alloca %struct.rayinfo*, align 8
  %old_ri = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  store %struct.voxel* %v, %struct.voxel** %2, align 8
  %3 = load %struct.ray** %1, align 8
  %4 = getelementptr inbounds %struct.ray* %3, i32 0, i32 8
  %5 = load %struct.rayinfo** %4, align 8
  store %struct.rayinfo* %5, %struct.rayinfo** %old_ri, align 8
  %6 = load %struct.voxel** %2, align 8
  %7 = getelementptr inbounds %struct.voxel* %6, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.grid*
  store %struct.grid* %9, %struct.grid** %new_g, align 8
  %10 = load %struct.ray** %1, align 8
  %11 = call %struct.rayinfo* @ma_rayinfo(%struct.ray* %10)
  store %struct.rayinfo* %11, %struct.rayinfo** %new_ri, align 8
  %12 = load %struct.rayinfo** %new_ri, align 8
  %13 = load %struct.ray** %1, align 8
  %14 = getelementptr inbounds %struct.ray* %13, i32 0, i32 8
  store %struct.rayinfo* %12, %struct.rayinfo** %14, align 8
  %15 = load %struct.rayinfo** %old_ri, align 8
  %16 = load %struct.rayinfo** %new_ri, align 8
  %17 = getelementptr inbounds %struct.rayinfo* %16, i32 0, i32 10
  store %struct.rayinfo* %15, %struct.rayinfo** %17, align 8
  %18 = load %struct.grid** %new_g, align 8
  %19 = load %struct.rayinfo** %new_ri, align 8
  %20 = getelementptr inbounds %struct.rayinfo* %19, i32 0, i32 0
  store %struct.grid* %18, %struct.grid** %20, align 8
  %21 = load %struct.grid** %new_g, align 8
  %22 = getelementptr inbounds %struct.grid* %21, i32 0, i32 5
  %23 = getelementptr inbounds [3 x i64]* %22, i32 0, i64 1
  %24 = load i64* %23, align 8
  store i64 %24, i64* %n, align 8
  %25 = load %struct.rayinfo** %old_ri, align 8
  %26 = getelementptr inbounds %struct.rayinfo* %25, i32 0, i32 6
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 0
  %28 = load double* %27, align 8
  %29 = load i64* %n, align 8
  %30 = sitofp i64 %29 to double
  %31 = fdiv double %28, %30
  %32 = load %struct.rayinfo** %new_ri, align 8
  %33 = getelementptr inbounds %struct.rayinfo* %32, i32 0, i32 6
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 0
  store double %31, double* %34, align 8
  %35 = load %struct.rayinfo** %old_ri, align 8
  %36 = getelementptr inbounds %struct.rayinfo* %35, i32 0, i32 6
  %37 = getelementptr inbounds [3 x double]* %36, i32 0, i64 1
  %38 = load double* %37, align 8
  %39 = load i64* %n, align 8
  %40 = sitofp i64 %39 to double
  %41 = fdiv double %38, %40
  %42 = load %struct.rayinfo** %new_ri, align 8
  %43 = getelementptr inbounds %struct.rayinfo* %42, i32 0, i32 6
  %44 = getelementptr inbounds [3 x double]* %43, i32 0, i64 1
  store double %41, double* %44, align 8
  %45 = load %struct.rayinfo** %old_ri, align 8
  %46 = getelementptr inbounds %struct.rayinfo* %45, i32 0, i32 6
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 2
  %48 = load double* %47, align 8
  %49 = load i64* %n, align 8
  %50 = sitofp i64 %49 to double
  %51 = fdiv double %48, %50
  %52 = load %struct.rayinfo** %new_ri, align 8
  %53 = getelementptr inbounds %struct.rayinfo* %52, i32 0, i32 6
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 2
  store double %51, double* %54, align 8
  %55 = load %struct.rayinfo** %old_ri, align 8
  %56 = getelementptr inbounds %struct.rayinfo* %55, i32 0, i32 3
  %57 = load double* %56, align 8
  %58 = fcmp oge double %57, 0.000000e+00
  br i1 %58, label %59, label %75

; <label>:59                                      ; preds = %0
  %60 = load %struct.rayinfo** %old_ri, align 8
  %61 = getelementptr inbounds %struct.rayinfo* %60, i32 0, i32 2
  %62 = load i64* %61, align 8
  %63 = load %struct.rayinfo** %new_ri, align 8
  %64 = getelementptr inbounds %struct.rayinfo* %63, i32 0, i32 2
  store i64 %62, i64* %64, align 8
  %65 = load %struct.rayinfo** %old_ri, align 8
  %66 = getelementptr inbounds %struct.rayinfo* %65, i32 0, i32 3
  %67 = load double* %66, align 8
  %68 = load %struct.rayinfo** %new_ri, align 8
  %69 = getelementptr inbounds %struct.rayinfo* %68, i32 0, i32 3
  store double %67, double* %69, align 8
  %70 = load %struct.rayinfo** %old_ri, align 8
  %71 = getelementptr inbounds %struct.rayinfo* %70, i32 0, i32 3
  %72 = load double* %71, align 8
  %73 = load double* @eps_t, align 8
  %74 = fadd double %72, %73
  store double %74, double* %ti, align 8
  br label %83

; <label>:75                                      ; preds = %0
  store double 0.000000e+00, double* %ti, align 8
  %76 = load %struct.rayinfo** %new_ri, align 8
  %77 = getelementptr inbounds %struct.rayinfo* %76, i32 0, i32 2
  store i64 -1, i64* %77, align 8
  %78 = load %struct.rayinfo** %old_ri, align 8
  %79 = getelementptr inbounds %struct.rayinfo* %78, i32 0, i32 3
  %80 = load double* %79, align 8
  %81 = load %struct.rayinfo** %new_ri, align 8
  %82 = getelementptr inbounds %struct.rayinfo* %81, i32 0, i32 3
  store double %80, double* %82, align 8
  br label %83

; <label>:83                                      ; preds = %75, %59
  %84 = load double* %ti, align 8
  %85 = load %struct.ray** %1, align 8
  %86 = getelementptr inbounds %struct.ray* %85, i32 0, i32 4
  %87 = getelementptr inbounds [3 x double]* %86, i32 0, i64 0
  %88 = load double* %87, align 8
  %89 = fmul double %84, %88
  %90 = load %struct.ray** %1, align 8
  %91 = getelementptr inbounds %struct.ray* %90, i32 0, i32 3
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 0
  %93 = load double* %92, align 8
  %94 = fadd double %89, %93
  %95 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 0
  store double %94, double* %95, align 8
  %96 = load double* %ti, align 8
  %97 = load %struct.ray** %1, align 8
  %98 = getelementptr inbounds %struct.ray* %97, i32 0, i32 4
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 1
  %100 = load double* %99, align 8
  %101 = fmul double %96, %100
  %102 = load %struct.ray** %1, align 8
  %103 = getelementptr inbounds %struct.ray* %102, i32 0, i32 3
  %104 = getelementptr inbounds [3 x double]* %103, i32 0, i64 1
  %105 = load double* %104, align 8
  %106 = fadd double %101, %105
  %107 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 1
  store double %106, double* %107, align 8
  %108 = load double* %ti, align 8
  %109 = load %struct.ray** %1, align 8
  %110 = getelementptr inbounds %struct.ray* %109, i32 0, i32 4
  %111 = getelementptr inbounds [3 x double]* %110, i32 0, i64 2
  %112 = load double* %111, align 8
  %113 = fmul double %108, %112
  %114 = load %struct.ray** %1, align 8
  %115 = getelementptr inbounds %struct.ray* %114, i32 0, i32 3
  %116 = getelementptr inbounds [3 x double]* %115, i32 0, i64 2
  %117 = load double* %116, align 8
  %118 = fadd double %113, %117
  %119 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 2
  store double %118, double* %119, align 8
  %120 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 0
  %121 = load double* %120, align 8
  %122 = load %struct.grid** %new_g, align 8
  %123 = getelementptr inbounds %struct.grid* %122, i32 0, i32 7
  %124 = getelementptr inbounds [3 x double]* %123, i32 0, i64 0
  %125 = load double* %124, align 8
  %126 = fsub double %121, %125
  %127 = load %struct.grid** %new_g, align 8
  %128 = getelementptr inbounds %struct.grid* %127, i32 0, i32 8
  %129 = getelementptr inbounds [3 x double]* %128, i32 0, i64 0
  %130 = load double* %129, align 8
  %131 = fdiv double %126, %130
  %132 = fptosi double %131 to i32
  %133 = sext i32 %132 to i64
  %134 = load %struct.rayinfo** %new_ri, align 8
  %135 = getelementptr inbounds %struct.rayinfo* %134, i32 0, i32 7
  %136 = getelementptr inbounds [3 x i64]* %135, i32 0, i64 0
  store i64 %133, i64* %136, align 8
  %137 = load %struct.rayinfo** %new_ri, align 8
  %138 = getelementptr inbounds %struct.rayinfo* %137, i32 0, i32 7
  %139 = getelementptr inbounds [3 x i64]* %138, i32 0, i64 0
  %140 = load i64* %139, align 8
  %141 = icmp slt i64 %140, 0
  br i1 %141, label %142, label %146

; <label>:142                                     ; preds = %83
  %143 = load %struct.rayinfo** %new_ri, align 8
  %144 = getelementptr inbounds %struct.rayinfo* %143, i32 0, i32 7
  %145 = getelementptr inbounds [3 x i64]* %144, i32 0, i64 0
  store i64 0, i64* %145, align 8
  br label %146

; <label>:146                                     ; preds = %142, %83
  %147 = load %struct.rayinfo** %new_ri, align 8
  %148 = getelementptr inbounds %struct.rayinfo* %147, i32 0, i32 7
  %149 = getelementptr inbounds [3 x i64]* %148, i32 0, i64 0
  %150 = load i64* %149, align 8
  %151 = load i64* %n, align 8
  %152 = icmp sge i64 %150, %151
  br i1 %152, label %153, label %159

; <label>:153                                     ; preds = %146
  %154 = load i64* %n, align 8
  %155 = sub nsw i64 %154, 1
  %156 = load %struct.rayinfo** %new_ri, align 8
  %157 = getelementptr inbounds %struct.rayinfo* %156, i32 0, i32 7
  %158 = getelementptr inbounds [3 x i64]* %157, i32 0, i64 0
  store i64 %155, i64* %158, align 8
  br label %159

; <label>:159                                     ; preds = %153, %146
  %160 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 1
  %161 = load double* %160, align 8
  %162 = load %struct.grid** %new_g, align 8
  %163 = getelementptr inbounds %struct.grid* %162, i32 0, i32 7
  %164 = getelementptr inbounds [3 x double]* %163, i32 0, i64 1
  %165 = load double* %164, align 8
  %166 = fsub double %161, %165
  %167 = load %struct.grid** %new_g, align 8
  %168 = getelementptr inbounds %struct.grid* %167, i32 0, i32 8
  %169 = getelementptr inbounds [3 x double]* %168, i32 0, i64 1
  %170 = load double* %169, align 8
  %171 = fdiv double %166, %170
  %172 = fptosi double %171 to i32
  %173 = sext i32 %172 to i64
  %174 = load %struct.rayinfo** %new_ri, align 8
  %175 = getelementptr inbounds %struct.rayinfo* %174, i32 0, i32 7
  %176 = getelementptr inbounds [3 x i64]* %175, i32 0, i64 1
  store i64 %173, i64* %176, align 8
  %177 = load %struct.rayinfo** %new_ri, align 8
  %178 = getelementptr inbounds %struct.rayinfo* %177, i32 0, i32 7
  %179 = getelementptr inbounds [3 x i64]* %178, i32 0, i64 1
  %180 = load i64* %179, align 8
  %181 = icmp slt i64 %180, 0
  br i1 %181, label %182, label %186

; <label>:182                                     ; preds = %159
  %183 = load %struct.rayinfo** %new_ri, align 8
  %184 = getelementptr inbounds %struct.rayinfo* %183, i32 0, i32 7
  %185 = getelementptr inbounds [3 x i64]* %184, i32 0, i64 1
  store i64 0, i64* %185, align 8
  br label %186

; <label>:186                                     ; preds = %182, %159
  %187 = load %struct.rayinfo** %new_ri, align 8
  %188 = getelementptr inbounds %struct.rayinfo* %187, i32 0, i32 7
  %189 = getelementptr inbounds [3 x i64]* %188, i32 0, i64 1
  %190 = load i64* %189, align 8
  %191 = load i64* %n, align 8
  %192 = icmp sge i64 %190, %191
  br i1 %192, label %193, label %199

; <label>:193                                     ; preds = %186
  %194 = load i64* %n, align 8
  %195 = sub nsw i64 %194, 1
  %196 = load %struct.rayinfo** %new_ri, align 8
  %197 = getelementptr inbounds %struct.rayinfo* %196, i32 0, i32 7
  %198 = getelementptr inbounds [3 x i64]* %197, i32 0, i64 1
  store i64 %195, i64* %198, align 8
  br label %199

; <label>:199                                     ; preds = %193, %186
  %200 = getelementptr inbounds [3 x double]* %wc, i32 0, i64 2
  %201 = load double* %200, align 8
  %202 = load %struct.grid** %new_g, align 8
  %203 = getelementptr inbounds %struct.grid* %202, i32 0, i32 7
  %204 = getelementptr inbounds [3 x double]* %203, i32 0, i64 2
  %205 = load double* %204, align 8
  %206 = fsub double %201, %205
  %207 = load %struct.grid** %new_g, align 8
  %208 = getelementptr inbounds %struct.grid* %207, i32 0, i32 8
  %209 = getelementptr inbounds [3 x double]* %208, i32 0, i64 2
  %210 = load double* %209, align 8
  %211 = fdiv double %206, %210
  %212 = fptosi double %211 to i32
  %213 = sext i32 %212 to i64
  %214 = load %struct.rayinfo** %new_ri, align 8
  %215 = getelementptr inbounds %struct.rayinfo* %214, i32 0, i32 7
  %216 = getelementptr inbounds [3 x i64]* %215, i32 0, i64 2
  store i64 %213, i64* %216, align 8
  %217 = load %struct.rayinfo** %new_ri, align 8
  %218 = getelementptr inbounds %struct.rayinfo* %217, i32 0, i32 7
  %219 = getelementptr inbounds [3 x i64]* %218, i32 0, i64 2
  %220 = load i64* %219, align 8
  %221 = icmp slt i64 %220, 0
  br i1 %221, label %222, label %226

; <label>:222                                     ; preds = %199
  %223 = load %struct.rayinfo** %new_ri, align 8
  %224 = getelementptr inbounds %struct.rayinfo* %223, i32 0, i32 7
  %225 = getelementptr inbounds [3 x i64]* %224, i32 0, i64 2
  store i64 0, i64* %225, align 8
  br label %226

; <label>:226                                     ; preds = %222, %199
  %227 = load %struct.rayinfo** %new_ri, align 8
  %228 = getelementptr inbounds %struct.rayinfo* %227, i32 0, i32 7
  %229 = getelementptr inbounds [3 x i64]* %228, i32 0, i64 2
  %230 = load i64* %229, align 8
  %231 = load i64* %n, align 8
  %232 = icmp sge i64 %230, %231
  br i1 %232, label %233, label %239

; <label>:233                                     ; preds = %226
  %234 = load i64* %n, align 8
  %235 = sub nsw i64 %234, 1
  %236 = load %struct.rayinfo** %new_ri, align 8
  %237 = getelementptr inbounds %struct.rayinfo* %236, i32 0, i32 7
  %238 = getelementptr inbounds [3 x i64]* %237, i32 0, i64 2
  store i64 %235, i64* %238, align 8
  br label %239

; <label>:239                                     ; preds = %233, %226
  %240 = load %struct.rayinfo** %new_ri, align 8
  %241 = getelementptr inbounds %struct.rayinfo* %240, i32 0, i32 7
  %242 = getelementptr inbounds [3 x i64]* %241, i32 0, i64 0
  %243 = load i64* %242, align 8
  %244 = load %struct.rayinfo** %new_ri, align 8
  %245 = getelementptr inbounds %struct.rayinfo* %244, i32 0, i32 7
  %246 = getelementptr inbounds [3 x i64]* %245, i32 0, i64 1
  %247 = load i64* %246, align 8
  %248 = load i64* %n, align 8
  %249 = mul nsw i64 %247, %248
  %250 = add nsw i64 %243, %249
  %251 = load %struct.rayinfo** %new_ri, align 8
  %252 = getelementptr inbounds %struct.rayinfo* %251, i32 0, i32 7
  %253 = getelementptr inbounds [3 x i64]* %252, i32 0, i64 2
  %254 = load i64* %253, align 8
  %255 = load %struct.grid** %new_g, align 8
  %256 = getelementptr inbounds %struct.grid* %255, i32 0, i32 5
  %257 = getelementptr inbounds [3 x i64]* %256, i32 0, i64 2
  %258 = load i64* %257, align 8
  %259 = mul nsw i64 %254, %258
  %260 = add nsw i64 %250, %259
  %261 = load %struct.rayinfo** %new_ri, align 8
  %262 = getelementptr inbounds %struct.rayinfo* %261, i32 0, i32 8
  store i64 %260, i64* %262, align 8
  %263 = load %struct.ray** %1, align 8
  %264 = getelementptr inbounds %struct.ray* %263, i32 0, i32 7
  %265 = getelementptr inbounds [3 x i64]* %264, i32 0, i64 0
  %266 = load i64* %265, align 8
  %267 = load %struct.rayinfo** %new_ri, align 8
  %268 = getelementptr inbounds %struct.rayinfo* %267, i32 0, i32 9
  %269 = getelementptr inbounds [3 x i64]* %268, i32 0, i64 0
  store i64 %266, i64* %269, align 8
  %270 = load %struct.ray** %1, align 8
  %271 = getelementptr inbounds %struct.ray* %270, i32 0, i32 7
  %272 = getelementptr inbounds [3 x i64]* %271, i32 0, i64 1
  %273 = load i64* %272, align 8
  %274 = load i64* %n, align 8
  %275 = mul nsw i64 %273, %274
  %276 = load %struct.rayinfo** %new_ri, align 8
  %277 = getelementptr inbounds %struct.rayinfo* %276, i32 0, i32 9
  %278 = getelementptr inbounds [3 x i64]* %277, i32 0, i64 1
  store i64 %275, i64* %278, align 8
  %279 = load %struct.ray** %1, align 8
  %280 = getelementptr inbounds %struct.ray* %279, i32 0, i32 7
  %281 = getelementptr inbounds [3 x i64]* %280, i32 0, i64 2
  %282 = load i64* %281, align 8
  %283 = load %struct.grid** %new_g, align 8
  %284 = getelementptr inbounds %struct.grid* %283, i32 0, i32 5
  %285 = getelementptr inbounds [3 x i64]* %284, i32 0, i64 2
  %286 = load i64* %285, align 8
  %287 = mul nsw i64 %282, %286
  %288 = load %struct.rayinfo** %new_ri, align 8
  %289 = getelementptr inbounds %struct.rayinfo* %288, i32 0, i32 9
  %290 = getelementptr inbounds [3 x i64]* %289, i32 0, i64 2
  store i64 %287, i64* %290, align 8
  %291 = load %struct.rayinfo** %new_ri, align 8
  %292 = getelementptr inbounds %struct.rayinfo* %291, i32 0, i32 2
  %293 = load i64* %292, align 8
  switch i64 %293, label %1107 [
    i64 3, label %294
    i64 0, label %297
    i64 4, label %421
    i64 1, label %424
    i64 5, label %548
    i64 2, label %551
    i64 -1, label %675
  ]

; <label>:294                                     ; preds = %239
  %295 = load %struct.rayinfo** %new_ri, align 8
  %296 = getelementptr inbounds %struct.rayinfo* %295, i32 0, i32 2
  store i64 0, i64* %296, align 8
  br label %297

; <label>:297                                     ; preds = %294, %239
  %298 = load %struct.rayinfo** %new_ri, align 8
  %299 = getelementptr inbounds %struct.rayinfo* %298, i32 0, i32 3
  %300 = load double* %299, align 8
  %301 = load %struct.rayinfo** %new_ri, align 8
  %302 = getelementptr inbounds %struct.rayinfo* %301, i32 0, i32 6
  %303 = getelementptr inbounds [3 x double]* %302, i32 0, i64 0
  %304 = load double* %303, align 8
  %305 = fadd double %300, %304
  %306 = load %struct.rayinfo** %new_ri, align 8
  %307 = getelementptr inbounds %struct.rayinfo* %306, i32 0, i32 1
  %308 = getelementptr inbounds [3 x double]* %307, i32 0, i64 0
  store double %305, double* %308, align 8
  %309 = load %struct.rayinfo** %old_ri, align 8
  %310 = getelementptr inbounds %struct.rayinfo* %309, i32 0, i32 1
  %311 = getelementptr inbounds [3 x double]* %310, i32 0, i64 1
  %312 = load double* %311, align 8
  %313 = load %struct.rayinfo** %new_ri, align 8
  %314 = getelementptr inbounds %struct.rayinfo* %313, i32 0, i32 3
  %315 = load double* %314, align 8
  %316 = fsub double %312, %315
  %317 = load %struct.rayinfo** %new_ri, align 8
  %318 = getelementptr inbounds %struct.rayinfo* %317, i32 0, i32 6
  %319 = getelementptr inbounds [3 x double]* %318, i32 0, i64 1
  %320 = load double* %319, align 8
  %321 = call double @fmod(double %316, double %320)
  store double %321, double* %del1, align 8
  %322 = load double* %del1, align 8
  %323 = load double* @eps_t, align 8
  %324 = fcmp ole double %322, %323
  br i1 %324, label %325, label %337

; <label>:325                                     ; preds = %297
  %326 = load %struct.rayinfo** %new_ri, align 8
  %327 = getelementptr inbounds %struct.rayinfo* %326, i32 0, i32 3
  %328 = load double* %327, align 8
  %329 = load %struct.rayinfo** %new_ri, align 8
  %330 = getelementptr inbounds %struct.rayinfo* %329, i32 0, i32 6
  %331 = getelementptr inbounds [3 x double]* %330, i32 0, i64 1
  %332 = load double* %331, align 8
  %333 = fadd double %328, %332
  %334 = load %struct.rayinfo** %new_ri, align 8
  %335 = getelementptr inbounds %struct.rayinfo* %334, i32 0, i32 1
  %336 = getelementptr inbounds [3 x double]* %335, i32 0, i64 1
  store double %333, double* %336, align 8
  br label %346

; <label>:337                                     ; preds = %297
  %338 = load %struct.rayinfo** %new_ri, align 8
  %339 = getelementptr inbounds %struct.rayinfo* %338, i32 0, i32 3
  %340 = load double* %339, align 8
  %341 = load double* %del1, align 8
  %342 = fadd double %340, %341
  %343 = load %struct.rayinfo** %new_ri, align 8
  %344 = getelementptr inbounds %struct.rayinfo* %343, i32 0, i32 1
  %345 = getelementptr inbounds [3 x double]* %344, i32 0, i64 1
  store double %342, double* %345, align 8
  br label %346

; <label>:346                                     ; preds = %337, %325
  %347 = load %struct.rayinfo** %old_ri, align 8
  %348 = getelementptr inbounds %struct.rayinfo* %347, i32 0, i32 1
  %349 = getelementptr inbounds [3 x double]* %348, i32 0, i64 2
  %350 = load double* %349, align 8
  %351 = load %struct.rayinfo** %new_ri, align 8
  %352 = getelementptr inbounds %struct.rayinfo* %351, i32 0, i32 3
  %353 = load double* %352, align 8
  %354 = fsub double %350, %353
  %355 = load %struct.rayinfo** %new_ri, align 8
  %356 = getelementptr inbounds %struct.rayinfo* %355, i32 0, i32 6
  %357 = getelementptr inbounds [3 x double]* %356, i32 0, i64 2
  %358 = load double* %357, align 8
  %359 = call double @fmod(double %354, double %358)
  store double %359, double* %del2, align 8
  %360 = load double* %del2, align 8
  %361 = load double* @eps_t, align 8
  %362 = fcmp ole double %360, %361
  br i1 %362, label %363, label %375

; <label>:363                                     ; preds = %346
  %364 = load %struct.rayinfo** %new_ri, align 8
  %365 = getelementptr inbounds %struct.rayinfo* %364, i32 0, i32 3
  %366 = load double* %365, align 8
  %367 = load %struct.rayinfo** %new_ri, align 8
  %368 = getelementptr inbounds %struct.rayinfo* %367, i32 0, i32 6
  %369 = getelementptr inbounds [3 x double]* %368, i32 0, i64 2
  %370 = load double* %369, align 8
  %371 = fadd double %366, %370
  %372 = load %struct.rayinfo** %new_ri, align 8
  %373 = getelementptr inbounds %struct.rayinfo* %372, i32 0, i32 1
  %374 = getelementptr inbounds [3 x double]* %373, i32 0, i64 2
  store double %371, double* %374, align 8
  br label %384

; <label>:375                                     ; preds = %346
  %376 = load %struct.rayinfo** %new_ri, align 8
  %377 = getelementptr inbounds %struct.rayinfo* %376, i32 0, i32 3
  %378 = load double* %377, align 8
  %379 = load double* %del2, align 8
  %380 = fadd double %378, %379
  %381 = load %struct.rayinfo** %new_ri, align 8
  %382 = getelementptr inbounds %struct.rayinfo* %381, i32 0, i32 1
  %383 = getelementptr inbounds [3 x double]* %382, i32 0, i64 2
  store double %380, double* %383, align 8
  br label %384

; <label>:384                                     ; preds = %375, %363
  %385 = load %struct.rayinfo** %new_ri, align 8
  %386 = getelementptr inbounds %struct.rayinfo* %385, i32 0, i32 1
  %387 = getelementptr inbounds [3 x double]* %386, i32 0, i64 0
  %388 = load double* %387, align 8
  %389 = load %struct.rayinfo** %new_ri, align 8
  %390 = getelementptr inbounds %struct.rayinfo* %389, i32 0, i32 1
  %391 = getelementptr inbounds [3 x double]* %390, i32 0, i64 1
  %392 = load double* %391, align 8
  %393 = fcmp ole double %388, %392
  %394 = select i1 %393, i32 0, i32 1
  %395 = sext i32 %394 to i64
  store i64 %395, i64* %small, align 8
  %396 = load i64* %small, align 8
  %397 = load %struct.rayinfo** %new_ri, align 8
  %398 = getelementptr inbounds %struct.rayinfo* %397, i32 0, i32 1
  %399 = getelementptr inbounds [3 x double]* %398, i32 0, i64 %396
  %400 = load double* %399, align 8
  %401 = load %struct.rayinfo** %new_ri, align 8
  %402 = getelementptr inbounds %struct.rayinfo* %401, i32 0, i32 1
  %403 = getelementptr inbounds [3 x double]* %402, i32 0, i64 2
  %404 = load double* %403, align 8
  %405 = fcmp ole double %400, %404
  br i1 %405, label %406, label %408

; <label>:406                                     ; preds = %384
  %407 = load i64* %small, align 8
  br label %409

; <label>:408                                     ; preds = %384
  br label %409

; <label>:409                                     ; preds = %408, %406
  %410 = phi i64 [ %407, %406 ], [ 2, %408 ]
  store i64 %410, i64* %small, align 8
  %411 = load i64* %small, align 8
  %412 = load %struct.rayinfo** %new_ri, align 8
  %413 = getelementptr inbounds %struct.rayinfo* %412, i32 0, i32 1
  %414 = getelementptr inbounds [3 x double]* %413, i32 0, i64 %411
  %415 = load double* %414, align 8
  %416 = load %struct.rayinfo** %new_ri, align 8
  %417 = getelementptr inbounds %struct.rayinfo* %416, i32 0, i32 5
  store double %415, double* %417, align 8
  %418 = load i64* %small, align 8
  %419 = load %struct.rayinfo** %new_ri, align 8
  %420 = getelementptr inbounds %struct.rayinfo* %419, i32 0, i32 4
  store i64 %418, i64* %420, align 8
  br label %1107

; <label>:421                                     ; preds = %239
  %422 = load %struct.rayinfo** %new_ri, align 8
  %423 = getelementptr inbounds %struct.rayinfo* %422, i32 0, i32 2
  store i64 1, i64* %423, align 8
  br label %424

; <label>:424                                     ; preds = %421, %239
  %425 = load %struct.rayinfo** %new_ri, align 8
  %426 = getelementptr inbounds %struct.rayinfo* %425, i32 0, i32 3
  %427 = load double* %426, align 8
  %428 = load %struct.rayinfo** %new_ri, align 8
  %429 = getelementptr inbounds %struct.rayinfo* %428, i32 0, i32 6
  %430 = getelementptr inbounds [3 x double]* %429, i32 0, i64 1
  %431 = load double* %430, align 8
  %432 = fadd double %427, %431
  %433 = load %struct.rayinfo** %new_ri, align 8
  %434 = getelementptr inbounds %struct.rayinfo* %433, i32 0, i32 1
  %435 = getelementptr inbounds [3 x double]* %434, i32 0, i64 1
  store double %432, double* %435, align 8
  %436 = load %struct.rayinfo** %old_ri, align 8
  %437 = getelementptr inbounds %struct.rayinfo* %436, i32 0, i32 1
  %438 = getelementptr inbounds [3 x double]* %437, i32 0, i64 0
  %439 = load double* %438, align 8
  %440 = load %struct.rayinfo** %new_ri, align 8
  %441 = getelementptr inbounds %struct.rayinfo* %440, i32 0, i32 3
  %442 = load double* %441, align 8
  %443 = fsub double %439, %442
  %444 = load %struct.rayinfo** %new_ri, align 8
  %445 = getelementptr inbounds %struct.rayinfo* %444, i32 0, i32 6
  %446 = getelementptr inbounds [3 x double]* %445, i32 0, i64 0
  %447 = load double* %446, align 8
  %448 = call double @fmod(double %443, double %447)
  store double %448, double* %del1, align 8
  %449 = load double* %del1, align 8
  %450 = load double* @eps_t, align 8
  %451 = fcmp ole double %449, %450
  br i1 %451, label %452, label %464

; <label>:452                                     ; preds = %424
  %453 = load %struct.rayinfo** %new_ri, align 8
  %454 = getelementptr inbounds %struct.rayinfo* %453, i32 0, i32 3
  %455 = load double* %454, align 8
  %456 = load %struct.rayinfo** %new_ri, align 8
  %457 = getelementptr inbounds %struct.rayinfo* %456, i32 0, i32 6
  %458 = getelementptr inbounds [3 x double]* %457, i32 0, i64 0
  %459 = load double* %458, align 8
  %460 = fadd double %455, %459
  %461 = load %struct.rayinfo** %new_ri, align 8
  %462 = getelementptr inbounds %struct.rayinfo* %461, i32 0, i32 1
  %463 = getelementptr inbounds [3 x double]* %462, i32 0, i64 0
  store double %460, double* %463, align 8
  br label %473

; <label>:464                                     ; preds = %424
  %465 = load %struct.rayinfo** %new_ri, align 8
  %466 = getelementptr inbounds %struct.rayinfo* %465, i32 0, i32 3
  %467 = load double* %466, align 8
  %468 = load double* %del1, align 8
  %469 = fadd double %467, %468
  %470 = load %struct.rayinfo** %new_ri, align 8
  %471 = getelementptr inbounds %struct.rayinfo* %470, i32 0, i32 1
  %472 = getelementptr inbounds [3 x double]* %471, i32 0, i64 0
  store double %469, double* %472, align 8
  br label %473

; <label>:473                                     ; preds = %464, %452
  %474 = load %struct.rayinfo** %old_ri, align 8
  %475 = getelementptr inbounds %struct.rayinfo* %474, i32 0, i32 1
  %476 = getelementptr inbounds [3 x double]* %475, i32 0, i64 2
  %477 = load double* %476, align 8
  %478 = load %struct.rayinfo** %new_ri, align 8
  %479 = getelementptr inbounds %struct.rayinfo* %478, i32 0, i32 3
  %480 = load double* %479, align 8
  %481 = fsub double %477, %480
  %482 = load %struct.rayinfo** %new_ri, align 8
  %483 = getelementptr inbounds %struct.rayinfo* %482, i32 0, i32 6
  %484 = getelementptr inbounds [3 x double]* %483, i32 0, i64 2
  %485 = load double* %484, align 8
  %486 = call double @fmod(double %481, double %485)
  store double %486, double* %del2, align 8
  %487 = load double* %del2, align 8
  %488 = load double* @eps_t, align 8
  %489 = fcmp ole double %487, %488
  br i1 %489, label %490, label %502

; <label>:490                                     ; preds = %473
  %491 = load %struct.rayinfo** %new_ri, align 8
  %492 = getelementptr inbounds %struct.rayinfo* %491, i32 0, i32 3
  %493 = load double* %492, align 8
  %494 = load %struct.rayinfo** %new_ri, align 8
  %495 = getelementptr inbounds %struct.rayinfo* %494, i32 0, i32 6
  %496 = getelementptr inbounds [3 x double]* %495, i32 0, i64 2
  %497 = load double* %496, align 8
  %498 = fadd double %493, %497
  %499 = load %struct.rayinfo** %new_ri, align 8
  %500 = getelementptr inbounds %struct.rayinfo* %499, i32 0, i32 1
  %501 = getelementptr inbounds [3 x double]* %500, i32 0, i64 2
  store double %498, double* %501, align 8
  br label %511

; <label>:502                                     ; preds = %473
  %503 = load %struct.rayinfo** %new_ri, align 8
  %504 = getelementptr inbounds %struct.rayinfo* %503, i32 0, i32 3
  %505 = load double* %504, align 8
  %506 = load double* %del2, align 8
  %507 = fadd double %505, %506
  %508 = load %struct.rayinfo** %new_ri, align 8
  %509 = getelementptr inbounds %struct.rayinfo* %508, i32 0, i32 1
  %510 = getelementptr inbounds [3 x double]* %509, i32 0, i64 2
  store double %507, double* %510, align 8
  br label %511

; <label>:511                                     ; preds = %502, %490
  %512 = load %struct.rayinfo** %new_ri, align 8
  %513 = getelementptr inbounds %struct.rayinfo* %512, i32 0, i32 1
  %514 = getelementptr inbounds [3 x double]* %513, i32 0, i64 0
  %515 = load double* %514, align 8
  %516 = load %struct.rayinfo** %new_ri, align 8
  %517 = getelementptr inbounds %struct.rayinfo* %516, i32 0, i32 1
  %518 = getelementptr inbounds [3 x double]* %517, i32 0, i64 1
  %519 = load double* %518, align 8
  %520 = fcmp ole double %515, %519
  %521 = select i1 %520, i32 0, i32 1
  %522 = sext i32 %521 to i64
  store i64 %522, i64* %small, align 8
  %523 = load i64* %small, align 8
  %524 = load %struct.rayinfo** %new_ri, align 8
  %525 = getelementptr inbounds %struct.rayinfo* %524, i32 0, i32 1
  %526 = getelementptr inbounds [3 x double]* %525, i32 0, i64 %523
  %527 = load double* %526, align 8
  %528 = load %struct.rayinfo** %new_ri, align 8
  %529 = getelementptr inbounds %struct.rayinfo* %528, i32 0, i32 1
  %530 = getelementptr inbounds [3 x double]* %529, i32 0, i64 2
  %531 = load double* %530, align 8
  %532 = fcmp ole double %527, %531
  br i1 %532, label %533, label %535

; <label>:533                                     ; preds = %511
  %534 = load i64* %small, align 8
  br label %536

; <label>:535                                     ; preds = %511
  br label %536

; <label>:536                                     ; preds = %535, %533
  %537 = phi i64 [ %534, %533 ], [ 2, %535 ]
  store i64 %537, i64* %small, align 8
  %538 = load i64* %small, align 8
  %539 = load %struct.rayinfo** %new_ri, align 8
  %540 = getelementptr inbounds %struct.rayinfo* %539, i32 0, i32 1
  %541 = getelementptr inbounds [3 x double]* %540, i32 0, i64 %538
  %542 = load double* %541, align 8
  %543 = load %struct.rayinfo** %new_ri, align 8
  %544 = getelementptr inbounds %struct.rayinfo* %543, i32 0, i32 5
  store double %542, double* %544, align 8
  %545 = load i64* %small, align 8
  %546 = load %struct.rayinfo** %new_ri, align 8
  %547 = getelementptr inbounds %struct.rayinfo* %546, i32 0, i32 4
  store i64 %545, i64* %547, align 8
  br label %1107

; <label>:548                                     ; preds = %239
  %549 = load %struct.rayinfo** %new_ri, align 8
  %550 = getelementptr inbounds %struct.rayinfo* %549, i32 0, i32 2
  store i64 2, i64* %550, align 8
  br label %551

; <label>:551                                     ; preds = %548, %239
  %552 = load %struct.rayinfo** %new_ri, align 8
  %553 = getelementptr inbounds %struct.rayinfo* %552, i32 0, i32 3
  %554 = load double* %553, align 8
  %555 = load %struct.rayinfo** %new_ri, align 8
  %556 = getelementptr inbounds %struct.rayinfo* %555, i32 0, i32 6
  %557 = getelementptr inbounds [3 x double]* %556, i32 0, i64 2
  %558 = load double* %557, align 8
  %559 = fadd double %554, %558
  %560 = load %struct.rayinfo** %new_ri, align 8
  %561 = getelementptr inbounds %struct.rayinfo* %560, i32 0, i32 1
  %562 = getelementptr inbounds [3 x double]* %561, i32 0, i64 2
  store double %559, double* %562, align 8
  %563 = load %struct.rayinfo** %old_ri, align 8
  %564 = getelementptr inbounds %struct.rayinfo* %563, i32 0, i32 1
  %565 = getelementptr inbounds [3 x double]* %564, i32 0, i64 0
  %566 = load double* %565, align 8
  %567 = load %struct.rayinfo** %new_ri, align 8
  %568 = getelementptr inbounds %struct.rayinfo* %567, i32 0, i32 3
  %569 = load double* %568, align 8
  %570 = fsub double %566, %569
  %571 = load %struct.rayinfo** %new_ri, align 8
  %572 = getelementptr inbounds %struct.rayinfo* %571, i32 0, i32 6
  %573 = getelementptr inbounds [3 x double]* %572, i32 0, i64 0
  %574 = load double* %573, align 8
  %575 = call double @fmod(double %570, double %574)
  store double %575, double* %del1, align 8
  %576 = load double* %del1, align 8
  %577 = load double* @eps_t, align 8
  %578 = fcmp ole double %576, %577
  br i1 %578, label %579, label %591

; <label>:579                                     ; preds = %551
  %580 = load %struct.rayinfo** %new_ri, align 8
  %581 = getelementptr inbounds %struct.rayinfo* %580, i32 0, i32 3
  %582 = load double* %581, align 8
  %583 = load %struct.rayinfo** %new_ri, align 8
  %584 = getelementptr inbounds %struct.rayinfo* %583, i32 0, i32 6
  %585 = getelementptr inbounds [3 x double]* %584, i32 0, i64 0
  %586 = load double* %585, align 8
  %587 = fadd double %582, %586
  %588 = load %struct.rayinfo** %new_ri, align 8
  %589 = getelementptr inbounds %struct.rayinfo* %588, i32 0, i32 1
  %590 = getelementptr inbounds [3 x double]* %589, i32 0, i64 0
  store double %587, double* %590, align 8
  br label %600

; <label>:591                                     ; preds = %551
  %592 = load %struct.rayinfo** %new_ri, align 8
  %593 = getelementptr inbounds %struct.rayinfo* %592, i32 0, i32 3
  %594 = load double* %593, align 8
  %595 = load double* %del1, align 8
  %596 = fadd double %594, %595
  %597 = load %struct.rayinfo** %new_ri, align 8
  %598 = getelementptr inbounds %struct.rayinfo* %597, i32 0, i32 1
  %599 = getelementptr inbounds [3 x double]* %598, i32 0, i64 0
  store double %596, double* %599, align 8
  br label %600

; <label>:600                                     ; preds = %591, %579
  %601 = load %struct.rayinfo** %old_ri, align 8
  %602 = getelementptr inbounds %struct.rayinfo* %601, i32 0, i32 1
  %603 = getelementptr inbounds [3 x double]* %602, i32 0, i64 1
  %604 = load double* %603, align 8
  %605 = load %struct.rayinfo** %new_ri, align 8
  %606 = getelementptr inbounds %struct.rayinfo* %605, i32 0, i32 3
  %607 = load double* %606, align 8
  %608 = fsub double %604, %607
  %609 = load %struct.rayinfo** %new_ri, align 8
  %610 = getelementptr inbounds %struct.rayinfo* %609, i32 0, i32 6
  %611 = getelementptr inbounds [3 x double]* %610, i32 0, i64 1
  %612 = load double* %611, align 8
  %613 = call double @fmod(double %608, double %612)
  store double %613, double* %del2, align 8
  %614 = load double* %del2, align 8
  %615 = load double* @eps_t, align 8
  %616 = fcmp ole double %614, %615
  br i1 %616, label %617, label %629

; <label>:617                                     ; preds = %600
  %618 = load %struct.rayinfo** %new_ri, align 8
  %619 = getelementptr inbounds %struct.rayinfo* %618, i32 0, i32 3
  %620 = load double* %619, align 8
  %621 = load %struct.rayinfo** %new_ri, align 8
  %622 = getelementptr inbounds %struct.rayinfo* %621, i32 0, i32 6
  %623 = getelementptr inbounds [3 x double]* %622, i32 0, i64 1
  %624 = load double* %623, align 8
  %625 = fadd double %620, %624
  %626 = load %struct.rayinfo** %new_ri, align 8
  %627 = getelementptr inbounds %struct.rayinfo* %626, i32 0, i32 1
  %628 = getelementptr inbounds [3 x double]* %627, i32 0, i64 1
  store double %625, double* %628, align 8
  br label %638

; <label>:629                                     ; preds = %600
  %630 = load %struct.rayinfo** %new_ri, align 8
  %631 = getelementptr inbounds %struct.rayinfo* %630, i32 0, i32 3
  %632 = load double* %631, align 8
  %633 = load double* %del2, align 8
  %634 = fadd double %632, %633
  %635 = load %struct.rayinfo** %new_ri, align 8
  %636 = getelementptr inbounds %struct.rayinfo* %635, i32 0, i32 1
  %637 = getelementptr inbounds [3 x double]* %636, i32 0, i64 1
  store double %634, double* %637, align 8
  br label %638

; <label>:638                                     ; preds = %629, %617
  %639 = load %struct.rayinfo** %new_ri, align 8
  %640 = getelementptr inbounds %struct.rayinfo* %639, i32 0, i32 1
  %641 = getelementptr inbounds [3 x double]* %640, i32 0, i64 0
  %642 = load double* %641, align 8
  %643 = load %struct.rayinfo** %new_ri, align 8
  %644 = getelementptr inbounds %struct.rayinfo* %643, i32 0, i32 1
  %645 = getelementptr inbounds [3 x double]* %644, i32 0, i64 1
  %646 = load double* %645, align 8
  %647 = fcmp ole double %642, %646
  %648 = select i1 %647, i32 0, i32 1
  %649 = sext i32 %648 to i64
  store i64 %649, i64* %small, align 8
  %650 = load i64* %small, align 8
  %651 = load %struct.rayinfo** %new_ri, align 8
  %652 = getelementptr inbounds %struct.rayinfo* %651, i32 0, i32 1
  %653 = getelementptr inbounds [3 x double]* %652, i32 0, i64 %650
  %654 = load double* %653, align 8
  %655 = load %struct.rayinfo** %new_ri, align 8
  %656 = getelementptr inbounds %struct.rayinfo* %655, i32 0, i32 1
  %657 = getelementptr inbounds [3 x double]* %656, i32 0, i64 2
  %658 = load double* %657, align 8
  %659 = fcmp ole double %654, %658
  br i1 %659, label %660, label %662

; <label>:660                                     ; preds = %638
  %661 = load i64* %small, align 8
  br label %663

; <label>:662                                     ; preds = %638
  br label %663

; <label>:663                                     ; preds = %662, %660
  %664 = phi i64 [ %661, %660 ], [ 2, %662 ]
  store i64 %664, i64* %small, align 8
  %665 = load i64* %small, align 8
  %666 = load %struct.rayinfo** %new_ri, align 8
  %667 = getelementptr inbounds %struct.rayinfo* %666, i32 0, i32 1
  %668 = getelementptr inbounds [3 x double]* %667, i32 0, i64 %665
  %669 = load double* %668, align 8
  %670 = load %struct.rayinfo** %new_ri, align 8
  %671 = getelementptr inbounds %struct.rayinfo* %670, i32 0, i32 5
  store double %669, double* %671, align 8
  %672 = load i64* %small, align 8
  %673 = load %struct.rayinfo** %new_ri, align 8
  %674 = getelementptr inbounds %struct.rayinfo* %673, i32 0, i32 4
  store i64 %672, i64* %674, align 8
  br label %1107

; <label>:675                                     ; preds = %239
  %676 = load %struct.grid** %new_g, align 8
  %677 = getelementptr inbounds %struct.grid* %676, i32 0, i32 7
  %678 = getelementptr inbounds [3 x double]* %677, i32 0, i64 0
  %679 = load double* %678, align 8
  %680 = load %struct.rayinfo** %new_ri, align 8
  %681 = getelementptr inbounds %struct.rayinfo* %680, i32 0, i32 7
  %682 = getelementptr inbounds [3 x i64]* %681, i32 0, i64 0
  %683 = load i64* %682, align 8
  %684 = sitofp i64 %683 to double
  %685 = load %struct.grid** %new_g, align 8
  %686 = getelementptr inbounds %struct.grid* %685, i32 0, i32 8
  %687 = getelementptr inbounds [3 x double]* %686, i32 0, i64 0
  %688 = load double* %687, align 8
  %689 = fmul double %684, %688
  %690 = fadd double %679, %689
  %691 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  store double %690, double* %691, align 8
  %692 = load %struct.grid** %new_g, align 8
  %693 = getelementptr inbounds %struct.grid* %692, i32 0, i32 7
  %694 = getelementptr inbounds [3 x double]* %693, i32 0, i64 1
  %695 = load double* %694, align 8
  %696 = load %struct.rayinfo** %new_ri, align 8
  %697 = getelementptr inbounds %struct.rayinfo* %696, i32 0, i32 7
  %698 = getelementptr inbounds [3 x i64]* %697, i32 0, i64 1
  %699 = load i64* %698, align 8
  %700 = sitofp i64 %699 to double
  %701 = load %struct.grid** %new_g, align 8
  %702 = getelementptr inbounds %struct.grid* %701, i32 0, i32 8
  %703 = getelementptr inbounds [3 x double]* %702, i32 0, i64 1
  %704 = load double* %703, align 8
  %705 = fmul double %700, %704
  %706 = fadd double %695, %705
  %707 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  store double %706, double* %707, align 8
  %708 = load %struct.grid** %new_g, align 8
  %709 = getelementptr inbounds %struct.grid* %708, i32 0, i32 7
  %710 = getelementptr inbounds [3 x double]* %709, i32 0, i64 2
  %711 = load double* %710, align 8
  %712 = load %struct.rayinfo** %new_ri, align 8
  %713 = getelementptr inbounds %struct.rayinfo* %712, i32 0, i32 7
  %714 = getelementptr inbounds [3 x i64]* %713, i32 0, i64 2
  %715 = load i64* %714, align 8
  %716 = sitofp i64 %715 to double
  %717 = load %struct.grid** %new_g, align 8
  %718 = getelementptr inbounds %struct.grid* %717, i32 0, i32 8
  %719 = getelementptr inbounds [3 x double]* %718, i32 0, i64 2
  %720 = load double* %719, align 8
  %721 = fmul double %716, %720
  %722 = fadd double %711, %721
  %723 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  store double %722, double* %723, align 8
  %724 = load %struct.ray** %1, align 8
  %725 = getelementptr inbounds %struct.ray* %724, i32 0, i32 4
  %726 = getelementptr inbounds [3 x double]* %725, i32 0, i64 0
  %727 = load double* %726, align 8
  %728 = fcmp oeq double %727, 0.000000e+00
  br i1 %728, label %729, label %755

; <label>:729                                     ; preds = %675
  %730 = load %struct.ray** %1, align 8
  %731 = getelementptr inbounds %struct.ray* %730, i32 0, i32 3
  %732 = getelementptr inbounds [3 x double]* %731, i32 0, i64 0
  %733 = load double* %732, align 8
  %734 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %735 = load double* %734, align 8
  %736 = fcmp oge double %733, %735
  br i1 %736, label %737, label %752

; <label>:737                                     ; preds = %729
  %738 = load %struct.ray** %1, align 8
  %739 = getelementptr inbounds %struct.ray* %738, i32 0, i32 3
  %740 = getelementptr inbounds [3 x double]* %739, i32 0, i64 0
  %741 = load double* %740, align 8
  %742 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %743 = load double* %742, align 8
  %744 = load %struct.grid** %new_g, align 8
  %745 = getelementptr inbounds %struct.grid* %744, i32 0, i32 8
  %746 = getelementptr inbounds [3 x double]* %745, i32 0, i64 0
  %747 = load double* %746, align 8
  %748 = fadd double %743, %747
  %749 = fcmp ole double %741, %748
  br i1 %749, label %750, label %752

; <label>:750                                     ; preds = %737
  %751 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double -1.000000e+32, double* %751, align 8
  br label %754

; <label>:752                                     ; preds = %737, %729
  %753 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double 1.000000e+32, double* %753, align 8
  br label %754

; <label>:754                                     ; preds = %752, %750
  br label %769

; <label>:755                                     ; preds = %675
  %756 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %757 = load double* %756, align 8
  %758 = load %struct.ray** %1, align 8
  %759 = getelementptr inbounds %struct.ray* %758, i32 0, i32 3
  %760 = getelementptr inbounds [3 x double]* %759, i32 0, i64 0
  %761 = load double* %760, align 8
  %762 = fsub double %757, %761
  %763 = load %struct.ray** %1, align 8
  %764 = getelementptr inbounds %struct.ray* %763, i32 0, i32 4
  %765 = getelementptr inbounds [3 x double]* %764, i32 0, i64 0
  %766 = load double* %765, align 8
  %767 = fdiv double %762, %766
  %768 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double %767, double* %768, align 8
  br label %769

; <label>:769                                     ; preds = %755, %754
  %770 = load %struct.ray** %1, align 8
  %771 = getelementptr inbounds %struct.ray* %770, i32 0, i32 4
  %772 = getelementptr inbounds [3 x double]* %771, i32 0, i64 1
  %773 = load double* %772, align 8
  %774 = fcmp oeq double %773, 0.000000e+00
  br i1 %774, label %775, label %801

; <label>:775                                     ; preds = %769
  %776 = load %struct.ray** %1, align 8
  %777 = getelementptr inbounds %struct.ray* %776, i32 0, i32 3
  %778 = getelementptr inbounds [3 x double]* %777, i32 0, i64 1
  %779 = load double* %778, align 8
  %780 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %781 = load double* %780, align 8
  %782 = fcmp oge double %779, %781
  br i1 %782, label %783, label %798

; <label>:783                                     ; preds = %775
  %784 = load %struct.ray** %1, align 8
  %785 = getelementptr inbounds %struct.ray* %784, i32 0, i32 3
  %786 = getelementptr inbounds [3 x double]* %785, i32 0, i64 1
  %787 = load double* %786, align 8
  %788 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %789 = load double* %788, align 8
  %790 = load %struct.grid** %new_g, align 8
  %791 = getelementptr inbounds %struct.grid* %790, i32 0, i32 8
  %792 = getelementptr inbounds [3 x double]* %791, i32 0, i64 1
  %793 = load double* %792, align 8
  %794 = fadd double %789, %793
  %795 = fcmp ole double %787, %794
  br i1 %795, label %796, label %798

; <label>:796                                     ; preds = %783
  %797 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double -1.000000e+32, double* %797, align 8
  br label %800

; <label>:798                                     ; preds = %783, %775
  %799 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double 1.000000e+32, double* %799, align 8
  br label %800

; <label>:800                                     ; preds = %798, %796
  br label %815

; <label>:801                                     ; preds = %769
  %802 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %803 = load double* %802, align 8
  %804 = load %struct.ray** %1, align 8
  %805 = getelementptr inbounds %struct.ray* %804, i32 0, i32 3
  %806 = getelementptr inbounds [3 x double]* %805, i32 0, i64 1
  %807 = load double* %806, align 8
  %808 = fsub double %803, %807
  %809 = load %struct.ray** %1, align 8
  %810 = getelementptr inbounds %struct.ray* %809, i32 0, i32 4
  %811 = getelementptr inbounds [3 x double]* %810, i32 0, i64 1
  %812 = load double* %811, align 8
  %813 = fdiv double %808, %812
  %814 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double %813, double* %814, align 8
  br label %815

; <label>:815                                     ; preds = %801, %800
  %816 = load %struct.ray** %1, align 8
  %817 = getelementptr inbounds %struct.ray* %816, i32 0, i32 4
  %818 = getelementptr inbounds [3 x double]* %817, i32 0, i64 2
  %819 = load double* %818, align 8
  %820 = fcmp oeq double %819, 0.000000e+00
  br i1 %820, label %821, label %847

; <label>:821                                     ; preds = %815
  %822 = load %struct.ray** %1, align 8
  %823 = getelementptr inbounds %struct.ray* %822, i32 0, i32 3
  %824 = getelementptr inbounds [3 x double]* %823, i32 0, i64 2
  %825 = load double* %824, align 8
  %826 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %827 = load double* %826, align 8
  %828 = fcmp oge double %825, %827
  br i1 %828, label %829, label %844

; <label>:829                                     ; preds = %821
  %830 = load %struct.ray** %1, align 8
  %831 = getelementptr inbounds %struct.ray* %830, i32 0, i32 3
  %832 = getelementptr inbounds [3 x double]* %831, i32 0, i64 2
  %833 = load double* %832, align 8
  %834 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %835 = load double* %834, align 8
  %836 = load %struct.grid** %new_g, align 8
  %837 = getelementptr inbounds %struct.grid* %836, i32 0, i32 8
  %838 = getelementptr inbounds [3 x double]* %837, i32 0, i64 2
  %839 = load double* %838, align 8
  %840 = fadd double %835, %839
  %841 = fcmp ole double %833, %840
  br i1 %841, label %842, label %844

; <label>:842                                     ; preds = %829
  %843 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double -1.000000e+32, double* %843, align 8
  br label %846

; <label>:844                                     ; preds = %829, %821
  %845 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double 1.000000e+32, double* %845, align 8
  br label %846

; <label>:846                                     ; preds = %844, %842
  br label %861

; <label>:847                                     ; preds = %815
  %848 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %849 = load double* %848, align 8
  %850 = load %struct.ray** %1, align 8
  %851 = getelementptr inbounds %struct.ray* %850, i32 0, i32 3
  %852 = getelementptr inbounds [3 x double]* %851, i32 0, i64 2
  %853 = load double* %852, align 8
  %854 = fsub double %849, %853
  %855 = load %struct.ray** %1, align 8
  %856 = getelementptr inbounds %struct.ray* %855, i32 0, i32 4
  %857 = getelementptr inbounds [3 x double]* %856, i32 0, i64 2
  %858 = load double* %857, align 8
  %859 = fdiv double %854, %858
  %860 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double %859, double* %860, align 8
  br label %861

; <label>:861                                     ; preds = %847, %846
  %862 = load %struct.ray** %1, align 8
  %863 = getelementptr inbounds %struct.ray* %862, i32 0, i32 4
  %864 = getelementptr inbounds [3 x double]* %863, i32 0, i64 0
  %865 = load double* %864, align 8
  %866 = fcmp oeq double %865, 0.000000e+00
  br i1 %866, label %867, label %893

; <label>:867                                     ; preds = %861
  %868 = load %struct.ray** %1, align 8
  %869 = getelementptr inbounds %struct.ray* %868, i32 0, i32 3
  %870 = getelementptr inbounds [3 x double]* %869, i32 0, i64 0
  %871 = load double* %870, align 8
  %872 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %873 = load double* %872, align 8
  %874 = fcmp oge double %871, %873
  br i1 %874, label %875, label %890

; <label>:875                                     ; preds = %867
  %876 = load %struct.ray** %1, align 8
  %877 = getelementptr inbounds %struct.ray* %876, i32 0, i32 3
  %878 = getelementptr inbounds [3 x double]* %877, i32 0, i64 0
  %879 = load double* %878, align 8
  %880 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %881 = load double* %880, align 8
  %882 = load %struct.grid** %new_g, align 8
  %883 = getelementptr inbounds %struct.grid* %882, i32 0, i32 8
  %884 = getelementptr inbounds [3 x double]* %883, i32 0, i64 0
  %885 = load double* %884, align 8
  %886 = fadd double %881, %885
  %887 = fcmp ole double %879, %886
  br i1 %887, label %888, label %890

; <label>:888                                     ; preds = %875
  %889 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double 1.000000e+32, double* %889, align 8
  br label %892

; <label>:890                                     ; preds = %875, %867
  %891 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double 1.000000e+32, double* %891, align 8
  br label %892

; <label>:892                                     ; preds = %890, %888
  br label %912

; <label>:893                                     ; preds = %861
  %894 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0
  %895 = load double* %894, align 8
  %896 = load %struct.grid** %new_g, align 8
  %897 = getelementptr inbounds %struct.grid* %896, i32 0, i32 8
  %898 = getelementptr inbounds [3 x double]* %897, i32 0, i64 0
  %899 = load double* %898, align 8
  %900 = fadd double %895, %899
  %901 = load %struct.ray** %1, align 8
  %902 = getelementptr inbounds %struct.ray* %901, i32 0, i32 3
  %903 = getelementptr inbounds [3 x double]* %902, i32 0, i64 0
  %904 = load double* %903, align 8
  %905 = fsub double %900, %904
  %906 = load %struct.ray** %1, align 8
  %907 = getelementptr inbounds %struct.ray* %906, i32 0, i32 4
  %908 = getelementptr inbounds [3 x double]* %907, i32 0, i64 0
  %909 = load double* %908, align 8
  %910 = fdiv double %905, %909
  %911 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double %910, double* %911, align 8
  br label %912

; <label>:912                                     ; preds = %893, %892
  %913 = load %struct.ray** %1, align 8
  %914 = getelementptr inbounds %struct.ray* %913, i32 0, i32 4
  %915 = getelementptr inbounds [3 x double]* %914, i32 0, i64 1
  %916 = load double* %915, align 8
  %917 = fcmp oeq double %916, 0.000000e+00
  br i1 %917, label %918, label %944

; <label>:918                                     ; preds = %912
  %919 = load %struct.ray** %1, align 8
  %920 = getelementptr inbounds %struct.ray* %919, i32 0, i32 3
  %921 = getelementptr inbounds [3 x double]* %920, i32 0, i64 1
  %922 = load double* %921, align 8
  %923 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %924 = load double* %923, align 8
  %925 = fcmp oge double %922, %924
  br i1 %925, label %926, label %941

; <label>:926                                     ; preds = %918
  %927 = load %struct.ray** %1, align 8
  %928 = getelementptr inbounds %struct.ray* %927, i32 0, i32 3
  %929 = getelementptr inbounds [3 x double]* %928, i32 0, i64 1
  %930 = load double* %929, align 8
  %931 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %932 = load double* %931, align 8
  %933 = load %struct.grid** %new_g, align 8
  %934 = getelementptr inbounds %struct.grid* %933, i32 0, i32 8
  %935 = getelementptr inbounds [3 x double]* %934, i32 0, i64 1
  %936 = load double* %935, align 8
  %937 = fadd double %932, %936
  %938 = fcmp ole double %930, %937
  br i1 %938, label %939, label %941

; <label>:939                                     ; preds = %926
  %940 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double 1.000000e+32, double* %940, align 8
  br label %943

; <label>:941                                     ; preds = %926, %918
  %942 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double 1.000000e+32, double* %942, align 8
  br label %943

; <label>:943                                     ; preds = %941, %939
  br label %963

; <label>:944                                     ; preds = %912
  %945 = getelementptr inbounds [3 x double]* %min, i32 0, i64 1
  %946 = load double* %945, align 8
  %947 = load %struct.grid** %new_g, align 8
  %948 = getelementptr inbounds %struct.grid* %947, i32 0, i32 8
  %949 = getelementptr inbounds [3 x double]* %948, i32 0, i64 1
  %950 = load double* %949, align 8
  %951 = fadd double %946, %950
  %952 = load %struct.ray** %1, align 8
  %953 = getelementptr inbounds %struct.ray* %952, i32 0, i32 3
  %954 = getelementptr inbounds [3 x double]* %953, i32 0, i64 1
  %955 = load double* %954, align 8
  %956 = fsub double %951, %955
  %957 = load %struct.ray** %1, align 8
  %958 = getelementptr inbounds %struct.ray* %957, i32 0, i32 4
  %959 = getelementptr inbounds [3 x double]* %958, i32 0, i64 1
  %960 = load double* %959, align 8
  %961 = fdiv double %956, %960
  %962 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double %961, double* %962, align 8
  br label %963

; <label>:963                                     ; preds = %944, %943
  %964 = load %struct.ray** %1, align 8
  %965 = getelementptr inbounds %struct.ray* %964, i32 0, i32 4
  %966 = getelementptr inbounds [3 x double]* %965, i32 0, i64 2
  %967 = load double* %966, align 8
  %968 = fcmp oeq double %967, 0.000000e+00
  br i1 %968, label %969, label %995

; <label>:969                                     ; preds = %963
  %970 = load %struct.ray** %1, align 8
  %971 = getelementptr inbounds %struct.ray* %970, i32 0, i32 3
  %972 = getelementptr inbounds [3 x double]* %971, i32 0, i64 2
  %973 = load double* %972, align 8
  %974 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %975 = load double* %974, align 8
  %976 = fcmp oge double %973, %975
  br i1 %976, label %977, label %992

; <label>:977                                     ; preds = %969
  %978 = load %struct.ray** %1, align 8
  %979 = getelementptr inbounds %struct.ray* %978, i32 0, i32 3
  %980 = getelementptr inbounds [3 x double]* %979, i32 0, i64 2
  %981 = load double* %980, align 8
  %982 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %983 = load double* %982, align 8
  %984 = load %struct.grid** %new_g, align 8
  %985 = getelementptr inbounds %struct.grid* %984, i32 0, i32 8
  %986 = getelementptr inbounds [3 x double]* %985, i32 0, i64 2
  %987 = load double* %986, align 8
  %988 = fadd double %983, %987
  %989 = fcmp ole double %981, %988
  br i1 %989, label %990, label %992

; <label>:990                                     ; preds = %977
  %991 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double 1.000000e+32, double* %991, align 8
  br label %994

; <label>:992                                     ; preds = %977, %969
  %993 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double 1.000000e+32, double* %993, align 8
  br label %994

; <label>:994                                     ; preds = %992, %990
  br label %1014

; <label>:995                                     ; preds = %963
  %996 = getelementptr inbounds [3 x double]* %min, i32 0, i64 2
  %997 = load double* %996, align 8
  %998 = load %struct.grid** %new_g, align 8
  %999 = getelementptr inbounds %struct.grid* %998, i32 0, i32 8
  %1000 = getelementptr inbounds [3 x double]* %999, i32 0, i64 2
  %1001 = load double* %1000, align 8
  %1002 = fadd double %997, %1001
  %1003 = load %struct.ray** %1, align 8
  %1004 = getelementptr inbounds %struct.ray* %1003, i32 0, i32 3
  %1005 = getelementptr inbounds [3 x double]* %1004, i32 0, i64 2
  %1006 = load double* %1005, align 8
  %1007 = fsub double %1002, %1006
  %1008 = load %struct.ray** %1, align 8
  %1009 = getelementptr inbounds %struct.ray* %1008, i32 0, i32 4
  %1010 = getelementptr inbounds [3 x double]* %1009, i32 0, i64 2
  %1011 = load double* %1010, align 8
  %1012 = fdiv double %1007, %1011
  %1013 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double %1012, double* %1013, align 8
  br label %1014

; <label>:1014                                    ; preds = %995, %994
  store double -1.000000e+32, double* %t_in, align 8
  store i64 -1, i64* %i_in, align 8
  store double 1.000000e+32, double* %t_out, align 8
  store i64 -1, i64* %i_out, align 8
  store i64 0, i64* %i, align 8
  br label %1015

; <label>:1015                                    ; preds = %1069, %1014
  %1016 = load i64* %i, align 8
  %1017 = icmp slt i64 %1016, 3
  br i1 %1017, label %1018, label %1072

; <label>:1018                                    ; preds = %1015
  %1019 = load i64* %i, align 8
  %1020 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1019
  %1021 = load double* %1020, align 8
  %1022 = load i64* %i, align 8
  %1023 = add nsw i64 %1022, 3
  %1024 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1023
  %1025 = load double* %1024, align 8
  %1026 = fcmp olt double %1021, %1025
  br i1 %1026, label %1027, label %1038

; <label>:1027                                    ; preds = %1018
  %1028 = load i64* %i, align 8
  %1029 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1028
  %1030 = load double* %1029, align 8
  store double %1030, double* %tl, align 8
  %1031 = load i64* %i, align 8
  store i64 %1031, i64* %il, align 8
  %1032 = load i64* %i, align 8
  %1033 = add nsw i64 %1032, 3
  %1034 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1033
  %1035 = load double* %1034, align 8
  store double %1035, double* %th, align 8
  %1036 = load i64* %i, align 8
  %1037 = add nsw i64 %1036, 3
  store i64 %1037, i64* %ih, align 8
  br label %1049

; <label>:1038                                    ; preds = %1018
  %1039 = load i64* %i, align 8
  %1040 = add nsw i64 %1039, 3
  %1041 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1040
  %1042 = load double* %1041, align 8
  store double %1042, double* %tl, align 8
  %1043 = load i64* %i, align 8
  %1044 = add nsw i64 %1043, 3
  store i64 %1044, i64* %il, align 8
  %1045 = load i64* %i, align 8
  %1046 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %1045
  %1047 = load double* %1046, align 8
  store double %1047, double* %th, align 8
  %1048 = load i64* %i, align 8
  store i64 %1048, i64* %ih, align 8
  br label %1049

; <label>:1049                                    ; preds = %1038, %1027
  %1050 = load double* %th, align 8
  %1051 = load i64* %i, align 8
  %1052 = load %struct.rayinfo** %new_ri, align 8
  %1053 = getelementptr inbounds %struct.rayinfo* %1052, i32 0, i32 1
  %1054 = getelementptr inbounds [3 x double]* %1053, i32 0, i64 %1051
  store double %1050, double* %1054, align 8
  %1055 = load double* %t_in, align 8
  %1056 = load double* %tl, align 8
  %1057 = fcmp olt double %1055, %1056
  br i1 %1057, label %1058, label %1061

; <label>:1058                                    ; preds = %1049
  %1059 = load double* %tl, align 8
  store double %1059, double* %t_in, align 8
  %1060 = load i64* %il, align 8
  store i64 %1060, i64* %i_in, align 8
  br label %1061

; <label>:1061                                    ; preds = %1058, %1049
  %1062 = load double* %t_out, align 8
  %1063 = load double* %th, align 8
  %1064 = fcmp ogt double %1062, %1063
  br i1 %1064, label %1065, label %1068

; <label>:1065                                    ; preds = %1061
  %1066 = load double* %th, align 8
  store double %1066, double* %t_out, align 8
  %1067 = load i64* %ih, align 8
  store i64 %1067, i64* %i_out, align 8
  br label %1068

; <label>:1068                                    ; preds = %1065, %1061
  br label %1069

; <label>:1069                                    ; preds = %1068
  %1070 = load i64* %i, align 8
  %1071 = add nsw i64 %1070, 1
  store i64 %1071, i64* %i, align 8
  br label %1015

; <label>:1072                                    ; preds = %1015
  %1073 = load double* %t_in, align 8
  %1074 = load double* %t_out, align 8
  %1075 = fcmp ogt double %1073, %1074
  br i1 %1075, label %1079, label %1076

; <label>:1076                                    ; preds = %1072
  %1077 = load double* %t_out, align 8
  %1078 = fcmp olt double %1077, 0.000000e+00
  br i1 %1078, label %1079, label %1082

; <label>:1079                                    ; preds = %1076, %1072
  %1080 = load %struct._IO_FILE** @stderr, align 8
  %1081 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %1080, i8* getelementptr inbounds ([42 x i8]* @.str.1.226, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

; <label>:1082                                    ; preds = %1076
  %1083 = load i64* %i_in, align 8
  %1084 = icmp sgt i64 %1083, 2
  br i1 %1084, label %1085, label %1088

; <label>:1085                                    ; preds = %1082
  %1086 = load i64* %i_in, align 8
  %1087 = sub nsw i64 %1086, 3
  store i64 %1087, i64* %i_in, align 8
  br label %1088

; <label>:1088                                    ; preds = %1085, %1082
  %1089 = load i64* %i_out, align 8
  %1090 = icmp sgt i64 %1089, 2
  br i1 %1090, label %1091, label %1094

; <label>:1091                                    ; preds = %1088
  %1092 = load i64* %i_out, align 8
  %1093 = sub nsw i64 %1092, 3
  store i64 %1093, i64* %i_out, align 8
  br label %1094

; <label>:1094                                    ; preds = %1091, %1088
  %1095 = load i64* %i_in, align 8
  %1096 = load %struct.rayinfo** %new_ri, align 8
  %1097 = getelementptr inbounds %struct.rayinfo* %1096, i32 0, i32 2
  store i64 %1095, i64* %1097, align 8
  %1098 = load double* %t_in, align 8
  %1099 = load %struct.rayinfo** %new_ri, align 8
  %1100 = getelementptr inbounds %struct.rayinfo* %1099, i32 0, i32 3
  store double %1098, double* %1100, align 8
  %1101 = load double* %t_out, align 8
  %1102 = load %struct.rayinfo** %new_ri, align 8
  %1103 = getelementptr inbounds %struct.rayinfo* %1102, i32 0, i32 5
  store double %1101, double* %1103, align 8
  %1104 = load i64* %i_out, align 8
  %1105 = load %struct.rayinfo** %new_ri, align 8
  %1106 = getelementptr inbounds %struct.rayinfo* %1105, i32 0, i32 4
  store i64 %1104, i64* %1106, align 8
  br label %1107

; <label>:1107                                    ; preds = %1094, %663, %536, %409, %239
  ret void
}

; Function Attrs: nounwind
declare double @fmod(double, double)

; Function Attrs: nounwind uwtable
define internal i64 @step_grid(%struct.ray* %r) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %n = alloca i64, align 8
  %small = alloca i64, align 8
  %indx = alloca i64*, align 8
  %ra = alloca %struct.ray*, align 8
  %gr = alloca %struct.grid*, align 8
  %rinfo = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  %3 = load %struct.ray** %2, align 8
  store %struct.ray* %3, %struct.ray** %ra, align 8
  %4 = load %struct.ray** %2, align 8
  %5 = getelementptr inbounds %struct.ray* %4, i32 0, i32 8
  %6 = load %struct.rayinfo** %5, align 8
  store %struct.rayinfo* %6, %struct.rayinfo** %rinfo, align 8
  %7 = load %struct.rayinfo** %rinfo, align 8
  %8 = getelementptr inbounds %struct.rayinfo* %7, i32 0, i32 0
  %9 = load %struct.grid** %8, align 8
  store %struct.grid* %9, %struct.grid** %gr, align 8
  %10 = load %struct.grid** %gr, align 8
  %11 = getelementptr inbounds %struct.grid* %10, i32 0, i32 5
  %12 = getelementptr inbounds [3 x i64]* %11, i32 0, i32 0
  store i64* %12, i64** %indx, align 8
  %13 = load i64** %indx, align 8
  %14 = getelementptr inbounds i64* %13, i64 1
  %15 = load i64* %14, align 8
  store i64 %15, i64* %n, align 8
  %16 = load %struct.rayinfo** %rinfo, align 8
  %17 = getelementptr inbounds %struct.rayinfo* %16, i32 0, i32 5
  %18 = load double* %17, align 8
  %19 = load %struct.rayinfo** %rinfo, align 8
  %20 = getelementptr inbounds %struct.rayinfo* %19, i32 0, i32 3
  store double %18, double* %20, align 8
  %21 = load %struct.rayinfo** %rinfo, align 8
  %22 = getelementptr inbounds %struct.rayinfo* %21, i32 0, i32 4
  %23 = load i64* %22, align 8
  %24 = load %struct.ray** %2, align 8
  %25 = getelementptr inbounds %struct.ray* %24, i32 0, i32 7
  %26 = getelementptr inbounds [3 x i64]* %25, i32 0, i64 %23
  %27 = load i64* %26, align 8
  %28 = load %struct.rayinfo** %rinfo, align 8
  %29 = getelementptr inbounds %struct.rayinfo* %28, i32 0, i32 4
  %30 = load i64* %29, align 8
  %31 = load %struct.rayinfo** %rinfo, align 8
  %32 = getelementptr inbounds %struct.rayinfo* %31, i32 0, i32 7
  %33 = getelementptr inbounds [3 x i64]* %32, i32 0, i64 %30
  %34 = load i64* %33, align 8
  %35 = add nsw i64 %34, %27
  store i64 %35, i64* %33, align 8
  %36 = load %struct.rayinfo** %rinfo, align 8
  %37 = getelementptr inbounds %struct.rayinfo* %36, i32 0, i32 4
  %38 = load i64* %37, align 8
  %39 = load %struct.rayinfo** %rinfo, align 8
  %40 = getelementptr inbounds %struct.rayinfo* %39, i32 0, i32 2
  store i64 %38, i64* %40, align 8
  %41 = load %struct.rayinfo** %rinfo, align 8
  %42 = getelementptr inbounds %struct.rayinfo* %41, i32 0, i32 4
  %43 = load i64* %42, align 8
  %44 = load %struct.rayinfo** %rinfo, align 8
  %45 = getelementptr inbounds %struct.rayinfo* %44, i32 0, i32 7
  %46 = getelementptr inbounds [3 x i64]* %45, i32 0, i64 %43
  %47 = load i64* %46, align 8
  %48 = icmp slt i64 %47, 0
  br i1 %48, label %59, label %49

; <label>:49                                      ; preds = %0
  %50 = load %struct.rayinfo** %rinfo, align 8
  %51 = getelementptr inbounds %struct.rayinfo* %50, i32 0, i32 4
  %52 = load i64* %51, align 8
  %53 = load %struct.rayinfo** %rinfo, align 8
  %54 = getelementptr inbounds %struct.rayinfo* %53, i32 0, i32 7
  %55 = getelementptr inbounds [3 x i64]* %54, i32 0, i64 %52
  %56 = load i64* %55, align 8
  %57 = load i64* %n, align 8
  %58 = icmp sge i64 %56, %57
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %49, %0
  store i64 -1, i64* %1
  br label %126

; <label>:60                                      ; preds = %49
  %61 = load %struct.rayinfo** %rinfo, align 8
  %62 = getelementptr inbounds %struct.rayinfo* %61, i32 0, i32 4
  %63 = load i64* %62, align 8
  %64 = load %struct.rayinfo** %rinfo, align 8
  %65 = getelementptr inbounds %struct.rayinfo* %64, i32 0, i32 6
  %66 = getelementptr inbounds [3 x double]* %65, i32 0, i64 %63
  %67 = load double* %66, align 8
  %68 = load %struct.rayinfo** %rinfo, align 8
  %69 = getelementptr inbounds %struct.rayinfo* %68, i32 0, i32 4
  %70 = load i64* %69, align 8
  %71 = load %struct.rayinfo** %rinfo, align 8
  %72 = getelementptr inbounds %struct.rayinfo* %71, i32 0, i32 1
  %73 = getelementptr inbounds [3 x double]* %72, i32 0, i64 %70
  %74 = load double* %73, align 8
  %75 = fadd double %74, %67
  store double %75, double* %73, align 8
  %76 = load %struct.rayinfo** %rinfo, align 8
  %77 = getelementptr inbounds %struct.rayinfo* %76, i32 0, i32 4
  %78 = load i64* %77, align 8
  %79 = load %struct.rayinfo** %rinfo, align 8
  %80 = getelementptr inbounds %struct.rayinfo* %79, i32 0, i32 9
  %81 = getelementptr inbounds [3 x i64]* %80, i32 0, i64 %78
  %82 = load i64* %81, align 8
  %83 = load %struct.rayinfo** %rinfo, align 8
  %84 = getelementptr inbounds %struct.rayinfo* %83, i32 0, i32 8
  %85 = load i64* %84, align 8
  %86 = add nsw i64 %85, %82
  store i64 %86, i64* %84, align 8
  %87 = load %struct.rayinfo** %rinfo, align 8
  %88 = getelementptr inbounds %struct.rayinfo* %87, i32 0, i32 1
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 0
  %90 = load double* %89, align 8
  %91 = load %struct.rayinfo** %rinfo, align 8
  %92 = getelementptr inbounds %struct.rayinfo* %91, i32 0, i32 1
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 1
  %94 = load double* %93, align 8
  %95 = fcmp ole double %90, %94
  %96 = select i1 %95, i32 0, i32 1
  %97 = sext i32 %96 to i64
  store i64 %97, i64* %small, align 8
  %98 = load i64* %small, align 8
  %99 = load %struct.rayinfo** %rinfo, align 8
  %100 = getelementptr inbounds %struct.rayinfo* %99, i32 0, i32 1
  %101 = getelementptr inbounds [3 x double]* %100, i32 0, i64 %98
  %102 = load double* %101, align 8
  %103 = load %struct.rayinfo** %rinfo, align 8
  %104 = getelementptr inbounds %struct.rayinfo* %103, i32 0, i32 1
  %105 = getelementptr inbounds [3 x double]* %104, i32 0, i64 2
  %106 = load double* %105, align 8
  %107 = fcmp ole double %102, %106
  br i1 %107, label %108, label %110

; <label>:108                                     ; preds = %60
  %109 = load i64* %small, align 8
  br label %111

; <label>:110                                     ; preds = %60
  br label %111

; <label>:111                                     ; preds = %110, %108
  %112 = phi i64 [ %109, %108 ], [ 2, %110 ]
  store i64 %112, i64* %small, align 8
  %113 = load i64* %small, align 8
  %114 = load %struct.rayinfo** %rinfo, align 8
  %115 = getelementptr inbounds %struct.rayinfo* %114, i32 0, i32 1
  %116 = getelementptr inbounds [3 x double]* %115, i32 0, i64 %113
  %117 = load double* %116, align 8
  %118 = load %struct.rayinfo** %rinfo, align 8
  %119 = getelementptr inbounds %struct.rayinfo* %118, i32 0, i32 5
  store double %117, double* %119, align 8
  %120 = load i64* %small, align 8
  %121 = load %struct.rayinfo** %rinfo, align 8
  %122 = getelementptr inbounds %struct.rayinfo* %121, i32 0, i32 4
  store i64 %120, i64* %122, align 8
  %123 = load %struct.rayinfo** %rinfo, align 8
  %124 = getelementptr inbounds %struct.rayinfo* %123, i32 0, i32 8
  %125 = load i64* %124, align 8
  store i64 %125, i64* %1
  br label %126

; <label>:126                                     ; preds = %111, %59
  %127 = load i64* %1
  ret i64 %127
}

; Function Attrs: nounwind uwtable
define internal i64 @next_voxel(%struct.ray* %r) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %indx = alloca i64, align 8
  %gr = alloca %struct.grid*, align 8
  %v = alloca %struct.voxel*, align 8
  %rinfo = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  br label %3

; <label>:3                                       ; preds = %26, %0
  %4 = load %struct.ray** %2, align 8
  %5 = call i64 @step_grid(%struct.ray* %4)
  store i64 %5, i64* %indx, align 8
  %6 = icmp eq i64 %5, -1
  br i1 %6, label %7, label %27

; <label>:7                                       ; preds = %3
  %8 = load %struct.ray** %2, align 8
  %9 = getelementptr inbounds %struct.ray* %8, i32 0, i32 8
  %10 = load %struct.rayinfo** %9, align 8
  store %struct.rayinfo* %10, %struct.rayinfo** %rinfo, align 8
  %11 = load %struct.rayinfo** %rinfo, align 8
  %12 = getelementptr inbounds %struct.rayinfo* %11, i32 0, i32 0
  %13 = load %struct.grid** %12, align 8
  store %struct.grid* %13, %struct.grid** %gr, align 8
  %14 = load %struct.grid** %gr, align 8
  %15 = getelementptr inbounds %struct.grid* %14, i32 0, i32 9
  %16 = load i64* %15, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %25

; <label>:18                                      ; preds = %7
  %19 = load %struct.ray** %2, align 8
  call void @pop_up_a_grid(%struct.ray* %19)
  %20 = load %struct.ray** %2, align 8
  %21 = getelementptr inbounds %struct.ray* %20, i32 0, i32 8
  %22 = load %struct.rayinfo** %21, align 8
  %23 = getelementptr inbounds %struct.rayinfo* %22, i32 0, i32 8
  %24 = load i64* %23, align 8
  store i64 %24, i64* %indx, align 8
  br label %26

; <label>:25                                      ; preds = %7
  store i64 -1, i64* %1
  br label %29

; <label>:26                                      ; preds = %18
  br label %3

; <label>:27                                      ; preds = %3
  %28 = load i64* %indx, align 8
  store i64 %28, i64* %1
  br label %29

; <label>:29                                      ; preds = %27, %25
  %30 = load i64* %1
  ret i64 %30
}

; Function Attrs: nounwind uwtable
define internal %struct.voxel* @next_nonempty_voxel(%struct.ray* %r) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.ray*, align 8
  %indx = alloca i64, align 8
  %v = alloca %struct.voxel*, align 8
  %gr = alloca %struct.grid*, align 8
  %rinfo = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  %3 = load %struct.ray** %2, align 8
  %4 = call i64 @next_voxel(%struct.ray* %3)
  store i64 %4, i64* %indx, align 8
  %5 = load i64* %indx, align 8
  %6 = icmp slt i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  store %struct.voxel* null, %struct.voxel** %1
  br label %38

; <label>:8                                       ; preds = %0
  %9 = load %struct.ray** %2, align 8
  %10 = getelementptr inbounds %struct.ray* %9, i32 0, i32 8
  %11 = load %struct.rayinfo** %10, align 8
  store %struct.rayinfo* %11, %struct.rayinfo** %rinfo, align 8
  %12 = load %struct.rayinfo** %rinfo, align 8
  %13 = getelementptr inbounds %struct.rayinfo* %12, i32 0, i32 0
  %14 = load %struct.grid** %13, align 8
  store %struct.grid* %14, %struct.grid** %gr, align 8
  br label %15

; <label>:15                                      ; preds = %26, %8
  %16 = load i64* %indx, align 8
  %17 = load %struct.grid** %gr, align 8
  %18 = call i64 @lookup_emptycells(i64 %16, %struct.grid* %17)
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %20, label %33

; <label>:20                                      ; preds = %15
  %21 = load %struct.ray** %2, align 8
  %22 = call i64 @next_voxel(%struct.ray* %21)
  store i64 %22, i64* %indx, align 8
  %23 = load i64* %indx, align 8
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %20
  store %struct.voxel* null, %struct.voxel** %1
  br label %38

; <label>:26                                      ; preds = %20
  %27 = load %struct.ray** %2, align 8
  %28 = getelementptr inbounds %struct.ray* %27, i32 0, i32 8
  %29 = load %struct.rayinfo** %28, align 8
  store %struct.rayinfo* %29, %struct.rayinfo** %rinfo, align 8
  %30 = load %struct.rayinfo** %rinfo, align 8
  %31 = getelementptr inbounds %struct.rayinfo* %30, i32 0, i32 0
  %32 = load %struct.grid** %31, align 8
  store %struct.grid* %32, %struct.grid** %gr, align 8
  br label %15

; <label>:33                                      ; preds = %15
  %34 = load i64* %indx, align 8
  %35 = load %struct.grid** %gr, align 8
  %36 = call %struct.voxel* @lookup_hashtable(i64 %34, %struct.grid* %35)
  store %struct.voxel* %36, %struct.voxel** %v, align 8
  %37 = load %struct.voxel** %v, align 8
  store %struct.voxel* %37, %struct.voxel** %1
  br label %38

; <label>:38                                      ; preds = %33, %25, %7
  %39 = load %struct.voxel** %1
  ret %struct.voxel* %39
}

; Function Attrs: nounwind uwtable
define internal %struct.voxel* @next_nonempty_leaf(%struct.ray* %r, i64 %step, i64* %status) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %indx = alloca i64, align 8
  %ng = alloca %struct.grid*, align 8
  %v = alloca %struct.voxel*, align 8
  %rinfo = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  store i64 %step, i64* %3, align 8
  store i64* %status, i64** %4, align 8
  %5 = load i64* %3, align 8
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = load %struct.ray** %2, align 8
  %9 = call %struct.voxel* @next_nonempty_voxel(%struct.ray* %8)
  store %struct.voxel* %9, %struct.voxel** %v, align 8
  br label %21

; <label>:10                                      ; preds = %0
  %11 = load %struct.ray** %2, align 8
  %12 = getelementptr inbounds %struct.ray* %11, i32 0, i32 8
  %13 = load %struct.rayinfo** %12, align 8
  store %struct.rayinfo* %13, %struct.rayinfo** %rinfo, align 8
  %14 = load %struct.rayinfo** %rinfo, align 8
  %15 = getelementptr inbounds %struct.rayinfo* %14, i32 0, i32 8
  %16 = load i64* %15, align 8
  %17 = load %struct.rayinfo** %rinfo, align 8
  %18 = getelementptr inbounds %struct.rayinfo* %17, i32 0, i32 0
  %19 = load %struct.grid** %18, align 8
  %20 = call %struct.voxel* @lookup_hashtable(i64 %16, %struct.grid* %19)
  store %struct.voxel* %20, %struct.voxel** %v, align 8
  br label %21

; <label>:21                                      ; preds = %10, %7
  %22 = load %struct.voxel** %v, align 8
  %23 = icmp eq %struct.voxel* %22, null
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %21
  %25 = load i64** %4, align 8
  store i64 0, i64* %25, align 8
  %26 = load %struct.voxel** %v, align 8
  store %struct.voxel* %26, %struct.voxel** %1
  br label %107

; <label>:27                                      ; preds = %21
  br label %28

; <label>:28                                      ; preds = %104, %27
  %29 = load %struct.voxel** %v, align 8
  %30 = getelementptr inbounds %struct.voxel* %29, i32 0, i32 2
  %31 = load i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 5
  br i1 %33, label %40, label %34

; <label>:34                                      ; preds = %28
  %35 = load %struct.voxel** %v, align 8
  %36 = getelementptr inbounds %struct.voxel* %35, i32 0, i32 2
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 3
  br label %40

; <label>:40                                      ; preds = %34, %28
  %41 = phi i1 [ true, %28 ], [ %39, %34 ]
  br i1 %41, label %42, label %105

; <label>:42                                      ; preds = %40
  %43 = load %struct.voxel** %v, align 8
  %44 = getelementptr inbounds %struct.voxel* %43, i32 0, i32 2
  %45 = load i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 5
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %42
  %49 = load %struct.ray** %2, align 8
  %50 = load %struct.voxel** %v, align 8
  %51 = call i64 @send_ray(%struct.ray* %49, %struct.voxel* %50)
  %52 = load i64** %4, align 8
  store i64 1, i64* %52, align 8
  store %struct.voxel* null, %struct.voxel** %1
  br label %107

; <label>:53                                      ; preds = %42
  %54 = load %struct.ray** %2, align 8
  %55 = load %struct.voxel** %v, align 8
  call void @push_down_grid(%struct.ray* %54, %struct.voxel* %55)
  %56 = load %struct.ray** %2, align 8
  %57 = getelementptr inbounds %struct.ray* %56, i32 0, i32 8
  %58 = load %struct.rayinfo** %57, align 8
  store %struct.rayinfo* %58, %struct.rayinfo** %rinfo, align 8
  %59 = load %struct.rayinfo** %rinfo, align 8
  %60 = getelementptr inbounds %struct.rayinfo* %59, i32 0, i32 8
  %61 = load i64* %60, align 8
  store i64 %61, i64* %indx, align 8
  %62 = load i64* %indx, align 8
  %63 = load %struct.rayinfo** %rinfo, align 8
  %64 = getelementptr inbounds %struct.rayinfo* %63, i32 0, i32 0
  %65 = load %struct.grid** %64, align 8
  %66 = call i64 @lookup_emptycells(i64 %62, %struct.grid* %65)
  %67 = icmp ne i64 %66, 1
  br i1 %67, label %68, label %99

; <label>:68                                      ; preds = %53
  %69 = load i64* %indx, align 8
  %70 = load %struct.rayinfo** %rinfo, align 8
  %71 = getelementptr inbounds %struct.rayinfo* %70, i32 0, i32 0
  %72 = load %struct.grid** %71, align 8
  %73 = call %struct.voxel* @lookup_hashtable(i64 %69, %struct.grid* %72)
  store %struct.voxel* %73, %struct.voxel** %v, align 8
  %74 = load %struct.voxel** %v, align 8
  %75 = getelementptr inbounds %struct.voxel* %74, i32 0, i32 2
  %76 = load i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp ne i32 %77, 5
  br i1 %78, label %79, label %98

; <label>:79                                      ; preds = %68
  %80 = load %struct.voxel** %v, align 8
  %81 = getelementptr inbounds %struct.voxel* %80, i32 0, i32 2
  %82 = load i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = icmp ne i32 %83, 3
  br i1 %84, label %85, label %98

; <label>:85                                      ; preds = %79
  %86 = load %struct.voxel** %v, align 8
  %87 = getelementptr inbounds %struct.voxel* %86, i32 0, i32 2
  %88 = load i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp eq i32 %89, 4
  br i1 %90, label %91, label %96

; <label>:91                                      ; preds = %85
  %92 = load %struct.ray** %2, align 8
  %93 = load %struct.voxel** %v, align 8
  %94 = call i64 @send_ray(%struct.ray* %92, %struct.voxel* %93)
  %95 = load i64** %4, align 8
  store i64 1, i64* %95, align 8
  store %struct.voxel* null, %struct.voxel** %1
  br label %107

; <label>:96                                      ; preds = %85
  %97 = load %struct.voxel** %v, align 8
  store %struct.voxel* %97, %struct.voxel** %1
  br label %107

; <label>:98                                      ; preds = %79, %68
  br label %104

; <label>:99                                      ; preds = %53
  %100 = load %struct.ray** %2, align 8
  %101 = load i64** %4, align 8
  %102 = call %struct.voxel* @next_nonempty_leaf(%struct.ray* %100, i64 1, i64* %101)
  store %struct.voxel* %102, %struct.voxel** %v, align 8
  %103 = load %struct.voxel** %v, align 8
  store %struct.voxel* %103, %struct.voxel** %1
  br label %107

; <label>:104                                     ; preds = %98
  br label %28

; <label>:105                                     ; preds = %40
  %106 = load %struct.voxel** %v, align 8
  store %struct.voxel* %106, %struct.voxel** %1
  br label %107

; <label>:107                                     ; preds = %105, %99, %96, %91, %48, %24
  %108 = load %struct.voxel** %1
  ret %struct.voxel* %108
}

; Function Attrs: nounwind uwtable
define internal %struct.voxel* @init_ray(%struct.ray* %r, %struct.grid* %g) {
  %1 = alloca %struct.voxel*, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.grid*, align 8
  %status = alloca i64, align 8
  %indx = alloca i64, align 8
  %grid_id = alloca i64, align 8
  %i_in = alloca i64, align 8
  %i_out = alloca i64, align 8
  %i = alloca i64, align 8
  %il = alloca i64, align 8
  %ih = alloca i64, align 8
  %t_in = alloca double, align 8
  %t_out = alloca double, align 8
  %tl = alloca double, align 8
  %th = alloca double, align 8
  %t = alloca [6 x double], align 16
  %v = alloca %struct.voxel*, align 8
  %gr = alloca %struct.grid*, align 8
  %ri = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %2, align 8
  store %struct.grid* %g, %struct.grid** %3, align 8
  %4 = load %struct.ray** %2, align 8
  call void @reset_rayinfo(%struct.ray* %4)
  %5 = load %struct.ray** %2, align 8
  %6 = getelementptr inbounds %struct.ray* %5, i32 0, i32 4
  %7 = getelementptr inbounds [3 x double]* %6, i32 0, i64 0
  %8 = load double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  br i1 %9, label %10, label %40

; <label>:10                                      ; preds = %0
  %11 = load %struct.ray** %2, align 8
  %12 = getelementptr inbounds %struct.ray* %11, i32 0, i32 3
  %13 = getelementptr inbounds [3 x double]* %12, i32 0, i64 0
  %14 = load double* %13, align 8
  %15 = load %struct.grid** %3, align 8
  %16 = getelementptr inbounds %struct.grid* %15, i32 0, i32 7
  %17 = getelementptr inbounds [3 x double]* %16, i32 0, i64 0
  %18 = load double* %17, align 8
  %19 = fcmp oge double %14, %18
  br i1 %19, label %20, label %37

; <label>:20                                      ; preds = %10
  %21 = load %struct.ray** %2, align 8
  %22 = getelementptr inbounds %struct.ray* %21, i32 0, i32 3
  %23 = getelementptr inbounds [3 x double]* %22, i32 0, i64 0
  %24 = load double* %23, align 8
  %25 = load %struct.grid** %3, align 8
  %26 = getelementptr inbounds %struct.grid* %25, i32 0, i32 7
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 0
  %28 = load double* %27, align 8
  %29 = load %struct.grid** %3, align 8
  %30 = getelementptr inbounds %struct.grid* %29, i32 0, i32 8
  %31 = getelementptr inbounds [3 x double]* %30, i32 0, i64 0
  %32 = load double* %31, align 8
  %33 = fadd double %28, %32
  %34 = fcmp ole double %24, %33
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %20
  %36 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double -1.000000e+32, double* %36, align 8
  br label %39

; <label>:37                                      ; preds = %20, %10
  %38 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double 1.000000e+32, double* %38, align 8
  br label %39

; <label>:39                                      ; preds = %37, %35
  br label %56

; <label>:40                                      ; preds = %0
  %41 = load %struct.grid** %3, align 8
  %42 = getelementptr inbounds %struct.grid* %41, i32 0, i32 7
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 0
  %44 = load double* %43, align 8
  %45 = load %struct.ray** %2, align 8
  %46 = getelementptr inbounds %struct.ray* %45, i32 0, i32 3
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 0
  %48 = load double* %47, align 8
  %49 = fsub double %44, %48
  %50 = load %struct.ray** %2, align 8
  %51 = getelementptr inbounds %struct.ray* %50, i32 0, i32 4
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 0
  %53 = load double* %52, align 8
  %54 = fdiv double %49, %53
  %55 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  store double %54, double* %55, align 8
  br label %56

; <label>:56                                      ; preds = %40, %39
  %57 = load %struct.ray** %2, align 8
  %58 = getelementptr inbounds %struct.ray* %57, i32 0, i32 4
  %59 = getelementptr inbounds [3 x double]* %58, i32 0, i64 1
  %60 = load double* %59, align 8
  %61 = fcmp oeq double %60, 0.000000e+00
  br i1 %61, label %62, label %92

; <label>:62                                      ; preds = %56
  %63 = load %struct.ray** %2, align 8
  %64 = getelementptr inbounds %struct.ray* %63, i32 0, i32 3
  %65 = getelementptr inbounds [3 x double]* %64, i32 0, i64 1
  %66 = load double* %65, align 8
  %67 = load %struct.grid** %3, align 8
  %68 = getelementptr inbounds %struct.grid* %67, i32 0, i32 7
  %69 = getelementptr inbounds [3 x double]* %68, i32 0, i64 1
  %70 = load double* %69, align 8
  %71 = fcmp oge double %66, %70
  br i1 %71, label %72, label %89

; <label>:72                                      ; preds = %62
  %73 = load %struct.ray** %2, align 8
  %74 = getelementptr inbounds %struct.ray* %73, i32 0, i32 3
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 1
  %76 = load double* %75, align 8
  %77 = load %struct.grid** %3, align 8
  %78 = getelementptr inbounds %struct.grid* %77, i32 0, i32 7
  %79 = getelementptr inbounds [3 x double]* %78, i32 0, i64 1
  %80 = load double* %79, align 8
  %81 = load %struct.grid** %3, align 8
  %82 = getelementptr inbounds %struct.grid* %81, i32 0, i32 8
  %83 = getelementptr inbounds [3 x double]* %82, i32 0, i64 1
  %84 = load double* %83, align 8
  %85 = fadd double %80, %84
  %86 = fcmp ole double %76, %85
  br i1 %86, label %87, label %89

; <label>:87                                      ; preds = %72
  %88 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double -1.000000e+32, double* %88, align 8
  br label %91

; <label>:89                                      ; preds = %72, %62
  %90 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double 1.000000e+32, double* %90, align 8
  br label %91

; <label>:91                                      ; preds = %89, %87
  br label %108

; <label>:92                                      ; preds = %56
  %93 = load %struct.grid** %3, align 8
  %94 = getelementptr inbounds %struct.grid* %93, i32 0, i32 7
  %95 = getelementptr inbounds [3 x double]* %94, i32 0, i64 1
  %96 = load double* %95, align 8
  %97 = load %struct.ray** %2, align 8
  %98 = getelementptr inbounds %struct.ray* %97, i32 0, i32 3
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 1
  %100 = load double* %99, align 8
  %101 = fsub double %96, %100
  %102 = load %struct.ray** %2, align 8
  %103 = getelementptr inbounds %struct.ray* %102, i32 0, i32 4
  %104 = getelementptr inbounds [3 x double]* %103, i32 0, i64 1
  %105 = load double* %104, align 8
  %106 = fdiv double %101, %105
  %107 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  store double %106, double* %107, align 8
  br label %108

; <label>:108                                     ; preds = %92, %91
  %109 = load %struct.ray** %2, align 8
  %110 = getelementptr inbounds %struct.ray* %109, i32 0, i32 4
  %111 = getelementptr inbounds [3 x double]* %110, i32 0, i64 2
  %112 = load double* %111, align 8
  %113 = fcmp oeq double %112, 0.000000e+00
  br i1 %113, label %114, label %144

; <label>:114                                     ; preds = %108
  %115 = load %struct.ray** %2, align 8
  %116 = getelementptr inbounds %struct.ray* %115, i32 0, i32 3
  %117 = getelementptr inbounds [3 x double]* %116, i32 0, i64 2
  %118 = load double* %117, align 8
  %119 = load %struct.grid** %3, align 8
  %120 = getelementptr inbounds %struct.grid* %119, i32 0, i32 7
  %121 = getelementptr inbounds [3 x double]* %120, i32 0, i64 2
  %122 = load double* %121, align 8
  %123 = fcmp oge double %118, %122
  br i1 %123, label %124, label %141

; <label>:124                                     ; preds = %114
  %125 = load %struct.ray** %2, align 8
  %126 = getelementptr inbounds %struct.ray* %125, i32 0, i32 3
  %127 = getelementptr inbounds [3 x double]* %126, i32 0, i64 2
  %128 = load double* %127, align 8
  %129 = load %struct.grid** %3, align 8
  %130 = getelementptr inbounds %struct.grid* %129, i32 0, i32 7
  %131 = getelementptr inbounds [3 x double]* %130, i32 0, i64 2
  %132 = load double* %131, align 8
  %133 = load %struct.grid** %3, align 8
  %134 = getelementptr inbounds %struct.grid* %133, i32 0, i32 8
  %135 = getelementptr inbounds [3 x double]* %134, i32 0, i64 2
  %136 = load double* %135, align 8
  %137 = fadd double %132, %136
  %138 = fcmp ole double %128, %137
  br i1 %138, label %139, label %141

; <label>:139                                     ; preds = %124
  %140 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double -1.000000e+32, double* %140, align 8
  br label %143

; <label>:141                                     ; preds = %124, %114
  %142 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double 1.000000e+32, double* %142, align 8
  br label %143

; <label>:143                                     ; preds = %141, %139
  br label %160

; <label>:144                                     ; preds = %108
  %145 = load %struct.grid** %3, align 8
  %146 = getelementptr inbounds %struct.grid* %145, i32 0, i32 7
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 2
  %148 = load double* %147, align 8
  %149 = load %struct.ray** %2, align 8
  %150 = getelementptr inbounds %struct.ray* %149, i32 0, i32 3
  %151 = getelementptr inbounds [3 x double]* %150, i32 0, i64 2
  %152 = load double* %151, align 8
  %153 = fsub double %148, %152
  %154 = load %struct.ray** %2, align 8
  %155 = getelementptr inbounds %struct.ray* %154, i32 0, i32 4
  %156 = getelementptr inbounds [3 x double]* %155, i32 0, i64 2
  %157 = load double* %156, align 8
  %158 = fdiv double %153, %157
  %159 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  store double %158, double* %159, align 8
  br label %160

; <label>:160                                     ; preds = %144, %143
  %161 = load %struct.ray** %2, align 8
  %162 = getelementptr inbounds %struct.ray* %161, i32 0, i32 4
  %163 = getelementptr inbounds [3 x double]* %162, i32 0, i64 0
  %164 = load double* %163, align 8
  %165 = fcmp oeq double %164, 0.000000e+00
  br i1 %165, label %166, label %196

; <label>:166                                     ; preds = %160
  %167 = load %struct.ray** %2, align 8
  %168 = getelementptr inbounds %struct.ray* %167, i32 0, i32 3
  %169 = getelementptr inbounds [3 x double]* %168, i32 0, i64 0
  %170 = load double* %169, align 8
  %171 = load %struct.grid** %3, align 8
  %172 = getelementptr inbounds %struct.grid* %171, i32 0, i32 7
  %173 = getelementptr inbounds [3 x double]* %172, i32 0, i64 0
  %174 = load double* %173, align 8
  %175 = fcmp oge double %170, %174
  br i1 %175, label %176, label %193

; <label>:176                                     ; preds = %166
  %177 = load %struct.ray** %2, align 8
  %178 = getelementptr inbounds %struct.ray* %177, i32 0, i32 3
  %179 = getelementptr inbounds [3 x double]* %178, i32 0, i64 0
  %180 = load double* %179, align 8
  %181 = load %struct.grid** %3, align 8
  %182 = getelementptr inbounds %struct.grid* %181, i32 0, i32 7
  %183 = getelementptr inbounds [3 x double]* %182, i32 0, i64 0
  %184 = load double* %183, align 8
  %185 = load %struct.grid** %3, align 8
  %186 = getelementptr inbounds %struct.grid* %185, i32 0, i32 8
  %187 = getelementptr inbounds [3 x double]* %186, i32 0, i64 0
  %188 = load double* %187, align 8
  %189 = fadd double %184, %188
  %190 = fcmp ole double %180, %189
  br i1 %190, label %191, label %193

; <label>:191                                     ; preds = %176
  %192 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double 1.000000e+32, double* %192, align 8
  br label %195

; <label>:193                                     ; preds = %176, %166
  %194 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double 1.000000e+32, double* %194, align 8
  br label %195

; <label>:195                                     ; preds = %193, %191
  br label %217

; <label>:196                                     ; preds = %160
  %197 = load %struct.grid** %3, align 8
  %198 = getelementptr inbounds %struct.grid* %197, i32 0, i32 7
  %199 = getelementptr inbounds [3 x double]* %198, i32 0, i64 0
  %200 = load double* %199, align 8
  %201 = load %struct.grid** %3, align 8
  %202 = getelementptr inbounds %struct.grid* %201, i32 0, i32 8
  %203 = getelementptr inbounds [3 x double]* %202, i32 0, i64 0
  %204 = load double* %203, align 8
  %205 = fadd double %200, %204
  %206 = load %struct.ray** %2, align 8
  %207 = getelementptr inbounds %struct.ray* %206, i32 0, i32 3
  %208 = getelementptr inbounds [3 x double]* %207, i32 0, i64 0
  %209 = load double* %208, align 8
  %210 = fsub double %205, %209
  %211 = load %struct.ray** %2, align 8
  %212 = getelementptr inbounds %struct.ray* %211, i32 0, i32 4
  %213 = getelementptr inbounds [3 x double]* %212, i32 0, i64 0
  %214 = load double* %213, align 8
  %215 = fdiv double %210, %214
  %216 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  store double %215, double* %216, align 8
  br label %217

; <label>:217                                     ; preds = %196, %195
  %218 = load %struct.ray** %2, align 8
  %219 = getelementptr inbounds %struct.ray* %218, i32 0, i32 4
  %220 = getelementptr inbounds [3 x double]* %219, i32 0, i64 1
  %221 = load double* %220, align 8
  %222 = fcmp oeq double %221, 0.000000e+00
  br i1 %222, label %223, label %253

; <label>:223                                     ; preds = %217
  %224 = load %struct.ray** %2, align 8
  %225 = getelementptr inbounds %struct.ray* %224, i32 0, i32 3
  %226 = getelementptr inbounds [3 x double]* %225, i32 0, i64 1
  %227 = load double* %226, align 8
  %228 = load %struct.grid** %3, align 8
  %229 = getelementptr inbounds %struct.grid* %228, i32 0, i32 7
  %230 = getelementptr inbounds [3 x double]* %229, i32 0, i64 1
  %231 = load double* %230, align 8
  %232 = fcmp oge double %227, %231
  br i1 %232, label %233, label %250

; <label>:233                                     ; preds = %223
  %234 = load %struct.ray** %2, align 8
  %235 = getelementptr inbounds %struct.ray* %234, i32 0, i32 3
  %236 = getelementptr inbounds [3 x double]* %235, i32 0, i64 1
  %237 = load double* %236, align 8
  %238 = load %struct.grid** %3, align 8
  %239 = getelementptr inbounds %struct.grid* %238, i32 0, i32 7
  %240 = getelementptr inbounds [3 x double]* %239, i32 0, i64 1
  %241 = load double* %240, align 8
  %242 = load %struct.grid** %3, align 8
  %243 = getelementptr inbounds %struct.grid* %242, i32 0, i32 8
  %244 = getelementptr inbounds [3 x double]* %243, i32 0, i64 1
  %245 = load double* %244, align 8
  %246 = fadd double %241, %245
  %247 = fcmp ole double %237, %246
  br i1 %247, label %248, label %250

; <label>:248                                     ; preds = %233
  %249 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double 1.000000e+32, double* %249, align 8
  br label %252

; <label>:250                                     ; preds = %233, %223
  %251 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double 1.000000e+32, double* %251, align 8
  br label %252

; <label>:252                                     ; preds = %250, %248
  br label %274

; <label>:253                                     ; preds = %217
  %254 = load %struct.grid** %3, align 8
  %255 = getelementptr inbounds %struct.grid* %254, i32 0, i32 7
  %256 = getelementptr inbounds [3 x double]* %255, i32 0, i64 1
  %257 = load double* %256, align 8
  %258 = load %struct.grid** %3, align 8
  %259 = getelementptr inbounds %struct.grid* %258, i32 0, i32 8
  %260 = getelementptr inbounds [3 x double]* %259, i32 0, i64 1
  %261 = load double* %260, align 8
  %262 = fadd double %257, %261
  %263 = load %struct.ray** %2, align 8
  %264 = getelementptr inbounds %struct.ray* %263, i32 0, i32 3
  %265 = getelementptr inbounds [3 x double]* %264, i32 0, i64 1
  %266 = load double* %265, align 8
  %267 = fsub double %262, %266
  %268 = load %struct.ray** %2, align 8
  %269 = getelementptr inbounds %struct.ray* %268, i32 0, i32 4
  %270 = getelementptr inbounds [3 x double]* %269, i32 0, i64 1
  %271 = load double* %270, align 8
  %272 = fdiv double %267, %271
  %273 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  store double %272, double* %273, align 8
  br label %274

; <label>:274                                     ; preds = %253, %252
  %275 = load %struct.ray** %2, align 8
  %276 = getelementptr inbounds %struct.ray* %275, i32 0, i32 4
  %277 = getelementptr inbounds [3 x double]* %276, i32 0, i64 2
  %278 = load double* %277, align 8
  %279 = fcmp oeq double %278, 0.000000e+00
  br i1 %279, label %280, label %310

; <label>:280                                     ; preds = %274
  %281 = load %struct.ray** %2, align 8
  %282 = getelementptr inbounds %struct.ray* %281, i32 0, i32 3
  %283 = getelementptr inbounds [3 x double]* %282, i32 0, i64 2
  %284 = load double* %283, align 8
  %285 = load %struct.grid** %3, align 8
  %286 = getelementptr inbounds %struct.grid* %285, i32 0, i32 7
  %287 = getelementptr inbounds [3 x double]* %286, i32 0, i64 2
  %288 = load double* %287, align 8
  %289 = fcmp oge double %284, %288
  br i1 %289, label %290, label %307

; <label>:290                                     ; preds = %280
  %291 = load %struct.ray** %2, align 8
  %292 = getelementptr inbounds %struct.ray* %291, i32 0, i32 3
  %293 = getelementptr inbounds [3 x double]* %292, i32 0, i64 2
  %294 = load double* %293, align 8
  %295 = load %struct.grid** %3, align 8
  %296 = getelementptr inbounds %struct.grid* %295, i32 0, i32 7
  %297 = getelementptr inbounds [3 x double]* %296, i32 0, i64 2
  %298 = load double* %297, align 8
  %299 = load %struct.grid** %3, align 8
  %300 = getelementptr inbounds %struct.grid* %299, i32 0, i32 8
  %301 = getelementptr inbounds [3 x double]* %300, i32 0, i64 2
  %302 = load double* %301, align 8
  %303 = fadd double %298, %302
  %304 = fcmp ole double %294, %303
  br i1 %304, label %305, label %307

; <label>:305                                     ; preds = %290
  %306 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double 1.000000e+32, double* %306, align 8
  br label %309

; <label>:307                                     ; preds = %290, %280
  %308 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double 1.000000e+32, double* %308, align 8
  br label %309

; <label>:309                                     ; preds = %307, %305
  br label %331

; <label>:310                                     ; preds = %274
  %311 = load %struct.grid** %3, align 8
  %312 = getelementptr inbounds %struct.grid* %311, i32 0, i32 7
  %313 = getelementptr inbounds [3 x double]* %312, i32 0, i64 2
  %314 = load double* %313, align 8
  %315 = load %struct.grid** %3, align 8
  %316 = getelementptr inbounds %struct.grid* %315, i32 0, i32 8
  %317 = getelementptr inbounds [3 x double]* %316, i32 0, i64 2
  %318 = load double* %317, align 8
  %319 = fadd double %314, %318
  %320 = load %struct.ray** %2, align 8
  %321 = getelementptr inbounds %struct.ray* %320, i32 0, i32 3
  %322 = getelementptr inbounds [3 x double]* %321, i32 0, i64 2
  %323 = load double* %322, align 8
  %324 = fsub double %319, %323
  %325 = load %struct.ray** %2, align 8
  %326 = getelementptr inbounds %struct.ray* %325, i32 0, i32 4
  %327 = getelementptr inbounds [3 x double]* %326, i32 0, i64 2
  %328 = load double* %327, align 8
  %329 = fdiv double %324, %328
  %330 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  store double %329, double* %330, align 8
  br label %331

; <label>:331                                     ; preds = %310, %309
  store double -1.000000e+32, double* %t_in, align 8
  store i64 -1, i64* %i_in, align 8
  store double 1.000000e+32, double* %t_out, align 8
  store i64 -1, i64* %i_out, align 8
  store i64 0, i64* %i, align 8
  br label %332

; <label>:332                                     ; preds = %381, %331
  %333 = load i64* %i, align 8
  %334 = icmp slt i64 %333, 3
  br i1 %334, label %335, label %384

; <label>:335                                     ; preds = %332
  %336 = load i64* %i, align 8
  %337 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %336
  %338 = load double* %337, align 8
  %339 = load i64* %i, align 8
  %340 = add nsw i64 %339, 3
  %341 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %340
  %342 = load double* %341, align 8
  %343 = fcmp olt double %338, %342
  br i1 %343, label %344, label %355

; <label>:344                                     ; preds = %335
  %345 = load i64* %i, align 8
  %346 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %345
  %347 = load double* %346, align 8
  store double %347, double* %tl, align 8
  %348 = load i64* %i, align 8
  store i64 %348, i64* %il, align 8
  %349 = load i64* %i, align 8
  %350 = add nsw i64 %349, 3
  %351 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %350
  %352 = load double* %351, align 8
  store double %352, double* %th, align 8
  %353 = load i64* %i, align 8
  %354 = add nsw i64 %353, 3
  store i64 %354, i64* %ih, align 8
  br label %366

; <label>:355                                     ; preds = %335
  %356 = load i64* %i, align 8
  %357 = add nsw i64 %356, 3
  %358 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %357
  %359 = load double* %358, align 8
  store double %359, double* %tl, align 8
  %360 = load i64* %i, align 8
  %361 = add nsw i64 %360, 3
  store i64 %361, i64* %il, align 8
  %362 = load i64* %i, align 8
  %363 = getelementptr inbounds [6 x double]* %t, i32 0, i64 %362
  %364 = load double* %363, align 8
  store double %364, double* %th, align 8
  %365 = load i64* %i, align 8
  store i64 %365, i64* %ih, align 8
  br label %366

; <label>:366                                     ; preds = %355, %344
  %367 = load double* %t_in, align 8
  %368 = load double* %tl, align 8
  %369 = fcmp olt double %367, %368
  br i1 %369, label %370, label %373

; <label>:370                                     ; preds = %366
  %371 = load double* %tl, align 8
  store double %371, double* %t_in, align 8
  %372 = load i64* %il, align 8
  store i64 %372, i64* %i_in, align 8
  br label %373

; <label>:373                                     ; preds = %370, %366
  %374 = load double* %t_out, align 8
  %375 = load double* %th, align 8
  %376 = fcmp ogt double %374, %375
  br i1 %376, label %377, label %380

; <label>:377                                     ; preds = %373
  %378 = load double* %th, align 8
  store double %378, double* %t_out, align 8
  %379 = load i64* %ih, align 8
  store i64 %379, i64* %i_out, align 8
  br label %380

; <label>:380                                     ; preds = %377, %373
  br label %381

; <label>:381                                     ; preds = %380
  %382 = load i64* %i, align 8
  %383 = add nsw i64 %382, 1
  store i64 %383, i64* %i, align 8
  br label %332

; <label>:384                                     ; preds = %332
  %385 = load double* %t_in, align 8
  %386 = load double* %t_out, align 8
  %387 = fcmp oge double %385, %386
  br i1 %387, label %391, label %388

; <label>:388                                     ; preds = %384
  %389 = load double* %t_out, align 8
  %390 = fcmp olt double %389, 0.000000e+00
  br i1 %390, label %391, label %392

; <label>:391                                     ; preds = %388, %384
  store %struct.voxel* null, %struct.voxel** %1
  br label %676

; <label>:392                                     ; preds = %388
  %393 = load %struct.ray** %2, align 8
  %394 = call %struct.rayinfo* @ma_rayinfo(%struct.ray* %393)
  store %struct.rayinfo* %394, %struct.rayinfo** %ri, align 8
  %395 = load %struct.rayinfo** %ri, align 8
  %396 = load %struct.ray** %2, align 8
  %397 = getelementptr inbounds %struct.ray* %396, i32 0, i32 8
  store %struct.rayinfo* %395, %struct.rayinfo** %397, align 8
  %398 = load %struct.grid** %3, align 8
  %399 = load %struct.rayinfo** %ri, align 8
  %400 = getelementptr inbounds %struct.rayinfo* %399, i32 0, i32 0
  store %struct.grid* %398, %struct.grid** %400, align 8
  %401 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  %402 = load double* %401, align 8
  %403 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  %404 = load double* %403, align 8
  %405 = fcmp oge double %402, %404
  br i1 %405, label %406, label %412

; <label>:406                                     ; preds = %392
  %407 = getelementptr inbounds [6 x double]* %t, i32 0, i64 0
  %408 = load double* %407, align 8
  %409 = load %struct.rayinfo** %ri, align 8
  %410 = getelementptr inbounds %struct.rayinfo* %409, i32 0, i32 1
  %411 = getelementptr inbounds [3 x double]* %410, i32 0, i64 0
  store double %408, double* %411, align 8
  br label %418

; <label>:412                                     ; preds = %392
  %413 = getelementptr inbounds [6 x double]* %t, i32 0, i64 3
  %414 = load double* %413, align 8
  %415 = load %struct.rayinfo** %ri, align 8
  %416 = getelementptr inbounds %struct.rayinfo* %415, i32 0, i32 1
  %417 = getelementptr inbounds [3 x double]* %416, i32 0, i64 0
  store double %414, double* %417, align 8
  br label %418

; <label>:418                                     ; preds = %412, %406
  %419 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  %420 = load double* %419, align 8
  %421 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  %422 = load double* %421, align 8
  %423 = fcmp oge double %420, %422
  br i1 %423, label %424, label %430

; <label>:424                                     ; preds = %418
  %425 = getelementptr inbounds [6 x double]* %t, i32 0, i64 1
  %426 = load double* %425, align 8
  %427 = load %struct.rayinfo** %ri, align 8
  %428 = getelementptr inbounds %struct.rayinfo* %427, i32 0, i32 1
  %429 = getelementptr inbounds [3 x double]* %428, i32 0, i64 1
  store double %426, double* %429, align 8
  br label %436

; <label>:430                                     ; preds = %418
  %431 = getelementptr inbounds [6 x double]* %t, i32 0, i64 4
  %432 = load double* %431, align 8
  %433 = load %struct.rayinfo** %ri, align 8
  %434 = getelementptr inbounds %struct.rayinfo* %433, i32 0, i32 1
  %435 = getelementptr inbounds [3 x double]* %434, i32 0, i64 1
  store double %432, double* %435, align 8
  br label %436

; <label>:436                                     ; preds = %430, %424
  %437 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  %438 = load double* %437, align 8
  %439 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  %440 = load double* %439, align 8
  %441 = fcmp oge double %438, %440
  br i1 %441, label %442, label %448

; <label>:442                                     ; preds = %436
  %443 = getelementptr inbounds [6 x double]* %t, i32 0, i64 2
  %444 = load double* %443, align 8
  %445 = load %struct.rayinfo** %ri, align 8
  %446 = getelementptr inbounds %struct.rayinfo* %445, i32 0, i32 1
  %447 = getelementptr inbounds [3 x double]* %446, i32 0, i64 2
  store double %444, double* %447, align 8
  br label %454

; <label>:448                                     ; preds = %436
  %449 = getelementptr inbounds [6 x double]* %t, i32 0, i64 5
  %450 = load double* %449, align 8
  %451 = load %struct.rayinfo** %ri, align 8
  %452 = getelementptr inbounds %struct.rayinfo* %451, i32 0, i32 1
  %453 = getelementptr inbounds [3 x double]* %452, i32 0, i64 2
  store double %450, double* %453, align 8
  br label %454

; <label>:454                                     ; preds = %448, %442
  %455 = load i64* %i_in, align 8
  %456 = icmp sgt i64 %455, 2
  br i1 %456, label %457, label %460

; <label>:457                                     ; preds = %454
  %458 = load i64* %i_in, align 8
  %459 = sub nsw i64 %458, 3
  store i64 %459, i64* %i_in, align 8
  br label %460

; <label>:460                                     ; preds = %457, %454
  %461 = load i64* %i_out, align 8
  %462 = icmp sgt i64 %461, 2
  br i1 %462, label %463, label %466

; <label>:463                                     ; preds = %460
  %464 = load i64* %i_out, align 8
  %465 = sub nsw i64 %464, 3
  store i64 %465, i64* %i_out, align 8
  br label %466

; <label>:466                                     ; preds = %463, %460
  %467 = load i64* %i_in, align 8
  %468 = load %struct.rayinfo** %ri, align 8
  %469 = getelementptr inbounds %struct.rayinfo* %468, i32 0, i32 2
  store i64 %467, i64* %469, align 8
  %470 = load double* %t_in, align 8
  %471 = load %struct.rayinfo** %ri, align 8
  %472 = getelementptr inbounds %struct.rayinfo* %471, i32 0, i32 3
  store double %470, double* %472, align 8
  %473 = load double* %t_out, align 8
  %474 = load %struct.rayinfo** %ri, align 8
  %475 = getelementptr inbounds %struct.rayinfo* %474, i32 0, i32 5
  store double %473, double* %475, align 8
  %476 = load i64* %i_out, align 8
  %477 = load %struct.rayinfo** %ri, align 8
  %478 = getelementptr inbounds %struct.rayinfo* %477, i32 0, i32 4
  store i64 %476, i64* %478, align 8
  %479 = load %struct.ray** %2, align 8
  %480 = getelementptr inbounds %struct.ray* %479, i32 0, i32 4
  %481 = getelementptr inbounds [3 x double]* %480, i32 0, i64 0
  %482 = load double* %481, align 8
  %483 = fcmp oeq double %482, 0.000000e+00
  br i1 %483, label %484, label %485

; <label>:484                                     ; preds = %466
  br label %509

; <label>:485                                     ; preds = %466
  %486 = load %struct.grid** %3, align 8
  %487 = getelementptr inbounds %struct.grid* %486, i32 0, i32 8
  %488 = getelementptr inbounds [3 x double]* %487, i32 0, i64 0
  %489 = load double* %488, align 8
  %490 = load %struct.ray** %2, align 8
  %491 = getelementptr inbounds %struct.ray* %490, i32 0, i32 4
  %492 = getelementptr inbounds [3 x double]* %491, i32 0, i64 0
  %493 = load double* %492, align 8
  %494 = fcmp ogt double %493, 0.000000e+00
  br i1 %494, label %495, label %500

; <label>:495                                     ; preds = %485
  %496 = load %struct.ray** %2, align 8
  %497 = getelementptr inbounds %struct.ray* %496, i32 0, i32 4
  %498 = getelementptr inbounds [3 x double]* %497, i32 0, i64 0
  %499 = load double* %498, align 8
  br label %506

; <label>:500                                     ; preds = %485
  %501 = load %struct.ray** %2, align 8
  %502 = getelementptr inbounds %struct.ray* %501, i32 0, i32 4
  %503 = getelementptr inbounds [3 x double]* %502, i32 0, i64 0
  %504 = load double* %503, align 8
  %505 = fsub double -0.000000e+00, %504
  br label %506

; <label>:506                                     ; preds = %500, %495
  %507 = phi double [ %499, %495 ], [ %505, %500 ]
  %508 = fdiv double %489, %507
  br label %509

; <label>:509                                     ; preds = %506, %484
  %510 = phi double [ 1.000000e+32, %484 ], [ %508, %506 ]
  %511 = load %struct.rayinfo** %ri, align 8
  %512 = getelementptr inbounds %struct.rayinfo* %511, i32 0, i32 6
  %513 = getelementptr inbounds [3 x double]* %512, i32 0, i64 0
  store double %510, double* %513, align 8
  %514 = load %struct.ray** %2, align 8
  %515 = getelementptr inbounds %struct.ray* %514, i32 0, i32 4
  %516 = getelementptr inbounds [3 x double]* %515, i32 0, i64 1
  %517 = load double* %516, align 8
  %518 = fcmp oeq double %517, 0.000000e+00
  br i1 %518, label %519, label %520

; <label>:519                                     ; preds = %509
  br label %544

; <label>:520                                     ; preds = %509
  %521 = load %struct.grid** %3, align 8
  %522 = getelementptr inbounds %struct.grid* %521, i32 0, i32 8
  %523 = getelementptr inbounds [3 x double]* %522, i32 0, i64 1
  %524 = load double* %523, align 8
  %525 = load %struct.ray** %2, align 8
  %526 = getelementptr inbounds %struct.ray* %525, i32 0, i32 4
  %527 = getelementptr inbounds [3 x double]* %526, i32 0, i64 1
  %528 = load double* %527, align 8
  %529 = fcmp ogt double %528, 0.000000e+00
  br i1 %529, label %530, label %535

; <label>:530                                     ; preds = %520
  %531 = load %struct.ray** %2, align 8
  %532 = getelementptr inbounds %struct.ray* %531, i32 0, i32 4
  %533 = getelementptr inbounds [3 x double]* %532, i32 0, i64 1
  %534 = load double* %533, align 8
  br label %541

; <label>:535                                     ; preds = %520
  %536 = load %struct.ray** %2, align 8
  %537 = getelementptr inbounds %struct.ray* %536, i32 0, i32 4
  %538 = getelementptr inbounds [3 x double]* %537, i32 0, i64 1
  %539 = load double* %538, align 8
  %540 = fsub double -0.000000e+00, %539
  br label %541

; <label>:541                                     ; preds = %535, %530
  %542 = phi double [ %534, %530 ], [ %540, %535 ]
  %543 = fdiv double %524, %542
  br label %544

; <label>:544                                     ; preds = %541, %519
  %545 = phi double [ 1.000000e+32, %519 ], [ %543, %541 ]
  %546 = load %struct.rayinfo** %ri, align 8
  %547 = getelementptr inbounds %struct.rayinfo* %546, i32 0, i32 6
  %548 = getelementptr inbounds [3 x double]* %547, i32 0, i64 1
  store double %545, double* %548, align 8
  %549 = load %struct.ray** %2, align 8
  %550 = getelementptr inbounds %struct.ray* %549, i32 0, i32 4
  %551 = getelementptr inbounds [3 x double]* %550, i32 0, i64 2
  %552 = load double* %551, align 8
  %553 = fcmp oeq double %552, 0.000000e+00
  br i1 %553, label %554, label %555

; <label>:554                                     ; preds = %544
  br label %579

; <label>:555                                     ; preds = %544
  %556 = load %struct.grid** %3, align 8
  %557 = getelementptr inbounds %struct.grid* %556, i32 0, i32 8
  %558 = getelementptr inbounds [3 x double]* %557, i32 0, i64 2
  %559 = load double* %558, align 8
  %560 = load %struct.ray** %2, align 8
  %561 = getelementptr inbounds %struct.ray* %560, i32 0, i32 4
  %562 = getelementptr inbounds [3 x double]* %561, i32 0, i64 2
  %563 = load double* %562, align 8
  %564 = fcmp ogt double %563, 0.000000e+00
  br i1 %564, label %565, label %570

; <label>:565                                     ; preds = %555
  %566 = load %struct.ray** %2, align 8
  %567 = getelementptr inbounds %struct.ray* %566, i32 0, i32 4
  %568 = getelementptr inbounds [3 x double]* %567, i32 0, i64 2
  %569 = load double* %568, align 8
  br label %576

; <label>:570                                     ; preds = %555
  %571 = load %struct.ray** %2, align 8
  %572 = getelementptr inbounds %struct.ray* %571, i32 0, i32 4
  %573 = getelementptr inbounds [3 x double]* %572, i32 0, i64 2
  %574 = load double* %573, align 8
  %575 = fsub double -0.000000e+00, %574
  br label %576

; <label>:576                                     ; preds = %570, %565
  %577 = phi double [ %569, %565 ], [ %575, %570 ]
  %578 = fdiv double %559, %577
  br label %579

; <label>:579                                     ; preds = %576, %554
  %580 = phi double [ 1.000000e+32, %554 ], [ %578, %576 ]
  %581 = load %struct.rayinfo** %ri, align 8
  %582 = getelementptr inbounds %struct.rayinfo* %581, i32 0, i32 6
  %583 = getelementptr inbounds [3 x double]* %582, i32 0, i64 2
  store double %580, double* %583, align 8
  %584 = load %struct.rayinfo** %ri, align 8
  %585 = getelementptr inbounds %struct.rayinfo* %584, i32 0, i32 7
  %586 = getelementptr inbounds [3 x i64]* %585, i32 0, i64 0
  store i64 0, i64* %586, align 8
  %587 = load %struct.rayinfo** %ri, align 8
  %588 = getelementptr inbounds %struct.rayinfo* %587, i32 0, i32 7
  %589 = getelementptr inbounds [3 x i64]* %588, i32 0, i64 1
  store i64 0, i64* %589, align 8
  %590 = load %struct.rayinfo** %ri, align 8
  %591 = getelementptr inbounds %struct.rayinfo* %590, i32 0, i32 7
  %592 = getelementptr inbounds [3 x i64]* %591, i32 0, i64 2
  store i64 0, i64* %592, align 8
  %593 = load %struct.ray** %2, align 8
  %594 = getelementptr inbounds %struct.ray* %593, i32 0, i32 4
  %595 = getelementptr inbounds [3 x double]* %594, i32 0, i64 0
  %596 = load double* %595, align 8
  %597 = fcmp oge double %596, 0.000000e+00
  %598 = select i1 %597, i32 1, i32 -1
  %599 = sext i32 %598 to i64
  %600 = load %struct.ray** %2, align 8
  %601 = getelementptr inbounds %struct.ray* %600, i32 0, i32 7
  %602 = getelementptr inbounds [3 x i64]* %601, i32 0, i64 0
  store i64 %599, i64* %602, align 8
  %603 = load %struct.ray** %2, align 8
  %604 = getelementptr inbounds %struct.ray* %603, i32 0, i32 4
  %605 = getelementptr inbounds [3 x double]* %604, i32 0, i64 1
  %606 = load double* %605, align 8
  %607 = fcmp oge double %606, 0.000000e+00
  %608 = select i1 %607, i32 1, i32 -1
  %609 = sext i32 %608 to i64
  %610 = load %struct.ray** %2, align 8
  %611 = getelementptr inbounds %struct.ray* %610, i32 0, i32 7
  %612 = getelementptr inbounds [3 x i64]* %611, i32 0, i64 1
  store i64 %609, i64* %612, align 8
  %613 = load %struct.ray** %2, align 8
  %614 = getelementptr inbounds %struct.ray* %613, i32 0, i32 4
  %615 = getelementptr inbounds [3 x double]* %614, i32 0, i64 2
  %616 = load double* %615, align 8
  %617 = fcmp oge double %616, 0.000000e+00
  %618 = select i1 %617, i32 1, i32 -1
  %619 = sext i32 %618 to i64
  %620 = load %struct.ray** %2, align 8
  %621 = getelementptr inbounds %struct.ray* %620, i32 0, i32 7
  %622 = getelementptr inbounds [3 x i64]* %621, i32 0, i64 2
  store i64 %619, i64* %622, align 8
  %623 = load %struct.rayinfo** %ri, align 8
  %624 = getelementptr inbounds %struct.rayinfo* %623, i32 0, i32 8
  store i64 0, i64* %624, align 8
  %625 = load %struct.ray** %2, align 8
  %626 = getelementptr inbounds %struct.ray* %625, i32 0, i32 4
  %627 = getelementptr inbounds [3 x double]* %626, i32 0, i64 0
  %628 = load double* %627, align 8
  %629 = fcmp oge double %628, 0.000000e+00
  %630 = select i1 %629, i32 1, i32 -1
  %631 = sext i32 %630 to i64
  %632 = load %struct.rayinfo** %ri, align 8
  %633 = getelementptr inbounds %struct.rayinfo* %632, i32 0, i32 9
  %634 = getelementptr inbounds [3 x i64]* %633, i32 0, i64 0
  store i64 %631, i64* %634, align 8
  %635 = load %struct.ray** %2, align 8
  %636 = getelementptr inbounds %struct.ray* %635, i32 0, i32 4
  %637 = getelementptr inbounds [3 x double]* %636, i32 0, i64 1
  %638 = load double* %637, align 8
  %639 = fcmp oge double %638, 0.000000e+00
  %640 = select i1 %639, i32 1, i32 -1
  %641 = sext i32 %640 to i64
  %642 = load %struct.rayinfo** %ri, align 8
  %643 = getelementptr inbounds %struct.rayinfo* %642, i32 0, i32 9
  %644 = getelementptr inbounds [3 x i64]* %643, i32 0, i64 1
  store i64 %641, i64* %644, align 8
  %645 = load %struct.ray** %2, align 8
  %646 = getelementptr inbounds %struct.ray* %645, i32 0, i32 4
  %647 = getelementptr inbounds [3 x double]* %646, i32 0, i64 2
  %648 = load double* %647, align 8
  %649 = fcmp oge double %648, 0.000000e+00
  %650 = select i1 %649, i32 1, i32 -1
  %651 = sext i32 %650 to i64
  %652 = load %struct.rayinfo** %ri, align 8
  %653 = getelementptr inbounds %struct.rayinfo* %652, i32 0, i32 9
  %654 = getelementptr inbounds [3 x i64]* %653, i32 0, i64 2
  store i64 %651, i64* %654, align 8
  %655 = load %struct.rayinfo** %ri, align 8
  %656 = getelementptr inbounds %struct.rayinfo* %655, i32 0, i32 10
  store %struct.rayinfo* null, %struct.rayinfo** %656, align 8
  %657 = load %struct.ray** %2, align 8
  %658 = call %struct.voxel* @next_nonempty_leaf(%struct.ray* %657, i64 0, i64* %status)
  store %struct.voxel* %658, %struct.voxel** %v, align 8
  %659 = icmp ne %struct.voxel* %658, null
  br i1 %659, label %660, label %673

; <label>:660                                     ; preds = %579
  %661 = load %struct.ray** %2, align 8
  %662 = getelementptr inbounds %struct.ray* %661, i32 0, i32 8
  %663 = load %struct.rayinfo** %662, align 8
  store %struct.rayinfo* %663, %struct.rayinfo** %ri, align 8
  %664 = load %struct.rayinfo** %ri, align 8
  %665 = getelementptr inbounds %struct.rayinfo* %664, i32 0, i32 8
  %666 = load i64* %665, align 8
  store i64 %666, i64* %indx, align 8
  %667 = load %struct.rayinfo** %ri, align 8
  %668 = getelementptr inbounds %struct.rayinfo* %667, i32 0, i32 0
  %669 = load %struct.grid** %668, align 8
  store %struct.grid* %669, %struct.grid** %gr, align 8
  %670 = load %struct.grid** %gr, align 8
  %671 = getelementptr inbounds %struct.grid* %670, i32 0, i32 0
  %672 = load i64* %671, align 8
  store i64 %672, i64* %grid_id, align 8
  br label %674

; <label>:673                                     ; preds = %579
  store %struct.voxel* null, %struct.voxel** %1
  br label %676

; <label>:674                                     ; preds = %660
  %675 = load %struct.voxel** %v, align 8
  store %struct.voxel* %675, %struct.voxel** %1
  br label %676

; <label>:676                                     ; preds = %674, %673, %391
  %677 = load %struct.voxel** %1
  ret %struct.voxel* %677
}

; Function Attrs: nounwind uwtable
define internal i64 @Intersect(%struct.ray* %pr, %struct.irecord* %hit) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.irecord*, align 8
  %po = alloca %struct.object*, align 8
  %newhit = alloca %struct.irecord, align 8
  store %struct.ray* %pr, %struct.ray** %2, align 8
  store %struct.irecord* %hit, %struct.irecord** %3, align 8
  %4 = load %struct.gmem** @gm, align 8
  %5 = getelementptr inbounds %struct.gmem* %4, i32 0, i32 3
  %6 = load %struct.object** %5, align 8
  store %struct.object* %6, %struct.object** %po, align 8
  %7 = load %struct.irecord** %3, align 8
  %8 = getelementptr inbounds %struct.irecord* %7, i32 0, i32 0
  store double 1.000000e+32, double* %8, align 8
  %9 = load %struct.irecord** %3, align 8
  %10 = getelementptr inbounds %struct.irecord* %9, i32 0, i32 1
  store %struct.element* null, %struct.element** %10, align 8
  br label %11

; <label>:11                                      ; preds = %38, %0
  %12 = load %struct.object** %po, align 8
  %13 = icmp ne %struct.object* %12, null
  br i1 %13, label %14, label %42

; <label>:14                                      ; preds = %11
  %15 = load %struct.object** %po, align 8
  %16 = getelementptr inbounds %struct.object* %15, i32 0, i32 5
  %17 = load %struct.pprocs** %16, align 8
  %18 = getelementptr inbounds %struct.pprocs* %17, i32 0, i32 5
  %19 = load i64 (...)** %18, align 8
  %20 = load %struct.ray** %2, align 8
  %21 = load %struct.object** %po, align 8
  %22 = bitcast i64 (...)* %19 to i64 (%struct.ray*, %struct.object*, %struct.irecord*, ...)*
  %23 = call i64 (%struct.ray*, %struct.object*, %struct.irecord*, ...) %22(%struct.ray* %20, %struct.object* %21, %struct.irecord* %newhit)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %38

; <label>:25                                      ; preds = %14
  %26 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 0
  %27 = load double* %26, align 8
  %28 = load %struct.irecord** %3, align 8
  %29 = getelementptr inbounds %struct.irecord* %28, i64 0
  %30 = getelementptr inbounds %struct.irecord* %29, i32 0, i32 0
  %31 = load double* %30, align 8
  %32 = fcmp olt double %27, %31
  br i1 %32, label %33, label %37

; <label>:33                                      ; preds = %25
  %34 = load %struct.irecord** %3, align 8
  %35 = bitcast %struct.irecord* %34 to i8*
  %36 = bitcast %struct.irecord* %newhit to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 40, i32 8, i1 false)
  br label %37

; <label>:37                                      ; preds = %33, %25
  br label %38

; <label>:38                                      ; preds = %37, %14
  %39 = load %struct.object** %po, align 8
  %40 = getelementptr inbounds %struct.object* %39, i32 0, i32 7
  %41 = load %struct.object** %40, align 8
  store %struct.object* %41, %struct.object** %po, align 8
  br label %11

; <label>:42                                      ; preds = %11
  %43 = load %struct.irecord** %3, align 8
  %44 = getelementptr inbounds %struct.irecord* %43, i32 0, i32 0
  %45 = load double* %44, align 8
  %46 = fcmp olt double %45, 1.000000e+32
  br i1 %46, label %47, label %48

; <label>:47                                      ; preds = %42
  store i64 1, i64* %1
  br label %49

; <label>:48                                      ; preds = %42
  store i64 0, i64* %1
  br label %49

; <label>:49                                      ; preds = %48, %47
  %50 = load i64* %1
  ret i64 %50
}

; Function Attrs: nounwind uwtable
define internal double @ShadowIntersect(%struct.ray* %pr, double %lightdist, %struct.element* %pe) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca double, align 8
  %3 = alloca %struct.element*, align 8
  %trans = alloca double, align 8
  %po = alloca %struct.object*, align 8
  %newhit = alloca %struct.irecord, align 8
  store %struct.ray* %pr, %struct.ray** %1, align 8
  store double %lightdist, double* %2, align 8
  store %struct.element* %pe, %struct.element** %3, align 8
  store double 1.000000e+00, double* %trans, align 8
  %4 = load %struct.gmem** @gm, align 8
  %5 = getelementptr inbounds %struct.gmem* %4, i32 0, i32 3
  %6 = load %struct.object** %5, align 8
  store %struct.object* %6, %struct.object** %po, align 8
  br label %7

; <label>:7                                       ; preds = %47, %0
  %8 = load %struct.object** %po, align 8
  %9 = icmp ne %struct.object* %8, null
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %7
  %11 = load double* %trans, align 8
  %12 = fcmp ogt double %11, 0.000000e+00
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ false, %7 ], [ %12, %10 ]
  br i1 %14, label %15, label %51

; <label>:15                                      ; preds = %13
  %16 = load %struct.object** %po, align 8
  %17 = getelementptr inbounds %struct.object* %16, i32 0, i32 5
  %18 = load %struct.pprocs** %17, align 8
  %19 = getelementptr inbounds %struct.pprocs* %18, i32 0, i32 5
  %20 = load i64 (...)** %19, align 8
  %21 = load %struct.ray** %1, align 8
  %22 = load %struct.object** %po, align 8
  %23 = bitcast i64 (...)* %20 to i64 (%struct.ray*, %struct.object*, %struct.irecord*, ...)*
  %24 = call i64 (%struct.ray*, %struct.object*, %struct.irecord*, ...) %23(%struct.ray* %21, %struct.object* %22, %struct.irecord* %newhit)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %47

; <label>:26                                      ; preds = %15
  %27 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 1
  %28 = load %struct.element** %27, align 8
  %29 = load %struct.element** %3, align 8
  %30 = icmp ne %struct.element* %28, %29
  br i1 %30, label %31, label %47

; <label>:31                                      ; preds = %26
  %32 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 0
  %33 = load double* %32, align 8
  %34 = load double* %2, align 8
  %35 = fcmp olt double %33, %34
  br i1 %35, label %36, label %47

; <label>:36                                      ; preds = %31
  %37 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 1
  %38 = load %struct.element** %37, align 8
  %39 = getelementptr inbounds %struct.element* %38, i32 0, i32 2
  %40 = load %struct.object** %39, align 8
  %41 = getelementptr inbounds %struct.object* %40, i32 0, i32 6
  %42 = load %struct.surf** %41, align 8
  %43 = getelementptr inbounds %struct.surf* %42, i32 0, i32 4
  %44 = load double* %43, align 8
  %45 = load double* %trans, align 8
  %46 = fmul double %45, %44
  store double %46, double* %trans, align 8
  br label %47

; <label>:47                                      ; preds = %36, %31, %26, %15
  %48 = load %struct.object** %po, align 8
  %49 = getelementptr inbounds %struct.object* %48, i32 0, i32 7
  %50 = load %struct.object** %49, align 8
  store %struct.object* %50, %struct.object** %po, align 8
  br label %7

; <label>:51                                      ; preds = %13
  %52 = load double* %trans, align 8
  ret double %52
}

; Function Attrs: nounwind uwtable
define internal void @Usage() {
  %1 = load %struct._IO_FILE** @stdout, align 8
  %2 = load i8** @ProgName, align 8
  %3 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([26 x i8]* @.str.1.231, i32 0, i32 0), i8* %2)
  %4 = load %struct._IO_FILE** @stdout, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([13 x i8]* @.str.2.232, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.3.233, i32 0, i32 0))
  %6 = load %struct._IO_FILE** @stdout, align 8
  %7 = load i8** @ProgName, align 8
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([30 x i8]* @.str.4.234, i32 0, i32 0), i8* %7)
  %9 = load %struct._IO_FILE** @stdout, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([31 x i8]* @.str.5.235, i32 0, i32 0))
  %11 = load %struct._IO_FILE** @stdout, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([136 x i8]* @.str.6.236, i32 0, i32 0))
  %13 = load %struct._IO_FILE** @stdout, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([61 x i8]* @.str.7.237, i32 0, i32 0))
  %15 = load %struct._IO_FILE** @stdout, align 8
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([43 x i8]* @.str.8.238, i32 0, i32 0))
  %17 = load %struct._IO_FILE** @stdout, align 8
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([55 x i8]* @.str.9.239, i32 0, i32 0))
  %19 = load %struct._IO_FILE** @stdout, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([2 x i8]* @.str.10.240, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PrintStatistics() {
  %1 = load i64* @TraversalType, align 8
  %2 = icmp eq i64 %1, 1
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  call void @ma_print()
  br label %4

; <label>:4                                       ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @atomic_cmpxchg(i32 %oldcount, i32 %newcount) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %temp = alloca i32, align 4
  %updatedcount = alloca i32, align 4
  store i32 %oldcount, i32* %1, align 4
  store i32 %newcount, i32* %2, align 4
  %3 = load %struct.gmem** @gm, align 8
  %4 = getelementptr inbounds %struct.gmem* %3, i32 0, i32 8
  %5 = getelementptr inbounds %struct.barrier_t* %4, i32 0, i32 1
  %6 = load volatile i64* %5, align 8
  %7 = trunc i64 %6 to i32
  store i32 %7, i32* %temp, align 4
  %8 = load i32* %1, align 4
  %9 = load i32* %temp, align 4
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %11, label %18

; <label>:11                                      ; preds = %0
  %12 = load i32* %2, align 4
  %13 = sext i32 %12 to i64
  %14 = load %struct.gmem** @gm, align 8
  %15 = getelementptr inbounds %struct.gmem* %14, i32 0, i32 8
  %16 = getelementptr inbounds %struct.barrier_t* %15, i32 0, i32 1
  call void @RecordSyncVariable()
  store volatile i64 %13, i64* %16, align 8
  call void @snapshot64(i64 %13, i32 0)
  %17 = load i32* %1, align 4
  store i32 %17, i32* %updatedcount, align 4
  br label %24

; <label>:18                                      ; preds = %0
  %19 = load %struct.gmem** @gm, align 8
  %20 = getelementptr inbounds %struct.gmem* %19, i32 0, i32 8
  %21 = getelementptr inbounds %struct.barrier_t* %20, i32 0, i32 1
  %22 = load volatile i64* %21, align 8
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %updatedcount, align 4
  br label %24

; <label>:24                                      ; preds = %18, %11
  %25 = load i32* %updatedcount, align 4
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal void @StartRayTrace() {
  %pid = alloca i64, align 8
  %begin = alloca i64, align 8
  %end = alloca i64, align 8
  %lapsed = alloca i64, align 8
  %lsense = alloca i32, align 4
  %oldcount = alloca i32, align 4
  %newcount = alloca i32, align 4
  %updatedcount = alloca i32, align 4
  %retVal = alloca i32, align 4
  %1 = load %struct.gmem** @gm, align 8
  %2 = getelementptr inbounds %struct.gmem* %1, i32 0, i32 9
  %3 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2)
  %4 = load %struct.gmem** @gm, align 8
  %5 = getelementptr inbounds %struct.gmem* %4, i32 0, i32 1
  %6 = load i64* %5, align 8
  %7 = add nsw i64 %6, 1
  store i64 %7, i64* %5, align 8
  store i64 %6, i64* %pid, align 8
  %8 = load %struct.gmem** @gm, align 8
  %9 = getelementptr inbounds %struct.gmem* %8, i32 0, i32 9
  %10 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %9)
  %11 = load i64* %pid, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %0
  %14 = load i64* @dostats, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13, %0
  %17 = call i64 @time(i64* null)
  store i64 %17, i64* %begin, align 8
  br label %18

; <label>:18                                      ; preds = %16, %13
  %19 = load i64* %pid, align 8
  call void @InitWorkPool(i64 %19)
  %20 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %21 = load i64* %pid, align 8
  call void @InitRayTreeStack(i64 %20, i64 %21)
  %22 = load %struct.gmem** @gm, align 8
  %23 = getelementptr inbounds %struct.gmem* %22, i32 0, i32 8
  %24 = getelementptr inbounds %struct.barrier_t* %23, i32 0, i32 0
  call void @InitializeSwitchesAndCounter(i32 1)
  call void @IncrementCounter()
  call void @printChar(i8 signext 49)
  call void @printChar(i8 signext 90)
  %25 = load volatile i32* %24, align 4
  store i32 %25, i32* %lsense, align 4
  br label %26

; <label>:26                                      ; preds = %64, %18
  %27 = load %struct.gmem** @gm, align 8
  %28 = getelementptr inbounds %struct.gmem* %27, i32 0, i32 8
  %29 = getelementptr inbounds %struct.barrier_t* %28, i32 0, i32 1
  %30 = load volatile i64* %29, align 8
  %call = call i32 @sleep(i32 1)
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %oldcount, align 4
  %32 = load i32* %oldcount, align 4
  %33 = load i32* %lsense, align 4
  %34 = add nsw i32 %32, %33
  store i32 %34, i32* %newcount, align 4
  %35 = load i32* %oldcount, align 4
  %36 = load i32* %newcount, align 4
  %37 = call i32 @atomic_cmpxchg(i32 %35, i32 %36)
  %call5 = call i32 @sleep(i32 1)
  store i32 %37, i32* %updatedcount, align 4
  %38 = load i32* %updatedcount, align 4
  %39 = load i32* %oldcount, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %41, label %64

; <label>:41                                      ; preds = %26
  %42 = load i32* %newcount, align 4
  %43 = sext i32 %42 to i64
  %44 = load %struct.gmem** @gm, align 8
  %45 = getelementptr inbounds %struct.gmem* %44, i32 0, i32 0
  %46 = load i64* %45, align 8
  %call1 = call i32 @sleep(i32 1)
  %47 = icmp eq i64 %43, %46
  br i1 %47, label %48, label %51

; <label>:48                                      ; preds = %41
  %49 = load i32* %lsense, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %57, label %51

; <label>:51                                      ; preds = %48, %41
  %52 = load i32* %newcount, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %63

; <label>:54                                      ; preds = %51
  %55 = load i32* %lsense, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %63

; <label>:57                                      ; preds = %54, %48
  %58 = load i32* %lsense, align 4
  %59 = sub nsw i32 0, %58
  %60 = load %struct.gmem** @gm, align 8
  %61 = getelementptr inbounds %struct.gmem* %60, i32 0, i32 8
  %62 = getelementptr inbounds %struct.barrier_t* %61, i32 0, i32 0
  call void @printX()
  call void @RecordSyncVariable()
  store volatile i32 %59, i32* %62, align 4
  call void @snapshot(i32 %59, i32 1)
  %call2 = call i32 @sleep(i32 3)
  br label %63

; <label>:63                                      ; preds = %57, %54, %51
  br label %65

; <label>:64                                      ; preds = %26
  br label %26

; <label>:65                                      ; preds = %63
  br label %66

; <label>:66                                      ; preds = %73, %65
  %67 = load %struct.gmem** @gm, align 8
  %68 = getelementptr inbounds %struct.gmem* %67, i32 0, i32 8
  %69 = getelementptr inbounds %struct.barrier_t* %68, i32 0, i32 0
  %70 = load volatile i32* %69, align 4
  %71 = load i32* %lsense, align 4
  %72 = icmp eq i32 %70, %71
  br i1 %72, label %73, label %74

; <label>:73                                      ; preds = %66
  %call3 = call i32 @sleep(i32 2)
  br label %66

; <label>:74                                      ; preds = %66
  call void @printY()
  %call4 = call i32 @sleep(i32 4)
  %75 = load i64* %pid, align 8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %80, label %77

; <label>:77                                      ; preds = %74
  %78 = load i64* @dostats, align 8
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %97

; <label>:80                                      ; preds = %77, %74
  %81 = call i64 @time(i64* null)
  store i64 %81, i64* %end, align 8
  %82 = load i64* %end, align 8
  %83 = load i64* %begin, align 8
  %84 = sub i64 %82, %83
  %85 = and i64 %84, 2147483647
  %86 = load i64* %pid, align 8
  %87 = load %struct.gmem** @gm, align 8
  %88 = getelementptr inbounds %struct.gmem* %87, i32 0, i32 14
  %89 = getelementptr inbounds [128 x i64]* %88, i32 0, i64 %86
  store i64 %85, i64* %89, align 8
  %90 = load i64* %pid, align 8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %96

; <label>:92                                      ; preds = %80
  %93 = load i64* %begin, align 8
  %94 = load %struct.gmem** @gm, align 8
  %95 = getelementptr inbounds %struct.gmem* %94, i32 0, i32 13
  store i64 %93, i64* %95, align 8
  br label %96

; <label>:96                                      ; preds = %92, %80
  br label %97

; <label>:97                                      ; preds = %96, %77
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*)

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*)

; Function Attrs: nounwind
declare i64 @time(i64*)

declare void @Criteria(i32)

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %i = alloca i64, align 8
  %begin = alloca i64, align 8
  %end = alloca i64, align 8
  %lapsed = alloca i64, align 8
  %tmp = alloca i16, align 2
  %pch = alloca i8*, align 8
  %vtrans = alloca [4 x [4 x double]], align 16
  %Vinv = alloca [4 x [4 x double]], align 16
  %i1 = alloca i32, align 4
  %t = alloca i64, align 8
  %totalproctime = alloca i32, align 4
  %maxproctime = alloca i32, align 4
  %minproctime = alloca i32, align 4
  store i32 0, i32* %1
  store i32 %argc, i32* %2, align 4
  store i8** %argv, i8*** %3, align 8
  br label %4

; <label>:4                                       ; preds = %84, %0
  %5 = load i32* %2, align 4
  %6 = add nsw i32 %5, -1
  store i32 %6, i32* %2, align 4
  %7 = icmp sgt i32 %5, 1
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %4
  %9 = load i8*** %3, align 8
  %10 = getelementptr inbounds i8** %9, i32 1
  store i8** %10, i8*** %3, align 8
  %11 = load i8** %10, align 8
  %12 = getelementptr inbounds i8* %11, i64 0
  %13 = load i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 45
  br label %16

; <label>:16                                      ; preds = %8, %4
  %17 = phi i1 [ false, %4 ], [ %15, %8 ]
  br i1 %17, label %18, label %85

; <label>:18                                      ; preds = %16
  %19 = load i8*** %3, align 8
  %20 = getelementptr inbounds i8** %19, i64 0
  %21 = load i8** %20, align 8
  %22 = getelementptr inbounds i8* %21, i64 1
  store i8* %22, i8** %pch, align 8
  br label %23

; <label>:23                                      ; preds = %81, %18
  %24 = load i8** %pch, align 8
  %25 = load i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %84

; <label>:28                                      ; preds = %23
  %29 = load i8** %pch, align 8
  %30 = load i8* %29, align 1
  %31 = sext i8 %30 to i32
  switch i32 %31, label %73 [
    i32 63, label %32
    i32 104, label %32
    i32 72, label %32
    i32 97, label %33
    i32 65, label %33
    i32 109, label %46
    i32 112, label %59
    i32 115, label %72
    i32 83, label %72
  ]

; <label>:32                                      ; preds = %28, %28, %28
  call void @Usage()
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:33                                      ; preds = %28, %28
  store i64 1, i64* @AntiAlias, align 8
  %34 = load i8** %pch, align 8
  %35 = getelementptr inbounds i8* %34, i32 1
  store i8* %35, i8** %pch, align 8
  %36 = load i8* %35, align 1
  %37 = icmp ne i8 %36, 0
  br i1 %37, label %38, label %42

; <label>:38                                      ; preds = %33
  %39 = load i8** %pch, align 8
  %40 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %39)
  %41 = sext i32 %40 to i64
  store i64 %41, i64* @NumSubRays, align 8
  br label %42

; <label>:42                                      ; preds = %38, %33
  %43 = load i8** %pch, align 8
  store i8 0, i8* %43, align 1
  %44 = load i8** %pch, align 8
  %45 = getelementptr inbounds i8* %44, i32 -1
  store i8* %45, i8** %pch, align 8
  br label %80

; <label>:46                                      ; preds = %28
  %47 = load i8** %pch, align 8
  %48 = getelementptr inbounds i8* %47, i32 1
  store i8* %48, i8** %pch, align 8
  %49 = load i8* %48, align 1
  %50 = icmp ne i8 %49, 0
  br i1 %50, label %51, label %55

; <label>:51                                      ; preds = %46
  %52 = load i8** %pch, align 8
  %53 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %52)
  %54 = sext i32 %53 to i64
  store i64 %54, i64* @MaxGlobMem, align 8
  br label %55

; <label>:55                                      ; preds = %51, %46
  %56 = load i8** %pch, align 8
  store i8 0, i8* %56, align 1
  %57 = load i8** %pch, align 8
  %58 = getelementptr inbounds i8* %57, i32 -1
  store i8* %58, i8** %pch, align 8
  br label %80

; <label>:59                                      ; preds = %28
  %60 = load i8** %pch, align 8
  %61 = getelementptr inbounds i8* %60, i32 1
  store i8* %61, i8** %pch, align 8
  %62 = load i8* %61, align 1
  %63 = icmp ne i8 %62, 0
  br i1 %63, label %64, label %68

; <label>:64                                      ; preds = %59
  %65 = load i8** %pch, align 8
  %66 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %65)
  %67 = sext i32 %66 to i64
  store i64 %67, i64* @nprocs, align 8
  br label %68

; <label>:68                                      ; preds = %64, %59
  %69 = load i8** %pch, align 8
  store i8 0, i8* %69, align 1
  %70 = load i8** %pch, align 8
  %71 = getelementptr inbounds i8* %70, i32 -1
  store i8* %71, i8** %pch, align 8
  br label %80

; <label>:72                                      ; preds = %28, %28
  store i64 1, i64* @dostats, align 8
  br label %80

; <label>:73                                      ; preds = %28
  %74 = load %struct._IO_FILE** @stderr, align 8
  %75 = load i8** @ProgName, align 8
  %76 = load i8** %pch, align 8
  %77 = load i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([26 x i8]* @.str.11.241, i32 0, i32 0), i8* %75, i32 %78)
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:80                                      ; preds = %72, %68, %55, %42
  br label %81

; <label>:81                                      ; preds = %80
  %82 = load i8** %pch, align 8
  %83 = getelementptr inbounds i8* %82, i32 1
  store i8* %83, i8** %pch, align 8
  br label %23

; <label>:84                                      ; preds = %23
  br label %4

; <label>:85                                      ; preds = %16
  %86 = load i32* %2, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %89, label %88

; <label>:88                                      ; preds = %85
  call void @Usage()
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:89                                      ; preds = %85
  %90 = load i64* @nprocs, align 8
  %91 = icmp slt i64 %90, 1
  br i1 %91, label %95, label %92

; <label>:92                                      ; preds = %89
  %93 = load i64* @nprocs, align 8
  %94 = icmp sgt i64 %93, 128
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %92, %89
  %96 = load %struct._IO_FILE** @stderr, align 8
  %97 = load i8** @ProgName, align 8
  %98 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([46 x i8]* @.str.12.242, i32 0, i32 0), i8* %97, i32 128)
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:99                                      ; preds = %92
  %100 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.240, i32 0, i32 0))
  %101 = load i64* @nprocs, align 8
  %102 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.13.243, i32 0, i32 0), i64 %101)
  %103 = load i64* @MaxGlobMem, align 8
  %104 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.14.244, i32 0, i32 0), i64 %103)
  %105 = load i64* @NumSubRays, align 8
  %106 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.15.245, i32 0, i32 0), i64 %105)
  %107 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.10.240, i32 0, i32 0))
  %108 = load i64* @MaxGlobMem, align 8
  %109 = shl i64 %108, 20
  store i64 %109, i64* @MaxGlobMem, align 8
  %110 = call i8* @malloc(i64 530624)
  %111 = bitcast i8* %110 to %struct.gmem*
  store %struct.gmem* %111, %struct.gmem** @gm, align 8
  %112 = load i64* @nprocs, align 8
  %113 = load %struct.gmem** @gm, align 8
  %114 = getelementptr inbounds %struct.gmem* %113, i32 0, i32 0
  store i64 %112, i64* %114, align 8
  %115 = load %struct.gmem** @gm, align 8
  %116 = getelementptr inbounds %struct.gmem* %115, i32 0, i32 1
  store i64 0, i64* %116, align 8
  %117 = load %struct.gmem** @gm, align 8
  %118 = getelementptr inbounds %struct.gmem* %117, i32 0, i32 2
  store i64 1, i64* %118, align 8
  %119 = load %struct.gmem** @gm, align 8
  %120 = getelementptr inbounds %struct.gmem* %119, i32 0, i32 8
  %121 = getelementptr inbounds %struct.barrier_t* %120, i32 0, i32 0
  store volatile i32 1, i32* %121, align 4
  %122 = load %struct.gmem** @gm, align 8
  %123 = getelementptr inbounds %struct.gmem* %122, i32 0, i32 8
  %124 = getelementptr inbounds %struct.barrier_t* %123, i32 0, i32 1
  store volatile i64 0, i64* %124, align 8
  %125 = load %struct.gmem** @gm, align 8
  %126 = getelementptr inbounds %struct.gmem* %125, i32 0, i32 9
  %127 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %126, %union.pthread_mutexattr_t* null)
  %128 = load %struct.gmem** @gm, align 8
  %129 = getelementptr inbounds %struct.gmem* %128, i32 0, i32 10
  %130 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %129, %union.pthread_mutexattr_t* null)
  %131 = load %struct.gmem** @gm, align 8
  %132 = getelementptr inbounds %struct.gmem* %131, i32 0, i32 11
  %133 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %132, %union.pthread_mutexattr_t* null)
  store i32 0, i32* %i1, align 4
  br label %134

; <label>:134                                     ; preds = %146, %99
  %135 = load i32* %i1, align 4
  %136 = sext i32 %135 to i64
  %137 = load i64* @nprocs, align 8
  %138 = icmp slt i64 %136, %137
  br i1 %138, label %139, label %149

; <label>:139                                     ; preds = %134
  %140 = load i32* %i1, align 4
  %141 = sext i32 %140 to i64
  %142 = load %struct.gmem** @gm, align 8
  %143 = getelementptr inbounds %struct.gmem* %142, i32 0, i32 12
  %144 = getelementptr inbounds [128 x %union.pthread_mutex_t]* %143, i32 0, i64 %141
  %145 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %144, %union.pthread_mutexattr_t* null)
  br label %146

; <label>:146                                     ; preds = %139
  %147 = load i32* %i1, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %i1, align 4
  br label %134

; <label>:149                                     ; preds = %134
  %150 = load i64* @MaxGlobMem, align 8
  %151 = call i64 @GlobalHeapInit(i64 %150)
  %152 = icmp ne i64 %151, 0
  br i1 %152, label %157, label %153

; <label>:153                                     ; preds = %149
  %154 = load %struct._IO_FILE** @stderr, align 8
  %155 = load i8** @ProgName, align 8
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %154, i8* getelementptr inbounds ([36 x i8]* @.str.16.246, i32 0, i32 0), i8* %155)
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:157                                     ; preds = %149
  call void @Huniform_defaults()
  %158 = load i8*** %3, align 8
  %159 = load i8** %158, align 8
  call void @ReadEnvFile(i8* %159)
  call void @OpenFrameBuffer()
  call void @CreateViewMatrix()
  %160 = getelementptr inbounds [4 x [4 x double]]* %vtrans, i32 0, i32 0
  call void @MatrixCopy([4 x double]* %160, [4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 2, i32 0))
  %161 = getelementptr inbounds [4 x [4 x double]]* %Vinv, i32 0, i32 0
  %162 = getelementptr inbounds [4 x [4 x double]]* %vtrans, i32 0, i32 0
  call void @MatrixInverse([4 x double]* %161, [4 x double]* %162)
  %163 = getelementptr inbounds [4 x [4 x double]]* %Vinv, i32 0, i32 0
  call void @MatrixCopy([4 x double]* getelementptr inbounds (%struct.view* @View, i32 0, i32 3, i32 0), [4 x double]* %163)
  %164 = load i64* @prim_obj_cnt, align 8
  %165 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.17.247, i32 0, i32 0), i64 %164)
  %166 = load i64* @prim_elem_cnt, align 8
  %167 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.18.248, i32 0, i32 0), i64 %166)
  %168 = load i64* @TraversalType, align 8
  %169 = icmp eq i64 %168, 1
  br i1 %169, label %170, label %172

; <label>:170                                     ; preds = %157
  %171 = call i64 @time(i64* null)
  store i64 %171, i64* %begin, align 8
  br label %172

; <label>:172                                     ; preds = %170, %157
  store i64 0, i64* %i, align 8
  br label %173

; <label>:173                                     ; preds = %182, %172
  %174 = load i64* %i, align 8
  %175 = load %struct.gmem** @gm, align 8
  %176 = getelementptr inbounds %struct.gmem* %175, i32 0, i32 0
  store i64 2, i64* %176
  %177 = load i64* %176, align 8
  %178 = sub nsw i64 %177, 1
  %179 = icmp slt i64 %174, %178
  br i1 %179, label %180, label %185

; <label>:180                                     ; preds = %173
  %181 = call i32 @pthread_create(i64* %t, %union.pthread_attr_t* null, i8* (i8*)* bitcast (void ()* @StartRayTrace to i8* (i8*)*), i8* null)
  br label %182

; <label>:182                                     ; preds = %180
  %183 = load i64* %i, align 8
  %184 = add nsw i64 %183, 1
  store i64 %184, i64* %i, align 8
  br label %173

; <label>:185                                     ; preds = %173
  call void @StartRayTrace()
  %186 = call i64 @time(i64* null)
  store i64 %186, i64* %end, align 8
  call void @CloseFrameBuffer(i8* getelementptr inbounds ([80 x i8]* @PicFileName, i32 0, i32 0))
  call void @PrintStatistics()
  %187 = load i64* %end, align 8
  %188 = load i64* %begin, align 8
  %189 = sub i64 %187, %188
  %190 = and i64 %189, 2147483647
  store i64 %190, i64* %lapsed, align 8
  %191 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([45 x i8]* @.str.19.249, i32 0, i32 0))
  %192 = load i64* %begin, align 8
  %193 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([38 x i8]* @.str.20.250, i32 0, i32 0), i64 %192)
  %194 = load i64* %end, align 8
  %195 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([34 x i8]* @.str.21.251, i32 0, i32 0), i64 %194)
  %196 = load i64* %lapsed, align 8
  %197 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([47 x i8]* @.str.22.252, i32 0, i32 0), i64 %196)
  %198 = load i64* %end, align 8
  %199 = load %struct.gmem** @gm, align 8
  %200 = getelementptr inbounds %struct.gmem* %199, i32 0, i32 13
  %201 = load i64* %200, align 8
  %202 = sub i64 %198, %201
  %203 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([50 x i8]* @.str.23.253, i32 0, i32 0), i64 %202)
  %204 = load i64* @dostats, align 8
  %205 = icmp ne i64 %204, 0
  br i1 %205, label %206, label %309

; <label>:206                                     ; preds = %185
  %207 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.24.254, i32 0, i32 0))
  %208 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.25.255, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.26.256, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.27.257, i32 0, i32 0))
  %209 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([11 x i8]* @.str.28.258, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str.29.259, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str.30.260, i32 0, i32 0))
  store i64 0, i64* %i, align 8
  br label %210

; <label>:210                                     ; preds = %224, %206
  %211 = load i64* %i, align 8
  %212 = load %struct.gmem** @gm, align 8
  %213 = getelementptr inbounds %struct.gmem* %212, i32 0, i32 0
  %214 = load i64* %213, align 8
  %215 = icmp slt i64 %211, %214
  br i1 %215, label %216, label %227

; <label>:216                                     ; preds = %210
  %217 = load i64* %i, align 8
  %218 = load i64* %i, align 8
  %219 = load %struct.gmem** @gm, align 8
  %220 = getelementptr inbounds %struct.gmem* %219, i32 0, i32 14
  %221 = getelementptr inbounds [128 x i64]* %220, i32 0, i64 %218
  %222 = load i64* %221, align 8
  %223 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.31.261, i32 0, i32 0), i64 %217, i64 %222)
  br label %224

; <label>:224                                     ; preds = %216
  %225 = load i64* %i, align 8
  %226 = add nsw i64 %225, 1
  store i64 %226, i64* %i, align 8
  br label %210

; <label>:227                                     ; preds = %210
  %228 = load %struct.gmem** @gm, align 8
  %229 = getelementptr inbounds %struct.gmem* %228, i32 0, i32 14
  %230 = getelementptr inbounds [128 x i64]* %229, i32 0, i64 0
  %231 = load i64* %230, align 8
  %232 = trunc i64 %231 to i32
  store i32 %232, i32* %totalproctime, align 4
  %233 = load %struct.gmem** @gm, align 8
  %234 = getelementptr inbounds %struct.gmem* %233, i32 0, i32 14
  %235 = getelementptr inbounds [128 x i64]* %234, i32 0, i64 0
  %236 = load i64* %235, align 8
  %237 = trunc i64 %236 to i32
  store i32 %237, i32* %minproctime, align 4
  %238 = load %struct.gmem** @gm, align 8
  %239 = getelementptr inbounds %struct.gmem* %238, i32 0, i32 14
  %240 = getelementptr inbounds [128 x i64]* %239, i32 0, i64 0
  %241 = load i64* %240, align 8
  %242 = trunc i64 %241 to i32
  store i32 %242, i32* %maxproctime, align 4
  store i64 1, i64* %i, align 8
  br label %243

; <label>:243                                     ; preds = %291, %227
  %244 = load i64* %i, align 8
  %245 = load %struct.gmem** @gm, align 8
  %246 = getelementptr inbounds %struct.gmem* %245, i32 0, i32 0
  %247 = load i64* %246, align 8
  %248 = icmp slt i64 %244, %247
  br i1 %248, label %249, label %294

; <label>:249                                     ; preds = %243
  %250 = load i64* %i, align 8
  %251 = load %struct.gmem** @gm, align 8
  %252 = getelementptr inbounds %struct.gmem* %251, i32 0, i32 14
  %253 = getelementptr inbounds [128 x i64]* %252, i32 0, i64 %250
  %254 = load i64* %253, align 8
  %255 = load i32* %totalproctime, align 4
  %256 = zext i32 %255 to i64
  %257 = add i64 %256, %254
  %258 = trunc i64 %257 to i32
  store i32 %258, i32* %totalproctime, align 4
  %259 = load i64* %i, align 8
  %260 = load %struct.gmem** @gm, align 8
  %261 = getelementptr inbounds %struct.gmem* %260, i32 0, i32 14
  %262 = getelementptr inbounds [128 x i64]* %261, i32 0, i64 %259
  %263 = load i64* %262, align 8
  %264 = load i32* %maxproctime, align 4
  %265 = zext i32 %264 to i64
  %266 = icmp ugt i64 %263, %265
  br i1 %266, label %267, label %274

; <label>:267                                     ; preds = %249
  %268 = load i64* %i, align 8
  %269 = load %struct.gmem** @gm, align 8
  %270 = getelementptr inbounds %struct.gmem* %269, i32 0, i32 14
  %271 = getelementptr inbounds [128 x i64]* %270, i32 0, i64 %268
  %272 = load i64* %271, align 8
  %273 = trunc i64 %272 to i32
  store i32 %273, i32* %maxproctime, align 4
  br label %274

; <label>:274                                     ; preds = %267, %249
  %275 = load i64* %i, align 8
  %276 = load %struct.gmem** @gm, align 8
  %277 = getelementptr inbounds %struct.gmem* %276, i32 0, i32 14
  %278 = getelementptr inbounds [128 x i64]* %277, i32 0, i64 %275
  %279 = load i64* %278, align 8
  %280 = load i32* %minproctime, align 4
  %281 = zext i32 %280 to i64
  %282 = icmp ult i64 %279, %281
  br i1 %282, label %283, label %290

; <label>:283                                     ; preds = %274
  %284 = load i64* %i, align 8
  %285 = load %struct.gmem** @gm, align 8
  %286 = getelementptr inbounds %struct.gmem* %285, i32 0, i32 14
  %287 = getelementptr inbounds [128 x i64]* %286, i32 0, i64 %284
  %288 = load i64* %287, align 8
  %289 = trunc i64 %288 to i32
  store i32 %289, i32* %minproctime, align 4
  br label %290

; <label>:290                                     ; preds = %283, %274
  br label %291

; <label>:291                                     ; preds = %290
  %292 = load i64* %i, align 8
  %293 = add nsw i64 %292, 1
  store i64 %293, i64* %i, align 8
  br label %243

; <label>:294                                     ; preds = %243
  %295 = load i32* %maxproctime, align 4
  %296 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([12 x i8]* @.str.32.262, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str.33.263, i32 0, i32 0), i32 %295)
  %297 = load i32* %minproctime, align 4
  %298 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.34.264, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str.35.265, i32 0, i32 0), i32 %297)
  %299 = load i32* %totalproctime, align 4
  %300 = uitofp i32 %299 to double
  %301 = load %struct.gmem** @gm, align 8
  %302 = getelementptr inbounds %struct.gmem* %301, i32 0, i32 0
  %303 = load i64* %302, align 8
  %304 = sitofp i64 %303 to double
  %305 = fmul double 1.000000e+00, %304
  %306 = fdiv double %300, %305
  %307 = fptosi double %306 to i32
  %308 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([10 x i8]* @.str.34.264, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str.36.266, i32 0, i32 0), i32 %307)
  br label %309

; <label>:309                                     ; preds = %294, %185
  call void @exit(i32 0)
  br label %UnifiedUnreachableBlock
                                                  ; No predecessors!
  %311 = load i32* %1
  call void @waitForAll()
  ret i32 %311

UnifiedUnreachableBlock:                          ; preds = %309, %153, %95, %88, %73, %32
  call void @waitForAll()
  call void @waitForAll()
  unreachable
}

declare i32 @atoi(...)

declare i8* @malloc(i64)

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*)

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*)

; Function Attrs: nounwind uwtable
define internal void @VecNorm(double* %V) {
  %1 = alloca double*, align 8
  %l = alloca double, align 8
  store double* %V, double** %1, align 8
  %2 = load double** %1, align 8
  %3 = getelementptr inbounds double* %2, i64 0
  %4 = load double* %3, align 8
  %5 = load double** %1, align 8
  %6 = getelementptr inbounds double* %5, i64 0
  %7 = load double* %6, align 8
  %8 = fmul double %4, %7
  %9 = load double** %1, align 8
  %10 = getelementptr inbounds double* %9, i64 1
  %11 = load double* %10, align 8
  %12 = load double** %1, align 8
  %13 = getelementptr inbounds double* %12, i64 1
  %14 = load double* %13, align 8
  %15 = fmul double %11, %14
  %16 = fadd double %8, %15
  %17 = load double** %1, align 8
  %18 = getelementptr inbounds double* %17, i64 2
  %19 = load double* %18, align 8
  %20 = load double** %1, align 8
  %21 = getelementptr inbounds double* %20, i64 2
  %22 = load double* %21, align 8
  %23 = fmul double %19, %22
  %24 = fadd double %16, %23
  %25 = call double @sqrt(double %24)
  store double %25, double* %l, align 8
  %26 = load double* %l, align 8
  %27 = fcmp ogt double %26, 1.000000e-07
  br i1 %27, label %28, label %44

; <label>:28                                      ; preds = %0
  %29 = load double* %l, align 8
  %30 = load double** %1, align 8
  %31 = getelementptr inbounds double* %30, i64 0
  %32 = load double* %31, align 8
  %33 = fdiv double %32, %29
  store double %33, double* %31, align 8
  %34 = load double* %l, align 8
  %35 = load double** %1, align 8
  %36 = getelementptr inbounds double* %35, i64 1
  %37 = load double* %36, align 8
  %38 = fdiv double %37, %34
  store double %38, double* %36, align 8
  %39 = load double* %l, align 8
  %40 = load double** %1, align 8
  %41 = getelementptr inbounds double* %40, i64 2
  %42 = load double* %41, align 8
  %43 = fdiv double %42, %39
  store double %43, double* %41, align 8
  br label %44

; <label>:44                                      ; preds = %28, %0
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @VecMatMult(double* %Vt, [4 x double]* %M, double* %V) {
  %1 = alloca double*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca double*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %tvec = alloca [4 x double], align 16
  store double* %Vt, double** %1, align 8
  store [4 x double]* %M, [4 x double]** %2, align 8
  store double* %V, double** %3, align 8
  store i64 0, i64* %i, align 8
  br label %4

; <label>:4                                       ; preds = %33, %0
  %5 = load i64* %i, align 8
  %6 = icmp slt i64 %5, 4
  br i1 %6, label %7, label %36

; <label>:7                                       ; preds = %4
  %8 = load i64* %i, align 8
  %9 = getelementptr inbounds [4 x double]* %tvec, i32 0, i64 %8
  store double 0.000000e+00, double* %9, align 8
  store i64 0, i64* %j, align 8
  br label %10

; <label>:10                                      ; preds = %29, %7
  %11 = load i64* %j, align 8
  %12 = icmp slt i64 %11, 4
  br i1 %12, label %13, label %32

; <label>:13                                      ; preds = %10
  %14 = load i64* %j, align 8
  %15 = load double** %3, align 8
  %16 = getelementptr inbounds double* %15, i64 %14
  %17 = load double* %16, align 8
  %18 = load i64* %i, align 8
  %19 = load i64* %j, align 8
  %20 = load [4 x double]** %2, align 8
  %21 = getelementptr inbounds [4 x double]* %20, i64 %19
  %22 = getelementptr inbounds [4 x double]* %21, i32 0, i64 %18
  %23 = load double* %22, align 8
  %24 = fmul double %17, %23
  %25 = load i64* %i, align 8
  %26 = getelementptr inbounds [4 x double]* %tvec, i32 0, i64 %25
  %27 = load double* %26, align 8
  %28 = fadd double %27, %24
  store double %28, double* %26, align 8
  br label %29

; <label>:29                                      ; preds = %13
  %30 = load i64* %j, align 8
  %31 = add nsw i64 %30, 1
  store i64 %31, i64* %j, align 8
  br label %10

; <label>:32                                      ; preds = %10
  br label %33

; <label>:33                                      ; preds = %32
  %34 = load i64* %i, align 8
  %35 = add nsw i64 %34, 1
  store i64 %35, i64* %i, align 8
  br label %4

; <label>:36                                      ; preds = %4
  store i64 0, i64* %i, align 8
  br label %37

; <label>:37                                      ; preds = %47, %36
  %38 = load i64* %i, align 8
  %39 = icmp slt i64 %38, 4
  br i1 %39, label %40, label %50

; <label>:40                                      ; preds = %37
  %41 = load i64* %i, align 8
  %42 = getelementptr inbounds [4 x double]* %tvec, i32 0, i64 %41
  %43 = load double* %42, align 8
  %44 = load i64* %i, align 8
  %45 = load double** %1, align 8
  %46 = getelementptr inbounds double* %45, i64 %44
  store double %43, double* %46, align 8
  br label %47

; <label>:47                                      ; preds = %40
  %48 = load i64* %i, align 8
  %49 = add nsw i64 %48, 1
  store i64 %49, i64* %i, align 8
  br label %37

; <label>:50                                      ; preds = %37
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PrintMatrix([4 x double]* %M, i8* %s) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store [4 x double]* %M, [4 x double]** %1, align 8
  store i8* %s, i8** %2, align 8
  %3 = load i8** %2, align 8
  %4 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([5 x i8]* @.str.286, i32 0, i32 0), i8* %3)
  store i64 0, i64* %i, align 8
  br label %5

; <label>:5                                       ; preds = %26, %0
  %6 = load i64* %i, align 8
  %7 = icmp slt i64 %6, 4
  br i1 %7, label %8, label %29

; <label>:8                                       ; preds = %5
  %9 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.1.287, i32 0, i32 0))
  store i64 0, i64* %j, align 8
  br label %10

; <label>:10                                      ; preds = %21, %8
  %11 = load i64* %j, align 8
  %12 = icmp slt i64 %11, 4
  br i1 %12, label %13, label %24

; <label>:13                                      ; preds = %10
  %14 = load i64* %j, align 8
  %15 = load i64* %i, align 8
  %16 = load [4 x double]** %1, align 8
  %17 = getelementptr inbounds [4 x double]* %16, i64 %15
  %18 = getelementptr inbounds [4 x double]* %17, i32 0, i64 %14
  %19 = load double* %18, align 8
  %20 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([5 x i8]* @.str.2.288, i32 0, i32 0), double %19)
  br label %21

; <label>:21                                      ; preds = %13
  %22 = load i64* %j, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* %j, align 8
  br label %10

; <label>:24                                      ; preds = %10
  %25 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([2 x i8]* @.str.3.289, i32 0, i32 0))
  br label %26

; <label>:26                                      ; preds = %24
  %27 = load i64* %i, align 8
  %28 = add nsw i64 %27, 1
  store i64 %28, i64* %i, align 8
  br label %5

; <label>:29                                      ; preds = %5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @MatrixIdentity([4 x double]* %M) {
  %1 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store [4 x double]* %M, [4 x double]** %1, align 8
  store i64 0, i64* %i, align 8
  br label %2

; <label>:2                                       ; preds = %19, %0
  %3 = load i64* %i, align 8
  %4 = icmp slt i64 %3, 4
  br i1 %4, label %5, label %22

; <label>:5                                       ; preds = %2
  store i64 0, i64* %j, align 8
  br label %6

; <label>:6                                       ; preds = %15, %5
  %7 = load i64* %j, align 8
  %8 = icmp slt i64 %7, 4
  br i1 %8, label %9, label %18

; <label>:9                                       ; preds = %6
  %10 = load i64* %j, align 8
  %11 = load i64* %i, align 8
  %12 = load [4 x double]** %1, align 8
  %13 = getelementptr inbounds [4 x double]* %12, i64 %11
  %14 = getelementptr inbounds [4 x double]* %13, i32 0, i64 %10
  store double 0.000000e+00, double* %14, align 8
  br label %15

; <label>:15                                      ; preds = %9
  %16 = load i64* %j, align 8
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* %j, align 8
  br label %6

; <label>:18                                      ; preds = %6
  br label %19

; <label>:19                                      ; preds = %18
  %20 = load i64* %i, align 8
  %21 = add nsw i64 %20, 1
  store i64 %21, i64* %i, align 8
  br label %2

; <label>:22                                      ; preds = %2
  %23 = load [4 x double]** %1, align 8
  %24 = getelementptr inbounds [4 x double]* %23, i64 0
  %25 = getelementptr inbounds [4 x double]* %24, i32 0, i64 0
  store double 1.000000e+00, double* %25, align 8
  %26 = load [4 x double]** %1, align 8
  %27 = getelementptr inbounds [4 x double]* %26, i64 1
  %28 = getelementptr inbounds [4 x double]* %27, i32 0, i64 1
  store double 1.000000e+00, double* %28, align 8
  %29 = load [4 x double]** %1, align 8
  %30 = getelementptr inbounds [4 x double]* %29, i64 2
  %31 = getelementptr inbounds [4 x double]* %30, i32 0, i64 2
  store double 1.000000e+00, double* %31, align 8
  %32 = load [4 x double]** %1, align 8
  %33 = getelementptr inbounds [4 x double]* %32, i64 3
  %34 = getelementptr inbounds [4 x double]* %33, i32 0, i64 3
  store double 1.000000e+00, double* %34, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @MatrixCopy([4 x double]* %A, [4 x double]* %B) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store [4 x double]* %A, [4 x double]** %1, align 8
  store [4 x double]* %B, [4 x double]** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %26, %0
  %4 = load i64* %i, align 8
  %5 = icmp slt i64 %4, 4
  br i1 %5, label %6, label %29

; <label>:6                                       ; preds = %3
  store i64 0, i64* %j, align 8
  br label %7

; <label>:7                                       ; preds = %22, %6
  %8 = load i64* %j, align 8
  %9 = icmp slt i64 %8, 4
  br i1 %9, label %10, label %25

; <label>:10                                      ; preds = %7
  %11 = load i64* %j, align 8
  %12 = load i64* %i, align 8
  %13 = load [4 x double]** %2, align 8
  %14 = getelementptr inbounds [4 x double]* %13, i64 %12
  %15 = getelementptr inbounds [4 x double]* %14, i32 0, i64 %11
  %16 = load double* %15, align 8
  %17 = load i64* %j, align 8
  %18 = load i64* %i, align 8
  %19 = load [4 x double]** %1, align 8
  %20 = getelementptr inbounds [4 x double]* %19, i64 %18
  %21 = getelementptr inbounds [4 x double]* %20, i32 0, i64 %17
  store double %16, double* %21, align 8
  br label %22

; <label>:22                                      ; preds = %10
  %23 = load i64* %j, align 8
  %24 = add nsw i64 %23, 1
  store i64 %24, i64* %j, align 8
  br label %7

; <label>:25                                      ; preds = %7
  br label %26

; <label>:26                                      ; preds = %25
  %27 = load i64* %i, align 8
  %28 = add nsw i64 %27, 1
  store i64 %28, i64* %i, align 8
  br label %3

; <label>:29                                      ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @MatrixTranspose([4 x double]* %MT, [4 x double]* %M) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %tmp = alloca [4 x [4 x double]], align 16
  store [4 x double]* %MT, [4 x double]** %1, align 8
  store [4 x double]* %M, [4 x double]** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %25, %0
  %4 = load i64* %i, align 8
  %5 = icmp slt i64 %4, 4
  br i1 %5, label %6, label %28

; <label>:6                                       ; preds = %3
  store i64 0, i64* %j, align 8
  br label %7

; <label>:7                                       ; preds = %21, %6
  %8 = load i64* %j, align 8
  %9 = icmp slt i64 %8, 4
  br i1 %9, label %10, label %24

; <label>:10                                      ; preds = %7
  %11 = load i64* %j, align 8
  %12 = load i64* %i, align 8
  %13 = load [4 x double]** %2, align 8
  %14 = getelementptr inbounds [4 x double]* %13, i64 %12
  %15 = getelementptr inbounds [4 x double]* %14, i32 0, i64 %11
  %16 = load double* %15, align 8
  %17 = load i64* %i, align 8
  %18 = load i64* %j, align 8
  %19 = getelementptr inbounds [4 x [4 x double]]* %tmp, i32 0, i64 %18
  %20 = getelementptr inbounds [4 x double]* %19, i32 0, i64 %17
  store double %16, double* %20, align 8
  br label %21

; <label>:21                                      ; preds = %10
  %22 = load i64* %j, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* %j, align 8
  br label %7

; <label>:24                                      ; preds = %7
  br label %25

; <label>:25                                      ; preds = %24
  %26 = load i64* %i, align 8
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %i, align 8
  br label %3

; <label>:28                                      ; preds = %3
  %29 = load [4 x double]** %1, align 8
  %30 = getelementptr inbounds [4 x [4 x double]]* %tmp, i32 0, i32 0
  call void @MatrixCopy([4 x double]* %29, [4 x double]* %30)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @MatrixMult([4 x double]* %C, [4 x double]* %A, [4 x double]* %B) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %T = alloca [4 x [4 x double]], align 16
  store [4 x double]* %C, [4 x double]** %1, align 8
  store [4 x double]* %A, [4 x double]** %2, align 8
  store [4 x double]* %B, [4 x double]** %3, align 8
  store i64 0, i64* %i, align 8
  br label %4

; <label>:4                                       ; preds = %47, %0
  %5 = load i64* %i, align 8
  %6 = icmp slt i64 %5, 4
  br i1 %6, label %7, label %50

; <label>:7                                       ; preds = %4
  store i64 0, i64* %j, align 8
  br label %8

; <label>:8                                       ; preds = %43, %7
  %9 = load i64* %j, align 8
  %10 = icmp slt i64 %9, 4
  br i1 %10, label %11, label %46

; <label>:11                                      ; preds = %8
  %12 = load i64* %j, align 8
  %13 = load i64* %i, align 8
  %14 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %13
  %15 = getelementptr inbounds [4 x double]* %14, i32 0, i64 %12
  store double 0.000000e+00, double* %15, align 8
  store i64 0, i64* %k, align 8
  br label %16

; <label>:16                                      ; preds = %39, %11
  %17 = load i64* %k, align 8
  %18 = icmp slt i64 %17, 4
  br i1 %18, label %19, label %42

; <label>:19                                      ; preds = %16
  %20 = load i64* %k, align 8
  %21 = load i64* %i, align 8
  %22 = load [4 x double]** %2, align 8
  %23 = getelementptr inbounds [4 x double]* %22, i64 %21
  %24 = getelementptr inbounds [4 x double]* %23, i32 0, i64 %20
  %25 = load double* %24, align 8
  %26 = load i64* %j, align 8
  %27 = load i64* %k, align 8
  %28 = load [4 x double]** %3, align 8
  %29 = getelementptr inbounds [4 x double]* %28, i64 %27
  %30 = getelementptr inbounds [4 x double]* %29, i32 0, i64 %26
  %31 = load double* %30, align 8
  %32 = fmul double %25, %31
  %33 = load i64* %j, align 8
  %34 = load i64* %i, align 8
  %35 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %34
  %36 = getelementptr inbounds [4 x double]* %35, i32 0, i64 %33
  %37 = load double* %36, align 8
  %38 = fadd double %37, %32
  store double %38, double* %36, align 8
  br label %39

; <label>:39                                      ; preds = %19
  %40 = load i64* %k, align 8
  %41 = add nsw i64 %40, 1
  store i64 %41, i64* %k, align 8
  br label %16

; <label>:42                                      ; preds = %16
  br label %43

; <label>:43                                      ; preds = %42
  %44 = load i64* %j, align 8
  %45 = add nsw i64 %44, 1
  store i64 %45, i64* %j, align 8
  br label %8

; <label>:46                                      ; preds = %8
  br label %47

; <label>:47                                      ; preds = %46
  %48 = load i64* %i, align 8
  %49 = add nsw i64 %48, 1
  store i64 %49, i64* %i, align 8
  br label %4

; <label>:50                                      ; preds = %4
  store i64 0, i64* %i, align 8
  br label %51

; <label>:51                                      ; preds = %73, %50
  %52 = load i64* %i, align 8
  %53 = icmp slt i64 %52, 4
  br i1 %53, label %54, label %76

; <label>:54                                      ; preds = %51
  store i64 0, i64* %j, align 8
  br label %55

; <label>:55                                      ; preds = %69, %54
  %56 = load i64* %j, align 8
  %57 = icmp slt i64 %56, 4
  br i1 %57, label %58, label %72

; <label>:58                                      ; preds = %55
  %59 = load i64* %j, align 8
  %60 = load i64* %i, align 8
  %61 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %60
  %62 = getelementptr inbounds [4 x double]* %61, i32 0, i64 %59
  %63 = load double* %62, align 8
  %64 = load i64* %j, align 8
  %65 = load i64* %i, align 8
  %66 = load [4 x double]** %1, align 8
  %67 = getelementptr inbounds [4 x double]* %66, i64 %65
  %68 = getelementptr inbounds [4 x double]* %67, i32 0, i64 %64
  store double %63, double* %68, align 8
  br label %69

; <label>:69                                      ; preds = %58
  %70 = load i64* %j, align 8
  %71 = add nsw i64 %70, 1
  store i64 %71, i64* %j, align 8
  br label %55

; <label>:72                                      ; preds = %55
  br label %73

; <label>:73                                      ; preds = %72
  %74 = load i64* %i, align 8
  %75 = add nsw i64 %74, 1
  store i64 %75, i64* %i, align 8
  br label %51

; <label>:76                                      ; preds = %51
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @MatrixInverse([4 x double]* %Minv, [4 x double]* %Mat) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %gjmat = alloca [4 x [8 x double]], align 16
  %tbuf = alloca [8 x double], align 16
  %pval = alloca double, align 8
  %aval = alloca double, align 8
  %prow = alloca i64, align 8
  %c = alloca double, align 8
  %tmp = alloca [4 x [4 x double]], align 16
  store [4 x double]* %Minv, [4 x double]** %1, align 8
  store [4 x double]* %Mat, [4 x double]** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %25, %0
  %4 = load i64* %i, align 8
  %5 = icmp slt i64 %4, 4
  br i1 %5, label %6, label %28

; <label>:6                                       ; preds = %3
  store i64 0, i64* %j, align 8
  br label %7

; <label>:7                                       ; preds = %21, %6
  %8 = load i64* %j, align 8
  %9 = icmp slt i64 %8, 4
  br i1 %9, label %10, label %24

; <label>:10                                      ; preds = %7
  %11 = load i64* %j, align 8
  %12 = load i64* %i, align 8
  %13 = load [4 x double]** %2, align 8
  %14 = getelementptr inbounds [4 x double]* %13, i64 %12
  %15 = getelementptr inbounds [4 x double]* %14, i32 0, i64 %11
  %16 = load double* %15, align 8
  %17 = load i64* %j, align 8
  %18 = load i64* %i, align 8
  %19 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %18
  %20 = getelementptr inbounds [8 x double]* %19, i32 0, i64 %17
  store double %16, double* %20, align 8
  br label %21

; <label>:21                                      ; preds = %10
  %22 = load i64* %j, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* %j, align 8
  br label %7

; <label>:24                                      ; preds = %7
  br label %25

; <label>:25                                      ; preds = %24
  %26 = load i64* %i, align 8
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %i, align 8
  br label %3

; <label>:28                                      ; preds = %3
  store i64 0, i64* %k, align 8
  store i64 4, i64* %i, align 8
  br label %29

; <label>:29                                      ; preds = %57, %28
  %30 = load i64* %i, align 8
  %31 = icmp slt i64 %30, 8
  br i1 %31, label %32, label %60

; <label>:32                                      ; preds = %29
  store i64 4, i64* %j, align 8
  br label %33

; <label>:33                                      ; preds = %51, %32
  %34 = load i64* %j, align 8
  %35 = icmp slt i64 %34, 8
  br i1 %35, label %36, label %54

; <label>:36                                      ; preds = %33
  %37 = load i64* %i, align 8
  %38 = load i64* %j, align 8
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64* %j, align 8
  %42 = load i64* %k, align 8
  %43 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %42
  %44 = getelementptr inbounds [8 x double]* %43, i32 0, i64 %41
  store double 1.000000e+00, double* %44, align 8
  br label %50

; <label>:45                                      ; preds = %36
  %46 = load i64* %j, align 8
  %47 = load i64* %k, align 8
  %48 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %47
  %49 = getelementptr inbounds [8 x double]* %48, i32 0, i64 %46
  store double 0.000000e+00, double* %49, align 8
  br label %50

; <label>:50                                      ; preds = %45, %40
  br label %51

; <label>:51                                      ; preds = %50
  %52 = load i64* %j, align 8
  %53 = add nsw i64 %52, 1
  store i64 %53, i64* %j, align 8
  br label %33

; <label>:54                                      ; preds = %33
  %55 = load i64* %k, align 8
  %56 = add nsw i64 %55, 1
  store i64 %56, i64* %k, align 8
  br label %57

; <label>:57                                      ; preds = %54
  %58 = load i64* %i, align 8
  %59 = add nsw i64 %58, 1
  store i64 %59, i64* %i, align 8
  br label %29

; <label>:60                                      ; preds = %29
  store i64 0, i64* %i, align 8
  br label %61

; <label>:61                                      ; preds = %229, %60
  %62 = load i64* %i, align 8
  %63 = icmp slt i64 %62, 3
  br i1 %63, label %64, label %232

; <label>:64                                      ; preds = %61
  %65 = load i64* %i, align 8
  %66 = load i64* %i, align 8
  %67 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %66
  %68 = getelementptr inbounds [8 x double]* %67, i32 0, i64 %65
  %69 = load double* %68, align 8
  %70 = fcmp ogt double %69, 0.000000e+00
  br i1 %70, label %71, label %77

; <label>:71                                      ; preds = %64
  %72 = load i64* %i, align 8
  %73 = load i64* %i, align 8
  %74 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %73
  %75 = getelementptr inbounds [8 x double]* %74, i32 0, i64 %72
  %76 = load double* %75, align 8
  br label %84

; <label>:77                                      ; preds = %64
  %78 = load i64* %i, align 8
  %79 = load i64* %i, align 8
  %80 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %79
  %81 = getelementptr inbounds [8 x double]* %80, i32 0, i64 %78
  %82 = load double* %81, align 8
  %83 = fsub double -0.000000e+00, %82
  br label %84

; <label>:84                                      ; preds = %77, %71
  %85 = phi double [ %76, %71 ], [ %83, %77 ]
  store double %85, double* %pval, align 8
  %86 = load i64* %i, align 8
  store i64 %86, i64* %prow, align 8
  %87 = load i64* %i, align 8
  %88 = add nsw i64 %87, 1
  store i64 %88, i64* %j, align 8
  br label %89

; <label>:89                                      ; preds = %121, %84
  %90 = load i64* %j, align 8
  %91 = icmp slt i64 %90, 4
  br i1 %91, label %92, label %124

; <label>:92                                      ; preds = %89
  %93 = load i64* %i, align 8
  %94 = load i64* %j, align 8
  %95 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %94
  %96 = getelementptr inbounds [8 x double]* %95, i32 0, i64 %93
  %97 = load double* %96, align 8
  %98 = fcmp ogt double %97, 0.000000e+00
  br i1 %98, label %99, label %105

; <label>:99                                      ; preds = %92
  %100 = load i64* %i, align 8
  %101 = load i64* %j, align 8
  %102 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %101
  %103 = getelementptr inbounds [8 x double]* %102, i32 0, i64 %100
  %104 = load double* %103, align 8
  br label %112

; <label>:105                                     ; preds = %92
  %106 = load i64* %i, align 8
  %107 = load i64* %j, align 8
  %108 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %107
  %109 = getelementptr inbounds [8 x double]* %108, i32 0, i64 %106
  %110 = load double* %109, align 8
  %111 = fsub double -0.000000e+00, %110
  br label %112

; <label>:112                                     ; preds = %105, %99
  %113 = phi double [ %104, %99 ], [ %111, %105 ]
  store double %113, double* %aval, align 8
  %114 = load double* %aval, align 8
  %115 = load double* %pval, align 8
  %116 = fcmp ogt double %114, %115
  br i1 %116, label %117, label %120

; <label>:117                                     ; preds = %112
  %118 = load double* %aval, align 8
  store double %118, double* %pval, align 8
  %119 = load i64* %j, align 8
  store i64 %119, i64* %prow, align 8
  br label %120

; <label>:120                                     ; preds = %117, %112
  br label %121

; <label>:121                                     ; preds = %120
  %122 = load i64* %j, align 8
  %123 = add nsw i64 %122, 1
  store i64 %123, i64* %j, align 8
  br label %89

; <label>:124                                     ; preds = %89
  %125 = load i64* %i, align 8
  %126 = load i64* %prow, align 8
  %127 = icmp ne i64 %125, %126
  br i1 %127, label %128, label %176

; <label>:128                                     ; preds = %124
  store i64 0, i64* %k, align 8
  br label %129

; <label>:129                                     ; preds = %140, %128
  %130 = load i64* %k, align 8
  %131 = icmp slt i64 %130, 8
  br i1 %131, label %132, label %143

; <label>:132                                     ; preds = %129
  %133 = load i64* %k, align 8
  %134 = load i64* %i, align 8
  %135 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %134
  %136 = getelementptr inbounds [8 x double]* %135, i32 0, i64 %133
  %137 = load double* %136, align 8
  %138 = load i64* %k, align 8
  %139 = getelementptr inbounds [8 x double]* %tbuf, i32 0, i64 %138
  store double %137, double* %139, align 8
  br label %140

; <label>:140                                     ; preds = %132
  %141 = load i64* %k, align 8
  %142 = add nsw i64 %141, 1
  store i64 %142, i64* %k, align 8
  br label %129

; <label>:143                                     ; preds = %129
  store i64 0, i64* %k, align 8
  br label %144

; <label>:144                                     ; preds = %157, %143
  %145 = load i64* %k, align 8
  %146 = icmp slt i64 %145, 8
  br i1 %146, label %147, label %160

; <label>:147                                     ; preds = %144
  %148 = load i64* %k, align 8
  %149 = load i64* %prow, align 8
  %150 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %149
  %151 = getelementptr inbounds [8 x double]* %150, i32 0, i64 %148
  %152 = load double* %151, align 8
  %153 = load i64* %k, align 8
  %154 = load i64* %i, align 8
  %155 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %154
  %156 = getelementptr inbounds [8 x double]* %155, i32 0, i64 %153
  store double %152, double* %156, align 8
  br label %157

; <label>:157                                     ; preds = %147
  %158 = load i64* %k, align 8
  %159 = add nsw i64 %158, 1
  store i64 %159, i64* %k, align 8
  br label %144

; <label>:160                                     ; preds = %144
  store i64 0, i64* %k, align 8
  br label %161

; <label>:161                                     ; preds = %172, %160
  %162 = load i64* %k, align 8
  %163 = icmp slt i64 %162, 8
  br i1 %163, label %164, label %175

; <label>:164                                     ; preds = %161
  %165 = load i64* %k, align 8
  %166 = getelementptr inbounds [8 x double]* %tbuf, i32 0, i64 %165
  %167 = load double* %166, align 8
  %168 = load i64* %k, align 8
  %169 = load i64* %prow, align 8
  %170 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %169
  %171 = getelementptr inbounds [8 x double]* %170, i32 0, i64 %168
  store double %167, double* %171, align 8
  br label %172

; <label>:172                                     ; preds = %164
  %173 = load i64* %k, align 8
  %174 = add nsw i64 %173, 1
  store i64 %174, i64* %k, align 8
  br label %161

; <label>:175                                     ; preds = %161
  br label %176

; <label>:176                                     ; preds = %175, %124
  %177 = load i64* %i, align 8
  %178 = add nsw i64 %177, 1
  store i64 %178, i64* %j, align 8
  br label %179

; <label>:179                                     ; preds = %225, %176
  %180 = load i64* %j, align 8
  %181 = icmp slt i64 %180, 4
  br i1 %181, label %182, label %228

; <label>:182                                     ; preds = %179
  %183 = load i64* %i, align 8
  %184 = load i64* %j, align 8
  %185 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %184
  %186 = getelementptr inbounds [8 x double]* %185, i32 0, i64 %183
  %187 = load double* %186, align 8
  %188 = load i64* %i, align 8
  %189 = load i64* %i, align 8
  %190 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %189
  %191 = getelementptr inbounds [8 x double]* %190, i32 0, i64 %188
  %192 = load double* %191, align 8
  %193 = fdiv double %187, %192
  store double %193, double* %c, align 8
  %194 = load i64* %i, align 8
  %195 = load i64* %j, align 8
  %196 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %195
  %197 = getelementptr inbounds [8 x double]* %196, i32 0, i64 %194
  store double 0.000000e+00, double* %197, align 8
  %198 = load i64* %i, align 8
  %199 = add nsw i64 %198, 1
  store i64 %199, i64* %k, align 8
  br label %200

; <label>:200                                     ; preds = %221, %182
  %201 = load i64* %k, align 8
  %202 = icmp slt i64 %201, 8
  br i1 %202, label %203, label %224

; <label>:203                                     ; preds = %200
  %204 = load i64* %k, align 8
  %205 = load i64* %j, align 8
  %206 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %205
  %207 = getelementptr inbounds [8 x double]* %206, i32 0, i64 %204
  %208 = load double* %207, align 8
  %209 = load double* %c, align 8
  %210 = load i64* %k, align 8
  %211 = load i64* %i, align 8
  %212 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %211
  %213 = getelementptr inbounds [8 x double]* %212, i32 0, i64 %210
  %214 = load double* %213, align 8
  %215 = fmul double %209, %214
  %216 = fsub double %208, %215
  %217 = load i64* %k, align 8
  %218 = load i64* %j, align 8
  %219 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %218
  %220 = getelementptr inbounds [8 x double]* %219, i32 0, i64 %217
  store double %216, double* %220, align 8
  br label %221

; <label>:221                                     ; preds = %203
  %222 = load i64* %k, align 8
  %223 = add nsw i64 %222, 1
  store i64 %223, i64* %k, align 8
  br label %200

; <label>:224                                     ; preds = %200
  br label %225

; <label>:225                                     ; preds = %224
  %226 = load i64* %j, align 8
  %227 = add nsw i64 %226, 1
  store i64 %227, i64* %j, align 8
  br label %179

; <label>:228                                     ; preds = %179
  br label %229

; <label>:229                                     ; preds = %228
  %230 = load i64* %i, align 8
  %231 = add nsw i64 %230, 1
  store i64 %231, i64* %i, align 8
  br label %61

; <label>:232                                     ; preds = %61
  store i64 0, i64* %i, align 8
  br label %233

; <label>:233                                     ; preds = %289, %232
  %234 = load i64* %i, align 8
  %235 = icmp slt i64 %234, 3
  br i1 %235, label %236, label %292

; <label>:236                                     ; preds = %233
  %237 = load i64* %i, align 8
  %238 = add nsw i64 %237, 1
  store i64 %238, i64* %j, align 8
  br label %239

; <label>:239                                     ; preds = %285, %236
  %240 = load i64* %j, align 8
  %241 = icmp slt i64 %240, 4
  br i1 %241, label %242, label %288

; <label>:242                                     ; preds = %239
  %243 = load i64* %j, align 8
  %244 = load i64* %i, align 8
  %245 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %244
  %246 = getelementptr inbounds [8 x double]* %245, i32 0, i64 %243
  %247 = load double* %246, align 8
  %248 = load i64* %j, align 8
  %249 = load i64* %j, align 8
  %250 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %249
  %251 = getelementptr inbounds [8 x double]* %250, i32 0, i64 %248
  %252 = load double* %251, align 8
  %253 = fdiv double %247, %252
  store double %253, double* %c, align 8
  %254 = load i64* %j, align 8
  %255 = load i64* %i, align 8
  %256 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %255
  %257 = getelementptr inbounds [8 x double]* %256, i32 0, i64 %254
  store double 0.000000e+00, double* %257, align 8
  %258 = load i64* %j, align 8
  %259 = add nsw i64 %258, 1
  store i64 %259, i64* %k, align 8
  br label %260

; <label>:260                                     ; preds = %281, %242
  %261 = load i64* %k, align 8
  %262 = icmp slt i64 %261, 8
  br i1 %262, label %263, label %284

; <label>:263                                     ; preds = %260
  %264 = load i64* %k, align 8
  %265 = load i64* %i, align 8
  %266 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %265
  %267 = getelementptr inbounds [8 x double]* %266, i32 0, i64 %264
  %268 = load double* %267, align 8
  %269 = load double* %c, align 8
  %270 = load i64* %k, align 8
  %271 = load i64* %j, align 8
  %272 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %271
  %273 = getelementptr inbounds [8 x double]* %272, i32 0, i64 %270
  %274 = load double* %273, align 8
  %275 = fmul double %269, %274
  %276 = fsub double %268, %275
  %277 = load i64* %k, align 8
  %278 = load i64* %i, align 8
  %279 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %278
  %280 = getelementptr inbounds [8 x double]* %279, i32 0, i64 %277
  store double %276, double* %280, align 8
  br label %281

; <label>:281                                     ; preds = %263
  %282 = load i64* %k, align 8
  %283 = add nsw i64 %282, 1
  store i64 %283, i64* %k, align 8
  br label %260

; <label>:284                                     ; preds = %260
  br label %285

; <label>:285                                     ; preds = %284
  %286 = load i64* %j, align 8
  %287 = add nsw i64 %286, 1
  store i64 %287, i64* %j, align 8
  br label %239

; <label>:288                                     ; preds = %239
  br label %289

; <label>:289                                     ; preds = %288
  %290 = load i64* %i, align 8
  %291 = add nsw i64 %290, 1
  store i64 %291, i64* %i, align 8
  br label %233

; <label>:292                                     ; preds = %233
  store i64 0, i64* %i, align 8
  br label %293

; <label>:293                                     ; preds = %316, %292
  %294 = load i64* %i, align 8
  %295 = icmp slt i64 %294, 4
  br i1 %295, label %296, label %319

; <label>:296                                     ; preds = %293
  store i64 4, i64* %k, align 8
  br label %297

; <label>:297                                     ; preds = %312, %296
  %298 = load i64* %k, align 8
  %299 = icmp slt i64 %298, 8
  br i1 %299, label %300, label %315

; <label>:300                                     ; preds = %297
  %301 = load i64* %i, align 8
  %302 = load i64* %i, align 8
  %303 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %302
  %304 = getelementptr inbounds [8 x double]* %303, i32 0, i64 %301
  %305 = load double* %304, align 8
  %306 = load i64* %k, align 8
  %307 = load i64* %i, align 8
  %308 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %307
  %309 = getelementptr inbounds [8 x double]* %308, i32 0, i64 %306
  %310 = load double* %309, align 8
  %311 = fdiv double %310, %305
  store double %311, double* %309, align 8
  br label %312

; <label>:312                                     ; preds = %300
  %313 = load i64* %k, align 8
  %314 = add nsw i64 %313, 1
  store i64 %314, i64* %k, align 8
  br label %297

; <label>:315                                     ; preds = %297
  br label %316

; <label>:316                                     ; preds = %315
  %317 = load i64* %i, align 8
  %318 = add nsw i64 %317, 1
  store i64 %318, i64* %i, align 8
  br label %293

; <label>:319                                     ; preds = %293
  store i64 0, i64* %i, align 8
  br label %320

; <label>:320                                     ; preds = %343, %319
  %321 = load i64* %i, align 8
  %322 = icmp slt i64 %321, 4
  br i1 %322, label %323, label %346

; <label>:323                                     ; preds = %320
  store i64 4, i64* %j, align 8
  br label %324

; <label>:324                                     ; preds = %339, %323
  %325 = load i64* %j, align 8
  %326 = icmp slt i64 %325, 8
  br i1 %326, label %327, label %342

; <label>:327                                     ; preds = %324
  %328 = load i64* %j, align 8
  %329 = load i64* %i, align 8
  %330 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %329
  %331 = getelementptr inbounds [8 x double]* %330, i32 0, i64 %328
  %332 = load double* %331, align 8
  %333 = load i64* %j, align 8
  %334 = sub nsw i64 %333, 4
  %335 = load i64* %i, align 8
  %336 = load [4 x double]** %1, align 8
  %337 = getelementptr inbounds [4 x double]* %336, i64 %335
  %338 = getelementptr inbounds [4 x double]* %337, i32 0, i64 %334
  store double %332, double* %338, align 8
  br label %339

; <label>:339                                     ; preds = %327
  %340 = load i64* %j, align 8
  %341 = add nsw i64 %340, 1
  store i64 %341, i64* %j, align 8
  br label %324

; <label>:342                                     ; preds = %324
  br label %343

; <label>:343                                     ; preds = %342
  %344 = load i64* %i, align 8
  %345 = add nsw i64 %344, 1
  store i64 %345, i64* %i, align 8
  br label %320

; <label>:346                                     ; preds = %320
  %347 = getelementptr inbounds [4 x [4 x double]]* %tmp, i32 0, i32 0
  %348 = load [4 x double]** %2, align 8
  %349 = load [4 x double]** %1, align 8
  call void @MatrixMult([4 x double]* %347, [4 x double]* %348, [4 x double]* %349)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @Translate([4 x double]* %M, double %dx, double %dy, double %dz) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store [4 x double]* %M, [4 x double]** %1, align 8
  store double %dx, double* %2, align 8
  store double %dy, double* %3, align 8
  store double %dz, double* %4, align 8
  %5 = load [4 x double]** %1, align 8
  call void @MatrixIdentity([4 x double]* %5)
  %6 = load double* %2, align 8
  %7 = load [4 x double]** %1, align 8
  %8 = getelementptr inbounds [4 x double]* %7, i64 3
  %9 = getelementptr inbounds [4 x double]* %8, i32 0, i64 0
  store double %6, double* %9, align 8
  %10 = load double* %3, align 8
  %11 = load [4 x double]** %1, align 8
  %12 = getelementptr inbounds [4 x double]* %11, i64 3
  %13 = getelementptr inbounds [4 x double]* %12, i32 0, i64 1
  store double %10, double* %13, align 8
  %14 = load double* %4, align 8
  %15 = load [4 x double]** %1, align 8
  %16 = getelementptr inbounds [4 x double]* %15, i64 3
  %17 = getelementptr inbounds [4 x double]* %16, i32 0, i64 2
  store double %14, double* %17, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @Scale([4 x double]* %M, double %sx, double %sy, double %sz) {
  %1 = alloca [4 x double]*, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store [4 x double]* %M, [4 x double]** %1, align 8
  store double %sx, double* %2, align 8
  store double %sy, double* %3, align 8
  store double %sz, double* %4, align 8
  %5 = load [4 x double]** %1, align 8
  call void @MatrixIdentity([4 x double]* %5)
  %6 = load double* %2, align 8
  %7 = load [4 x double]** %1, align 8
  %8 = getelementptr inbounds [4 x double]* %7, i64 0
  %9 = getelementptr inbounds [4 x double]* %8, i32 0, i64 0
  store double %6, double* %9, align 8
  %10 = load double* %3, align 8
  %11 = load [4 x double]** %1, align 8
  %12 = getelementptr inbounds [4 x double]* %11, i64 1
  %13 = getelementptr inbounds [4 x double]* %12, i32 0, i64 1
  store double %10, double* %13, align 8
  %14 = load double* %4, align 8
  %15 = load [4 x double]** %1, align 8
  %16 = getelementptr inbounds [4 x double]* %15, i64 2
  %17 = getelementptr inbounds [4 x double]* %16, i32 0, i64 2
  store double %14, double* %17, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @Rotate(i64 %axis, [4 x double]* %M, double %angle) {
  %1 = alloca i64, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca double, align 8
  %cosangle = alloca double, align 8
  %sinangle = alloca double, align 8
  store i64 %axis, i64* %1, align 8
  store [4 x double]* %M, [4 x double]** %2, align 8
  store double %angle, double* %3, align 8
  %4 = load [4 x double]** %2, align 8
  call void @MatrixIdentity([4 x double]* %4)
  %5 = load double* %3, align 8
  %6 = call double @cos(double %5)
  store double %6, double* %cosangle, align 8
  %7 = load double* %3, align 8
  %8 = call double @sin(double %7)
  store double %8, double* %sinangle, align 8
  %9 = load i64* %1, align 8
  switch i64 %9, label %64 [
    i64 1, label %10
    i64 2, label %28
    i64 3, label %46
  ]

; <label>:10                                      ; preds = %0
  %11 = load double* %cosangle, align 8
  %12 = load [4 x double]** %2, align 8
  %13 = getelementptr inbounds [4 x double]* %12, i64 1
  %14 = getelementptr inbounds [4 x double]* %13, i32 0, i64 1
  store double %11, double* %14, align 8
  %15 = load double* %sinangle, align 8
  %16 = load [4 x double]** %2, align 8
  %17 = getelementptr inbounds [4 x double]* %16, i64 1
  %18 = getelementptr inbounds [4 x double]* %17, i32 0, i64 2
  store double %15, double* %18, align 8
  %19 = load double* %sinangle, align 8
  %20 = fsub double -0.000000e+00, %19
  %21 = load [4 x double]** %2, align 8
  %22 = getelementptr inbounds [4 x double]* %21, i64 2
  %23 = getelementptr inbounds [4 x double]* %22, i32 0, i64 1
  store double %20, double* %23, align 8
  %24 = load double* %cosangle, align 8
  %25 = load [4 x double]** %2, align 8
  %26 = getelementptr inbounds [4 x double]* %25, i64 2
  %27 = getelementptr inbounds [4 x double]* %26, i32 0, i64 2
  store double %24, double* %27, align 8
  br label %67

; <label>:28                                      ; preds = %0
  %29 = load double* %cosangle, align 8
  %30 = load [4 x double]** %2, align 8
  %31 = getelementptr inbounds [4 x double]* %30, i64 0
  %32 = getelementptr inbounds [4 x double]* %31, i32 0, i64 0
  store double %29, double* %32, align 8
  %33 = load double* %sinangle, align 8
  %34 = fsub double -0.000000e+00, %33
  %35 = load [4 x double]** %2, align 8
  %36 = getelementptr inbounds [4 x double]* %35, i64 0
  %37 = getelementptr inbounds [4 x double]* %36, i32 0, i64 2
  store double %34, double* %37, align 8
  %38 = load double* %sinangle, align 8
  %39 = load [4 x double]** %2, align 8
  %40 = getelementptr inbounds [4 x double]* %39, i64 2
  %41 = getelementptr inbounds [4 x double]* %40, i32 0, i64 0
  store double %38, double* %41, align 8
  %42 = load double* %cosangle, align 8
  %43 = load [4 x double]** %2, align 8
  %44 = getelementptr inbounds [4 x double]* %43, i64 2
  %45 = getelementptr inbounds [4 x double]* %44, i32 0, i64 2
  store double %42, double* %45, align 8
  br label %67

; <label>:46                                      ; preds = %0
  %47 = load double* %cosangle, align 8
  %48 = load [4 x double]** %2, align 8
  %49 = getelementptr inbounds [4 x double]* %48, i64 0
  %50 = getelementptr inbounds [4 x double]* %49, i32 0, i64 0
  store double %47, double* %50, align 8
  %51 = load double* %sinangle, align 8
  %52 = load [4 x double]** %2, align 8
  %53 = getelementptr inbounds [4 x double]* %52, i64 0
  %54 = getelementptr inbounds [4 x double]* %53, i32 0, i64 1
  store double %51, double* %54, align 8
  %55 = load double* %sinangle, align 8
  %56 = fsub double -0.000000e+00, %55
  %57 = load [4 x double]** %2, align 8
  %58 = getelementptr inbounds [4 x double]* %57, i64 1
  %59 = getelementptr inbounds [4 x double]* %58, i32 0, i64 0
  store double %56, double* %59, align 8
  %60 = load double* %cosangle, align 8
  %61 = load [4 x double]** %2, align 8
  %62 = getelementptr inbounds [4 x double]* %61, i64 1
  %63 = getelementptr inbounds [4 x double]* %62, i32 0, i64 1
  store double %60, double* %63, align 8
  br label %67

; <label>:64                                      ; preds = %0
  %65 = load i64* %1, align 8
  %66 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([28 x i8]* @.str.4.290, i32 0, i32 0), i64 %65)
  call void @exit(i32 5)
  unreachable

; <label>:67                                      ; preds = %46, %28, %10
  ret void
}

; Function Attrs: nounwind
declare double @cos(double)

; Function Attrs: nounwind
declare double @sin(double)

; Function Attrs: nounwind uwtable
define internal i8* @LocalMalloc(i64 %n, i8* %msg) {
  %1 = alloca i64, align 8
  %2 = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i64 %n, i64* %1, align 8
  store i8* %msg, i8** %2, align 8
  %3 = load i64* %1, align 8
  %4 = call i8* @malloc(i64 %3)
  store i8* %4, i8** %p, align 8
  %5 = load i8** %p, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %0
  %8 = load i8** @ProgName, align 8
  %9 = load i8** %2, align 8
  %10 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([38 x i8]* @.str.307, i32 0, i32 0), i8* %8, i8* %9)
  call void @exit(i32 -1)
  unreachable

; <label>:11                                      ; preds = %0
  %12 = load i8** %p, align 8
  ret i8* %12
}

; Function Attrs: nounwind uwtable
define internal void @LocalFree(i8* %p) {
  %1 = alloca i8*, align 8
  store i8* %p, i8** %1, align 8
  %2 = load i8** %1, align 8
  %3 = call i32 (i8*, ...) *bitcast (i32 (...)* @free to i32 (i8*, ...)*)(i8* %2)
  ret void
}

declare i32 @free(...)

; Function Attrs: nounwind uwtable
define internal void @GlobalHeapWalk() {
  %curr = alloca %struct.node*, align 8
  %1 = load %struct.gmem** @gm, align 8
  %2 = getelementptr inbounds %struct.gmem* %1, i32 0, i32 11
  %3 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2)
  %4 = load %struct.node** @begmem, align 8
  store %struct.node* %4, %struct.node** %curr, align 8
  %5 = load %struct.gmem** @gm, align 8
  %6 = getelementptr inbounds %struct.gmem* %5, i32 0, i32 5
  %7 = load %struct.node** %6, align 8
  %8 = ptrtoint %struct.node* %7 to i64
  %9 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([22 x i8]* @.str.1.308, i32 0, i32 0), i64 %8)
  %10 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([56 x i8]* @.str.2.309, i32 0, i32 0))
  %11 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([56 x i8]* @.str.3.310, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %42, %0
  %13 = load %struct.node** %curr, align 8
  %14 = load %struct.node** @endmem, align 8
  %15 = icmp ult %struct.node* %13, %14
  br i1 %15, label %16, label %52

; <label>:16                                      ; preds = %12
  %17 = load %struct.node** %curr, align 8
  %18 = ptrtoint %struct.node* %17 to i64
  %19 = load %struct.node** %curr, align 8
  %20 = getelementptr inbounds %struct.node* %19, i32 0, i32 0
  %21 = load %struct.node** %20, align 8
  %22 = ptrtoint %struct.node* %21 to i64
  %23 = load %struct.node** %curr, align 8
  %24 = getelementptr inbounds %struct.node* %23, i32 0, i32 1
  %25 = load i64* %24, align 8
  %26 = load %struct.node** %curr, align 8
  %27 = getelementptr inbounds %struct.node* %26, i32 0, i32 2
  %28 = load i64* %27, align 8
  %29 = icmp ne i64 %28, 0
  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8]* @.str.5.311, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str.6.312, i32 0, i32 0)
  %31 = load %struct.node** %curr, align 8
  %32 = getelementptr inbounds %struct.node* %31, i32 0, i32 3
  %33 = load i64* %32, align 8
  %34 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([35 x i8]* @.str.4.313, i32 0, i32 0), i64 %18, i64 %22, i64 %25, i8* %30, i64 %33)
  %35 = load %struct.node** %curr, align 8
  %36 = getelementptr inbounds %struct.node* %35, i32 0, i32 3
  %37 = load i64* %36, align 8
  %38 = icmp ne i64 %37, 1437226410
  br i1 %38, label %39, label %42

; <label>:39                                      ; preds = %16
  %40 = load %struct._IO_FILE** @stderr, align 8
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([43 x i8]* @.str.7.314, i32 0, i32 0))
  call void @exit(i32 1)
  unreachable

; <label>:42                                      ; preds = %16
  %43 = load %struct.node** %curr, align 8
  %44 = bitcast %struct.node* %43 to i8*
  %45 = load %struct.node** %curr, align 8
  %46 = getelementptr inbounds %struct.node* %45, i32 0, i32 1
  %47 = load i64* %46, align 8
  %48 = load i64* @nodesize, align 8
  %49 = add i64 %47, %48
  %50 = getelementptr inbounds i8* %44, i64 %49
  %51 = bitcast i8* %50 to %struct.node*
  store %struct.node* %51, %struct.node** %curr, align 8
  br label %12

; <label>:52                                      ; preds = %12
  %53 = load %struct.gmem** @gm, align 8
  %54 = getelementptr inbounds %struct.gmem* %53, i32 0, i32 11
  %55 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %54)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @GlobalHeapInit(i64 %size) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %i = alloca i64, align 8
  %ptr = alloca i8*, align 8
  store i64 %size, i64* %2, align 8
  %3 = load i64* %2, align 8
  %4 = add i64 %3, 7
  %5 = lshr i64 %4, 3
  %6 = shl i64 %5, 3
  store i64 %6, i64* %2, align 8
  %7 = load i64* %2, align 8
  %8 = call i8* @malloc(i64 %7)
  %9 = bitcast i8* %8 to %struct.node*
  %10 = load %struct.gmem** @gm, align 8
  %11 = getelementptr inbounds %struct.gmem* %10, i32 0, i32 5
  store %struct.node* %9, %struct.node** %11, align 8
  %12 = load %struct.gmem** @gm, align 8
  %13 = getelementptr inbounds %struct.gmem* %12, i32 0, i32 5
  %14 = load %struct.node** %13, align 8
  %15 = icmp ne %struct.node* %14, null
  br i1 %15, label %17, label %16

; <label>:16                                      ; preds = %0
  store i64 0, i64* %1
  br label %47

; <label>:17                                      ; preds = %0
  store i64 32, i64* @nodesize, align 8
  %18 = load %struct.gmem** @gm, align 8
  %19 = getelementptr inbounds %struct.gmem* %18, i32 0, i32 5
  %20 = load %struct.node** %19, align 8
  store %struct.node* %20, %struct.node** @begmem, align 8
  %21 = load %struct.gmem** @gm, align 8
  %22 = getelementptr inbounds %struct.gmem* %21, i32 0, i32 5
  %23 = load %struct.node** %22, align 8
  %24 = bitcast %struct.node* %23 to i8*
  %25 = load i64* %2, align 8
  %26 = getelementptr inbounds i8* %24, i64 %25
  %27 = bitcast i8* %26 to %struct.node*
  store %struct.node* %27, %struct.node** @endmem, align 8
  %28 = load i64* %2, align 8
  %29 = load i64* @nodesize, align 8
  %30 = sub i64 %28, %29
  %31 = load %struct.gmem** @gm, align 8
  %32 = getelementptr inbounds %struct.gmem* %31, i32 0, i32 5
  %33 = load %struct.node** %32, align 8
  %34 = getelementptr inbounds %struct.node* %33, i32 0, i32 1
  store i64 %30, i64* %34, align 8
  %35 = load %struct.gmem** @gm, align 8
  %36 = getelementptr inbounds %struct.gmem* %35, i32 0, i32 5
  %37 = load %struct.node** %36, align 8
  %38 = getelementptr inbounds %struct.node* %37, i32 0, i32 0
  store %struct.node* null, %struct.node** %38, align 8
  %39 = load %struct.gmem** @gm, align 8
  %40 = getelementptr inbounds %struct.gmem* %39, i32 0, i32 5
  %41 = load %struct.node** %40, align 8
  %42 = getelementptr inbounds %struct.node* %41, i32 0, i32 2
  store i64 1, i64* %42, align 8
  %43 = load %struct.gmem** @gm, align 8
  %44 = getelementptr inbounds %struct.gmem* %43, i32 0, i32 5
  %45 = load %struct.node** %44, align 8
  %46 = getelementptr inbounds %struct.node* %45, i32 0, i32 3
  store i64 1437226410, i64* %46, align 8
  store i64 1, i64* %1
  br label %47

; <label>:47                                      ; preds = %17, %16
  %48 = load i64* %1
  ret i64 %48
}

; Function Attrs: nounwind uwtable
define internal i8* @GlobalMalloc(i64 %size, i8* %msg) {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %prev = alloca %struct.node*, align 8
  %curr = alloca %struct.node*, align 8
  %next = alloca %struct.node*, align 8
  store i64 %size, i64* %2, align 8
  store i8* %msg, i8** %3, align 8
  %4 = load i64* %2, align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0
  store i8* null, i8** %1
  br label %124

; <label>:7                                       ; preds = %0
  %8 = load %struct.gmem** @gm, align 8
  %9 = getelementptr inbounds %struct.gmem* %8, i32 0, i32 11
  %10 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %9)
  store %struct.node* null, %struct.node** %prev, align 8
  %11 = load %struct.gmem** @gm, align 8
  %12 = getelementptr inbounds %struct.gmem* %11, i32 0, i32 5
  %13 = load %struct.node** %12, align 8
  store %struct.node* %13, %struct.node** %curr, align 8
  %14 = load i64* %2, align 8
  %15 = add i64 %14, 7
  %16 = lshr i64 %15, 3
  %17 = shl i64 %16, 3
  store i64 %17, i64* %2, align 8
  br label %18

; <label>:18                                      ; preds = %45, %7
  %19 = load %struct.node** %curr, align 8
  %20 = icmp ne %struct.node* %19, null
  br i1 %20, label %21, label %27

; <label>:21                                      ; preds = %18
  %22 = load %struct.node** %curr, align 8
  %23 = getelementptr inbounds %struct.node* %22, i32 0, i32 1
  %24 = load i64* %23, align 8
  %25 = load i64* %2, align 8
  %26 = icmp ult i64 %24, %25
  br label %27

; <label>:27                                      ; preds = %21, %18
  %28 = phi i1 [ false, %18 ], [ %26, %21 ]
  br i1 %28, label %29, label %50

; <label>:29                                      ; preds = %27
  %30 = load %struct.node** %curr, align 8
  %31 = getelementptr inbounds %struct.node* %30, i32 0, i32 3
  %32 = load i64* %31, align 8
  %33 = icmp ne i64 %32, 1437226410
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %29
  %35 = load %struct._IO_FILE** @stderr, align 8
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([41 x i8]* @.str.8.315, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:37                                      ; preds = %29
  %38 = load %struct.node** %curr, align 8
  %39 = getelementptr inbounds %struct.node* %38, i32 0, i32 2
  %40 = load i64* %39, align 8
  %41 = icmp ne i64 %40, 1
  br i1 %41, label %42, label %45

; <label>:42                                      ; preds = %37
  %43 = load %struct._IO_FILE** @stderr, align 8
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([53 x i8]* @.str.9.316, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:45                                      ; preds = %37
  %46 = load %struct.node** %curr, align 8
  store %struct.node* %46, %struct.node** %prev, align 8
  %47 = load %struct.node** %curr, align 8
  %48 = getelementptr inbounds %struct.node* %47, i32 0, i32 0
  %49 = load %struct.node** %48, align 8
  store %struct.node* %49, %struct.node** %curr, align 8
  br label %18

; <label>:50                                      ; preds = %27
  %51 = load %struct.node** %curr, align 8
  %52 = icmp ne %struct.node* %51, null
  br i1 %52, label %58, label %53

; <label>:53                                      ; preds = %50
  %54 = load %struct._IO_FILE** @stderr, align 8
  %55 = load i8** @ProgName, align 8
  %56 = load i8** %3, align 8
  %57 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([39 x i8]* @.str.10.317, i32 0, i32 0), i8* %55, i8* %56)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:58                                      ; preds = %50
  %59 = load %struct.node** %curr, align 8
  %60 = getelementptr inbounds %struct.node* %59, i32 0, i32 1
  %61 = load i64* %60, align 8
  %62 = load i64* %2, align 8
  %63 = sub i64 %61, %62
  %64 = icmp ugt i64 %63, 48
  br i1 %64, label %65, label %94

; <label>:65                                      ; preds = %58
  %66 = load %struct.node** %curr, align 8
  %67 = bitcast %struct.node* %66 to i8*
  %68 = load i64* @nodesize, align 8
  %69 = load i64* %2, align 8
  %70 = add i64 %68, %69
  %71 = getelementptr inbounds i8* %67, i64 %70
  %72 = bitcast i8* %71 to %struct.node*
  store %struct.node* %72, %struct.node** %next, align 8
  %73 = load %struct.node** %curr, align 8
  %74 = getelementptr inbounds %struct.node* %73, i32 0, i32 1
  %75 = load i64* %74, align 8
  %76 = load i64* @nodesize, align 8
  %77 = sub i64 %75, %76
  %78 = load i64* %2, align 8
  %79 = sub i64 %77, %78
  %80 = load %struct.node** %next, align 8
  %81 = getelementptr inbounds %struct.node* %80, i32 0, i32 1
  store i64 %79, i64* %81, align 8
  %82 = load %struct.node** %curr, align 8
  %83 = getelementptr inbounds %struct.node* %82, i32 0, i32 0
  %84 = load %struct.node** %83, align 8
  %85 = load %struct.node** %next, align 8
  %86 = getelementptr inbounds %struct.node* %85, i32 0, i32 0
  store %struct.node* %84, %struct.node** %86, align 8
  %87 = load %struct.node** %next, align 8
  %88 = getelementptr inbounds %struct.node* %87, i32 0, i32 2
  store i64 1, i64* %88, align 8
  %89 = load %struct.node** %next, align 8
  %90 = getelementptr inbounds %struct.node* %89, i32 0, i32 3
  store i64 1437226410, i64* %90, align 8
  %91 = load i64* %2, align 8
  %92 = load %struct.node** %curr, align 8
  %93 = getelementptr inbounds %struct.node* %92, i32 0, i32 1
  store i64 %91, i64* %93, align 8
  br label %98

; <label>:94                                      ; preds = %58
  %95 = load %struct.node** %curr, align 8
  %96 = getelementptr inbounds %struct.node* %95, i32 0, i32 0
  %97 = load %struct.node** %96, align 8
  store %struct.node* %97, %struct.node** %next, align 8
  br label %98

; <label>:98                                      ; preds = %94, %65
  %99 = load %struct.node** %prev, align 8
  %100 = icmp ne %struct.node* %99, null
  br i1 %100, label %105, label %101

; <label>:101                                     ; preds = %98
  %102 = load %struct.node** %next, align 8
  %103 = load %struct.gmem** @gm, align 8
  %104 = getelementptr inbounds %struct.gmem* %103, i32 0, i32 5
  store %struct.node* %102, %struct.node** %104, align 8
  br label %109

; <label>:105                                     ; preds = %98
  %106 = load %struct.node** %next, align 8
  %107 = load %struct.node** %prev, align 8
  %108 = getelementptr inbounds %struct.node* %107, i32 0, i32 0
  store %struct.node* %106, %struct.node** %108, align 8
  br label %109

; <label>:109                                     ; preds = %105, %101
  %110 = load %struct.gmem** @gm, align 8
  %111 = getelementptr inbounds %struct.gmem* %110, i32 0, i32 11
  %112 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %111)
  %113 = load %struct.node** %curr, align 8
  %114 = getelementptr inbounds %struct.node* %113, i32 0, i32 0
  store %struct.node* null, %struct.node** %114, align 8
  %115 = load %struct.node** %curr, align 8
  %116 = getelementptr inbounds %struct.node* %115, i32 0, i32 2
  store i64 0, i64* %116, align 8
  %117 = load %struct.node** %curr, align 8
  %118 = bitcast %struct.node* %117 to i8*
  %119 = load i64* @nodesize, align 8
  %120 = getelementptr inbounds i8* %118, i64 %119
  %121 = bitcast i8* %120 to %struct.node*
  store %struct.node* %121, %struct.node** %curr, align 8
  %122 = load %struct.node** %curr, align 8
  %123 = bitcast %struct.node* %122 to i8*
  store i8* %123, i8** %1
  br label %124

; <label>:124                                     ; preds = %109, %6
  %125 = load i8** %1
  ret i8* %125

UnifiedUnreachableBlock:                          ; preds = %53, %42, %34
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i8* @GlobalCalloc(i64 %n, i64 %size) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %p = alloca i64*, align 8
  %q = alloca i8*, align 8
  store i64 %n, i64* %1, align 8
  store i64 %size, i64* %2, align 8
  %3 = load i64* %1, align 8
  %4 = load i64* %2, align 8
  %5 = mul i64 %3, %4
  %6 = add i64 %5, 7
  %7 = lshr i64 %6, 3
  %8 = shl i64 %7, 3
  store i64 %8, i64* %nbytes, align 8
  %9 = load i64* %nbytes, align 8
  %10 = call i8* @GlobalMalloc(i64 %9, i8* getelementptr inbounds ([13 x i8]* @.str.11.318, i32 0, i32 0))
  store i8* %10, i8** %q, align 8
  %11 = bitcast i8* %10 to i64*
  store i64* %11, i64** %p, align 8
  %12 = load i64* %nbytes, align 8
  %13 = lshr i64 %12, 2
  store i64 %13, i64* %nbytes, align 8
  br label %14

; <label>:14                                      ; preds = %18, %0
  %15 = load i64* %nbytes, align 8
  %16 = add i64 %15, -1
  store i64 %16, i64* %nbytes, align 8
  %17 = icmp ne i64 %15, 0
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %14
  %19 = load i64** %p, align 8
  %20 = getelementptr inbounds i64* %19, i32 1
  store i64* %20, i64** %p, align 8
  store i64 0, i64* %19, align 8
  br label %14

; <label>:21                                      ; preds = %14
  %22 = load i8** %q, align 8
  ret i8* %22
}

; Function Attrs: nounwind uwtable
define internal i8* @GlobalRealloc(i8* %p, i64 %size) {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %oldsize = alloca i64, align 8
  %newsize = alloca i64, align 8
  %totsize = alloca i64, align 8
  %q = alloca i8*, align 8
  %r = alloca i64*, align 8
  %s = alloca i64*, align 8
  %pn = alloca %struct.node*, align 8
  %prev = alloca %struct.node*, align 8
  %curr = alloca %struct.node*, align 8
  %next = alloca %struct.node*, align 8
  %node = alloca %struct.node*, align 8
  store i8* %p, i8** %2, align 8
  store i64 %size, i64* %3, align 8
  %4 = load i64* %3, align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %0
  %7 = load i8** %2, align 8
  call void @GlobalFree(i8* %7)
  store i8* null, i8** %1
  br label %241

; <label>:8                                       ; preds = %0
  %9 = load i8** %2, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %8
  %12 = load i64* %3, align 8
  %13 = call i8* @GlobalMalloc(i64 %12, i8* getelementptr inbounds ([14 x i8]* @.str.12.319, i32 0, i32 0))
  store i8* %13, i8** %1
  br label %241

; <label>:14                                      ; preds = %8
  %15 = load i8** %2, align 8
  %16 = load i64* @nodesize, align 8
  %17 = sub i64 0, %16
  %18 = getelementptr inbounds i8* %15, i64 %17
  %19 = bitcast i8* %18 to %struct.node*
  store %struct.node* %19, %struct.node** %pn, align 8
  %20 = load %struct.node** %pn, align 8
  %21 = getelementptr inbounds %struct.node* %20, i32 0, i32 3
  %22 = load i64* %21, align 8
  %23 = icmp ne i64 %22, 1437226410
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %14
  %25 = load %struct._IO_FILE** @stderr, align 8
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([65 x i8]* @.str.13.320, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:27                                      ; preds = %14
  %28 = load %struct.node** %pn, align 8
  %29 = getelementptr inbounds %struct.node* %28, i32 0, i32 2
  %30 = load i64* %29, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %27
  %33 = load %struct._IO_FILE** @stderr, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([58 x i8]* @.str.14.321, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:35                                      ; preds = %27
  %36 = load i64* %3, align 8
  %37 = add i64 %36, 7
  %38 = lshr i64 %37, 3
  %39 = shl i64 %38, 3
  store i64 %39, i64* %newsize, align 8
  %40 = load %struct.node** %pn, align 8
  %41 = getelementptr inbounds %struct.node* %40, i32 0, i32 1
  %42 = load i64* %41, align 8
  store i64 %42, i64* %oldsize, align 8
  %43 = load i64* %newsize, align 8
  %44 = load i64* %oldsize, align 8
  %45 = icmp ule i64 %43, %44
  br i1 %45, label %46, label %82

; <label>:46                                      ; preds = %35
  %47 = load i64* %oldsize, align 8
  %48 = load i64* %newsize, align 8
  %49 = sub i64 %47, %48
  %50 = icmp ult i64 %49, 48
  br i1 %50, label %51, label %53

; <label>:51                                      ; preds = %46
  %52 = load i8** %2, align 8
  store i8* %52, i8** %1
  br label %241

; <label>:53                                      ; preds = %46
  %54 = load i64* %newsize, align 8
  %55 = load %struct.node** %pn, align 8
  %56 = getelementptr inbounds %struct.node* %55, i32 0, i32 1
  store i64 %54, i64* %56, align 8
  %57 = load i8** %2, align 8
  %58 = load i64* %newsize, align 8
  %59 = getelementptr inbounds i8* %57, i64 %58
  %60 = bitcast i8* %59 to %struct.node*
  store %struct.node* %60, %struct.node** %next, align 8
  %61 = load i64* %oldsize, align 8
  %62 = load i64* @nodesize, align 8
  %63 = sub i64 %61, %62
  %64 = load i64* %newsize, align 8
  %65 = sub i64 %63, %64
  %66 = load %struct.node** %next, align 8
  %67 = getelementptr inbounds %struct.node* %66, i32 0, i32 1
  store i64 %65, i64* %67, align 8
  %68 = load %struct.node** %next, align 8
  %69 = getelementptr inbounds %struct.node* %68, i32 0, i32 0
  store %struct.node* null, %struct.node** %69, align 8
  %70 = load %struct.node** %next, align 8
  %71 = getelementptr inbounds %struct.node* %70, i32 0, i32 2
  store i64 0, i64* %71, align 8
  %72 = load %struct.node** %next, align 8
  %73 = getelementptr inbounds %struct.node* %72, i32 0, i32 3
  store i64 1437226410, i64* %73, align 8
  %74 = load %struct.node** %next, align 8
  %75 = bitcast %struct.node* %74 to i8*
  %76 = load i64* @nodesize, align 8
  %77 = getelementptr inbounds i8* %75, i64 %76
  %78 = bitcast i8* %77 to %struct.node*
  store %struct.node* %78, %struct.node** %next, align 8
  %79 = load %struct.node** %next, align 8
  %80 = bitcast %struct.node* %79 to i8*
  call void @GlobalFree(i8* %80)
  %81 = load i8** %2, align 8
  store i8* %81, i8** %1
  br label %241

; <label>:82                                      ; preds = %35
  %83 = load i8** %2, align 8
  %84 = load i64* %oldsize, align 8
  %85 = getelementptr inbounds i8* %83, i64 %84
  %86 = bitcast i8* %85 to %struct.node*
  store %struct.node* %86, %struct.node** %next, align 8
  %87 = load i64* %oldsize, align 8
  %88 = load i64* @nodesize, align 8
  %89 = add i64 %87, %88
  %90 = load %struct.node** %next, align 8
  %91 = getelementptr inbounds %struct.node* %90, i32 0, i32 1
  %92 = load i64* %91, align 8
  %93 = add i64 %89, %92
  store i64 %93, i64* %totsize, align 8
  %94 = load %struct.gmem** @gm, align 8
  %95 = getelementptr inbounds %struct.gmem* %94, i32 0, i32 11
  %96 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %95)
  %97 = load %struct.node** %next, align 8
  %98 = load %struct.node** @endmem, align 8
  %99 = icmp ult %struct.node* %97, %98
  br i1 %99, label %100, label %213

; <label>:100                                     ; preds = %82
  %101 = load %struct.node** %next, align 8
  %102 = getelementptr inbounds %struct.node* %101, i32 0, i32 2
  %103 = load i64* %102, align 8
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %213

; <label>:105                                     ; preds = %100
  %106 = load i64* %totsize, align 8
  %107 = load i64* %newsize, align 8
  %108 = icmp uge i64 %106, %107
  br i1 %108, label %109, label %213

; <label>:109                                     ; preds = %105
  store %struct.node* null, %struct.node** %prev, align 8
  %110 = load %struct.gmem** @gm, align 8
  %111 = getelementptr inbounds %struct.gmem* %110, i32 0, i32 5
  %112 = load %struct.node** %111, align 8
  store %struct.node* %112, %struct.node** %curr, align 8
  br label %113

; <label>:113                                     ; preds = %126, %109
  %114 = load %struct.node** %curr, align 8
  %115 = icmp ne %struct.node* %114, null
  br i1 %115, label %116, label %124

; <label>:116                                     ; preds = %113
  %117 = load %struct.node** %curr, align 8
  %118 = load %struct.node** %next, align 8
  %119 = icmp ult %struct.node* %117, %118
  br i1 %119, label %120, label %124

; <label>:120                                     ; preds = %116
  %121 = load %struct.node** %curr, align 8
  %122 = load %struct.node** @endmem, align 8
  %123 = icmp ult %struct.node* %121, %122
  br label %124

; <label>:124                                     ; preds = %120, %116, %113
  %125 = phi i1 [ false, %116 ], [ false, %113 ], [ %123, %120 ]
  br i1 %125, label %126, label %131

; <label>:126                                     ; preds = %124
  %127 = load %struct.node** %curr, align 8
  store %struct.node* %127, %struct.node** %prev, align 8
  %128 = load %struct.node** %curr, align 8
  %129 = getelementptr inbounds %struct.node* %128, i32 0, i32 0
  %130 = load %struct.node** %129, align 8
  store %struct.node* %130, %struct.node** %curr, align 8
  br label %113

; <label>:131                                     ; preds = %124
  %132 = load %struct.node** %curr, align 8
  %133 = load %struct.node** %next, align 8
  %134 = icmp ne %struct.node* %132, %133
  br i1 %134, label %135, label %138

; <label>:135                                     ; preds = %131
  %136 = load %struct._IO_FILE** @stderr, align 8
  %137 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %136, i8* getelementptr inbounds ([55 x i8]* @.str.15.322, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:138                                     ; preds = %131
  %139 = load i64* %totsize, align 8
  %140 = load i64* %newsize, align 8
  %141 = sub i64 %139, %140
  %142 = icmp ult i64 %141, 48
  br i1 %142, label %143, label %170

; <label>:143                                     ; preds = %138
  %144 = load %struct.node** %prev, align 8
  %145 = icmp ne %struct.node* %144, null
  br i1 %145, label %152, label %146

; <label>:146                                     ; preds = %143
  %147 = load %struct.node** %next, align 8
  %148 = getelementptr inbounds %struct.node* %147, i32 0, i32 0
  %149 = load %struct.node** %148, align 8
  %150 = load %struct.gmem** @gm, align 8
  %151 = getelementptr inbounds %struct.gmem* %150, i32 0, i32 5
  store %struct.node* %149, %struct.node** %151, align 8
  br label %158

; <label>:152                                     ; preds = %143
  %153 = load %struct.node** %next, align 8
  %154 = getelementptr inbounds %struct.node* %153, i32 0, i32 0
  %155 = load %struct.node** %154, align 8
  %156 = load %struct.node** %prev, align 8
  %157 = getelementptr inbounds %struct.node* %156, i32 0, i32 0
  store %struct.node* %155, %struct.node** %157, align 8
  br label %158

; <label>:158                                     ; preds = %152, %146
  %159 = load %struct.node** %next, align 8
  %160 = getelementptr inbounds %struct.node* %159, i32 0, i32 0
  store %struct.node* null, %struct.node** %160, align 8
  %161 = load %struct.node** %next, align 8
  %162 = getelementptr inbounds %struct.node* %161, i32 0, i32 2
  store i64 0, i64* %162, align 8
  %163 = load i64* %totsize, align 8
  %164 = load %struct.node** %pn, align 8
  %165 = getelementptr inbounds %struct.node* %164, i32 0, i32 1
  store i64 %163, i64* %165, align 8
  %166 = load %struct.gmem** @gm, align 8
  %167 = getelementptr inbounds %struct.gmem* %166, i32 0, i32 11
  %168 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %167)
  %169 = load i8** %2, align 8
  store i8* %169, i8** %1
  br label %241

; <label>:170                                     ; preds = %138
  %171 = load i8** %2, align 8
  %172 = load i64* %newsize, align 8
  %173 = getelementptr inbounds i8* %171, i64 %172
  %174 = bitcast i8* %173 to %struct.node*
  store %struct.node* %174, %struct.node** %node, align 8
  %175 = load %struct.node** %next, align 8
  %176 = getelementptr inbounds %struct.node* %175, i32 0, i32 0
  %177 = load %struct.node** %176, align 8
  %178 = load %struct.node** %node, align 8
  %179 = getelementptr inbounds %struct.node* %178, i32 0, i32 0
  store %struct.node* %177, %struct.node** %179, align 8
  %180 = load i64* %totsize, align 8
  %181 = load i64* @nodesize, align 8
  %182 = sub i64 %180, %181
  %183 = load i64* %newsize, align 8
  %184 = sub i64 %182, %183
  %185 = load %struct.node** %node, align 8
  %186 = getelementptr inbounds %struct.node* %185, i32 0, i32 1
  store i64 %184, i64* %186, align 8
  %187 = load %struct.node** %node, align 8
  %188 = getelementptr inbounds %struct.node* %187, i32 0, i32 2
  store i64 1, i64* %188, align 8
  %189 = load %struct.node** %node, align 8
  %190 = getelementptr inbounds %struct.node* %189, i32 0, i32 3
  store i64 1437226410, i64* %190, align 8
  %191 = load %struct.node** %prev, align 8
  %192 = icmp ne %struct.node* %191, null
  br i1 %192, label %197, label %193

; <label>:193                                     ; preds = %170
  %194 = load %struct.node** %node, align 8
  %195 = load %struct.gmem** @gm, align 8
  %196 = getelementptr inbounds %struct.gmem* %195, i32 0, i32 5
  store %struct.node* %194, %struct.node** %196, align 8
  br label %201

; <label>:197                                     ; preds = %170
  %198 = load %struct.node** %node, align 8
  %199 = load %struct.node** %prev, align 8
  %200 = getelementptr inbounds %struct.node* %199, i32 0, i32 0
  store %struct.node* %198, %struct.node** %200, align 8
  br label %201

; <label>:201                                     ; preds = %197, %193
  %202 = load %struct.node** %next, align 8
  %203 = getelementptr inbounds %struct.node* %202, i32 0, i32 0
  store %struct.node* null, %struct.node** %203, align 8
  %204 = load %struct.node** %next, align 8
  %205 = getelementptr inbounds %struct.node* %204, i32 0, i32 2
  store i64 0, i64* %205, align 8
  %206 = load i64* %newsize, align 8
  %207 = load %struct.node** %pn, align 8
  %208 = getelementptr inbounds %struct.node* %207, i32 0, i32 1
  store i64 %206, i64* %208, align 8
  %209 = load %struct.gmem** @gm, align 8
  %210 = getelementptr inbounds %struct.gmem* %209, i32 0, i32 11
  %211 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %210)
  %212 = load i8** %2, align 8
  store i8* %212, i8** %1
  br label %241

; <label>:213                                     ; preds = %105, %100, %82
  %214 = load %struct.gmem** @gm, align 8
  %215 = getelementptr inbounds %struct.gmem* %214, i32 0, i32 11
  %216 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %215)
  %217 = load i64* %newsize, align 8
  %218 = call i8* @GlobalMalloc(i64 %217, i8* getelementptr inbounds ([14 x i8]* @.str.12.319, i32 0, i32 0))
  store i8* %218, i8** %q, align 8
  %219 = bitcast i8* %218 to i64*
  store i64* %219, i64** %s, align 8
  %220 = load i8** %q, align 8
  %221 = icmp ne i8* %220, null
  br i1 %221, label %223, label %222

; <label>:222                                     ; preds = %213
  store i8* null, i8** %1
  br label %241

; <label>:223                                     ; preds = %213
  %224 = load i8** %2, align 8
  %225 = bitcast i8* %224 to i64*
  store i64* %225, i64** %r, align 8
  %226 = load i64* %oldsize, align 8
  %227 = lshr i64 %226, 2
  store i64 %227, i64* %oldsize, align 8
  br label %228

; <label>:228                                     ; preds = %232, %223
  %229 = load i64* %oldsize, align 8
  %230 = add i64 %229, -1
  store i64 %230, i64* %oldsize, align 8
  %231 = icmp ne i64 %229, 0
  br i1 %231, label %232, label %238

; <label>:232                                     ; preds = %228
  %233 = load i64** %r, align 8
  %234 = getelementptr inbounds i64* %233, i32 1
  store i64* %234, i64** %r, align 8
  %235 = load i64* %233, align 8
  %236 = load i64** %s, align 8
  %237 = getelementptr inbounds i64* %236, i32 1
  store i64* %237, i64** %s, align 8
  store i64 %235, i64* %236, align 8
  br label %228

; <label>:238                                     ; preds = %228
  %239 = load i8** %2, align 8
  call void @GlobalFree(i8* %239)
  %240 = load i8** %q, align 8
  store i8* %240, i8** %1
  br label %241

; <label>:241                                     ; preds = %238, %222, %201, %158, %53, %51, %11, %6
  %242 = load i8** %1
  ret i8* %242

UnifiedUnreachableBlock:                          ; preds = %135, %32, %24
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @GlobalFree(i8* %p) {
  %1 = alloca i8*, align 8
  %pcom = alloca i64, align 8
  %ncom = alloca i64, align 8
  %pn = alloca %struct.node*, align 8
  %prev = alloca %struct.node*, align 8
  %curr = alloca %struct.node*, align 8
  %next = alloca %struct.node*, align 8
  store i8* %p, i8** %1, align 8
  %2 = load %struct.node** @begmem, align 8
  %3 = icmp ne %struct.node* %2, null
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  br label %336

; <label>:5                                       ; preds = %0
  %6 = load i8** %1, align 8
  %7 = load i64* @nodesize, align 8
  %8 = sub i64 0, %7
  %9 = getelementptr inbounds i8* %6, i64 %8
  %10 = bitcast i8* %9 to %struct.node*
  store %struct.node* %10, %struct.node** %pn, align 8
  %11 = load %struct.node** %pn, align 8
  %12 = getelementptr inbounds %struct.node* %11, i32 0, i32 3
  %13 = load i64* %12, align 8
  %14 = icmp ne i64 %13, 1437226410
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %5
  %16 = load %struct._IO_FILE** @stderr, align 8
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([59 x i8]* @.str.16.323, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:18                                      ; preds = %5
  %19 = load %struct.node** %pn, align 8
  %20 = getelementptr inbounds %struct.node* %19, i32 0, i32 2
  %21 = load i64* %20, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %18
  %24 = load %struct._IO_FILE** @stderr, align 8
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([49 x i8]* @.str.17.324, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:26                                      ; preds = %18
  store i64 0, i64* %pcom, align 8
  store %struct.node* null, %struct.node** %prev, align 8
  %27 = load %struct.gmem** @gm, align 8
  %28 = getelementptr inbounds %struct.gmem* %27, i32 0, i32 11
  %29 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %28)
  %30 = load %struct.gmem** @gm, align 8
  %31 = getelementptr inbounds %struct.gmem* %30, i32 0, i32 5
  %32 = load %struct.node** %31, align 8
  %33 = icmp ne %struct.node* %32, null
  br i1 %33, label %34, label %93

; <label>:34                                      ; preds = %26
  %35 = load %struct.gmem** @gm, align 8
  %36 = getelementptr inbounds %struct.gmem* %35, i32 0, i32 5
  %37 = load %struct.node** %36, align 8
  store %struct.node* %37, %struct.node** %curr, align 8
  br label %38

; <label>:38                                      ; preds = %64, %34
  %39 = load %struct.node** %curr, align 8
  %40 = load %struct.node** %pn, align 8
  %41 = icmp ult %struct.node* %39, %40
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %38
  %43 = load %struct.node** %curr, align 8
  %44 = load %struct.node** @endmem, align 8
  %45 = icmp ult %struct.node* %43, %44
  br label %46

; <label>:46                                      ; preds = %42, %38
  %47 = phi i1 [ false, %38 ], [ %45, %42 ]
  br i1 %47, label %48, label %74

; <label>:48                                      ; preds = %46
  %49 = load %struct.node** %curr, align 8
  %50 = getelementptr inbounds %struct.node* %49, i32 0, i32 3
  %51 = load i64* %50, align 8
  %52 = icmp ne i64 %51, 1437226410
  br i1 %52, label %53, label %56

; <label>:53                                      ; preds = %48
  %54 = load %struct._IO_FILE** @stderr, align 8
  %55 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([48 x i8]* @.str.18.325, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:56                                      ; preds = %48
  %57 = load %struct.node** %curr, align 8
  %58 = getelementptr inbounds %struct.node* %57, i32 0, i32 2
  %59 = load i64* %58, align 8
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %56
  %62 = load %struct.node** %curr, align 8
  store %struct.node* %62, %struct.node** %prev, align 8
  store i64 1, i64* %pcom, align 8
  br label %64

; <label>:63                                      ; preds = %56
  store i64 0, i64* %pcom, align 8
  br label %64

; <label>:64                                      ; preds = %63, %61
  %65 = load %struct.node** %curr, align 8
  %66 = bitcast %struct.node* %65 to i8*
  %67 = load %struct.node** %curr, align 8
  %68 = getelementptr inbounds %struct.node* %67, i32 0, i32 1
  %69 = load i64* %68, align 8
  %70 = load i64* @nodesize, align 8
  %71 = add i64 %69, %70
  %72 = getelementptr inbounds i8* %66, i64 %71
  %73 = bitcast i8* %72 to %struct.node*
  store %struct.node* %73, %struct.node** %curr, align 8
  br label %38

; <label>:74                                      ; preds = %46
  %75 = load %struct.node** %curr, align 8
  %76 = load %struct.node** @endmem, align 8
  %77 = icmp uge %struct.node* %75, %76
  br i1 %77, label %78, label %92

; <label>:78                                      ; preds = %74
  %79 = load %struct._IO_FILE** @stdout, align 8
  %80 = load %struct.gmem** @gm, align 8
  %81 = getelementptr inbounds %struct.gmem* %80, i32 0, i32 5
  %82 = load %struct.node** %81, align 8
  %83 = load %struct.node** %curr, align 8
  %84 = load %struct.node** %curr, align 8
  %85 = getelementptr inbounds %struct.node* %84, i32 0, i32 1
  %86 = load i64* %85, align 8
  %87 = load %struct.node** %pn, align 8
  %88 = load %struct.node** @endmem, align 8
  %89 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([74 x i8]* @.str.19.326, i32 0, i32 0), %struct.node* %82, %struct.node* %83, i64 %86, %struct.node* %87, %struct.node* %88)
  %90 = load %struct._IO_FILE** @stderr, align 8
  %91 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([63 x i8]* @.str.20.327, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:92                                      ; preds = %74
  br label %93

; <label>:93                                      ; preds = %92, %26
  store i64 1, i64* %ncom, align 8
  store %struct.node* null, %struct.node** %next, align 8
  %94 = load %struct.node** %pn, align 8
  %95 = bitcast %struct.node* %94 to i8*
  %96 = load %struct.node** %pn, align 8
  %97 = getelementptr inbounds %struct.node* %96, i32 0, i32 1
  %98 = load i64* %97, align 8
  %99 = load i64* @nodesize, align 8
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8* %95, i64 %100
  %102 = bitcast i8* %101 to %struct.node*
  store %struct.node* %102, %struct.node** %curr, align 8
  br label %103

; <label>:103                                     ; preds = %128, %93
  %104 = load %struct.node** %next, align 8
  %105 = icmp ne %struct.node* %104, null
  br i1 %105, label %110, label %106

; <label>:106                                     ; preds = %103
  %107 = load %struct.node** %curr, align 8
  %108 = load %struct.node** @endmem, align 8
  %109 = icmp ult %struct.node* %107, %108
  br label %110

; <label>:110                                     ; preds = %106, %103
  %111 = phi i1 [ false, %103 ], [ %109, %106 ]
  br i1 %111, label %112, label %138

; <label>:112                                     ; preds = %110
  %113 = load %struct.node** %curr, align 8
  %114 = getelementptr inbounds %struct.node* %113, i32 0, i32 3
  %115 = load i64* %114, align 8
  %116 = icmp ne i64 %115, 1437226410
  br i1 %116, label %117, label %120

; <label>:117                                     ; preds = %112
  %118 = load %struct._IO_FILE** @stderr, align 8
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %118, i8* getelementptr inbounds ([44 x i8]* @.str.21.328, i32 0, i32 0))
  call void @exit(i32 1)
  br label %UnifiedUnreachableBlock

; <label>:120                                     ; preds = %112
  %121 = load %struct.node** %curr, align 8
  %122 = getelementptr inbounds %struct.node* %121, i32 0, i32 2
  %123 = load i64* %122, align 8
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %127

; <label>:125                                     ; preds = %120
  %126 = load %struct.node** %curr, align 8
  store %struct.node* %126, %struct.node** %next, align 8
  br label %128

; <label>:127                                     ; preds = %120
  store i64 0, i64* %ncom, align 8
  br label %128

; <label>:128                                     ; preds = %127, %125
  %129 = load %struct.node** %curr, align 8
  %130 = bitcast %struct.node* %129 to i8*
  %131 = load %struct.node** %curr, align 8
  %132 = getelementptr inbounds %struct.node* %131, i32 0, i32 1
  %133 = load i64* %132, align 8
  %134 = load i64* @nodesize, align 8
  %135 = add i64 %133, %134
  %136 = getelementptr inbounds i8* %130, i64 %135
  %137 = bitcast i8* %136 to %struct.node*
  store %struct.node* %137, %struct.node** %curr, align 8
  br label %103

; <label>:138                                     ; preds = %110
  %139 = load %struct.node** %next, align 8
  %140 = icmp ne %struct.node* %139, null
  br i1 %140, label %142, label %141

; <label>:141                                     ; preds = %138
  store i64 0, i64* %ncom, align 8
  br label %142

; <label>:142                                     ; preds = %141, %138
  %143 = load %struct.node** %pn, align 8
  store %struct.node* %143, %struct.node** %curr, align 8
  %144 = load %struct.node** %curr, align 8
  %145 = getelementptr inbounds %struct.node* %144, i32 0, i32 2
  store i64 1, i64* %145, align 8
  %146 = load %struct.node** %next, align 8
  %147 = icmp ne %struct.node* %146, null
  br i1 %147, label %148, label %167

; <label>:148                                     ; preds = %142
  %149 = load i64* %ncom, align 8
  %150 = icmp ne i64 %149, 0
  br i1 %150, label %167, label %151

; <label>:151                                     ; preds = %148
  %152 = load i64* %pcom, align 8
  %153 = icmp ne i64 %152, 0
  br i1 %153, label %154, label %167

; <label>:154                                     ; preds = %151
  %155 = load %struct.node** %next, align 8
  %156 = load %struct.node** %prev, align 8
  %157 = getelementptr inbounds %struct.node* %156, i32 0, i32 0
  store %struct.node* %155, %struct.node** %157, align 8
  %158 = load %struct.node** %curr, align 8
  %159 = getelementptr inbounds %struct.node* %158, i32 0, i32 1
  %160 = load i64* %159, align 8
  %161 = load i64* @nodesize, align 8
  %162 = add i64 %160, %161
  %163 = load %struct.node** %prev, align 8
  %164 = getelementptr inbounds %struct.node* %163, i32 0, i32 1
  %165 = load i64* %164, align 8
  %166 = add i64 %165, %162
  store i64 %166, i64* %164, align 8
  br label %332

; <label>:167                                     ; preds = %151, %148, %142
  %168 = load %struct.node** %next, align 8
  %169 = icmp ne %struct.node* %168, null
  br i1 %169, label %170, label %186

; <label>:170                                     ; preds = %167
  %171 = load i64* %ncom, align 8
  %172 = icmp ne i64 %171, 0
  br i1 %172, label %186, label %173

; <label>:173                                     ; preds = %170
  %174 = load %struct.node** %prev, align 8
  %175 = icmp ne %struct.node* %174, null
  br i1 %175, label %176, label %186

; <label>:176                                     ; preds = %173
  %177 = load i64* %pcom, align 8
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %186, label %179

; <label>:179                                     ; preds = %176
  %180 = load %struct.node** %curr, align 8
  %181 = load %struct.node** %prev, align 8
  %182 = getelementptr inbounds %struct.node* %181, i32 0, i32 0
  store %struct.node* %180, %struct.node** %182, align 8
  %183 = load %struct.node** %next, align 8
  %184 = load %struct.node** %curr, align 8
  %185 = getelementptr inbounds %struct.node* %184, i32 0, i32 0
  store %struct.node* %183, %struct.node** %185, align 8
  br label %331

; <label>:186                                     ; preds = %176, %173, %170, %167
  %187 = load %struct.node** %next, align 8
  %188 = icmp ne %struct.node* %187, null
  br i1 %188, label %189, label %202

; <label>:189                                     ; preds = %186
  %190 = load i64* %ncom, align 8
  %191 = icmp ne i64 %190, 0
  br i1 %191, label %202, label %192

; <label>:192                                     ; preds = %189
  %193 = load %struct.node** %prev, align 8
  %194 = icmp ne %struct.node* %193, null
  br i1 %194, label %202, label %195

; <label>:195                                     ; preds = %192
  %196 = load %struct.node** %curr, align 8
  %197 = load %struct.gmem** @gm, align 8
  %198 = getelementptr inbounds %struct.gmem* %197, i32 0, i32 5
  store %struct.node* %196, %struct.node** %198, align 8
  %199 = load %struct.node** %next, align 8
  %200 = load %struct.node** %curr, align 8
  %201 = getelementptr inbounds %struct.node* %200, i32 0, i32 0
  store %struct.node* %199, %struct.node** %201, align 8
  br label %330

; <label>:202                                     ; preds = %192, %189, %186
  %203 = load i64* %ncom, align 8
  %204 = icmp ne i64 %203, 0
  br i1 %204, label %205, label %228

; <label>:205                                     ; preds = %202
  %206 = load i64* %pcom, align 8
  %207 = icmp ne i64 %206, 0
  br i1 %207, label %208, label %228

; <label>:208                                     ; preds = %205
  %209 = load %struct.node** %next, align 8
  %210 = getelementptr inbounds %struct.node* %209, i32 0, i32 0
  %211 = load %struct.node** %210, align 8
  %212 = load %struct.node** %prev, align 8
  %213 = getelementptr inbounds %struct.node* %212, i32 0, i32 0
  store %struct.node* %211, %struct.node** %213, align 8
  %214 = load %struct.node** %curr, align 8
  %215 = getelementptr inbounds %struct.node* %214, i32 0, i32 1
  %216 = load i64* %215, align 8
  %217 = load %struct.node** %next, align 8
  %218 = getelementptr inbounds %struct.node* %217, i32 0, i32 1
  %219 = load i64* %218, align 8
  %220 = add i64 %216, %219
  %221 = load i64* @nodesize, align 8
  %222 = mul i64 2, %221
  %223 = add i64 %220, %222
  %224 = load %struct.node** %prev, align 8
  %225 = getelementptr inbounds %struct.node* %224, i32 0, i32 1
  %226 = load i64* %225, align 8
  %227 = add i64 %226, %223
  store i64 %227, i64* %225, align 8
  br label %329

; <label>:228                                     ; preds = %205, %202
  %229 = load i64* %ncom, align 8
  %230 = icmp ne i64 %229, 0
  br i1 %230, label %231, label %255

; <label>:231                                     ; preds = %228
  %232 = load %struct.node** %prev, align 8
  %233 = icmp ne %struct.node* %232, null
  br i1 %233, label %234, label %255

; <label>:234                                     ; preds = %231
  %235 = load i64* %pcom, align 8
  %236 = icmp ne i64 %235, 0
  br i1 %236, label %255, label %237

; <label>:237                                     ; preds = %234
  %238 = load %struct.node** %curr, align 8
  %239 = load %struct.node** %prev, align 8
  %240 = getelementptr inbounds %struct.node* %239, i32 0, i32 0
  store %struct.node* %238, %struct.node** %240, align 8
  %241 = load %struct.node** %next, align 8
  %242 = getelementptr inbounds %struct.node* %241, i32 0, i32 0
  %243 = load %struct.node** %242, align 8
  %244 = load %struct.node** %curr, align 8
  %245 = getelementptr inbounds %struct.node* %244, i32 0, i32 0
  store %struct.node* %243, %struct.node** %245, align 8
  %246 = load %struct.node** %next, align 8
  %247 = getelementptr inbounds %struct.node* %246, i32 0, i32 1
  %248 = load i64* %247, align 8
  %249 = load i64* @nodesize, align 8
  %250 = add i64 %248, %249
  %251 = load %struct.node** %curr, align 8
  %252 = getelementptr inbounds %struct.node* %251, i32 0, i32 1
  %253 = load i64* %252, align 8
  %254 = add i64 %253, %250
  store i64 %254, i64* %252, align 8
  br label %328

; <label>:255                                     ; preds = %234, %231, %228
  %256 = load i64* %ncom, align 8
  %257 = icmp ne i64 %256, 0
  br i1 %257, label %258, label %279

; <label>:258                                     ; preds = %255
  %259 = load %struct.node** %prev, align 8
  %260 = icmp ne %struct.node* %259, null
  br i1 %260, label %279, label %261

; <label>:261                                     ; preds = %258
  %262 = load %struct.node** %curr, align 8
  %263 = load %struct.gmem** @gm, align 8
  %264 = getelementptr inbounds %struct.gmem* %263, i32 0, i32 5
  store %struct.node* %262, %struct.node** %264, align 8
  %265 = load %struct.node** %next, align 8
  %266 = getelementptr inbounds %struct.node* %265, i32 0, i32 0
  %267 = load %struct.node** %266, align 8
  %268 = load %struct.node** %curr, align 8
  %269 = getelementptr inbounds %struct.node* %268, i32 0, i32 0
  store %struct.node* %267, %struct.node** %269, align 8
  %270 = load %struct.node** %next, align 8
  %271 = getelementptr inbounds %struct.node* %270, i32 0, i32 1
  %272 = load i64* %271, align 8
  %273 = load i64* @nodesize, align 8
  %274 = add i64 %272, %273
  %275 = load %struct.node** %curr, align 8
  %276 = getelementptr inbounds %struct.node* %275, i32 0, i32 1
  %277 = load i64* %276, align 8
  %278 = add i64 %277, %274
  store i64 %278, i64* %276, align 8
  br label %327

; <label>:279                                     ; preds = %258, %255
  %280 = load %struct.node** %next, align 8
  %281 = icmp ne %struct.node* %280, null
  br i1 %281, label %297, label %282

; <label>:282                                     ; preds = %279
  %283 = load i64* %pcom, align 8
  %284 = icmp ne i64 %283, 0
  br i1 %284, label %285, label %297

; <label>:285                                     ; preds = %282
  %286 = load %struct.node** %prev, align 8
  %287 = getelementptr inbounds %struct.node* %286, i32 0, i32 0
  store %struct.node* null, %struct.node** %287, align 8
  %288 = load %struct.node** %curr, align 8
  %289 = getelementptr inbounds %struct.node* %288, i32 0, i32 1
  %290 = load i64* %289, align 8
  %291 = load i64* @nodesize, align 8
  %292 = add i64 %290, %291
  %293 = load %struct.node** %prev, align 8
  %294 = getelementptr inbounds %struct.node* %293, i32 0, i32 1
  %295 = load i64* %294, align 8
  %296 = add i64 %295, %292
  store i64 %296, i64* %294, align 8
  br label %326

; <label>:297                                     ; preds = %282, %279
  %298 = load %struct.node** %next, align 8
  %299 = icmp ne %struct.node* %298, null
  br i1 %299, label %312, label %300

; <label>:300                                     ; preds = %297
  %301 = load %struct.node** %prev, align 8
  %302 = icmp ne %struct.node* %301, null
  br i1 %302, label %303, label %312

; <label>:303                                     ; preds = %300
  %304 = load i64* %pcom, align 8
  %305 = icmp ne i64 %304, 0
  br i1 %305, label %312, label %306

; <label>:306                                     ; preds = %303
  %307 = load %struct.node** %curr, align 8
  %308 = load %struct.node** %prev, align 8
  %309 = getelementptr inbounds %struct.node* %308, i32 0, i32 0
  store %struct.node* %307, %struct.node** %309, align 8
  %310 = load %struct.node** %curr, align 8
  %311 = getelementptr inbounds %struct.node* %310, i32 0, i32 0
  store %struct.node* null, %struct.node** %311, align 8
  br label %325

; <label>:312                                     ; preds = %303, %300, %297
  %313 = load %struct.node** %next, align 8
  %314 = icmp ne %struct.node* %313, null
  br i1 %314, label %324, label %315

; <label>:315                                     ; preds = %312
  %316 = load %struct.node** %prev, align 8
  %317 = icmp ne %struct.node* %316, null
  br i1 %317, label %324, label %318

; <label>:318                                     ; preds = %315
  %319 = load %struct.node** %curr, align 8
  %320 = load %struct.gmem** @gm, align 8
  %321 = getelementptr inbounds %struct.gmem* %320, i32 0, i32 5
  store %struct.node* %319, %struct.node** %321, align 8
  %322 = load %struct.node** %curr, align 8
  %323 = getelementptr inbounds %struct.node* %322, i32 0, i32 0
  store %struct.node* null, %struct.node** %323, align 8
  br label %324

; <label>:324                                     ; preds = %318, %315, %312
  br label %325

; <label>:325                                     ; preds = %324, %306
  br label %326

; <label>:326                                     ; preds = %325, %285
  br label %327

; <label>:327                                     ; preds = %326, %261
  br label %328

; <label>:328                                     ; preds = %327, %237
  br label %329

; <label>:329                                     ; preds = %328, %208
  br label %330

; <label>:330                                     ; preds = %329, %195
  br label %331

; <label>:331                                     ; preds = %330, %179
  br label %332

; <label>:332                                     ; preds = %331, %154
  %333 = load %struct.gmem** @gm, align 8
  %334 = getelementptr inbounds %struct.gmem* %333, i32 0, i32 11
  %335 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %334)
  br label %336

; <label>:336                                     ; preds = %332, %4
  ret void

UnifiedUnreachableBlock:                          ; preds = %117, %78, %53, %23, %15
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i64 @GlobalMemAvl() {
  %total = alloca i64, align 8
  %curr = alloca %struct.node*, align 8
  %1 = load %struct.gmem** @gm, align 8
  %2 = getelementptr inbounds %struct.gmem* %1, i32 0, i32 11
  %3 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2)
  store i64 0, i64* %total, align 8
  %4 = load %struct.gmem** @gm, align 8
  %5 = getelementptr inbounds %struct.gmem* %4, i32 0, i32 5
  %6 = load %struct.node** %5, align 8
  store %struct.node* %6, %struct.node** %curr, align 8
  br label %7

; <label>:7                                       ; preds = %10, %0
  %8 = load %struct.node** %curr, align 8
  %9 = icmp ne %struct.node* %8, null
  br i1 %9, label %10, label %19

; <label>:10                                      ; preds = %7
  %11 = load %struct.node** %curr, align 8
  %12 = getelementptr inbounds %struct.node* %11, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = load i64* %total, align 8
  %15 = add i64 %14, %13
  store i64 %15, i64* %total, align 8
  %16 = load %struct.node** %curr, align 8
  %17 = getelementptr inbounds %struct.node* %16, i32 0, i32 0
  %18 = load %struct.node** %17, align 8
  store %struct.node* %18, %struct.node** %curr, align 8
  br label %7

; <label>:19                                      ; preds = %7
  %20 = load i64* %total, align 8
  %21 = and i64 %20, 4294967288
  store i64 %21, i64* %total, align 8
  %22 = load %struct.gmem** @gm, align 8
  %23 = getelementptr inbounds %struct.gmem* %22, i32 0, i32 11
  %24 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %23)
  %25 = load i64* %total, align 8
  ret i64 %25
}

; Function Attrs: nounwind uwtable
define internal i64 @GlobalMemMax() {
  %max = alloca i64, align 8
  %curr = alloca %struct.node*, align 8
  %1 = load %struct.gmem** @gm, align 8
  %2 = getelementptr inbounds %struct.gmem* %1, i32 0, i32 11
  %3 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2)
  store i64 0, i64* %max, align 8
  %4 = load %struct.gmem** @gm, align 8
  %5 = getelementptr inbounds %struct.gmem* %4, i32 0, i32 5
  %6 = load %struct.node** %5, align 8
  store %struct.node* %6, %struct.node** %curr, align 8
  br label %7

; <label>:7                                       ; preds = %22, %0
  %8 = load %struct.node** %curr, align 8
  %9 = icmp ne %struct.node* %8, null
  br i1 %9, label %10, label %27

; <label>:10                                      ; preds = %7
  %11 = load %struct.node** %curr, align 8
  %12 = getelementptr inbounds %struct.node* %11, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = load i64* %max, align 8
  %15 = icmp ugt i64 %13, %14
  br i1 %15, label %16, label %20

; <label>:16                                      ; preds = %10
  %17 = load %struct.node** %curr, align 8
  %18 = getelementptr inbounds %struct.node* %17, i32 0, i32 1
  %19 = load i64* %18, align 8
  br label %22

; <label>:20                                      ; preds = %10
  %21 = load i64* %max, align 8
  br label %22

; <label>:22                                      ; preds = %20, %16
  %23 = phi i64 [ %19, %16 ], [ %21, %20 ]
  store i64 %23, i64* %max, align 8
  %24 = load %struct.node** %curr, align 8
  %25 = getelementptr inbounds %struct.node* %24, i32 0, i32 0
  %26 = load %struct.node** %25, align 8
  store %struct.node* %26, %struct.node** %curr, align 8
  br label %7

; <label>:27                                      ; preds = %7
  %28 = load i64* %max, align 8
  %29 = and i64 %28, 4294967288
  store i64 %29, i64* %max, align 8
  %30 = load %struct.gmem** @gm, align 8
  %31 = getelementptr inbounds %struct.gmem* %30, i32 0, i32 11
  %32 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %31)
  %33 = load i64* %max, align 8
  ret i64 %33
}

; Function Attrs: nounwind uwtable
define internal i8* @ObjectMalloc(i64 %ObjectType, i64 %count) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %n = alloca i64, align 8
  %p = alloca i8*, align 8
  %i = alloca i64, align 8
  %x = alloca %struct.voxel**, align 8
  %i1 = alloca i64, align 8
  %w = alloca i64, align 8
  %x2 = alloca i64*, align 8
  store i64 %ObjectType, i64* %1, align 8
  store i64 %count, i64* %2, align 8
  %3 = load i64* %1, align 8
  switch i64 %3, label %137 [
    i64 0, label %4
    i64 1, label %21
    i64 2, label %38
    i64 3, label %69
    i64 6, label %103
    i64 7, label %120
  ]

; <label>:4                                       ; preds = %0
  %5 = load i64* %2, align 8
  %6 = mul i64 %5, 144
  store i64 %6, i64* %n, align 8
  %7 = load i64* %n, align 8
  %8 = call i8* @GlobalMalloc(i64 %7, i8* getelementptr inbounds ([5 x i8]* @.str.22.329, i32 0, i32 0))
  store i8* %8, i8** %p, align 8
  %9 = load i64* %n, align 8
  %10 = load i64* @mem_grid, align 8
  %11 = add nsw i64 %10, %9
  store i64 %11, i64* @mem_grid, align 8
  %12 = load i64* @mem_grid, align 8
  %13 = load i64* @maxmem_grid, align 8
  %14 = icmp sgt i64 %12, %13
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %4
  %16 = load i64* @mem_grid, align 8
  br label %19

; <label>:17                                      ; preds = %4
  %18 = load i64* @maxmem_grid, align 8
  br label %19

; <label>:19                                      ; preds = %17, %15
  %20 = phi i64 [ %16, %15 ], [ %18, %17 ]
  store i64 %20, i64* @maxmem_grid, align 8
  br label %140

; <label>:21                                      ; preds = %0
  %22 = load i64* %2, align 8
  %23 = mul i64 %22, 40
  store i64 %23, i64* %n, align 8
  %24 = load i64* %n, align 8
  %25 = call i8* @GlobalMalloc(i64 %24, i8* getelementptr inbounds ([6 x i8]* @.str.23.330, i32 0, i32 0))
  store i8* %25, i8** %p, align 8
  %26 = load i64* %n, align 8
  %27 = load i64* @mem_voxel, align 8
  %28 = add nsw i64 %27, %26
  store i64 %28, i64* @mem_voxel, align 8
  %29 = load i64* @mem_voxel, align 8
  %30 = load i64* @maxmem_voxel, align 8
  %31 = icmp sgt i64 %29, %30
  br i1 %31, label %32, label %34

; <label>:32                                      ; preds = %21
  %33 = load i64* @mem_voxel, align 8
  br label %36

; <label>:34                                      ; preds = %21
  %35 = load i64* @maxmem_voxel, align 8
  br label %36

; <label>:36                                      ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %35, %34 ]
  store i64 %37, i64* @maxmem_voxel, align 8
  br label %140

; <label>:38                                      ; preds = %0
  %39 = load i64* %2, align 8
  %40 = mul i64 %39, 8
  store i64 %40, i64* %n, align 8
  %41 = load i64* %n, align 8
  %42 = call i8* @GlobalMalloc(i64 %41, i8* getelementptr inbounds ([10 x i8]* @.str.24.331, i32 0, i32 0))
  store i8* %42, i8** %p, align 8
  %43 = load i8** %p, align 8
  %44 = bitcast i8* %43 to %struct.voxel**
  store %struct.voxel** %44, %struct.voxel*** %x, align 8
  store i64 0, i64* %i, align 8
  br label %45

; <label>:45                                      ; preds = %53, %38
  %46 = load i64* %i, align 8
  %47 = load i64* %2, align 8
  %48 = icmp slt i64 %46, %47
  br i1 %48, label %49, label %56

; <label>:49                                      ; preds = %45
  %50 = load i64* %i, align 8
  %51 = load %struct.voxel*** %x, align 8
  %52 = getelementptr inbounds %struct.voxel** %51, i64 %50
  store %struct.voxel* null, %struct.voxel** %52, align 8
  br label %53

; <label>:53                                      ; preds = %49
  %54 = load i64* %i, align 8
  %55 = add nsw i64 %54, 1
  store i64 %55, i64* %i, align 8
  br label %45

; <label>:56                                      ; preds = %45
  %57 = load i64* %n, align 8
  %58 = load i64* @mem_hashtable, align 8
  %59 = add nsw i64 %58, %57
  store i64 %59, i64* @mem_hashtable, align 8
  %60 = load i64* @mem_hashtable, align 8
  %61 = load i64* @maxmem_hashtable, align 8
  %62 = icmp sgt i64 %60, %61
  br i1 %62, label %63, label %65

; <label>:63                                      ; preds = %56
  %64 = load i64* @mem_hashtable, align 8
  br label %67

; <label>:65                                      ; preds = %56
  %66 = load i64* @maxmem_hashtable, align 8
  br label %67

; <label>:67                                      ; preds = %65, %63
  %68 = phi i64 [ %64, %63 ], [ %66, %65 ]
  store i64 %68, i64* @maxmem_hashtable, align 8
  br label %140

; <label>:69                                      ; preds = %0
  %70 = load i64* %2, align 8
  %71 = udiv i64 %70, 64
  %72 = add i64 1, %71
  store i64 %72, i64* %w, align 8
  %73 = load i64* %w, align 8
  %74 = mul i64 %73, 8
  store i64 %74, i64* %n, align 8
  %75 = load i64* %n, align 8
  %76 = call i8* @GlobalMalloc(i64 %75, i8* getelementptr inbounds ([11 x i8]* @.str.25.332, i32 0, i32 0))
  store i8* %76, i8** %p, align 8
  %77 = load i8** %p, align 8
  %78 = bitcast i8* %77 to i64*
  store i64* %78, i64** %x2, align 8
  store i64 0, i64* %i1, align 8
  br label %79

; <label>:79                                      ; preds = %87, %69
  %80 = load i64* %i1, align 8
  %81 = load i64* %w, align 8
  %82 = icmp slt i64 %80, %81
  br i1 %82, label %83, label %90

; <label>:83                                      ; preds = %79
  %84 = load i64* %i1, align 8
  %85 = load i64** %x2, align 8
  %86 = getelementptr inbounds i64* %85, i64 %84
  store i64 -1, i64* %86, align 8
  br label %87

; <label>:87                                      ; preds = %83
  %88 = load i64* %i1, align 8
  %89 = add nsw i64 %88, 1
  store i64 %89, i64* %i1, align 8
  br label %79

; <label>:90                                      ; preds = %79
  %91 = load i64* %n, align 8
  %92 = load i64* @mem_emptycells, align 8
  %93 = add nsw i64 %92, %91
  store i64 %93, i64* @mem_emptycells, align 8
  %94 = load i64* @mem_emptycells, align 8
  %95 = load i64* @maxmem_emptycells, align 8
  %96 = icmp sgt i64 %94, %95
  br i1 %96, label %97, label %99

; <label>:97                                      ; preds = %90
  %98 = load i64* @mem_emptycells, align 8
  br label %101

; <label>:99                                      ; preds = %90
  %100 = load i64* @maxmem_emptycells, align 8
  br label %101

; <label>:101                                     ; preds = %99, %97
  %102 = phi i64 [ %98, %97 ], [ %100, %99 ]
  store i64 %102, i64* @maxmem_emptycells, align 8
  br label %140

; <label>:103                                     ; preds = %0
  %104 = load i64* %2, align 8
  %105 = mul i64 %104, 120
  store i64 %105, i64* %n, align 8
  %106 = load i64* %n, align 8
  %107 = call i8* @GlobalMalloc(i64 %106, i8* getelementptr inbounds ([8 x i8]* @.str.26.333, i32 0, i32 0))
  store i8* %107, i8** %p, align 8
  %108 = load i64* %n, align 8
  %109 = load i64* @mem_bintree, align 8
  %110 = add nsw i64 %109, %108
  store i64 %110, i64* @mem_bintree, align 8
  %111 = load i64* @mem_bintree, align 8
  %112 = load i64* @maxmem_bintree, align 8
  %113 = icmp sgt i64 %111, %112
  br i1 %113, label %114, label %116

; <label>:114                                     ; preds = %103
  %115 = load i64* @mem_bintree, align 8
  br label %118

; <label>:116                                     ; preds = %103
  %117 = load i64* @maxmem_bintree, align 8
  br label %118

; <label>:118                                     ; preds = %116, %114
  %119 = phi i64 [ %115, %114 ], [ %117, %116 ]
  store i64 %119, i64* @maxmem_bintree, align 8
  br label %140

; <label>:120                                     ; preds = %0
  %121 = load i64* %2, align 8
  %122 = mul i64 %121, 8
  store i64 %122, i64* %n, align 8
  %123 = load i64* %n, align 8
  %124 = call i8* @GlobalMalloc(i64 %123, i8* getelementptr inbounds ([9 x i8]* @.str.27.334, i32 0, i32 0))
  store i8* %124, i8** %p, align 8
  %125 = load i64* %n, align 8
  %126 = load i64* @mem_pepArray, align 8
  %127 = add nsw i64 %126, %125
  store i64 %127, i64* @mem_pepArray, align 8
  %128 = load i64* @mem_pepArray, align 8
  %129 = load i64* @maxmem_pepArray, align 8
  %130 = icmp sgt i64 %128, %129
  br i1 %130, label %131, label %133

; <label>:131                                     ; preds = %120
  %132 = load i64* @mem_pepArray, align 8
  br label %135

; <label>:133                                     ; preds = %120
  %134 = load i64* @maxmem_pepArray, align 8
  br label %135

; <label>:135                                     ; preds = %133, %131
  %136 = phi i64 [ %132, %131 ], [ %134, %133 ]
  store i64 %136, i64* @maxmem_pepArray, align 8
  br label %140

; <label>:137                                     ; preds = %0
  %138 = load i64* %1, align 8
  %139 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([39 x i8]* @.str.28.335, i32 0, i32 0), i64 %138)
  call void @exit(i32 -1)
  unreachable

; <label>:140                                     ; preds = %135, %118, %101, %67, %36, %19
  %141 = load i8** %p, align 8
  ret i8* %141
}

; Function Attrs: nounwind uwtable
define internal void @ObjectFree(i64 %ObjectType, i64 %count, i8* %p) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %n = alloca i64, align 8
  store i64 %ObjectType, i64* %1, align 8
  store i64 %count, i64* %2, align 8
  store i8* %p, i8** %3, align 8
  %4 = load i8** %3, align 8
  call void @GlobalFree(i8* %4)
  %5 = load i64* %1, align 8
  switch i64 %5, label %45 [
    i64 0, label %6
    i64 1, label %12
    i64 2, label %18
    i64 3, label %24
    i64 6, label %33
    i64 7, label %39
  ]

; <label>:6                                       ; preds = %0
  %7 = load i64* %2, align 8
  %8 = mul i64 %7, 144
  store i64 %8, i64* %n, align 8
  %9 = load i64* %n, align 8
  %10 = load i64* @mem_grid, align 8
  %11 = sub nsw i64 %10, %9
  store i64 %11, i64* @mem_grid, align 8
  br label %48

; <label>:12                                      ; preds = %0
  %13 = load i64* %2, align 8
  %14 = mul i64 %13, 40
  store i64 %14, i64* %n, align 8
  %15 = load i64* %n, align 8
  %16 = load i64* @mem_voxel, align 8
  %17 = sub nsw i64 %16, %15
  store i64 %17, i64* @mem_voxel, align 8
  br label %48

; <label>:18                                      ; preds = %0
  %19 = load i64* %2, align 8
  %20 = mul i64 %19, 8
  store i64 %20, i64* %n, align 8
  %21 = load i64* %n, align 8
  %22 = load i64* @mem_hashtable, align 8
  %23 = sub nsw i64 %22, %21
  store i64 %23, i64* @mem_hashtable, align 8
  br label %48

; <label>:24                                      ; preds = %0
  %25 = load i64* %2, align 8
  %26 = udiv i64 %25, 64
  %27 = add i64 1, %26
  store i64 %27, i64* %n, align 8
  %28 = load i64* %n, align 8
  %29 = mul i64 %28, 8
  store i64 %29, i64* %n, align 8
  %30 = load i64* %n, align 8
  %31 = load i64* @mem_emptycells, align 8
  %32 = sub nsw i64 %31, %30
  store i64 %32, i64* @mem_emptycells, align 8
  br label %48

; <label>:33                                      ; preds = %0
  %34 = load i64* %2, align 8
  %35 = mul i64 %34, 120
  store i64 %35, i64* %n, align 8
  %36 = load i64* %n, align 8
  %37 = load i64* @mem_bintree, align 8
  %38 = sub nsw i64 %37, %36
  store i64 %38, i64* @mem_bintree, align 8
  br label %48

; <label>:39                                      ; preds = %0
  %40 = load i64* %2, align 8
  %41 = mul i64 %40, 8
  store i64 %41, i64* %n, align 8
  %42 = load i64* %n, align 8
  %43 = load i64* @mem_pepArray, align 8
  %44 = sub nsw i64 %43, %42
  store i64 %44, i64* @mem_pepArray, align 8
  br label %48

; <label>:45                                      ; preds = %0
  %46 = load i64* %1, align 8
  %47 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([37 x i8]* @.str.29.336, i32 0, i32 0), i64 %46)
  call void @exit(i32 -1)
  unreachable

; <label>:48                                      ; preds = %39, %33, %24, %18, %12, %6
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rayinfo* @ma_rayinfo(%struct.ray* %r) {
  %1 = alloca %struct.ray*, align 8
  %p = alloca %struct.rayinfo*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  %2 = load %struct.ray** %1, align 8
  %3 = getelementptr inbounds %struct.ray* %2, i32 0, i32 9
  %4 = load i64* %3, align 8
  %5 = add nsw i64 %4, 1
  %6 = icmp sgt i64 %5, 5
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = load %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([19 x i8]* @.str.30.337, i32 0, i32 0))
  call void @exit(i32 -1)
  unreachable

; <label>:10                                      ; preds = %0
  %11 = load %struct.ray** %1, align 8
  %12 = getelementptr inbounds %struct.ray* %11, i32 0, i32 9
  %13 = load i64* %12, align 8
  %14 = load %struct.ray** %1, align 8
  %15 = getelementptr inbounds %struct.ray* %14, i32 0, i32 10
  %16 = getelementptr inbounds [5 x %struct.rayinfo]* %15, i32 0, i64 %13
  store %struct.rayinfo* %16, %struct.rayinfo** %p, align 8
  %17 = load %struct.ray** %1, align 8
  %18 = getelementptr inbounds %struct.ray* %17, i32 0, i32 9
  %19 = load i64* %18, align 8
  %20 = add nsw i64 %19, 1
  store i64 %20, i64* %18, align 8
  %21 = load %struct.rayinfo** %p, align 8
  ret %struct.rayinfo* %21
}

; Function Attrs: nounwind uwtable
define internal void @free_rayinfo(%struct.ray* %r) {
  %1 = alloca %struct.ray*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  %2 = load %struct.ray** %1, align 8
  %3 = getelementptr inbounds %struct.ray* %2, i32 0, i32 9
  %4 = load i64* %3, align 8
  %5 = sub nsw i64 %4, 1
  store i64 %5, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reset_rayinfo(%struct.ray* %r) {
  %1 = alloca %struct.ray*, align 8
  store %struct.ray* %r, %struct.ray** %1, align 8
  %2 = load %struct.ray** %1, align 8
  %3 = getelementptr inbounds %struct.ray* %2, i32 0, i32 9
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ma_print() {
  %i = alloca i64, align 8
  %mem_total = alloca i64, align 8
  %maxmem_total = alloca i64, align 8
  %1 = load i64* @mem_grid, align 8
  %2 = load i64* @mem_hashtable, align 8
  %3 = add nsw i64 %1, %2
  %4 = load i64* @mem_emptycells, align 8
  %5 = add nsw i64 %3, %4
  store i64 %5, i64* %mem_total, align 8
  %6 = load i64* @mem_voxel, align 8
  %7 = load i64* @mem_bintree, align 8
  %8 = add nsw i64 %6, %7
  %9 = load i64* %mem_total, align 8
  %10 = add nsw i64 %9, %8
  store i64 %10, i64* %mem_total, align 8
  %11 = load i64* @maxmem_grid, align 8
  %12 = load i64* @maxmem_hashtable, align 8
  %13 = add nsw i64 %11, %12
  %14 = load i64* @maxmem_emptycells, align 8
  %15 = add nsw i64 %13, %14
  store i64 %15, i64* %maxmem_total, align 8
  %16 = load i64* @maxmem_voxel, align 8
  %17 = load i64* @maxmem_bintree, align 8
  %18 = add nsw i64 %16, %17
  %19 = load i64* %maxmem_total, align 8
  %20 = add nsw i64 %19, %18
  store i64 %20, i64* %maxmem_total, align 8
  %21 = load %struct._IO_FILE** @stdout, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([70 x i8]* @.str.31.338, i32 0, i32 0))
  %23 = load %struct._IO_FILE** @stdout, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([70 x i8]* @.str.32.339, i32 0, i32 0))
  %25 = load %struct._IO_FILE** @stdout, align 8
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([71 x i8]* @.str.33.340, i32 0, i32 0))
  %27 = load %struct._IO_FILE** @stdout, align 8
  %28 = load i64* @mem_grid, align 8
  %29 = load i64* @maxmem_grid, align 8
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([49 x i8]* @.str.34.341, i32 0, i32 0), i64 %28, i64 %29, i64 144)
  %31 = load %struct._IO_FILE** @stdout, align 8
  %32 = load i64* @mem_hashtable, align 8
  %33 = load i64* @maxmem_hashtable, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([49 x i8]* @.str.35.342, i32 0, i32 0), i64 %32, i64 %33, i64 8)
  %35 = load %struct._IO_FILE** @stdout, align 8
  %36 = load i64* @mem_emptycells, align 8
  %37 = load i64* @maxmem_emptycells, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([49 x i8]* @.str.36.343, i32 0, i32 0), i64 %36, i64 %37, i64 8)
  %39 = load %struct._IO_FILE** @stdout, align 8
  %40 = load i64* @mem_voxel, align 8
  %41 = load i64* @maxmem_voxel, align 8
  %42 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([49 x i8]* @.str.37.344, i32 0, i32 0), i64 %40, i64 %41, i64 40)
  %43 = load %struct._IO_FILE** @stdout, align 8
  %44 = load i64* @mem_bintree, align 8
  %45 = load i64* @maxmem_bintree, align 8
  %46 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([49 x i8]* @.str.38.345, i32 0, i32 0), i64 %44, i64 %45, i64 120)
  %47 = load %struct._IO_FILE** @stdout, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([2 x i8]* @.str.39.346, i32 0, i32 0))
  %49 = load %struct._IO_FILE** @stdout, align 8
  %50 = load i64* %mem_total, align 8
  %51 = load i64* %maxmem_total, align 8
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([48 x i8]* @.str.40.347, i32 0, i32 0), i64 %50, i64 %51)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @PolyName() {
  ret i8* getelementptr inbounds ([5 x i8]* @.str.366, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define internal void @PolyPrint(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %pp = alloca %struct.poly*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 4
  %8 = load i64* %7, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([25 x i8]* @.str.1.367, i32 0, i32 0), i64 %8)
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %77, %0
  %11 = load i64* %i, align 8
  %12 = load %struct.object** %1, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 4
  %14 = load i64* %13, align 8
  %15 = icmp slt i64 %11, %14
  br i1 %15, label %16, label %80

; <label>:16                                      ; preds = %10
  %17 = load %struct.element** %pe, align 8
  %18 = getelementptr inbounds %struct.element* %17, i32 0, i32 3
  %19 = load i8** %18, align 8
  %20 = bitcast i8* %19 to %struct.poly*
  store %struct.poly* %20, %struct.poly** %pp, align 8
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = load %struct.poly** %pp, align 8
  %23 = getelementptr inbounds %struct.poly* %22, i32 0, i32 0
  %24 = load i64* %23, align 8
  %25 = load %struct.poly** %pp, align 8
  %26 = getelementptr inbounds %struct.poly* %25, i32 0, i32 1
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 0
  %28 = load double* %27, align 8
  %29 = load %struct.poly** %pp, align 8
  %30 = getelementptr inbounds %struct.poly* %29, i32 0, i32 1
  %31 = getelementptr inbounds [3 x double]* %30, i32 0, i64 1
  %32 = load double* %31, align 8
  %33 = load %struct.poly** %pp, align 8
  %34 = getelementptr inbounds %struct.poly* %33, i32 0, i32 1
  %35 = getelementptr inbounds [3 x double]* %34, i32 0, i64 2
  %36 = load double* %35, align 8
  %37 = load %struct.poly** %pp, align 8
  %38 = getelementptr inbounds %struct.poly* %37, i32 0, i32 2
  %39 = load double* %38, align 8
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([40 x i8]* @.str.2.368, i32 0, i32 0), i64 %24, double %28, double %32, double %36, double %39)
  %41 = load %struct.poly** %pp, align 8
  %42 = getelementptr inbounds %struct.poly* %41, i32 0, i32 3
  %43 = load [3 x double]** %42, align 8
  store [3 x double]* %43, [3 x double]** %vlist, align 8
  %44 = load %struct.poly** %pp, align 8
  %45 = getelementptr inbounds %struct.poly* %44, i32 0, i32 4
  %46 = load i64** %45, align 8
  store i64* %46, i64** %vindex, align 8
  store i64 0, i64* %j, align 8
  br label %47

; <label>:47                                      ; preds = %71, %16
  %48 = load i64* %j, align 8
  %49 = load %struct.poly** %pp, align 8
  %50 = getelementptr inbounds %struct.poly* %49, i32 0, i32 0
  %51 = load i64* %50, align 8
  %52 = icmp slt i64 %48, %51
  br i1 %52, label %53, label %74

; <label>:53                                      ; preds = %47
  %54 = load [3 x double]** %vlist, align 8
  %55 = load i64** %vindex, align 8
  %56 = load i64* %55, align 8
  %57 = getelementptr inbounds [3 x double]* %54, i64 %56
  store [3 x double]* %57, [3 x double]** %vptr, align 8
  %58 = load %struct._IO_FILE** @stderr, align 8
  %59 = load [3 x double]** %vptr, align 8
  %60 = getelementptr inbounds [3 x double]* %59, i32 0, i64 0
  %61 = load double* %60, align 8
  %62 = load [3 x double]** %vptr, align 8
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 1
  %64 = load double* %63, align 8
  %65 = load [3 x double]** %vptr, align 8
  %66 = getelementptr inbounds [3 x double]* %65, i32 0, i64 2
  %67 = load double* %66, align 8
  %68 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([13 x i8]* @.str.3.369, i32 0, i32 0), double %61, double %64, double %67)
  %69 = load i64** %vindex, align 8
  %70 = getelementptr inbounds i64* %69, i32 1
  store i64* %70, i64** %vindex, align 8
  br label %71

; <label>:71                                      ; preds = %53
  %72 = load i64* %j, align 8
  %73 = add nsw i64 %72, 1
  store i64 %73, i64* %j, align 8
  br label %47

; <label>:74                                      ; preds = %47
  %75 = load %struct.element** %pe, align 8
  %76 = getelementptr inbounds %struct.element* %75, i32 1
  store %struct.element* %76, %struct.element** %pe, align 8
  br label %77

; <label>:77                                      ; preds = %74
  %78 = load i64* %i, align 8
  %79 = add nsw i64 %78, 1
  store i64 %79, i64* %i, align 8
  br label %10

; <label>:80                                      ; preds = %10
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PolyElementBoundBox(%struct.element* %pe, %struct.poly* %pp) {
  %1 = alloca %struct.element*, align 8
  %2 = alloca %struct.poly*, align 8
  %i = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %pbb = alloca %struct.bbox*, align 8
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %minx = alloca double, align 8
  %maxx = alloca double, align 8
  %miny = alloca double, align 8
  %maxy = alloca double, align 8
  %minz = alloca double, align 8
  %maxz = alloca double, align 8
  store %struct.element* %pe, %struct.element** %1, align 8
  store %struct.poly* %pp, %struct.poly** %2, align 8
  %3 = load %struct.element** %1, align 8
  %4 = getelementptr inbounds %struct.element* %3, i32 0, i32 1
  store %struct.bbox* %4, %struct.bbox** %pbb, align 8
  store double 1.000000e+32, double* %minz, align 8
  store double 1.000000e+32, double* %miny, align 8
  store double 1.000000e+32, double* %minx, align 8
  store double -1.000000e+32, double* %maxz, align 8
  store double -1.000000e+32, double* %maxy, align 8
  store double -1.000000e+32, double* %maxx, align 8
  %5 = load %struct.poly** %2, align 8
  %6 = getelementptr inbounds %struct.poly* %5, i32 0, i32 3
  %7 = load [3 x double]** %6, align 8
  store [3 x double]* %7, [3 x double]** %vlist, align 8
  %8 = load %struct.poly** %2, align 8
  %9 = getelementptr inbounds %struct.poly* %8, i32 0, i32 4
  %10 = load i64** %9, align 8
  store i64* %10, i64** %vindex, align 8
  store i64 0, i64* %i, align 8
  br label %11

; <label>:11                                      ; preds = %102, %0
  %12 = load i64* %i, align 8
  %13 = load %struct.poly** %2, align 8
  %14 = getelementptr inbounds %struct.poly* %13, i32 0, i32 0
  %15 = load i64* %14, align 8
  %16 = icmp slt i64 %12, %15
  br i1 %16, label %17, label %105

; <label>:17                                      ; preds = %11
  %18 = load [3 x double]** %vlist, align 8
  %19 = load i64** %vindex, align 8
  %20 = load i64* %19, align 8
  %21 = getelementptr inbounds [3 x double]* %18, i64 %20
  store [3 x double]* %21, [3 x double]** %vptr, align 8
  %22 = load double* %minx, align 8
  %23 = load [3 x double]** %vptr, align 8
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = fcmp olt double %22, %25
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %17
  %28 = load double* %minx, align 8
  br label %33

; <label>:29                                      ; preds = %17
  %30 = load [3 x double]** %vptr, align 8
  %31 = getelementptr inbounds [3 x double]* %30, i32 0, i64 0
  %32 = load double* %31, align 8
  br label %33

; <label>:33                                      ; preds = %29, %27
  %34 = phi double [ %28, %27 ], [ %32, %29 ]
  store double %34, double* %minx, align 8
  %35 = load double* %miny, align 8
  %36 = load [3 x double]** %vptr, align 8
  %37 = getelementptr inbounds [3 x double]* %36, i32 0, i64 1
  %38 = load double* %37, align 8
  %39 = fcmp olt double %35, %38
  br i1 %39, label %40, label %42

; <label>:40                                      ; preds = %33
  %41 = load double* %miny, align 8
  br label %46

; <label>:42                                      ; preds = %33
  %43 = load [3 x double]** %vptr, align 8
  %44 = getelementptr inbounds [3 x double]* %43, i32 0, i64 1
  %45 = load double* %44, align 8
  br label %46

; <label>:46                                      ; preds = %42, %40
  %47 = phi double [ %41, %40 ], [ %45, %42 ]
  store double %47, double* %miny, align 8
  %48 = load double* %minz, align 8
  %49 = load [3 x double]** %vptr, align 8
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 2
  %51 = load double* %50, align 8
  %52 = fcmp olt double %48, %51
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %46
  %54 = load double* %minz, align 8
  br label %59

; <label>:55                                      ; preds = %46
  %56 = load [3 x double]** %vptr, align 8
  %57 = getelementptr inbounds [3 x double]* %56, i32 0, i64 2
  %58 = load double* %57, align 8
  br label %59

; <label>:59                                      ; preds = %55, %53
  %60 = phi double [ %54, %53 ], [ %58, %55 ]
  store double %60, double* %minz, align 8
  %61 = load double* %maxx, align 8
  %62 = load [3 x double]** %vptr, align 8
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 0
  %64 = load double* %63, align 8
  %65 = fcmp ogt double %61, %64
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %59
  %67 = load double* %maxx, align 8
  br label %72

; <label>:68                                      ; preds = %59
  %69 = load [3 x double]** %vptr, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 0
  %71 = load double* %70, align 8
  br label %72

; <label>:72                                      ; preds = %68, %66
  %73 = phi double [ %67, %66 ], [ %71, %68 ]
  store double %73, double* %maxx, align 8
  %74 = load double* %maxy, align 8
  %75 = load [3 x double]** %vptr, align 8
  %76 = getelementptr inbounds [3 x double]* %75, i32 0, i64 1
  %77 = load double* %76, align 8
  %78 = fcmp ogt double %74, %77
  br i1 %78, label %79, label %81

; <label>:79                                      ; preds = %72
  %80 = load double* %maxy, align 8
  br label %85

; <label>:81                                      ; preds = %72
  %82 = load [3 x double]** %vptr, align 8
  %83 = getelementptr inbounds [3 x double]* %82, i32 0, i64 1
  %84 = load double* %83, align 8
  br label %85

; <label>:85                                      ; preds = %81, %79
  %86 = phi double [ %80, %79 ], [ %84, %81 ]
  store double %86, double* %maxy, align 8
  %87 = load double* %maxz, align 8
  %88 = load [3 x double]** %vptr, align 8
  %89 = getelementptr inbounds [3 x double]* %88, i32 0, i64 2
  %90 = load double* %89, align 8
  %91 = fcmp ogt double %87, %90
  br i1 %91, label %92, label %94

; <label>:92                                      ; preds = %85
  %93 = load double* %maxz, align 8
  br label %98

; <label>:94                                      ; preds = %85
  %95 = load [3 x double]** %vptr, align 8
  %96 = getelementptr inbounds [3 x double]* %95, i32 0, i64 2
  %97 = load double* %96, align 8
  br label %98

; <label>:98                                      ; preds = %94, %92
  %99 = phi double [ %93, %92 ], [ %97, %94 ]
  store double %99, double* %maxz, align 8
  %100 = load i64** %vindex, align 8
  %101 = getelementptr inbounds i64* %100, i32 1
  store i64* %101, i64** %vindex, align 8
  br label %102

; <label>:102                                     ; preds = %98
  %103 = load i64* %i, align 8
  %104 = add nsw i64 %103, 1
  store i64 %104, i64* %i, align 8
  br label %11

; <label>:105                                     ; preds = %11
  %106 = load double* %minx, align 8
  %107 = load %struct.bbox** %pbb, align 8
  %108 = getelementptr inbounds %struct.bbox* %107, i32 0, i32 0
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 0
  store double %106, double* %109, align 8
  %110 = load double* %miny, align 8
  %111 = load %struct.bbox** %pbb, align 8
  %112 = getelementptr inbounds %struct.bbox* %111, i32 0, i32 0
  %113 = getelementptr inbounds [3 x double]* %112, i32 0, i64 1
  store double %110, double* %113, align 8
  %114 = load double* %minz, align 8
  %115 = load %struct.bbox** %pbb, align 8
  %116 = getelementptr inbounds %struct.bbox* %115, i32 0, i32 0
  %117 = getelementptr inbounds [3 x double]* %116, i32 0, i64 2
  store double %114, double* %117, align 8
  %118 = load double* %maxx, align 8
  %119 = load %struct.bbox** %pbb, align 8
  %120 = getelementptr inbounds %struct.bbox* %119, i32 0, i32 1
  %121 = getelementptr inbounds [3 x double]* %120, i32 0, i64 0
  store double %118, double* %121, align 8
  %122 = load double* %maxy, align 8
  %123 = load %struct.bbox** %pbb, align 8
  %124 = getelementptr inbounds %struct.bbox* %123, i32 0, i32 1
  %125 = getelementptr inbounds [3 x double]* %124, i32 0, i64 1
  store double %122, double* %125, align 8
  %126 = load double* %maxz, align 8
  %127 = load %struct.bbox** %pbb, align 8
  %128 = getelementptr inbounds %struct.bbox* %127, i32 0, i32 1
  %129 = getelementptr inbounds [3 x double]* %128, i32 0, i64 2
  store double %126, double* %129, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PolyBoundBox(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %pp = alloca %struct.poly*, align 8
  %pe = alloca %struct.element*, align 8
  %pbb = alloca %struct.bbox*, align 8
  %minx = alloca double, align 8
  %maxx = alloca double, align 8
  %miny = alloca double, align 8
  %maxy = alloca double, align 8
  %minz = alloca double, align 8
  %maxz = alloca double, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct.object** %1, align 8
  %6 = getelementptr inbounds %struct.object* %5, i32 0, i32 2
  store %struct.bbox* %6, %struct.bbox** %pbb, align 8
  store double 1.000000e+32, double* %minz, align 8
  store double 1.000000e+32, double* %miny, align 8
  store double 1.000000e+32, double* %minx, align 8
  store double -1.000000e+32, double* %maxz, align 8
  store double -1.000000e+32, double* %maxy, align 8
  store double -1.000000e+32, double* %maxx, align 8
  store i64 0, i64* %i, align 8
  br label %7

; <label>:7                                       ; preds = %124, %0
  %8 = load i64* %i, align 8
  %9 = load %struct.object** %1, align 8
  %10 = getelementptr inbounds %struct.object* %9, i32 0, i32 4
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %8, %11
  br i1 %12, label %13, label %127

; <label>:13                                      ; preds = %7
  %14 = load %struct.element** %pe, align 8
  %15 = getelementptr inbounds %struct.element* %14, i32 0, i32 3
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.poly*
  store %struct.poly* %17, %struct.poly** %pp, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = load %struct.poly** %pp, align 8
  call void @PolyElementBoundBox(%struct.element* %18, %struct.poly* %19)
  %20 = load double* %minx, align 8
  %21 = load %struct.element** %pe, align 8
  %22 = getelementptr inbounds %struct.element* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.bbox* %22, i32 0, i32 0
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = fcmp olt double %20, %25
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %13
  %28 = load double* %minx, align 8
  br label %35

; <label>:29                                      ; preds = %13
  %30 = load %struct.element** %pe, align 8
  %31 = getelementptr inbounds %struct.element* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.bbox* %31, i32 0, i32 0
  %33 = getelementptr inbounds [3 x double]* %32, i32 0, i64 0
  %34 = load double* %33, align 8
  br label %35

; <label>:35                                      ; preds = %29, %27
  %36 = phi double [ %28, %27 ], [ %34, %29 ]
  store double %36, double* %minx, align 8
  %37 = load double* %miny, align 8
  %38 = load %struct.element** %pe, align 8
  %39 = getelementptr inbounds %struct.element* %38, i32 0, i32 1
  %40 = getelementptr inbounds %struct.bbox* %39, i32 0, i32 0
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 1
  %42 = load double* %41, align 8
  %43 = fcmp olt double %37, %42
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %35
  %45 = load double* %miny, align 8
  br label %52

; <label>:46                                      ; preds = %35
  %47 = load %struct.element** %pe, align 8
  %48 = getelementptr inbounds %struct.element* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.bbox* %48, i32 0, i32 0
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 1
  %51 = load double* %50, align 8
  br label %52

; <label>:52                                      ; preds = %46, %44
  %53 = phi double [ %45, %44 ], [ %51, %46 ]
  store double %53, double* %miny, align 8
  %54 = load double* %minz, align 8
  %55 = load %struct.element** %pe, align 8
  %56 = getelementptr inbounds %struct.element* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.bbox* %56, i32 0, i32 0
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  %59 = load double* %58, align 8
  %60 = fcmp olt double %54, %59
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %52
  %62 = load double* %minz, align 8
  br label %69

; <label>:63                                      ; preds = %52
  %64 = load %struct.element** %pe, align 8
  %65 = getelementptr inbounds %struct.element* %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.bbox* %65, i32 0, i32 0
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 2
  %68 = load double* %67, align 8
  br label %69

; <label>:69                                      ; preds = %63, %61
  %70 = phi double [ %62, %61 ], [ %68, %63 ]
  store double %70, double* %minz, align 8
  %71 = load double* %maxx, align 8
  %72 = load %struct.element** %pe, align 8
  %73 = getelementptr inbounds %struct.element* %72, i32 0, i32 1
  %74 = getelementptr inbounds %struct.bbox* %73, i32 0, i32 1
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 0
  %76 = load double* %75, align 8
  %77 = fcmp ogt double %71, %76
  br i1 %77, label %78, label %80

; <label>:78                                      ; preds = %69
  %79 = load double* %maxx, align 8
  br label %86

; <label>:80                                      ; preds = %69
  %81 = load %struct.element** %pe, align 8
  %82 = getelementptr inbounds %struct.element* %81, i32 0, i32 1
  %83 = getelementptr inbounds %struct.bbox* %82, i32 0, i32 1
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 0
  %85 = load double* %84, align 8
  br label %86

; <label>:86                                      ; preds = %80, %78
  %87 = phi double [ %79, %78 ], [ %85, %80 ]
  store double %87, double* %maxx, align 8
  %88 = load double* %maxy, align 8
  %89 = load %struct.element** %pe, align 8
  %90 = getelementptr inbounds %struct.element* %89, i32 0, i32 1
  %91 = getelementptr inbounds %struct.bbox* %90, i32 0, i32 1
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 1
  %93 = load double* %92, align 8
  %94 = fcmp ogt double %88, %93
  br i1 %94, label %95, label %97

; <label>:95                                      ; preds = %86
  %96 = load double* %maxy, align 8
  br label %103

; <label>:97                                      ; preds = %86
  %98 = load %struct.element** %pe, align 8
  %99 = getelementptr inbounds %struct.element* %98, i32 0, i32 1
  %100 = getelementptr inbounds %struct.bbox* %99, i32 0, i32 1
  %101 = getelementptr inbounds [3 x double]* %100, i32 0, i64 1
  %102 = load double* %101, align 8
  br label %103

; <label>:103                                     ; preds = %97, %95
  %104 = phi double [ %96, %95 ], [ %102, %97 ]
  store double %104, double* %maxy, align 8
  %105 = load double* %maxz, align 8
  %106 = load %struct.element** %pe, align 8
  %107 = getelementptr inbounds %struct.element* %106, i32 0, i32 1
  %108 = getelementptr inbounds %struct.bbox* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 2
  %110 = load double* %109, align 8
  %111 = fcmp ogt double %105, %110
  br i1 %111, label %112, label %114

; <label>:112                                     ; preds = %103
  %113 = load double* %maxz, align 8
  br label %120

; <label>:114                                     ; preds = %103
  %115 = load %struct.element** %pe, align 8
  %116 = getelementptr inbounds %struct.element* %115, i32 0, i32 1
  %117 = getelementptr inbounds %struct.bbox* %116, i32 0, i32 1
  %118 = getelementptr inbounds [3 x double]* %117, i32 0, i64 2
  %119 = load double* %118, align 8
  br label %120

; <label>:120                                     ; preds = %114, %112
  %121 = phi double [ %113, %112 ], [ %119, %114 ]
  store double %121, double* %maxz, align 8
  %122 = load %struct.element** %pe, align 8
  %123 = getelementptr inbounds %struct.element* %122, i32 1
  store %struct.element* %123, %struct.element** %pe, align 8
  br label %124

; <label>:124                                     ; preds = %120
  %125 = load i64* %i, align 8
  %126 = add nsw i64 %125, 1
  store i64 %126, i64* %i, align 8
  br label %7

; <label>:127                                     ; preds = %7
  %128 = load double* %minx, align 8
  %129 = load %struct.bbox** %pbb, align 8
  %130 = getelementptr inbounds %struct.bbox* %129, i32 0, i32 0
  %131 = getelementptr inbounds [3 x double]* %130, i32 0, i64 0
  store double %128, double* %131, align 8
  %132 = load double* %miny, align 8
  %133 = load %struct.bbox** %pbb, align 8
  %134 = getelementptr inbounds %struct.bbox* %133, i32 0, i32 0
  %135 = getelementptr inbounds [3 x double]* %134, i32 0, i64 1
  store double %132, double* %135, align 8
  %136 = load double* %minz, align 8
  %137 = load %struct.bbox** %pbb, align 8
  %138 = getelementptr inbounds %struct.bbox* %137, i32 0, i32 0
  %139 = getelementptr inbounds [3 x double]* %138, i32 0, i64 2
  store double %136, double* %139, align 8
  %140 = load double* %maxx, align 8
  %141 = load %struct.bbox** %pbb, align 8
  %142 = getelementptr inbounds %struct.bbox* %141, i32 0, i32 1
  %143 = getelementptr inbounds [3 x double]* %142, i32 0, i64 0
  store double %140, double* %143, align 8
  %144 = load double* %maxy, align 8
  %145 = load %struct.bbox** %pbb, align 8
  %146 = getelementptr inbounds %struct.bbox* %145, i32 0, i32 1
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 1
  store double %144, double* %147, align 8
  %148 = load double* %maxz, align 8
  %149 = load %struct.bbox** %pbb, align 8
  %150 = getelementptr inbounds %struct.bbox* %149, i32 0, i32 1
  %151 = getelementptr inbounds [3 x double]* %150, i32 0, i64 2
  store double %148, double* %151, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PolyNormal(%struct.irecord* %hit, double* %Pi, double* %Ni) {
  %1 = alloca %struct.irecord*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %pe = alloca %struct.element*, align 8
  %pp = alloca %struct.poly*, align 8
  store %struct.irecord* %hit, %struct.irecord** %1, align 8
  store double* %Pi, double** %2, align 8
  store double* %Ni, double** %3, align 8
  %4 = load %struct.irecord** %1, align 8
  %5 = getelementptr inbounds %struct.irecord* %4, i32 0, i32 1
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.element** %pe, align 8
  %8 = getelementptr inbounds %struct.element* %7, i32 0, i32 3
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.poly*
  store %struct.poly* %10, %struct.poly** %pp, align 8
  %11 = load %struct.poly** %pp, align 8
  %12 = getelementptr inbounds %struct.poly* %11, i32 0, i32 1
  %13 = getelementptr inbounds [3 x double]* %12, i32 0, i64 0
  %14 = load double* %13, align 8
  %15 = load double** %3, align 8
  %16 = getelementptr inbounds double* %15, i64 0
  store double %14, double* %16, align 8
  %17 = load %struct.poly** %pp, align 8
  %18 = getelementptr inbounds %struct.poly* %17, i32 0, i32 1
  %19 = getelementptr inbounds [3 x double]* %18, i32 0, i64 1
  %20 = load double* %19, align 8
  %21 = load double** %3, align 8
  %22 = getelementptr inbounds double* %21, i64 1
  store double %20, double* %22, align 8
  %23 = load %struct.poly** %pp, align 8
  %24 = getelementptr inbounds %struct.poly* %23, i32 0, i32 1
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 2
  %26 = load double* %25, align 8
  %27 = load double** %3, align 8
  %28 = getelementptr inbounds double* %27, i64 2
  store double %26, double* %28, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PolyDataNormalize(%struct.object* %po, [4 x double]* %normMat) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %coord = alloca [4 x double], align 16
  %pv = alloca [3 x double]*, align 8
  %pp = alloca %struct.poly*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %normMat, [4 x double]** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 3
  %5 = load %struct.element** %4, align 8
  store %struct.element* %5, %struct.element** %pe, align 8
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 2
  %8 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %7, [4 x double]* %8)
  %9 = load %struct.element** %pe, align 8
  %10 = getelementptr inbounds %struct.element* %9, i32 0, i32 3
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.poly*
  store %struct.poly* %12, %struct.poly** %pp, align 8
  %13 = load %struct.poly** %pp, align 8
  %14 = getelementptr inbounds %struct.poly* %13, i32 0, i32 3
  %15 = load [3 x double]** %14, align 8
  store [3 x double]* %15, [3 x double]** %pv, align 8
  %16 = load [3 x double]** %pv, align 8
  %17 = getelementptr inbounds [3 x double]* %16, i32 0, i64 0
  %18 = load double* %17, align 8
  %19 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %18, double* %19, align 8
  %20 = load [3 x double]** %pv, align 8
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 1
  %22 = load double* %21, align 8
  %23 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %22, double* %23, align 8
  %24 = load [3 x double]** %pv, align 8
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 2
  %26 = load double* %25, align 8
  %27 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %26, double* %27, align 8
  %28 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %28, align 8
  br label %29

; <label>:29                                      ; preds = %43, %0
  %30 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %31 = load double* %30, align 8
  %32 = fcmp une double %31, 1.000000e+32
  br i1 %32, label %33, label %41

; <label>:33                                      ; preds = %29
  %34 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %35 = load double* %34, align 8
  %36 = fcmp une double %35, 1.000000e+32
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %39 = load double* %38, align 8
  %40 = fcmp une double %39, 1.000000e+32
  br label %41

; <label>:41                                      ; preds = %37, %33, %29
  %42 = phi i1 [ false, %33 ], [ false, %29 ], [ %40, %37 ]
  br i1 %42, label %43, label %74

; <label>:43                                      ; preds = %41
  %44 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  %45 = load [4 x double]** %2, align 8
  %46 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  call void @VecMatMult(double* %44, [4 x double]* %45, double* %46)
  %47 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %48 = load double* %47, align 8
  %49 = load [3 x double]** %pv, align 8
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 0
  store double %48, double* %50, align 8
  %51 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %52 = load double* %51, align 8
  %53 = load [3 x double]** %pv, align 8
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 1
  store double %52, double* %54, align 8
  %55 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %56 = load double* %55, align 8
  %57 = load [3 x double]** %pv, align 8
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  store double %56, double* %58, align 8
  %59 = load [3 x double]** %pv, align 8
  %60 = getelementptr inbounds [3 x double]* %59, i32 1
  store [3 x double]* %60, [3 x double]** %pv, align 8
  %61 = load [3 x double]** %pv, align 8
  %62 = getelementptr inbounds [3 x double]* %61, i32 0, i64 0
  %63 = load double* %62, align 8
  %64 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %63, double* %64, align 8
  %65 = load [3 x double]** %pv, align 8
  %66 = getelementptr inbounds [3 x double]* %65, i32 0, i64 1
  %67 = load double* %66, align 8
  %68 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %67, double* %68, align 8
  %69 = load [3 x double]** %pv, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 2
  %71 = load double* %70, align 8
  %72 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %71, double* %72, align 8
  %73 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %73, align 8
  br label %29

; <label>:74                                      ; preds = %41
  store i64 0, i64* %i, align 8
  br label %75

; <label>:75                                      ; preds = %128, %74
  %76 = load i64* %i, align 8
  %77 = load %struct.object** %1, align 8
  %78 = getelementptr inbounds %struct.object* %77, i32 0, i32 4
  %79 = load i64* %78, align 8
  %80 = icmp slt i64 %76, %79
  br i1 %80, label %81, label %131

; <label>:81                                      ; preds = %75
  %82 = load %struct.element** %pe, align 8
  %83 = getelementptr inbounds %struct.element* %82, i32 0, i32 3
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.poly*
  store %struct.poly* %85, %struct.poly** %pp, align 8
  %86 = load %struct.element** %pe, align 8
  %87 = getelementptr inbounds %struct.element* %86, i32 0, i32 1
  %88 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %87, [4 x double]* %88)
  %89 = load %struct.poly** %pp, align 8
  %90 = getelementptr inbounds %struct.poly* %89, i32 0, i32 3
  %91 = load [3 x double]** %90, align 8
  %92 = load %struct.poly** %pp, align 8
  %93 = getelementptr inbounds %struct.poly* %92, i32 0, i32 4
  %94 = load i64** %93, align 8
  %95 = load i64* %94, align 8
  %96 = getelementptr inbounds [3 x double]* %91, i64 %95
  store [3 x double]* %96, [3 x double]** %pv, align 8
  %97 = load %struct.poly** %pp, align 8
  %98 = getelementptr inbounds %struct.poly* %97, i32 0, i32 1
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 0
  %100 = load double* %99, align 8
  %101 = load [3 x double]** %pv, align 8
  %102 = getelementptr inbounds [3 x double]* %101, i32 0, i64 0
  %103 = load double* %102, align 8
  %104 = fmul double %100, %103
  %105 = load %struct.poly** %pp, align 8
  %106 = getelementptr inbounds %struct.poly* %105, i32 0, i32 1
  %107 = getelementptr inbounds [3 x double]* %106, i32 0, i64 1
  %108 = load double* %107, align 8
  %109 = load [3 x double]** %pv, align 8
  %110 = getelementptr inbounds [3 x double]* %109, i32 0, i64 1
  %111 = load double* %110, align 8
  %112 = fmul double %108, %111
  %113 = fadd double %104, %112
  %114 = load %struct.poly** %pp, align 8
  %115 = getelementptr inbounds %struct.poly* %114, i32 0, i32 1
  %116 = getelementptr inbounds [3 x double]* %115, i32 0, i64 2
  %117 = load double* %116, align 8
  %118 = load [3 x double]** %pv, align 8
  %119 = getelementptr inbounds [3 x double]* %118, i32 0, i64 2
  %120 = load double* %119, align 8
  %121 = fmul double %117, %120
  %122 = fadd double %113, %121
  %123 = fsub double -0.000000e+00, %122
  %124 = load %struct.poly** %pp, align 8
  %125 = getelementptr inbounds %struct.poly* %124, i32 0, i32 2
  store double %123, double* %125, align 8
  %126 = load %struct.element** %pe, align 8
  %127 = getelementptr inbounds %struct.element* %126, i32 1
  store %struct.element* %127, %struct.element** %pe, align 8
  br label %128

; <label>:128                                     ; preds = %81
  %129 = load i64* %i, align 8
  %130 = add nsw i64 %129, 1
  store i64 %130, i64* %i, align 8
  br label %75

; <label>:131                                     ; preds = %75
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @PolyPeIntersect(%struct.ray* %pr, %struct.element* %pe, %struct.irecord* %hit) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.element*, align 8
  %4 = alloca %struct.irecord*, align 8
  %i = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %toright = alloca i64, align 8
  %sh = alloca i64, align 8
  %nsh = alloca i64, align 8
  %tmp = alloca double, align 8
  %Rd_dot_Pn = alloca double, align 8
  %Ro_dot_Pn = alloca double, align 8
  %q1 = alloca double, align 8
  %q2 = alloca double, align 8
  %tval = alloca double, align 8
  %x = alloca [101 x double], align 16
  %y = alloca [101 x double], align 16
  %ix = alloca double, align 8
  %iy = alloca double, align 8
  %dx = alloca double, align 8
  %dy = alloca double, align 8
  %xint = alloca double, align 8
  %I = alloca [3 x double], align 16
  %vlist = alloca [3 x double]*, align 8
  %vpos = alloca [3 x double]*, align 8
  %v1 = alloca [3 x double]*, align 8
  %v2 = alloca [3 x double]*, align 8
  %v3 = alloca [3 x double]*, align 8
  %pp = alloca %struct.poly*, align 8
  store %struct.ray* %pr, %struct.ray** %2, align 8
  store %struct.element* %pe, %struct.element** %3, align 8
  store %struct.irecord* %hit, %struct.irecord** %4, align 8
  %5 = load %struct.element** %3, align 8
  %6 = getelementptr inbounds %struct.element* %5, i32 0, i32 3
  %7 = load i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.poly*
  store %struct.poly* %8, %struct.poly** %pp, align 8
  %9 = load %struct.poly** %pp, align 8
  %10 = getelementptr inbounds %struct.poly* %9, i32 0, i32 1
  %11 = getelementptr inbounds [3 x double]* %10, i32 0, i64 0
  %12 = load double* %11, align 8
  %13 = load %struct.ray** %2, align 8
  %14 = getelementptr inbounds %struct.ray* %13, i32 0, i32 4
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 0
  %16 = load double* %15, align 8
  %17 = fmul double %12, %16
  %18 = load %struct.poly** %pp, align 8
  %19 = getelementptr inbounds %struct.poly* %18, i32 0, i32 1
  %20 = getelementptr inbounds [3 x double]* %19, i32 0, i64 1
  %21 = load double* %20, align 8
  %22 = load %struct.ray** %2, align 8
  %23 = getelementptr inbounds %struct.ray* %22, i32 0, i32 4
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 1
  %25 = load double* %24, align 8
  %26 = fmul double %21, %25
  %27 = fadd double %17, %26
  %28 = load %struct.poly** %pp, align 8
  %29 = getelementptr inbounds %struct.poly* %28, i32 0, i32 1
  %30 = getelementptr inbounds [3 x double]* %29, i32 0, i64 2
  %31 = load double* %30, align 8
  %32 = load %struct.ray** %2, align 8
  %33 = getelementptr inbounds %struct.ray* %32, i32 0, i32 4
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 2
  %35 = load double* %34, align 8
  %36 = fmul double %31, %35
  %37 = fadd double %27, %36
  store double %37, double* %Rd_dot_Pn, align 8
  %38 = load double* %Rd_dot_Pn, align 8
  %39 = fcmp ogt double %38, 0.000000e+00
  br i1 %39, label %40, label %42

; <label>:40                                      ; preds = %0
  %41 = load double* %Rd_dot_Pn, align 8
  br label %45

; <label>:42                                      ; preds = %0
  %43 = load double* %Rd_dot_Pn, align 8
  %44 = fsub double -0.000000e+00, %43
  br label %45

; <label>:45                                      ; preds = %42, %40
  %46 = phi double [ %41, %40 ], [ %44, %42 ]
  %47 = fcmp olt double %46, 1.000000e-07
  br i1 %47, label %48, label %49

; <label>:48                                      ; preds = %45
  store i64 0, i64* %1
  br label %374

; <label>:49                                      ; preds = %45
  %50 = load %struct.poly** %pp, align 8
  %51 = getelementptr inbounds %struct.poly* %50, i32 0, i32 1
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 0
  %53 = load double* %52, align 8
  %54 = load %struct.ray** %2, align 8
  %55 = getelementptr inbounds %struct.ray* %54, i32 0, i32 3
  %56 = getelementptr inbounds [3 x double]* %55, i32 0, i64 0
  %57 = load double* %56, align 8
  %58 = fmul double %53, %57
  %59 = load %struct.poly** %pp, align 8
  %60 = getelementptr inbounds %struct.poly* %59, i32 0, i32 1
  %61 = getelementptr inbounds [3 x double]* %60, i32 0, i64 1
  %62 = load double* %61, align 8
  %63 = load %struct.ray** %2, align 8
  %64 = getelementptr inbounds %struct.ray* %63, i32 0, i32 3
  %65 = getelementptr inbounds [3 x double]* %64, i32 0, i64 1
  %66 = load double* %65, align 8
  %67 = fmul double %62, %66
  %68 = fadd double %58, %67
  %69 = load %struct.poly** %pp, align 8
  %70 = getelementptr inbounds %struct.poly* %69, i32 0, i32 1
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 2
  %72 = load double* %71, align 8
  %73 = load %struct.ray** %2, align 8
  %74 = getelementptr inbounds %struct.ray* %73, i32 0, i32 3
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 2
  %76 = load double* %75, align 8
  %77 = fmul double %72, %76
  %78 = fadd double %68, %77
  store double %78, double* %Ro_dot_Pn, align 8
  %79 = load %struct.poly** %pp, align 8
  %80 = getelementptr inbounds %struct.poly* %79, i32 0, i32 2
  %81 = load double* %80, align 8
  %82 = load double* %Ro_dot_Pn, align 8
  %83 = fadd double %81, %82
  %84 = fsub double -0.000000e+00, %83
  %85 = load double* %Rd_dot_Pn, align 8
  %86 = fdiv double %84, %85
  store double %86, double* %tval, align 8
  %87 = load double* %tval, align 8
  %88 = fcmp olt double %87, 1.000000e-07
  br i1 %88, label %89, label %90

; <label>:89                                      ; preds = %49
  store i64 0, i64* %1
  br label %374

; <label>:90                                      ; preds = %49
  %91 = load %struct.ray** %2, align 8
  %92 = getelementptr inbounds %struct.ray* %91, i32 0, i32 3
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 0
  %94 = load double* %93, align 8
  %95 = load %struct.ray** %2, align 8
  %96 = getelementptr inbounds %struct.ray* %95, i32 0, i32 4
  %97 = getelementptr inbounds [3 x double]* %96, i32 0, i64 0
  %98 = load double* %97, align 8
  %99 = load double* %tval, align 8
  %100 = fmul double %98, %99
  %101 = fadd double %94, %100
  %102 = getelementptr inbounds [3 x double]* %I, i32 0, i64 0
  store double %101, double* %102, align 8
  %103 = load %struct.ray** %2, align 8
  %104 = getelementptr inbounds %struct.ray* %103, i32 0, i32 3
  %105 = getelementptr inbounds [3 x double]* %104, i32 0, i64 1
  %106 = load double* %105, align 8
  %107 = load %struct.ray** %2, align 8
  %108 = getelementptr inbounds %struct.ray* %107, i32 0, i32 4
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 1
  %110 = load double* %109, align 8
  %111 = load double* %tval, align 8
  %112 = fmul double %110, %111
  %113 = fadd double %106, %112
  %114 = getelementptr inbounds [3 x double]* %I, i32 0, i64 1
  store double %113, double* %114, align 8
  %115 = load %struct.ray** %2, align 8
  %116 = getelementptr inbounds %struct.ray* %115, i32 0, i32 3
  %117 = getelementptr inbounds [3 x double]* %116, i32 0, i64 2
  %118 = load double* %117, align 8
  %119 = load %struct.ray** %2, align 8
  %120 = getelementptr inbounds %struct.ray* %119, i32 0, i32 4
  %121 = getelementptr inbounds [3 x double]* %120, i32 0, i64 2
  %122 = load double* %121, align 8
  %123 = load double* %tval, align 8
  %124 = fmul double %122, %123
  %125 = fadd double %118, %124
  %126 = getelementptr inbounds [3 x double]* %I, i32 0, i64 2
  store double %125, double* %126, align 8
  %127 = load %struct.poly** %pp, align 8
  %128 = getelementptr inbounds %struct.poly* %127, i32 0, i32 3
  %129 = load [3 x double]** %128, align 8
  store [3 x double]* %129, [3 x double]** %vlist, align 8
  %130 = load %struct.poly** %pp, align 8
  %131 = getelementptr inbounds %struct.poly* %130, i32 0, i32 4
  %132 = load i64** %131, align 8
  store i64* %132, i64** %vindex, align 8
  %133 = load %struct.poly** %pp, align 8
  %134 = getelementptr inbounds %struct.poly* %133, i32 0, i32 5
  %135 = load i64* %134, align 8
  switch i64 %135, label %232 [
    i64 1, label %136
    i64 2, label %168
    i64 3, label %200
  ]

; <label>:136                                     ; preds = %90
  store i64 0, i64* %i, align 8
  br label %137

; <label>:137                                     ; preds = %160, %136
  %138 = load i64* %i, align 8
  %139 = load %struct.poly** %pp, align 8
  %140 = getelementptr inbounds %struct.poly* %139, i32 0, i32 0
  %141 = load i64* %140, align 8
  %142 = icmp slt i64 %138, %141
  br i1 %142, label %143, label %163

; <label>:143                                     ; preds = %137
  %144 = load [3 x double]** %vlist, align 8
  %145 = load i64** %vindex, align 8
  %146 = load i64* %145, align 8
  %147 = getelementptr inbounds [3 x double]* %144, i64 %146
  store [3 x double]* %147, [3 x double]** %vpos, align 8
  %148 = load [3 x double]** %vpos, align 8
  %149 = getelementptr inbounds [3 x double]* %148, i32 0, i64 1
  %150 = load double* %149, align 8
  %151 = load i64* %i, align 8
  %152 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %151
  store double %150, double* %152, align 8
  %153 = load [3 x double]** %vpos, align 8
  %154 = getelementptr inbounds [3 x double]* %153, i32 0, i64 2
  %155 = load double* %154, align 8
  %156 = load i64* %i, align 8
  %157 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %156
  store double %155, double* %157, align 8
  %158 = load i64** %vindex, align 8
  %159 = getelementptr inbounds i64* %158, i32 1
  store i64* %159, i64** %vindex, align 8
  br label %160

; <label>:160                                     ; preds = %143
  %161 = load i64* %i, align 8
  %162 = add nsw i64 %161, 1
  store i64 %162, i64* %i, align 8
  br label %137

; <label>:163                                     ; preds = %137
  %164 = getelementptr inbounds [3 x double]* %I, i32 0, i64 1
  %165 = load double* %164, align 8
  store double %165, double* %ix, align 8
  %166 = getelementptr inbounds [3 x double]* %I, i32 0, i64 2
  %167 = load double* %166, align 8
  store double %167, double* %iy, align 8
  br label %232

; <label>:168                                     ; preds = %90
  store i64 0, i64* %i, align 8
  br label %169

; <label>:169                                     ; preds = %192, %168
  %170 = load i64* %i, align 8
  %171 = load %struct.poly** %pp, align 8
  %172 = getelementptr inbounds %struct.poly* %171, i32 0, i32 0
  %173 = load i64* %172, align 8
  %174 = icmp slt i64 %170, %173
  br i1 %174, label %175, label %195

; <label>:175                                     ; preds = %169
  %176 = load [3 x double]** %vlist, align 8
  %177 = load i64** %vindex, align 8
  %178 = load i64* %177, align 8
  %179 = getelementptr inbounds [3 x double]* %176, i64 %178
  store [3 x double]* %179, [3 x double]** %vpos, align 8
  %180 = load [3 x double]** %vpos, align 8
  %181 = getelementptr inbounds [3 x double]* %180, i32 0, i64 0
  %182 = load double* %181, align 8
  %183 = load i64* %i, align 8
  %184 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %183
  store double %182, double* %184, align 8
  %185 = load [3 x double]** %vpos, align 8
  %186 = getelementptr inbounds [3 x double]* %185, i32 0, i64 2
  %187 = load double* %186, align 8
  %188 = load i64* %i, align 8
  %189 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %188
  store double %187, double* %189, align 8
  %190 = load i64** %vindex, align 8
  %191 = getelementptr inbounds i64* %190, i32 1
  store i64* %191, i64** %vindex, align 8
  br label %192

; <label>:192                                     ; preds = %175
  %193 = load i64* %i, align 8
  %194 = add nsw i64 %193, 1
  store i64 %194, i64* %i, align 8
  br label %169

; <label>:195                                     ; preds = %169
  %196 = getelementptr inbounds [3 x double]* %I, i32 0, i64 0
  %197 = load double* %196, align 8
  store double %197, double* %ix, align 8
  %198 = getelementptr inbounds [3 x double]* %I, i32 0, i64 2
  %199 = load double* %198, align 8
  store double %199, double* %iy, align 8
  br label %232

; <label>:200                                     ; preds = %90
  store i64 0, i64* %i, align 8
  br label %201

; <label>:201                                     ; preds = %224, %200
  %202 = load i64* %i, align 8
  %203 = load %struct.poly** %pp, align 8
  %204 = getelementptr inbounds %struct.poly* %203, i32 0, i32 0
  %205 = load i64* %204, align 8
  %206 = icmp slt i64 %202, %205
  br i1 %206, label %207, label %227

; <label>:207                                     ; preds = %201
  %208 = load [3 x double]** %vlist, align 8
  %209 = load i64** %vindex, align 8
  %210 = load i64* %209, align 8
  %211 = getelementptr inbounds [3 x double]* %208, i64 %210
  store [3 x double]* %211, [3 x double]** %vpos, align 8
  %212 = load [3 x double]** %vpos, align 8
  %213 = getelementptr inbounds [3 x double]* %212, i32 0, i64 0
  %214 = load double* %213, align 8
  %215 = load i64* %i, align 8
  %216 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %215
  store double %214, double* %216, align 8
  %217 = load [3 x double]** %vpos, align 8
  %218 = getelementptr inbounds [3 x double]* %217, i32 0, i64 1
  %219 = load double* %218, align 8
  %220 = load i64* %i, align 8
  %221 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %220
  store double %219, double* %221, align 8
  %222 = load i64** %vindex, align 8
  %223 = getelementptr inbounds i64* %222, i32 1
  store i64* %223, i64** %vindex, align 8
  br label %224

; <label>:224                                     ; preds = %207
  %225 = load i64* %i, align 8
  %226 = add nsw i64 %225, 1
  store i64 %226, i64* %i, align 8
  br label %201

; <label>:227                                     ; preds = %201
  %228 = getelementptr inbounds [3 x double]* %I, i32 0, i64 0
  %229 = load double* %228, align 8
  store double %229, double* %ix, align 8
  %230 = getelementptr inbounds [3 x double]* %I, i32 0, i64 1
  %231 = load double* %230, align 8
  store double %231, double* %iy, align 8
  br label %232

; <label>:232                                     ; preds = %227, %195, %163, %90
  store i64 0, i64* %i, align 8
  br label %233

; <label>:233                                     ; preds = %270, %232
  %234 = load i64* %i, align 8
  %235 = load %struct.poly** %pp, align 8
  %236 = getelementptr inbounds %struct.poly* %235, i32 0, i32 0
  %237 = load i64* %236, align 8
  %238 = icmp slt i64 %234, %237
  br i1 %238, label %239, label %273

; <label>:239                                     ; preds = %233
  %240 = load double* %ix, align 8
  %241 = load i64* %i, align 8
  %242 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %241
  %243 = load double* %242, align 8
  %244 = fsub double %243, %240
  store double %244, double* %242, align 8
  %245 = load double* %iy, align 8
  %246 = load i64* %i, align 8
  %247 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %246
  %248 = load double* %247, align 8
  %249 = fsub double %248, %245
  store double %249, double* %247, align 8
  %250 = load i64* %i, align 8
  %251 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %250
  %252 = load double* %251, align 8
  %253 = fcmp ogt double %252, 0.000000e+00
  br i1 %253, label %254, label %258

; <label>:254                                     ; preds = %239
  %255 = load i64* %i, align 8
  %256 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %255
  %257 = load double* %256, align 8
  br label %263

; <label>:258                                     ; preds = %239
  %259 = load i64* %i, align 8
  %260 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %259
  %261 = load double* %260, align 8
  %262 = fsub double -0.000000e+00, %261
  br label %263

; <label>:263                                     ; preds = %258, %254
  %264 = phi double [ %257, %254 ], [ %262, %258 ]
  %265 = fcmp olt double %264, 1.000000e-07
  br i1 %265, label %266, label %269

; <label>:266                                     ; preds = %263
  %267 = load i64* %i, align 8
  %268 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %267
  store double 0.000000e+00, double* %268, align 8
  br label %269

; <label>:269                                     ; preds = %266, %263
  br label %270

; <label>:270                                     ; preds = %269
  %271 = load i64* %i, align 8
  %272 = add nsw i64 %271, 1
  store i64 %272, i64* %i, align 8
  br label %233

; <label>:273                                     ; preds = %233
  %274 = getelementptr inbounds [101 x double]* %x, i32 0, i64 0
  %275 = load double* %274, align 8
  %276 = load %struct.poly** %pp, align 8
  %277 = getelementptr inbounds %struct.poly* %276, i32 0, i32 0
  %278 = load i64* %277, align 8
  %279 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %278
  store double %275, double* %279, align 8
  %280 = getelementptr inbounds [101 x double]* %y, i32 0, i64 0
  %281 = load double* %280, align 8
  %282 = load %struct.poly** %pp, align 8
  %283 = getelementptr inbounds %struct.poly* %282, i32 0, i32 0
  %284 = load i64* %283, align 8
  %285 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %284
  store double %281, double* %285, align 8
  %286 = getelementptr inbounds [101 x double]* %y, i32 0, i64 0
  %287 = load double* %286, align 8
  %288 = fcmp olt double %287, 0.000000e+00
  br i1 %288, label %289, label %290

; <label>:289                                     ; preds = %273
  store i64 0, i64* %sh, align 8
  br label %291

; <label>:290                                     ; preds = %273
  store i64 1, i64* %sh, align 8
  br label %291

; <label>:291                                     ; preds = %290, %289
  store i64 0, i64* %toright, align 8
  store i64 0, i64* %i, align 8
  br label %292

; <label>:292                                     ; preds = %359, %291
  %293 = load i64* %i, align 8
  %294 = load %struct.poly** %pp, align 8
  %295 = getelementptr inbounds %struct.poly* %294, i32 0, i32 0
  %296 = load i64* %295, align 8
  %297 = icmp slt i64 %293, %296
  br i1 %297, label %298, label %362

; <label>:298                                     ; preds = %292
  %299 = load i64* %i, align 8
  %300 = add nsw i64 %299, 1
  %301 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %300
  %302 = load double* %301, align 8
  %303 = fcmp olt double %302, 0.000000e+00
  br i1 %303, label %304, label %305

; <label>:304                                     ; preds = %298
  store i64 0, i64* %nsh, align 8
  br label %306

; <label>:305                                     ; preds = %298
  store i64 1, i64* %nsh, align 8
  br label %306

; <label>:306                                     ; preds = %305, %304
  %307 = load i64* %nsh, align 8
  %308 = load i64* %sh, align 8
  %309 = xor i64 %307, %308
  %310 = icmp ne i64 %309, 0
  br i1 %310, label %311, label %357

; <label>:311                                     ; preds = %306
  %312 = load i64* %i, align 8
  %313 = add nsw i64 %312, 1
  %314 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %313
  %315 = load double* %314, align 8
  %316 = load i64* %i, align 8
  %317 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %316
  %318 = load double* %317, align 8
  %319 = fsub double %315, %318
  store double %319, double* %dy, align 8
  %320 = load double* %dy, align 8
  %321 = fcmp ogt double %320, 0.000000e+00
  br i1 %321, label %322, label %324

; <label>:322                                     ; preds = %311
  %323 = load double* %dy, align 8
  br label %327

; <label>:324                                     ; preds = %311
  %325 = load double* %dy, align 8
  %326 = fsub double -0.000000e+00, %325
  br label %327

; <label>:327                                     ; preds = %324, %322
  %328 = phi double [ %323, %322 ], [ %326, %324 ]
  %329 = fcmp oge double %328, 1.000000e-07
  br i1 %329, label %330, label %356

; <label>:330                                     ; preds = %327
  %331 = load i64* %i, align 8
  %332 = add nsw i64 %331, 1
  %333 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %332
  %334 = load double* %333, align 8
  %335 = load i64* %i, align 8
  %336 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %335
  %337 = load double* %336, align 8
  %338 = fsub double %334, %337
  store double %338, double* %dx, align 8
  %339 = load i64* %i, align 8
  %340 = getelementptr inbounds [101 x double]* %x, i32 0, i64 %339
  %341 = load double* %340, align 8
  %342 = load i64* %i, align 8
  %343 = getelementptr inbounds [101 x double]* %y, i32 0, i64 %342
  %344 = load double* %343, align 8
  %345 = load double* %dx, align 8
  %346 = fmul double %344, %345
  %347 = load double* %dy, align 8
  %348 = fdiv double %346, %347
  %349 = fsub double %341, %348
  store double %349, double* %xint, align 8
  %350 = load double* %xint, align 8
  %351 = fcmp ogt double %350, 0.000000e+00
  br i1 %351, label %352, label %355

; <label>:352                                     ; preds = %330
  %353 = load i64* %toright, align 8
  %354 = add nsw i64 %353, 1
  store i64 %354, i64* %toright, align 8
  br label %355

; <label>:355                                     ; preds = %352, %330
  br label %356

; <label>:356                                     ; preds = %355, %327
  br label %357

; <label>:357                                     ; preds = %356, %306
  %358 = load i64* %nsh, align 8
  store i64 %358, i64* %sh, align 8
  br label %359

; <label>:359                                     ; preds = %357
  %360 = load i64* %i, align 8
  %361 = add nsw i64 %360, 1
  store i64 %361, i64* %i, align 8
  br label %292

; <label>:362                                     ; preds = %292
  %363 = load i64* %toright, align 8
  %364 = srem i64 %363, 2
  %365 = icmp eq i64 %364, 1
  br i1 %365, label %366, label %373

; <label>:366                                     ; preds = %362
  %367 = load double* %tval, align 8
  %368 = load %struct.irecord** %4, align 8
  %369 = getelementptr inbounds %struct.irecord* %368, i32 0, i32 0
  store double %367, double* %369, align 8
  %370 = load %struct.element** %3, align 8
  %371 = load %struct.irecord** %4, align 8
  %372 = getelementptr inbounds %struct.irecord* %371, i32 0, i32 1
  store %struct.element* %370, %struct.element** %372, align 8
  store i64 1, i64* %1
  br label %374

; <label>:373                                     ; preds = %362
  store i64 0, i64* %1
  br label %374

; <label>:374                                     ; preds = %373, %366, %89, %48
  %375 = load i64* %1
  ret i64 %375
}

; Function Attrs: nounwind uwtable
define internal i64 @PolyIntersect(%struct.ray* %pr, %struct.object* %po, %struct.irecord* %hit) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca %struct.object*, align 8
  %3 = alloca %struct.irecord*, align 8
  %i = alloca i64, align 8
  %nhits = alloca i64, align 8
  %pe = alloca %struct.element*, align 8
  %newhit = alloca %struct.irecord, align 8
  store %struct.ray* %pr, %struct.ray** %1, align 8
  store %struct.object* %po, %struct.object** %2, align 8
  store %struct.irecord* %hit, %struct.irecord** %3, align 8
  store i64 0, i64* %nhits, align 8
  %4 = load %struct.object** %2, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.irecord** %3, align 8
  %8 = getelementptr inbounds %struct.irecord* %7, i64 0
  %9 = getelementptr inbounds %struct.irecord* %8, i32 0, i32 0
  store double 1.000000e+32, double* %9, align 8
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %46, %0
  %11 = load i64* %i, align 8
  %12 = load %struct.object** %2, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 4
  %14 = load i64* %13, align 8
  %15 = icmp slt i64 %11, %14
  br i1 %15, label %16, label %49

; <label>:16                                      ; preds = %10
  %17 = load %struct.ray** %1, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = call i64 @PolyPeIntersect(%struct.ray* %17, %struct.element* %18, %struct.irecord* %newhit)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %43

; <label>:21                                      ; preds = %16
  %22 = load i64* %nhits, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* %nhits, align 8
  %24 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 0
  %25 = load double* %24, align 8
  %26 = load %struct.irecord** %3, align 8
  %27 = getelementptr inbounds %struct.irecord* %26, i64 0
  %28 = getelementptr inbounds %struct.irecord* %27, i32 0, i32 0
  %29 = load double* %28, align 8
  %30 = fcmp olt double %25, %29
  br i1 %30, label %31, label %42

; <label>:31                                      ; preds = %21
  %32 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 0
  %33 = load double* %32, align 8
  %34 = load %struct.irecord** %3, align 8
  %35 = getelementptr inbounds %struct.irecord* %34, i64 0
  %36 = getelementptr inbounds %struct.irecord* %35, i32 0, i32 0
  store double %33, double* %36, align 8
  %37 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 1
  %38 = load %struct.element** %37, align 8
  %39 = load %struct.irecord** %3, align 8
  %40 = getelementptr inbounds %struct.irecord* %39, i64 0
  %41 = getelementptr inbounds %struct.irecord* %40, i32 0, i32 1
  store %struct.element* %38, %struct.element** %41, align 8
  br label %42

; <label>:42                                      ; preds = %31, %21
  br label %43

; <label>:43                                      ; preds = %42, %16
  %44 = load %struct.element** %pe, align 8
  %45 = getelementptr inbounds %struct.element* %44, i32 1
  store %struct.element* %45, %struct.element** %pe, align 8
  br label %46

; <label>:46                                      ; preds = %43
  %47 = load i64* %i, align 8
  %48 = add nsw i64 %47, 1
  store i64 %48, i64* %i, align 8
  br label %10

; <label>:49                                      ; preds = %10
  %50 = load i64* %nhits, align 8
  ret i64 %50
}

; Function Attrs: nounwind uwtable
define internal void @PolyTransform(%struct.object* %po, [4 x double]* %xtrans, [4 x double]* %xinvT) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %numelems = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %vptr = alloca [3 x double]*, align 8
  %vp = alloca [3 x double]*, align 8
  %norm = alloca [4 x double], align 16
  %coord = alloca [4 x double], align 16
  %pp = alloca %struct.poly*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %xtrans, [4 x double]** %2, align 8
  store [4 x double]* %xinvT, [4 x double]** %3, align 8
  %4 = load %struct.object** %1, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.object** %1, align 8
  %8 = getelementptr inbounds %struct.object* %7, i32 0, i32 4
  %9 = load i64* %8, align 8
  store i64 %9, i64* %numelems, align 8
  %10 = load %struct.element** %pe, align 8
  %11 = getelementptr inbounds %struct.element* %10, i32 0, i32 3
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.poly*
  store %struct.poly* %13, %struct.poly** %pp, align 8
  %14 = load %struct.poly** %pp, align 8
  %15 = getelementptr inbounds %struct.poly* %14, i32 0, i32 3
  %16 = load [3 x double]** %15, align 8
  store [3 x double]* %16, [3 x double]** %vptr, align 8
  %17 = load [3 x double]** %vptr, align 8
  %18 = getelementptr inbounds [3 x double]* %17, i32 0, i64 0
  %19 = load double* %18, align 8
  %20 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %19, double* %20, align 8
  %21 = load [3 x double]** %vptr, align 8
  %22 = getelementptr inbounds [3 x double]* %21, i32 0, i64 1
  %23 = load double* %22, align 8
  %24 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %23, double* %24, align 8
  %25 = load [3 x double]** %vptr, align 8
  %26 = getelementptr inbounds [3 x double]* %25, i32 0, i64 2
  %27 = load double* %26, align 8
  %28 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %27, double* %28, align 8
  %29 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %29, align 8
  br label %30

; <label>:30                                      ; preds = %44, %0
  %31 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %32 = load double* %31, align 8
  %33 = fcmp une double %32, 1.000000e+32
  br i1 %33, label %34, label %42

; <label>:34                                      ; preds = %30
  %35 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %36 = load double* %35, align 8
  %37 = fcmp une double %36, 1.000000e+32
  br i1 %37, label %38, label %42

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %40 = load double* %39, align 8
  %41 = fcmp une double %40, 1.000000e+32
  br label %42

; <label>:42                                      ; preds = %38, %34, %30
  %43 = phi i1 [ false, %34 ], [ false, %30 ], [ %41, %38 ]
  br i1 %43, label %44, label %75

; <label>:44                                      ; preds = %42
  %45 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  %46 = load [4 x double]** %2, align 8
  %47 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  call void @VecMatMult(double* %45, [4 x double]* %46, double* %47)
  %48 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %49 = load double* %48, align 8
  %50 = load [3 x double]** %vptr, align 8
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 0
  store double %49, double* %51, align 8
  %52 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %53 = load double* %52, align 8
  %54 = load [3 x double]** %vptr, align 8
  %55 = getelementptr inbounds [3 x double]* %54, i32 0, i64 1
  store double %53, double* %55, align 8
  %56 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %57 = load double* %56, align 8
  %58 = load [3 x double]** %vptr, align 8
  %59 = getelementptr inbounds [3 x double]* %58, i32 0, i64 2
  store double %57, double* %59, align 8
  %60 = load [3 x double]** %vptr, align 8
  %61 = getelementptr inbounds [3 x double]* %60, i32 1
  store [3 x double]* %61, [3 x double]** %vptr, align 8
  %62 = load [3 x double]** %vptr, align 8
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 0
  %64 = load double* %63, align 8
  %65 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %64, double* %65, align 8
  %66 = load [3 x double]** %vptr, align 8
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 1
  %68 = load double* %67, align 8
  %69 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %68, double* %69, align 8
  %70 = load [3 x double]** %vptr, align 8
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 2
  %72 = load double* %71, align 8
  %73 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %72, double* %73, align 8
  %74 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %74, align 8
  br label %30

; <label>:75                                      ; preds = %42
  store i64 0, i64* %i, align 8
  br label %76

; <label>:76                                      ; preds = %250, %75
  %77 = load i64* %i, align 8
  %78 = load i64* %numelems, align 8
  %79 = icmp slt i64 %77, %78
  br i1 %79, label %80, label %253

; <label>:80                                      ; preds = %76
  %81 = load %struct.element** %pe, align 8
  %82 = getelementptr inbounds %struct.element* %81, i32 0, i32 3
  %83 = load i8** %82, align 8
  %84 = bitcast i8* %83 to %struct.poly*
  store %struct.poly* %84, %struct.poly** %pp, align 8
  %85 = load %struct.poly** %pp, align 8
  %86 = getelementptr inbounds %struct.poly* %85, i32 0, i32 1
  %87 = getelementptr inbounds [3 x double]* %86, i32 0, i64 0
  %88 = load double* %87, align 8
  %89 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  store double %88, double* %89, align 8
  %90 = load %struct.poly** %pp, align 8
  %91 = getelementptr inbounds %struct.poly* %90, i32 0, i32 1
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 1
  %93 = load double* %92, align 8
  %94 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  store double %93, double* %94, align 8
  %95 = load %struct.poly** %pp, align 8
  %96 = getelementptr inbounds %struct.poly* %95, i32 0, i32 1
  %97 = getelementptr inbounds [3 x double]* %96, i32 0, i64 2
  %98 = load double* %97, align 8
  %99 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  store double %98, double* %99, align 8
  %100 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 3
  store double 0.000000e+00, double* %100, align 8
  %101 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  %102 = load [4 x double]** %3, align 8
  %103 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  call void @VecMatMult(double* %101, [4 x double]* %102, double* %103)
  %104 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  call void @VecNorm(double* %104)
  %105 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %106 = load double* %105, align 8
  %107 = load %struct.poly** %pp, align 8
  %108 = getelementptr inbounds %struct.poly* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 0
  store double %106, double* %109, align 8
  %110 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %111 = load double* %110, align 8
  %112 = load %struct.poly** %pp, align 8
  %113 = getelementptr inbounds %struct.poly* %112, i32 0, i32 1
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 1
  store double %111, double* %114, align 8
  %115 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %116 = load double* %115, align 8
  %117 = load %struct.poly** %pp, align 8
  %118 = getelementptr inbounds %struct.poly* %117, i32 0, i32 1
  %119 = getelementptr inbounds [3 x double]* %118, i32 0, i64 2
  store double %116, double* %119, align 8
  %120 = load %struct.poly** %pp, align 8
  %121 = getelementptr inbounds %struct.poly* %120, i32 0, i32 3
  %122 = load [3 x double]** %121, align 8
  %123 = load %struct.poly** %pp, align 8
  %124 = getelementptr inbounds %struct.poly* %123, i32 0, i32 4
  %125 = load i64** %124, align 8
  %126 = load i64* %125, align 8
  %127 = getelementptr inbounds [3 x double]* %122, i64 %126
  store [3 x double]* %127, [3 x double]** %vp, align 8
  %128 = load %struct.poly** %pp, align 8
  %129 = getelementptr inbounds %struct.poly* %128, i32 0, i32 1
  %130 = getelementptr inbounds [3 x double]* %129, i32 0, i64 0
  %131 = load double* %130, align 8
  %132 = load [3 x double]** %vp, align 8
  %133 = getelementptr inbounds [3 x double]* %132, i32 0, i64 0
  %134 = load double* %133, align 8
  %135 = fmul double %131, %134
  %136 = load %struct.poly** %pp, align 8
  %137 = getelementptr inbounds %struct.poly* %136, i32 0, i32 1
  %138 = getelementptr inbounds [3 x double]* %137, i32 0, i64 1
  %139 = load double* %138, align 8
  %140 = load [3 x double]** %vp, align 8
  %141 = getelementptr inbounds [3 x double]* %140, i32 0, i64 1
  %142 = load double* %141, align 8
  %143 = fmul double %139, %142
  %144 = fadd double %135, %143
  %145 = load %struct.poly** %pp, align 8
  %146 = getelementptr inbounds %struct.poly* %145, i32 0, i32 1
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 2
  %148 = load double* %147, align 8
  %149 = load [3 x double]** %vp, align 8
  %150 = getelementptr inbounds [3 x double]* %149, i32 0, i64 2
  %151 = load double* %150, align 8
  %152 = fmul double %148, %151
  %153 = fadd double %144, %152
  %154 = fsub double -0.000000e+00, %153
  %155 = load %struct.poly** %pp, align 8
  %156 = getelementptr inbounds %struct.poly* %155, i32 0, i32 2
  store double %154, double* %156, align 8
  %157 = load %struct.poly** %pp, align 8
  %158 = getelementptr inbounds %struct.poly* %157, i32 0, i32 1
  %159 = getelementptr inbounds [3 x double]* %158, i32 0, i64 0
  %160 = load double* %159, align 8
  %161 = fcmp ogt double %160, 0.000000e+00
  br i1 %161, label %162, label %167

; <label>:162                                     ; preds = %80
  %163 = load %struct.poly** %pp, align 8
  %164 = getelementptr inbounds %struct.poly* %163, i32 0, i32 1
  %165 = getelementptr inbounds [3 x double]* %164, i32 0, i64 0
  %166 = load double* %165, align 8
  br label %173

; <label>:167                                     ; preds = %80
  %168 = load %struct.poly** %pp, align 8
  %169 = getelementptr inbounds %struct.poly* %168, i32 0, i32 1
  %170 = getelementptr inbounds [3 x double]* %169, i32 0, i64 0
  %171 = load double* %170, align 8
  %172 = fsub double -0.000000e+00, %171
  br label %173

; <label>:173                                     ; preds = %167, %162
  %174 = phi double [ %166, %162 ], [ %172, %167 ]
  %175 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  store double %174, double* %175, align 8
  %176 = load %struct.poly** %pp, align 8
  %177 = getelementptr inbounds %struct.poly* %176, i32 0, i32 1
  %178 = getelementptr inbounds [3 x double]* %177, i32 0, i64 1
  %179 = load double* %178, align 8
  %180 = fcmp ogt double %179, 0.000000e+00
  br i1 %180, label %181, label %186

; <label>:181                                     ; preds = %173
  %182 = load %struct.poly** %pp, align 8
  %183 = getelementptr inbounds %struct.poly* %182, i32 0, i32 1
  %184 = getelementptr inbounds [3 x double]* %183, i32 0, i64 1
  %185 = load double* %184, align 8
  br label %192

; <label>:186                                     ; preds = %173
  %187 = load %struct.poly** %pp, align 8
  %188 = getelementptr inbounds %struct.poly* %187, i32 0, i32 1
  %189 = getelementptr inbounds [3 x double]* %188, i32 0, i64 1
  %190 = load double* %189, align 8
  %191 = fsub double -0.000000e+00, %190
  br label %192

; <label>:192                                     ; preds = %186, %181
  %193 = phi double [ %185, %181 ], [ %191, %186 ]
  %194 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  store double %193, double* %194, align 8
  %195 = load %struct.poly** %pp, align 8
  %196 = getelementptr inbounds %struct.poly* %195, i32 0, i32 1
  %197 = getelementptr inbounds [3 x double]* %196, i32 0, i64 2
  %198 = load double* %197, align 8
  %199 = fcmp ogt double %198, 0.000000e+00
  br i1 %199, label %200, label %205

; <label>:200                                     ; preds = %192
  %201 = load %struct.poly** %pp, align 8
  %202 = getelementptr inbounds %struct.poly* %201, i32 0, i32 1
  %203 = getelementptr inbounds [3 x double]* %202, i32 0, i64 2
  %204 = load double* %203, align 8
  br label %211

; <label>:205                                     ; preds = %192
  %206 = load %struct.poly** %pp, align 8
  %207 = getelementptr inbounds %struct.poly* %206, i32 0, i32 1
  %208 = getelementptr inbounds [3 x double]* %207, i32 0, i64 2
  %209 = load double* %208, align 8
  %210 = fsub double -0.000000e+00, %209
  br label %211

; <label>:211                                     ; preds = %205, %200
  %212 = phi double [ %204, %200 ], [ %210, %205 ]
  %213 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  store double %212, double* %213, align 8
  %214 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %215 = load double* %214, align 8
  %216 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %217 = load double* %216, align 8
  %218 = fcmp oge double %215, %217
  br i1 %218, label %219, label %228

; <label>:219                                     ; preds = %211
  %220 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %221 = load double* %220, align 8
  %222 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %223 = load double* %222, align 8
  %224 = fcmp oge double %221, %223
  br i1 %224, label %225, label %228

; <label>:225                                     ; preds = %219
  %226 = load %struct.poly** %pp, align 8
  %227 = getelementptr inbounds %struct.poly* %226, i32 0, i32 5
  store i64 1, i64* %227, align 8
  br label %247

; <label>:228                                     ; preds = %219, %211
  %229 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %230 = load double* %229, align 8
  %231 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %232 = load double* %231, align 8
  %233 = fcmp oge double %230, %232
  br i1 %233, label %234, label %243

; <label>:234                                     ; preds = %228
  %235 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %236 = load double* %235, align 8
  %237 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %238 = load double* %237, align 8
  %239 = fcmp oge double %236, %238
  br i1 %239, label %240, label %243

; <label>:240                                     ; preds = %234
  %241 = load %struct.poly** %pp, align 8
  %242 = getelementptr inbounds %struct.poly* %241, i32 0, i32 5
  store i64 2, i64* %242, align 8
  br label %246

; <label>:243                                     ; preds = %234, %228
  %244 = load %struct.poly** %pp, align 8
  %245 = getelementptr inbounds %struct.poly* %244, i32 0, i32 5
  store i64 3, i64* %245, align 8
  br label %246

; <label>:246                                     ; preds = %243, %240
  br label %247

; <label>:247                                     ; preds = %246, %225
  %248 = load %struct.element** %pe, align 8
  %249 = getelementptr inbounds %struct.element* %248, i32 1
  store %struct.element* %249, %struct.element** %pe, align 8
  br label %250

; <label>:250                                     ; preds = %247
  %251 = load i64* %i, align 8
  %252 = add nsw i64 %251, 1
  store i64 %252, i64* %i, align 8
  br label %76

; <label>:253                                     ; preds = %76
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @PolyRead(%struct.object* %po, %struct._IO_FILE* %pf) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca %struct._IO_FILE*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %instat = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %totalverts = alloca i64, align 8
  %normstr = alloca [5 x i8], align 1
  %pnormals = alloca i64, align 8
  %vnormals = alloca i64, align 8
  %pnorm = alloca [3 x double], align 16
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %vp = alloca [3 x double]*, align 8
  %vptmp = alloca [3 x double]*, align 8
  %vptmp2 = alloca [3 x double]*, align 8
  %tmppnt = alloca [3 x double], align 16
  %tmppnt2 = alloca [3 x double], align 16
  %cross = alloca [3 x double], align 16
  %pp = alloca %struct.poly*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store %struct._IO_FILE* %pf, %struct._IO_FILE** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 3
  %5 = load %struct.element** %4, align 8
  store %struct.element* %5, %struct.element** %pe, align 8
  %6 = load %struct._IO_FILE** %2, align 8
  %7 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8]* @.str.4.370, i32 0, i32 0), i64* %totalverts)
  %8 = sext i32 %7 to i64
  store i64 %8, i64* %instat, align 8
  %9 = load i64* %instat, align 8
  %10 = icmp ne i64 %9, 1
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.5.371, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:13                                      ; preds = %0
  %14 = load %struct.object** %1, align 8
  %15 = getelementptr inbounds %struct.object* %14, i32 0, i32 4
  %16 = load i64* %15, align 8
  %17 = mul i64 64, %16
  %18 = call i8* @GlobalMalloc(i64 %17, i8* getelementptr inbounds ([7 x i8]* @.str.6.372, i32 0, i32 0))
  %19 = bitcast i8* %18 to %struct.poly*
  store %struct.poly* %19, %struct.poly** %pp, align 8
  %20 = load i64* %totalverts, align 8
  %21 = add nsw i64 %20, 1
  %22 = mul i64 24, %21
  %23 = call i8* @GlobalMalloc(i64 %22, i8* getelementptr inbounds ([7 x i8]* @.str.6.372, i32 0, i32 0))
  %24 = bitcast i8* %23 to [3 x double]*
  store [3 x double]* %24, [3 x double]** %vlist, align 8
  %25 = load [3 x double]** %vlist, align 8
  store [3 x double]* %25, [3 x double]** %vptr, align 8
  %26 = load %struct._IO_FILE** %2, align 8
  %27 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i32 0
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8]* @.str.7.373, i32 0, i32 0), i8* %27)
  %29 = sext i32 %28 to i64
  store i64 %29, i64* %instat, align 8
  %30 = load i64* %instat, align 8
  %31 = icmp ne i64 %30, 1
  br i1 %31, label %32, label %34

; <label>:32                                      ; preds = %13
  %33 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([43 x i8]* @.str.8.374, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:34                                      ; preds = %13
  %35 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i64 2
  %36 = load i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 121
  %39 = select i1 %38, i32 1, i32 0
  %40 = sext i32 %39 to i64
  store i64 %40, i64* %pnormals, align 8
  store i64 0, i64* %i, align 8
  br label %41

; <label>:41                                      ; preds = %63, %34
  %42 = load i64* %i, align 8
  %43 = load i64* %totalverts, align 8
  %44 = icmp slt i64 %42, %43
  br i1 %44, label %45, label %66

; <label>:45                                      ; preds = %41
  %46 = load %struct._IO_FILE** %2, align 8
  %47 = load [3 x double]** %vptr, align 8
  %48 = getelementptr inbounds [3 x double]* %47, i32 0, i64 0
  %49 = load [3 x double]** %vptr, align 8
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 1
  %51 = load [3 x double]** %vptr, align 8
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 2
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([12 x i8]* @.str.9.375, i32 0, i32 0), double* %48, double* %50, double* %52)
  %54 = sext i32 %53 to i64
  store i64 %54, i64* %instat, align 8
  %55 = load i64* %instat, align 8
  %56 = icmp ne i64 %55, 3
  br i1 %56, label %57, label %60

; <label>:57                                      ; preds = %45
  %58 = load i64* %i, align 8
  %59 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([32 x i8]* @.str.10.376, i32 0, i32 0), i64 %58)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:60                                      ; preds = %45
  %61 = load [3 x double]** %vptr, align 8
  %62 = getelementptr inbounds [3 x double]* %61, i32 1
  store [3 x double]* %62, [3 x double]** %vptr, align 8
  br label %63

; <label>:63                                      ; preds = %60
  %64 = load i64* %i, align 8
  %65 = add nsw i64 %64, 1
  store i64 %65, i64* %i, align 8
  br label %41

; <label>:66                                      ; preds = %41
  %67 = load [3 x double]** %vptr, align 8
  %68 = getelementptr inbounds [3 x double]* %67, i32 0, i64 0
  store double 1.000000e+32, double* %68, align 8
  %69 = load [3 x double]** %vptr, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 1
  store double 1.000000e+32, double* %70, align 8
  %71 = load [3 x double]** %vptr, align 8
  %72 = getelementptr inbounds [3 x double]* %71, i32 0, i64 2
  store double 1.000000e+32, double* %72, align 8
  store i64 0, i64* %i, align 8
  br label %73

; <label>:73                                      ; preds = %645, %66
  %74 = load i64* %i, align 8
  %75 = load %struct.object** %1, align 8
  %76 = getelementptr inbounds %struct.object* %75, i32 0, i32 4
  %77 = load i64* %76, align 8
  %78 = icmp slt i64 %74, %77
  br i1 %78, label %79, label %648

; <label>:79                                      ; preds = %73
  %80 = load %struct._IO_FILE** %2, align 8
  %81 = load %struct.poly** %pp, align 8
  %82 = getelementptr inbounds %struct.poly* %81, i32 0, i32 0
  %83 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([4 x i8]* @.str.4.370, i32 0, i32 0), i64* %82)
  %84 = sext i32 %83 to i64
  store i64 %84, i64* %instat, align 8
  %85 = load i64* %instat, align 8
  %86 = icmp ne i64 %85, 1
  br i1 %86, label %87, label %89

; <label>:87                                      ; preds = %79
  %88 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([34 x i8]* @.str.11.377, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:89                                      ; preds = %79
  %90 = load %struct.poly** %pp, align 8
  %91 = getelementptr inbounds %struct.poly* %90, i32 0, i32 0
  %92 = load i64* %91, align 8
  %93 = icmp sgt i64 %92, 100
  br i1 %93, label %94, label %99

; <label>:94                                      ; preds = %89
  %95 = load %struct.poly** %pp, align 8
  %96 = getelementptr inbounds %struct.poly* %95, i32 0, i32 0
  %97 = load i64* %96, align 8
  %98 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([45 x i8]* @.str.12.378, i32 0, i32 0), i64 %97)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:99                                      ; preds = %89
  %100 = load i64* %pnormals, align 8
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %121

; <label>:102                                     ; preds = %99
  %103 = load %struct._IO_FILE** %2, align 8
  %104 = load %struct.poly** %pp, align 8
  %105 = getelementptr inbounds %struct.poly* %104, i32 0, i32 1
  %106 = getelementptr inbounds [3 x double]* %105, i32 0, i64 0
  %107 = load %struct.poly** %pp, align 8
  %108 = getelementptr inbounds %struct.poly* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 1
  %110 = load %struct.poly** %pp, align 8
  %111 = getelementptr inbounds %struct.poly* %110, i32 0, i32 1
  %112 = getelementptr inbounds [3 x double]* %111, i32 0, i64 2
  %113 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([13 x i8]* @.str.13.379, i32 0, i32 0), double* %106, double* %109, double* %112)
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %instat, align 8
  %115 = load i64* %instat, align 8
  %116 = icmp ne i64 %115, 3
  br i1 %116, label %117, label %120

; <label>:117                                     ; preds = %102
  %118 = load i64* %i, align 8
  %119 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([37 x i8]* @.str.14.380, i32 0, i32 0), i64 %118)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:120                                     ; preds = %102
  br label %121

; <label>:121                                     ; preds = %120, %99
  %122 = load [3 x double]** %vlist, align 8
  %123 = load %struct.poly** %pp, align 8
  %124 = getelementptr inbounds %struct.poly* %123, i32 0, i32 3
  store [3 x double]* %122, [3 x double]** %124, align 8
  %125 = load %struct.poly** %pp, align 8
  %126 = getelementptr inbounds %struct.poly* %125, i32 0, i32 0
  %127 = load i64* %126, align 8
  %128 = mul i64 8, %127
  %129 = call i8* @GlobalMalloc(i64 %128, i8* getelementptr inbounds ([7 x i8]* @.str.6.372, i32 0, i32 0))
  %130 = bitcast i8* %129 to i64*
  %131 = load %struct.poly** %pp, align 8
  %132 = getelementptr inbounds %struct.poly* %131, i32 0, i32 4
  store i64* %130, i64** %132, align 8
  %133 = load %struct.poly** %pp, align 8
  %134 = getelementptr inbounds %struct.poly* %133, i32 0, i32 4
  %135 = load i64** %134, align 8
  store i64* %135, i64** %vindex, align 8
  store i64 0, i64* %j, align 8
  br label %136

; <label>:136                                     ; preds = %154, %121
  %137 = load i64* %j, align 8
  %138 = load %struct.poly** %pp, align 8
  %139 = getelementptr inbounds %struct.poly* %138, i32 0, i32 0
  %140 = load i64* %139, align 8
  %141 = icmp slt i64 %137, %140
  br i1 %141, label %142, label %157

; <label>:142                                     ; preds = %136
  %143 = load %struct._IO_FILE** %2, align 8
  %144 = load i64** %vindex, align 8
  %145 = getelementptr inbounds i64* %144, i32 1
  store i64* %145, i64** %vindex, align 8
  %146 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %143, i8* getelementptr inbounds ([4 x i8]* @.str.4.370, i32 0, i32 0), i64* %144)
  %147 = sext i32 %146 to i64
  store i64 %147, i64* %instat, align 8
  %148 = load i64* %instat, align 8
  %149 = icmp ne i64 %148, 1
  br i1 %149, label %150, label %153

; <label>:150                                     ; preds = %142
  %151 = load i64* %i, align 8
  %152 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([38 x i8]* @.str.15.381, i32 0, i32 0), i64 %151)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:153                                     ; preds = %142
  br label %154

; <label>:154                                     ; preds = %153
  %155 = load i64* %j, align 8
  %156 = add nsw i64 %155, 1
  store i64 %156, i64* %j, align 8
  br label %136

; <label>:157                                     ; preds = %136
  %158 = load %struct.poly** %pp, align 8
  %159 = getelementptr inbounds %struct.poly* %158, i32 0, i32 4
  %160 = load i64** %159, align 8
  store i64* %160, i64** %vindex, align 8
  %161 = load [3 x double]** %vlist, align 8
  store [3 x double]* %161, [3 x double]** %vptr, align 8
  %162 = load i64* %pnormals, align 8
  %163 = icmp ne i64 %162, 0
  br i1 %163, label %594, label %164

; <label>:164                                     ; preds = %157
  %165 = load [3 x double]** %vptr, align 8
  %166 = load i64** %vindex, align 8
  %167 = load i64* %166, align 8
  %168 = getelementptr inbounds [3 x double]* %165, i64 %167
  store [3 x double]* %168, [3 x double]** %vp, align 8
  %169 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  store double 0.000000e+00, double* %169, align 8
  %170 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  store double 0.000000e+00, double* %170, align 8
  %171 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  store double 0.000000e+00, double* %171, align 8
  store i64 0, i64* %j, align 8
  br label %172

; <label>:172                                     ; preds = %295, %164
  %173 = load i64* %j, align 8
  %174 = load %struct.poly** %pp, align 8
  %175 = getelementptr inbounds %struct.poly* %174, i32 0, i32 0
  %176 = load i64* %175, align 8
  %177 = sub nsw i64 %176, 2
  %178 = icmp slt i64 %173, %177
  br i1 %178, label %179, label %298

; <label>:179                                     ; preds = %172
  %180 = load [3 x double]** %vptr, align 8
  %181 = load i64** %vindex, align 8
  %182 = getelementptr inbounds i64* %181, i64 1
  %183 = load i64* %182, align 8
  %184 = getelementptr inbounds [3 x double]* %180, i64 %183
  store [3 x double]* %184, [3 x double]** %vptmp, align 8
  %185 = load [3 x double]** %vptr, align 8
  %186 = load i64** %vindex, align 8
  %187 = getelementptr inbounds i64* %186, i64 2
  %188 = load i64* %187, align 8
  %189 = getelementptr inbounds [3 x double]* %185, i64 %188
  store [3 x double]* %189, [3 x double]** %vptmp2, align 8
  %190 = load [3 x double]** %vptmp, align 8
  %191 = getelementptr inbounds [3 x double]* %190, i32 0, i64 0
  %192 = load double* %191, align 8
  %193 = load [3 x double]** %vp, align 8
  %194 = getelementptr inbounds [3 x double]* %193, i32 0, i64 0
  %195 = load double* %194, align 8
  %196 = fsub double %192, %195
  %197 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  store double %196, double* %197, align 8
  %198 = load [3 x double]** %vptmp, align 8
  %199 = getelementptr inbounds [3 x double]* %198, i32 0, i64 1
  %200 = load double* %199, align 8
  %201 = load [3 x double]** %vp, align 8
  %202 = getelementptr inbounds [3 x double]* %201, i32 0, i64 1
  %203 = load double* %202, align 8
  %204 = fsub double %200, %203
  %205 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  store double %204, double* %205, align 8
  %206 = load [3 x double]** %vptmp, align 8
  %207 = getelementptr inbounds [3 x double]* %206, i32 0, i64 2
  %208 = load double* %207, align 8
  %209 = load [3 x double]** %vp, align 8
  %210 = getelementptr inbounds [3 x double]* %209, i32 0, i64 2
  %211 = load double* %210, align 8
  %212 = fsub double %208, %211
  %213 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  store double %212, double* %213, align 8
  %214 = load [3 x double]** %vptmp2, align 8
  %215 = getelementptr inbounds [3 x double]* %214, i32 0, i64 0
  %216 = load double* %215, align 8
  %217 = load [3 x double]** %vptmp, align 8
  %218 = getelementptr inbounds [3 x double]* %217, i32 0, i64 0
  %219 = load double* %218, align 8
  %220 = fsub double %216, %219
  %221 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  store double %220, double* %221, align 8
  %222 = load [3 x double]** %vptmp2, align 8
  %223 = getelementptr inbounds [3 x double]* %222, i32 0, i64 1
  %224 = load double* %223, align 8
  %225 = load [3 x double]** %vptmp, align 8
  %226 = getelementptr inbounds [3 x double]* %225, i32 0, i64 1
  %227 = load double* %226, align 8
  %228 = fsub double %224, %227
  %229 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  store double %228, double* %229, align 8
  %230 = load [3 x double]** %vptmp2, align 8
  %231 = getelementptr inbounds [3 x double]* %230, i32 0, i64 2
  %232 = load double* %231, align 8
  %233 = load [3 x double]** %vptmp, align 8
  %234 = getelementptr inbounds [3 x double]* %233, i32 0, i64 2
  %235 = load double* %234, align 8
  %236 = fsub double %232, %235
  %237 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  store double %236, double* %237, align 8
  %238 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %239 = load double* %238, align 8
  %240 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %241 = load double* %240, align 8
  %242 = fmul double %239, %241
  %243 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %244 = load double* %243, align 8
  %245 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %246 = load double* %245, align 8
  %247 = fmul double %244, %246
  %248 = fsub double %242, %247
  %249 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  store double %248, double* %249, align 8
  %250 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %251 = load double* %250, align 8
  %252 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %253 = load double* %252, align 8
  %254 = fmul double %251, %253
  %255 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %256 = load double* %255, align 8
  %257 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %258 = load double* %257, align 8
  %259 = fmul double %256, %258
  %260 = fsub double %254, %259
  %261 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  store double %260, double* %261, align 8
  %262 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %263 = load double* %262, align 8
  %264 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %265 = load double* %264, align 8
  %266 = fmul double %263, %265
  %267 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %268 = load double* %267, align 8
  %269 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %270 = load double* %269, align 8
  %271 = fmul double %268, %270
  %272 = fsub double %266, %271
  %273 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  store double %272, double* %273, align 8
  %274 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %275 = load double* %274, align 8
  %276 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  %277 = load double* %276, align 8
  %278 = fadd double %275, %277
  %279 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  store double %278, double* %279, align 8
  %280 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %281 = load double* %280, align 8
  %282 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  %283 = load double* %282, align 8
  %284 = fadd double %281, %283
  %285 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  store double %284, double* %285, align 8
  %286 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  %289 = load double* %288, align 8
  %290 = fadd double %287, %289
  %291 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  store double %290, double* %291, align 8
  %292 = load [3 x double]** %vptmp, align 8
  store [3 x double]* %292, [3 x double]** %vp, align 8
  %293 = load i64** %vindex, align 8
  %294 = getelementptr inbounds i64* %293, i64 1
  store i64* %294, i64** %vindex, align 8
  br label %295

; <label>:295                                     ; preds = %179
  %296 = load i64* %j, align 8
  %297 = add nsw i64 %296, 1
  store i64 %297, i64* %j, align 8
  br label %172

; <label>:298                                     ; preds = %172
  %299 = load [3 x double]** %vptmp2, align 8
  %300 = getelementptr inbounds [3 x double]* %299, i32 0, i64 0
  %301 = load double* %300, align 8
  %302 = load [3 x double]** %vp, align 8
  %303 = getelementptr inbounds [3 x double]* %302, i32 0, i64 0
  %304 = load double* %303, align 8
  %305 = fsub double %301, %304
  %306 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  store double %305, double* %306, align 8
  %307 = load [3 x double]** %vptmp2, align 8
  %308 = getelementptr inbounds [3 x double]* %307, i32 0, i64 1
  %309 = load double* %308, align 8
  %310 = load [3 x double]** %vp, align 8
  %311 = getelementptr inbounds [3 x double]* %310, i32 0, i64 1
  %312 = load double* %311, align 8
  %313 = fsub double %309, %312
  %314 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  store double %313, double* %314, align 8
  %315 = load [3 x double]** %vptmp2, align 8
  %316 = getelementptr inbounds [3 x double]* %315, i32 0, i64 2
  %317 = load double* %316, align 8
  %318 = load [3 x double]** %vp, align 8
  %319 = getelementptr inbounds [3 x double]* %318, i32 0, i64 2
  %320 = load double* %319, align 8
  %321 = fsub double %317, %320
  %322 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  store double %321, double* %322, align 8
  %323 = load %struct.poly** %pp, align 8
  %324 = getelementptr inbounds %struct.poly* %323, i32 0, i32 4
  %325 = load i64** %324, align 8
  store i64* %325, i64** %vindex, align 8
  %326 = load [3 x double]** %vptr, align 8
  %327 = load i64** %vindex, align 8
  %328 = load i64* %327, align 8
  %329 = getelementptr inbounds [3 x double]* %326, i64 %328
  store [3 x double]* %329, [3 x double]** %vp, align 8
  %330 = load [3 x double]** %vp, align 8
  %331 = getelementptr inbounds [3 x double]* %330, i32 0, i64 0
  %332 = load double* %331, align 8
  %333 = load [3 x double]** %vptmp2, align 8
  %334 = getelementptr inbounds [3 x double]* %333, i32 0, i64 0
  %335 = load double* %334, align 8
  %336 = fsub double %332, %335
  %337 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  store double %336, double* %337, align 8
  %338 = load [3 x double]** %vp, align 8
  %339 = getelementptr inbounds [3 x double]* %338, i32 0, i64 1
  %340 = load double* %339, align 8
  %341 = load [3 x double]** %vptmp2, align 8
  %342 = getelementptr inbounds [3 x double]* %341, i32 0, i64 1
  %343 = load double* %342, align 8
  %344 = fsub double %340, %343
  %345 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  store double %344, double* %345, align 8
  %346 = load [3 x double]** %vp, align 8
  %347 = getelementptr inbounds [3 x double]* %346, i32 0, i64 2
  %348 = load double* %347, align 8
  %349 = load [3 x double]** %vptmp2, align 8
  %350 = getelementptr inbounds [3 x double]* %349, i32 0, i64 2
  %351 = load double* %350, align 8
  %352 = fsub double %348, %351
  %353 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  store double %352, double* %353, align 8
  %354 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %355 = load double* %354, align 8
  %356 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %357 = load double* %356, align 8
  %358 = fmul double %355, %357
  %359 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %360 = load double* %359, align 8
  %361 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %362 = load double* %361, align 8
  %363 = fmul double %360, %362
  %364 = fsub double %358, %363
  %365 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  store double %364, double* %365, align 8
  %366 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %367 = load double* %366, align 8
  %368 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %369 = load double* %368, align 8
  %370 = fmul double %367, %369
  %371 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %372 = load double* %371, align 8
  %373 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %374 = load double* %373, align 8
  %375 = fmul double %372, %374
  %376 = fsub double %370, %375
  %377 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  store double %376, double* %377, align 8
  %378 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %379 = load double* %378, align 8
  %380 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %381 = load double* %380, align 8
  %382 = fmul double %379, %381
  %383 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %384 = load double* %383, align 8
  %385 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %386 = load double* %385, align 8
  %387 = fmul double %384, %386
  %388 = fsub double %382, %387
  %389 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  store double %388, double* %389, align 8
  %390 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %391 = load double* %390, align 8
  %392 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  %393 = load double* %392, align 8
  %394 = fadd double %391, %393
  %395 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  store double %394, double* %395, align 8
  %396 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %397 = load double* %396, align 8
  %398 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  %399 = load double* %398, align 8
  %400 = fadd double %397, %399
  %401 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  store double %400, double* %401, align 8
  %402 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %403 = load double* %402, align 8
  %404 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  %405 = load double* %404, align 8
  %406 = fadd double %403, %405
  %407 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  store double %406, double* %407, align 8
  %408 = load [3 x double]** %vptr, align 8
  %409 = load i64** %vindex, align 8
  %410 = load i64* %409, align 8
  %411 = getelementptr inbounds [3 x double]* %408, i64 %410
  store [3 x double]* %411, [3 x double]** %vp, align 8
  %412 = load [3 x double]** %vp, align 8
  %413 = getelementptr inbounds [3 x double]* %412, i32 0, i64 0
  %414 = load double* %413, align 8
  %415 = load [3 x double]** %vptmp2, align 8
  %416 = getelementptr inbounds [3 x double]* %415, i32 0, i64 0
  %417 = load double* %416, align 8
  %418 = fsub double %414, %417
  %419 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  store double %418, double* %419, align 8
  %420 = load [3 x double]** %vp, align 8
  %421 = getelementptr inbounds [3 x double]* %420, i32 0, i64 1
  %422 = load double* %421, align 8
  %423 = load [3 x double]** %vptmp2, align 8
  %424 = getelementptr inbounds [3 x double]* %423, i32 0, i64 1
  %425 = load double* %424, align 8
  %426 = fsub double %422, %425
  %427 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  store double %426, double* %427, align 8
  %428 = load [3 x double]** %vp, align 8
  %429 = getelementptr inbounds [3 x double]* %428, i32 0, i64 2
  %430 = load double* %429, align 8
  %431 = load [3 x double]** %vptmp2, align 8
  %432 = getelementptr inbounds [3 x double]* %431, i32 0, i64 2
  %433 = load double* %432, align 8
  %434 = fsub double %430, %433
  %435 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  store double %434, double* %435, align 8
  %436 = load [3 x double]** %vptr, align 8
  %437 = load i64** %vindex, align 8
  %438 = getelementptr inbounds i64* %437, i64 1
  %439 = load i64* %438, align 8
  %440 = getelementptr inbounds [3 x double]* %436, i64 %439
  store [3 x double]* %440, [3 x double]** %vptmp, align 8
  %441 = load [3 x double]** %vptmp, align 8
  %442 = getelementptr inbounds [3 x double]* %441, i32 0, i64 0
  %443 = load double* %442, align 8
  %444 = load [3 x double]** %vp, align 8
  %445 = getelementptr inbounds [3 x double]* %444, i32 0, i64 0
  %446 = load double* %445, align 8
  %447 = fsub double %443, %446
  %448 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  store double %447, double* %448, align 8
  %449 = load [3 x double]** %vptmp, align 8
  %450 = getelementptr inbounds [3 x double]* %449, i32 0, i64 1
  %451 = load double* %450, align 8
  %452 = load [3 x double]** %vp, align 8
  %453 = getelementptr inbounds [3 x double]* %452, i32 0, i64 1
  %454 = load double* %453, align 8
  %455 = fsub double %451, %454
  %456 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  store double %455, double* %456, align 8
  %457 = load [3 x double]** %vptmp, align 8
  %458 = getelementptr inbounds [3 x double]* %457, i32 0, i64 2
  %459 = load double* %458, align 8
  %460 = load [3 x double]** %vp, align 8
  %461 = getelementptr inbounds [3 x double]* %460, i32 0, i64 2
  %462 = load double* %461, align 8
  %463 = fsub double %459, %462
  %464 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  store double %463, double* %464, align 8
  %465 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %466 = load double* %465, align 8
  %467 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %468 = load double* %467, align 8
  %469 = fmul double %466, %468
  %470 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %471 = load double* %470, align 8
  %472 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %473 = load double* %472, align 8
  %474 = fmul double %471, %473
  %475 = fsub double %469, %474
  %476 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  store double %475, double* %476, align 8
  %477 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 2
  %478 = load double* %477, align 8
  %479 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %480 = load double* %479, align 8
  %481 = fmul double %478, %480
  %482 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %483 = load double* %482, align 8
  %484 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 2
  %485 = load double* %484, align 8
  %486 = fmul double %483, %485
  %487 = fsub double %481, %486
  %488 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  store double %487, double* %488, align 8
  %489 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 0
  %490 = load double* %489, align 8
  %491 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 1
  %492 = load double* %491, align 8
  %493 = fmul double %490, %492
  %494 = getelementptr inbounds [3 x double]* %tmppnt, i32 0, i64 1
  %495 = load double* %494, align 8
  %496 = getelementptr inbounds [3 x double]* %tmppnt2, i32 0, i64 0
  %497 = load double* %496, align 8
  %498 = fmul double %495, %497
  %499 = fsub double %493, %498
  %500 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  store double %499, double* %500, align 8
  %501 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %502 = load double* %501, align 8
  %503 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 0
  %504 = load double* %503, align 8
  %505 = fadd double %502, %504
  %506 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  store double %505, double* %506, align 8
  %507 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %508 = load double* %507, align 8
  %509 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 1
  %510 = load double* %509, align 8
  %511 = fadd double %508, %510
  %512 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  store double %511, double* %512, align 8
  %513 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %514 = load double* %513, align 8
  %515 = getelementptr inbounds [3 x double]* %cross, i32 0, i64 2
  %516 = load double* %515, align 8
  %517 = fadd double %514, %516
  %518 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  store double %517, double* %518, align 8
  %519 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %520 = load double* %519, align 8
  %521 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %522 = load double* %521, align 8
  %523 = fmul double %520, %522
  %524 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %525 = load double* %524, align 8
  %526 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %527 = load double* %526, align 8
  %528 = fmul double %525, %527
  %529 = fadd double %523, %528
  %530 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %531 = load double* %530, align 8
  %532 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %533 = load double* %532, align 8
  %534 = fmul double %531, %533
  %535 = fadd double %529, %534
  %536 = call double @sqrt(double %535)
  %537 = fdiv double 1.000000e+00, %536
  %538 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %539 = load double* %538, align 8
  %540 = fmul double %537, %539
  %541 = load %struct.poly** %pp, align 8
  %542 = getelementptr inbounds %struct.poly* %541, i32 0, i32 1
  %543 = getelementptr inbounds [3 x double]* %542, i32 0, i64 0
  store double %540, double* %543, align 8
  %544 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %545 = load double* %544, align 8
  %546 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %547 = load double* %546, align 8
  %548 = fmul double %545, %547
  %549 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %550 = load double* %549, align 8
  %551 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %552 = load double* %551, align 8
  %553 = fmul double %550, %552
  %554 = fadd double %548, %553
  %555 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %556 = load double* %555, align 8
  %557 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %558 = load double* %557, align 8
  %559 = fmul double %556, %558
  %560 = fadd double %554, %559
  %561 = call double @sqrt(double %560)
  %562 = fdiv double 1.000000e+00, %561
  %563 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %564 = load double* %563, align 8
  %565 = fmul double %562, %564
  %566 = load %struct.poly** %pp, align 8
  %567 = getelementptr inbounds %struct.poly* %566, i32 0, i32 1
  %568 = getelementptr inbounds [3 x double]* %567, i32 0, i64 1
  store double %565, double* %568, align 8
  %569 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %570 = load double* %569, align 8
  %571 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 0
  %572 = load double* %571, align 8
  %573 = fmul double %570, %572
  %574 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %575 = load double* %574, align 8
  %576 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 1
  %577 = load double* %576, align 8
  %578 = fmul double %575, %577
  %579 = fadd double %573, %578
  %580 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %581 = load double* %580, align 8
  %582 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %583 = load double* %582, align 8
  %584 = fmul double %581, %583
  %585 = fadd double %579, %584
  %586 = call double @sqrt(double %585)
  %587 = fdiv double 1.000000e+00, %586
  %588 = getelementptr inbounds [3 x double]* %pnorm, i32 0, i64 2
  %589 = load double* %588, align 8
  %590 = fmul double %587, %589
  %591 = load %struct.poly** %pp, align 8
  %592 = getelementptr inbounds %struct.poly* %591, i32 0, i32 1
  %593 = getelementptr inbounds [3 x double]* %592, i32 0, i64 2
  store double %590, double* %593, align 8
  br label %594

; <label>:594                                     ; preds = %298, %157
  %595 = load %struct.poly** %pp, align 8
  %596 = getelementptr inbounds %struct.poly* %595, i32 0, i32 3
  %597 = load [3 x double]** %596, align 8
  %598 = load %struct.poly** %pp, align 8
  %599 = getelementptr inbounds %struct.poly* %598, i32 0, i32 4
  %600 = load i64** %599, align 8
  %601 = load i64* %600, align 8
  %602 = getelementptr inbounds [3 x double]* %597, i64 %601
  store [3 x double]* %602, [3 x double]** %vp, align 8
  %603 = load %struct.poly** %pp, align 8
  %604 = getelementptr inbounds %struct.poly* %603, i32 0, i32 1
  %605 = getelementptr inbounds [3 x double]* %604, i32 0, i64 0
  %606 = load double* %605, align 8
  %607 = load [3 x double]** %vp, align 8
  %608 = getelementptr inbounds [3 x double]* %607, i32 0, i64 0
  %609 = load double* %608, align 8
  %610 = fmul double %606, %609
  %611 = load %struct.poly** %pp, align 8
  %612 = getelementptr inbounds %struct.poly* %611, i32 0, i32 1
  %613 = getelementptr inbounds [3 x double]* %612, i32 0, i64 1
  %614 = load double* %613, align 8
  %615 = load [3 x double]** %vp, align 8
  %616 = getelementptr inbounds [3 x double]* %615, i32 0, i64 1
  %617 = load double* %616, align 8
  %618 = fmul double %614, %617
  %619 = fadd double %610, %618
  %620 = load %struct.poly** %pp, align 8
  %621 = getelementptr inbounds %struct.poly* %620, i32 0, i32 1
  %622 = getelementptr inbounds [3 x double]* %621, i32 0, i64 2
  %623 = load double* %622, align 8
  %624 = load [3 x double]** %vp, align 8
  %625 = getelementptr inbounds [3 x double]* %624, i32 0, i64 2
  %626 = load double* %625, align 8
  %627 = fmul double %623, %626
  %628 = fadd double %619, %627
  %629 = fsub double -0.000000e+00, %628
  %630 = load %struct.poly** %pp, align 8
  %631 = getelementptr inbounds %struct.poly* %630, i32 0, i32 2
  store double %629, double* %631, align 8
  %632 = load %struct.poly** %pp, align 8
  %633 = bitcast %struct.poly* %632 to i8*
  %634 = load %struct.element** %pe, align 8
  %635 = getelementptr inbounds %struct.element* %634, i32 0, i32 3
  store i8* %633, i8** %635, align 8
  %636 = load %struct.object** %1, align 8
  %637 = load %struct.element** %pe, align 8
  %638 = getelementptr inbounds %struct.element* %637, i32 0, i32 2
  store %struct.object* %636, %struct.object** %638, align 8
  %639 = load %struct.element** %pe, align 8
  %640 = load %struct.poly** %pp, align 8
  call void @PolyElementBoundBox(%struct.element* %639, %struct.poly* %640)
  %641 = load %struct.poly** %pp, align 8
  %642 = getelementptr inbounds %struct.poly* %641, i32 1
  store %struct.poly* %642, %struct.poly** %pp, align 8
  %643 = load %struct.element** %pe, align 8
  %644 = getelementptr inbounds %struct.element* %643, i32 1
  store %struct.element* %644, %struct.element** %pe, align 8
  br label %645

; <label>:645                                     ; preds = %594
  %646 = load i64* %i, align 8
  %647 = add nsw i64 %646, 1
  store i64 %647, i64* %i, align 8
  br label %73

; <label>:648                                     ; preds = %73
  ret void

UnifiedUnreachableBlock:                          ; preds = %150, %117, %94, %87, %57, %32, %11
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @CopyRayMsg(%struct.ray* %rdst, %struct.ray* %rsrc) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca %struct.ray*, align 8
  store %struct.ray* %rdst, %struct.ray** %1, align 8
  store %struct.ray* %rsrc, %struct.ray** %2, align 8
  %3 = load %struct.ray** %2, align 8
  %4 = getelementptr inbounds %struct.ray* %3, i32 0, i32 0
  %5 = load i64* %4, align 8
  %6 = load %struct.ray** %1, align 8
  %7 = getelementptr inbounds %struct.ray* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 8
  %8 = load %struct.ray** %2, align 8
  %9 = getelementptr inbounds %struct.ray* %8, i32 0, i32 1
  %10 = load i64* %9, align 8
  %11 = load %struct.ray** %1, align 8
  %12 = getelementptr inbounds %struct.ray* %11, i32 0, i32 1
  store i64 %10, i64* %12, align 8
  %13 = load %struct.ray** %2, align 8
  %14 = getelementptr inbounds %struct.ray* %13, i32 0, i32 2
  %15 = load i64* %14, align 8
  %16 = load %struct.ray** %1, align 8
  %17 = getelementptr inbounds %struct.ray* %16, i32 0, i32 2
  store i64 %15, i64* %17, align 8
  %18 = load %struct.ray** %2, align 8
  %19 = getelementptr inbounds %struct.ray* %18, i32 0, i32 3
  %20 = getelementptr inbounds [3 x double]* %19, i32 0, i64 0
  %21 = load double* %20, align 8
  %22 = load %struct.ray** %1, align 8
  %23 = getelementptr inbounds %struct.ray* %22, i32 0, i32 3
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  store double %21, double* %24, align 8
  %25 = load %struct.ray** %2, align 8
  %26 = getelementptr inbounds %struct.ray* %25, i32 0, i32 3
  %27 = getelementptr inbounds [3 x double]* %26, i32 0, i64 1
  %28 = load double* %27, align 8
  %29 = load %struct.ray** %1, align 8
  %30 = getelementptr inbounds %struct.ray* %29, i32 0, i32 3
  %31 = getelementptr inbounds [3 x double]* %30, i32 0, i64 1
  store double %28, double* %31, align 8
  %32 = load %struct.ray** %2, align 8
  %33 = getelementptr inbounds %struct.ray* %32, i32 0, i32 3
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 2
  %35 = load double* %34, align 8
  %36 = load %struct.ray** %1, align 8
  %37 = getelementptr inbounds %struct.ray* %36, i32 0, i32 3
  %38 = getelementptr inbounds [3 x double]* %37, i32 0, i64 2
  store double %35, double* %38, align 8
  %39 = load %struct.ray** %2, align 8
  %40 = getelementptr inbounds %struct.ray* %39, i32 0, i32 4
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 0
  %42 = load double* %41, align 8
  %43 = load %struct.ray** %1, align 8
  %44 = getelementptr inbounds %struct.ray* %43, i32 0, i32 4
  %45 = getelementptr inbounds [3 x double]* %44, i32 0, i64 0
  store double %42, double* %45, align 8
  %46 = load %struct.ray** %2, align 8
  %47 = getelementptr inbounds %struct.ray* %46, i32 0, i32 4
  %48 = getelementptr inbounds [3 x double]* %47, i32 0, i64 1
  %49 = load double* %48, align 8
  %50 = load %struct.ray** %1, align 8
  %51 = getelementptr inbounds %struct.ray* %50, i32 0, i32 4
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 1
  store double %49, double* %52, align 8
  %53 = load %struct.ray** %2, align 8
  %54 = getelementptr inbounds %struct.ray* %53, i32 0, i32 4
  %55 = getelementptr inbounds [3 x double]* %54, i32 0, i64 2
  %56 = load double* %55, align 8
  %57 = load %struct.ray** %1, align 8
  %58 = getelementptr inbounds %struct.ray* %57, i32 0, i32 4
  %59 = getelementptr inbounds [3 x double]* %58, i32 0, i64 2
  store double %56, double* %59, align 8
  %60 = load %struct.ray** %2, align 8
  %61 = getelementptr inbounds %struct.ray* %60, i32 0, i32 5
  %62 = load i64* %61, align 8
  %63 = load %struct.ray** %1, align 8
  %64 = getelementptr inbounds %struct.ray* %63, i32 0, i32 5
  store i64 %62, i64* %64, align 8
  %65 = load %struct.ray** %2, align 8
  %66 = getelementptr inbounds %struct.ray* %65, i32 0, i32 6
  %67 = load float* %66, align 4
  %68 = load %struct.ray** %1, align 8
  %69 = getelementptr inbounds %struct.ray* %68, i32 0, i32 6
  store float %67, float* %69, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitRayTreeStack(i64 %TreeDepth, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  store i64 %TreeDepth, i64* %1, align 8
  store i64 %pid, i64* %2, align 8
  %3 = load i64* %1, align 8
  %4 = call i32 (i32, i64, ...) *bitcast (i32 (i32, i32)* @powint to i32 (i32, i64, ...)*)(i32 2, i64 %3)
  %5 = sub i32 %4, 1
  %6 = zext i32 %5 to i64
  %7 = load i64* %2, align 8
  %8 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %7
  %9 = getelementptr inbounds %struct.r_struct* %8, i32 0, i32 3
  store i64 %6, i64* %9, align 8
  %10 = load i64* @NumSubRays, align 8
  %11 = load i64* %2, align 8
  %12 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %11
  %13 = getelementptr inbounds %struct.r_struct* %12, i32 0, i32 3
  %14 = load i64* %13, align 8
  %15 = add nsw i64 %14, %10
  store i64 %15, i64* %13, align 8
  %16 = load i64* %2, align 8
  %17 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %16
  %18 = getelementptr inbounds %struct.r_struct* %17, i32 0, i32 3
  %19 = load i64* %18, align 8
  %20 = mul i64 %19, 888
  %21 = call i8* @LocalMalloc(i64 %20, i8* getelementptr inbounds ([11 x i8]* @.str.384, i32 0, i32 0))
  %22 = bitcast i8* %21 to %struct.ray*
  %23 = load i64* %2, align 8
  %24 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %23
  %25 = getelementptr inbounds %struct.r_struct* %24, i32 0, i32 1
  store %struct.ray* %22, %struct.ray** %25, align 8
  %26 = load i64* %2, align 8
  %27 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %26
  %28 = getelementptr inbounds %struct.r_struct* %27, i32 0, i32 2
  store i64 -1, i64* %28, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @powint(i32 %i, i32 %j) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %i, i32* %1, align 4
  store i32 %j, i32* %2, align 4
  store i32 1, i32* %temp, align 4
  store i32 0, i32* %k, align 4
  br label %3

; <label>:3                                       ; preds = %11, %0
  %4 = load i32* %k, align 4
  %5 = load i32* %2, align 4
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %7, label %14

; <label>:7                                       ; preds = %3
  %8 = load i32* %temp, align 4
  %9 = load i32* %1, align 4
  %10 = mul nsw i32 %8, %9
  store i32 %10, i32* %temp, align 4
  br label %11

; <label>:11                                      ; preds = %7
  %12 = load i32* %k, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %k, align 4
  br label %3

; <label>:14                                      ; preds = %3
  %15 = load i32* %temp, align 4
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal void @PushRayTreeStack(%struct.ray* %rmsg, i64 %pid) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca i64, align 8
  store %struct.ray* %rmsg, %struct.ray** %1, align 8
  store i64 %pid, i64* %2, align 8
  %3 = load i64* %2, align 8
  %4 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %3
  %5 = getelementptr inbounds %struct.r_struct* %4, i32 0, i32 2
  %6 = load i64* %5, align 8
  %7 = add nsw i64 %6, 1
  store i64 %7, i64* %5, align 8
  %8 = load i64* %2, align 8
  %9 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %8
  %10 = getelementptr inbounds %struct.r_struct* %9, i32 0, i32 2
  %11 = load i64* %10, align 8
  %12 = load i64* %2, align 8
  %13 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %12
  %14 = getelementptr inbounds %struct.r_struct* %13, i32 0, i32 3
  %15 = load i64* %14, align 8
  %16 = icmp eq i64 %11, %15
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %0
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = load i8** @ProgName, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([30 x i8]* @.str.1.385, i32 0, i32 0), i8* %19)
  call void @exit(i32 -1)
  unreachable

; <label>:21                                      ; preds = %0
  %22 = load i64* %2, align 8
  %23 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %22
  %24 = getelementptr inbounds %struct.r_struct* %23, i32 0, i32 2
  %25 = load i64* %24, align 8
  %26 = load i64* %2, align 8
  %27 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %26
  %28 = getelementptr inbounds %struct.r_struct* %27, i32 0, i32 1
  %29 = load %struct.ray** %28, align 8
  %30 = getelementptr inbounds %struct.ray* %29, i64 %25
  %31 = load %struct.ray** %1, align 8
  call void @CopyRayMsg(%struct.ray* %30, %struct.ray* %31)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @PopRayTreeStack(%struct.ray* %rmsg, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca i64, align 8
  store %struct.ray* %rmsg, %struct.ray** %2, align 8
  store i64 %pid, i64* %3, align 8
  %4 = load i64* %3, align 8
  %5 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %4
  %6 = getelementptr inbounds %struct.r_struct* %5, i32 0, i32 2
  %7 = load i64* %6, align 8
  %8 = icmp slt i64 %7, 0
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %0
  store i64 0, i64* %1
  br label %26

; <label>:10                                      ; preds = %0
  %11 = load %struct.ray** %2, align 8
  %12 = load i64* %3, align 8
  %13 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %12
  %14 = getelementptr inbounds %struct.r_struct* %13, i32 0, i32 2
  %15 = load i64* %14, align 8
  %16 = load i64* %3, align 8
  %17 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %16
  %18 = getelementptr inbounds %struct.r_struct* %17, i32 0, i32 1
  %19 = load %struct.ray** %18, align 8
  %20 = getelementptr inbounds %struct.ray* %19, i64 %15
  call void @CopyRayMsg(%struct.ray* %11, %struct.ray* %20)
  %21 = load i64* %3, align 8
  %22 = getelementptr inbounds [128 x %struct.r_struct]* @raystruct, i32 0, i64 %21
  %23 = getelementptr inbounds %struct.r_struct* %22, i32 0, i32 2
  %24 = load i64* %23, align 8
  %25 = add nsw i64 %24, -1
  store i64 %25, i64* %23, align 8
  store i64 1, i64* %1
  br label %26

; <label>:26                                      ; preds = %10, %9
  %27 = load i64* %1
  ret i64 %27
}

; Function Attrs: nounwind uwtable
define internal void @SpecularDirection(double* %R, double* %N, double* %I) {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %I_dot_N = alloca double, align 8
  %N2 = alloca [4 x double], align 16
  %vprime = alloca [4 x double], align 16
  store double* %R, double** %1, align 8
  store double* %N, double** %2, align 8
  store double* %I, double** %3, align 8
  %4 = load double** %3, align 8
  %5 = getelementptr inbounds double* %4, i64 0
  %6 = load double* %5, align 8
  %7 = load double** %2, align 8
  %8 = getelementptr inbounds double* %7, i64 0
  %9 = load double* %8, align 8
  %10 = fmul double %6, %9
  %11 = load double** %3, align 8
  %12 = getelementptr inbounds double* %11, i64 1
  %13 = load double* %12, align 8
  %14 = load double** %2, align 8
  %15 = getelementptr inbounds double* %14, i64 1
  %16 = load double* %15, align 8
  %17 = fmul double %13, %16
  %18 = fadd double %10, %17
  %19 = load double** %3, align 8
  %20 = getelementptr inbounds double* %19, i64 2
  %21 = load double* %20, align 8
  %22 = load double** %2, align 8
  %23 = getelementptr inbounds double* %22, i64 2
  %24 = load double* %23, align 8
  %25 = fmul double %21, %24
  %26 = fadd double %18, %25
  store double %26, double* %I_dot_N, align 8
  %27 = load double* %I_dot_N, align 8
  %28 = fcmp ogt double %27, 0.000000e+00
  br i1 %28, label %29, label %31

; <label>:29                                      ; preds = %0
  %30 = load double* %I_dot_N, align 8
  br label %34

; <label>:31                                      ; preds = %0
  %32 = load double* %I_dot_N, align 8
  %33 = fsub double -0.000000e+00, %32
  br label %34

; <label>:34                                      ; preds = %31, %29
  %35 = phi double [ %30, %29 ], [ %33, %31 ]
  store double %35, double* %I_dot_N, align 8
  %36 = load double* %I_dot_N, align 8
  %37 = fdiv double 1.000000e+00, %36
  store double %37, double* %I_dot_N, align 8
  %38 = load double* %I_dot_N, align 8
  %39 = load double** %3, align 8
  %40 = getelementptr inbounds double* %39, i64 0
  %41 = load double* %40, align 8
  %42 = fmul double %38, %41
  %43 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  store double %42, double* %43, align 8
  %44 = load double* %I_dot_N, align 8
  %45 = load double** %3, align 8
  %46 = getelementptr inbounds double* %45, i64 1
  %47 = load double* %46, align 8
  %48 = fmul double %44, %47
  %49 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  store double %48, double* %49, align 8
  %50 = load double* %I_dot_N, align 8
  %51 = load double** %3, align 8
  %52 = getelementptr inbounds double* %51, i64 2
  %53 = load double* %52, align 8
  %54 = fmul double %50, %53
  %55 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  store double %54, double* %55, align 8
  %56 = load double** %2, align 8
  %57 = getelementptr inbounds double* %56, i64 0
  %58 = load double* %57, align 8
  %59 = fmul double 2.000000e+00, %58
  %60 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 0
  store double %59, double* %60, align 8
  %61 = load double** %2, align 8
  %62 = getelementptr inbounds double* %61, i64 1
  %63 = load double* %62, align 8
  %64 = fmul double 2.000000e+00, %63
  %65 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 1
  store double %64, double* %65, align 8
  %66 = load double** %2, align 8
  %67 = getelementptr inbounds double* %66, i64 2
  %68 = load double* %67, align 8
  %69 = fmul double 2.000000e+00, %68
  %70 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 2
  store double %69, double* %70, align 8
  %71 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  %72 = load double* %71, align 8
  %73 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 0
  %74 = load double* %73, align 8
  %75 = fadd double %72, %74
  %76 = load double** %1, align 8
  %77 = getelementptr inbounds double* %76, i64 0
  store double %75, double* %77, align 8
  %78 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  %79 = load double* %78, align 8
  %80 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 1
  %81 = load double* %80, align 8
  %82 = fadd double %79, %81
  %83 = load double** %1, align 8
  %84 = getelementptr inbounds double* %83, i64 1
  store double %82, double* %84, align 8
  %85 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  %86 = load double* %85, align 8
  %87 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 2
  %88 = load double* %87, align 8
  %89 = fadd double %86, %88
  %90 = load double** %1, align 8
  %91 = getelementptr inbounds double* %90, i64 2
  store double %89, double* %91, align 8
  %92 = load double** %1, align 8
  call void @VecNorm(double* %92)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @TransmissionDirection(double* %T, double* %N, double* %I, double %kn) {
  %1 = alloca i64, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double, align 8
  %vprime = alloca [4 x double], align 16
  %vplusn = alloca [4 x double], align 16
  %I_dot_N = alloca double, align 8
  %kf = alloca double, align 8
  %vprime_sq = alloca double, align 8
  %vplusn_sq = alloca double, align 8
  store double* %T, double** %2, align 8
  store double* %N, double** %3, align 8
  store double* %I, double** %4, align 8
  store double %kn, double* %5, align 8
  %6 = load double** %4, align 8
  %7 = getelementptr inbounds double* %6, i64 0
  %8 = load double* %7, align 8
  %9 = load double** %3, align 8
  %10 = getelementptr inbounds double* %9, i64 0
  %11 = load double* %10, align 8
  %12 = fmul double %8, %11
  %13 = load double** %4, align 8
  %14 = getelementptr inbounds double* %13, i64 1
  %15 = load double* %14, align 8
  %16 = load double** %3, align 8
  %17 = getelementptr inbounds double* %16, i64 1
  %18 = load double* %17, align 8
  %19 = fmul double %15, %18
  %20 = fadd double %12, %19
  %21 = load double** %4, align 8
  %22 = getelementptr inbounds double* %21, i64 2
  %23 = load double* %22, align 8
  %24 = load double** %3, align 8
  %25 = getelementptr inbounds double* %24, i64 2
  %26 = load double* %25, align 8
  %27 = fmul double %23, %26
  %28 = fadd double %20, %27
  store double %28, double* %I_dot_N, align 8
  %29 = load double* %I_dot_N, align 8
  %30 = fcmp ogt double %29, 0.000000e+00
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %0
  %32 = load double* %I_dot_N, align 8
  br label %36

; <label>:33                                      ; preds = %0
  %34 = load double* %I_dot_N, align 8
  %35 = fsub double -0.000000e+00, %34
  br label %36

; <label>:36                                      ; preds = %33, %31
  %37 = phi double [ %32, %31 ], [ %35, %33 ]
  store double %37, double* %I_dot_N, align 8
  %38 = load double* %I_dot_N, align 8
  %39 = fdiv double 1.000000e+00, %38
  store double %39, double* %I_dot_N, align 8
  %40 = load double* %I_dot_N, align 8
  %41 = load double** %4, align 8
  %42 = getelementptr inbounds double* %41, i64 0
  %43 = load double* %42, align 8
  %44 = fmul double %40, %43
  %45 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  store double %44, double* %45, align 8
  %46 = load double* %I_dot_N, align 8
  %47 = load double** %4, align 8
  %48 = getelementptr inbounds double* %47, i64 1
  %49 = load double* %48, align 8
  %50 = fmul double %46, %49
  %51 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  store double %50, double* %51, align 8
  %52 = load double* %I_dot_N, align 8
  %53 = load double** %4, align 8
  %54 = getelementptr inbounds double* %53, i64 2
  %55 = load double* %54, align 8
  %56 = fmul double %52, %55
  %57 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  store double %56, double* %57, align 8
  %58 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  %59 = load double* %58, align 8
  %60 = load double** %3, align 8
  %61 = getelementptr inbounds double* %60, i64 0
  %62 = load double* %61, align 8
  %63 = fadd double %59, %62
  %64 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  store double %63, double* %64, align 8
  %65 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  %66 = load double* %65, align 8
  %67 = load double** %3, align 8
  %68 = getelementptr inbounds double* %67, i64 1
  %69 = load double* %68, align 8
  %70 = fadd double %66, %69
  %71 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  store double %70, double* %71, align 8
  %72 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  %73 = load double* %72, align 8
  %74 = load double** %3, align 8
  %75 = getelementptr inbounds double* %74, i64 2
  %76 = load double* %75, align 8
  %77 = fadd double %73, %76
  %78 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  store double %77, double* %78, align 8
  %79 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  %80 = load double* %79, align 8
  %81 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0
  %82 = load double* %81, align 8
  %83 = fmul double %80, %82
  %84 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  %85 = load double* %84, align 8
  %86 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1
  %87 = load double* %86, align 8
  %88 = fmul double %85, %87
  %89 = fadd double %83, %88
  %90 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  %91 = load double* %90, align 8
  %92 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2
  %93 = load double* %92, align 8
  %94 = fmul double %91, %93
  %95 = fadd double %89, %94
  store double %95, double* %vprime_sq, align 8
  %96 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  %97 = load double* %96, align 8
  %98 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  %99 = load double* %98, align 8
  %100 = fmul double %97, %99
  %101 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  %102 = load double* %101, align 8
  %103 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  %104 = load double* %103, align 8
  %105 = fmul double %102, %104
  %106 = fadd double %100, %105
  %107 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  %108 = load double* %107, align 8
  %109 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  %110 = load double* %109, align 8
  %111 = fmul double %108, %110
  %112 = fadd double %106, %111
  store double %112, double* %vplusn_sq, align 8
  %113 = load double* %5, align 8
  %114 = load double* %5, align 8
  %115 = fmul double %113, %114
  %116 = load double* %vprime_sq, align 8
  %117 = fmul double %115, %116
  %118 = load double* %vplusn_sq, align 8
  %119 = fsub double %117, %118
  store double %119, double* %kf, align 8
  %120 = load double* %kf, align 8
  %121 = fcmp ogt double %120, 1.000000e-07
  br i1 %121, label %122, label %166

; <label>:122                                     ; preds = %36
  %123 = load double* %kf, align 8
  %124 = call double @sqrt(double %123)
  %125 = fdiv double 1.000000e+00, %124
  store double %125, double* %kf, align 8
  %126 = load double* %kf, align 8
  %127 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  %128 = load double* %127, align 8
  %129 = fmul double %126, %128
  %130 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  store double %129, double* %130, align 8
  %131 = load double* %kf, align 8
  %132 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  %133 = load double* %132, align 8
  %134 = fmul double %131, %133
  %135 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  store double %134, double* %135, align 8
  %136 = load double* %kf, align 8
  %137 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  %138 = load double* %137, align 8
  %139 = fmul double %136, %138
  %140 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  store double %139, double* %140, align 8
  %141 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0
  %142 = load double* %141, align 8
  %143 = load double** %3, align 8
  %144 = getelementptr inbounds double* %143, i64 0
  %145 = load double* %144, align 8
  %146 = fsub double %142, %145
  %147 = load double** %2, align 8
  %148 = getelementptr inbounds double* %147, i64 0
  store double %146, double* %148, align 8
  %149 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1
  %150 = load double* %149, align 8
  %151 = load double** %3, align 8
  %152 = getelementptr inbounds double* %151, i64 1
  %153 = load double* %152, align 8
  %154 = fsub double %150, %153
  %155 = load double** %2, align 8
  %156 = getelementptr inbounds double* %155, i64 1
  store double %154, double* %156, align 8
  %157 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2
  %158 = load double* %157, align 8
  %159 = load double** %3, align 8
  %160 = getelementptr inbounds double* %159, i64 2
  %161 = load double* %160, align 8
  %162 = fsub double %158, %161
  %163 = load double** %2, align 8
  %164 = getelementptr inbounds double* %163, i64 2
  store double %162, double* %164, align 8
  %165 = load double** %2, align 8
  call void @VecNorm(double* %165)
  br label %167

; <label>:166                                     ; preds = %36
  store i64 0, i64* %1
  br label %168

; <label>:167                                     ; preds = %122
  store i64 1, i64* %1
  br label %168

; <label>:168                                     ; preds = %167, %166
  %169 = load i64* %1
  ret i64 %169
}

; Function Attrs: nounwind uwtable
define internal void @Shade(double* %iP, double* %N, %struct.ray* %ray, %struct.irecord* %hit, i64 %pid) {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca %struct.ray*, align 8
  %4 = alloca %struct.irecord*, align 8
  %5 = alloca i64, align 8
  %Lvec = alloca [3 x double], align 16
  %Hvec = alloca [3 x double], align 16
  %Evec = alloca [3 x double], align 16
  %shad_ray = alloca %struct.ray, align 8
  %secondary_ray = alloca %struct.ray, align 8
  %surfcol = alloca [3 x double], align 16
  %col = alloca [3 x double], align 16
  %NdotL = alloca double, align 8
  %Diff = alloca double, align 8
  %NdotH = alloca double, align 8
  %spec = alloca double, align 8
  %po = alloca %struct.object*, align 8
  %s = alloca %struct.surf*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %lightlen = alloca double, align 8
  %shadtrans = alloca double, align 8
  %lptr = alloca %struct.light*, align 8
  store double* %iP, double** %1, align 8
  store double* %N, double** %2, align 8
  store %struct.ray* %ray, %struct.ray** %3, align 8
  store %struct.irecord* %hit, %struct.irecord** %4, align 8
  store i64 %pid, i64* %5, align 8
  %6 = load %struct.irecord** %4, align 8
  %7 = getelementptr inbounds %struct.irecord* %6, i32 0, i32 1
  %8 = load %struct.element** %7, align 8
  %9 = getelementptr inbounds %struct.element* %8, i32 0, i32 2
  %10 = load %struct.object** %9, align 8
  store %struct.object* %10, %struct.object** %po, align 8
  %11 = load %struct.object** %po, align 8
  %12 = getelementptr inbounds %struct.object* %11, i32 0, i32 6
  %13 = load %struct.surf** %12, align 8
  store %struct.surf* %13, %struct.surf** %s, align 8
  %14 = load %struct.surf** %s, align 8
  %15 = getelementptr inbounds %struct.surf* %14, i32 0, i32 0
  %16 = getelementptr inbounds [3 x double]* %15, i32 0, i64 0
  %17 = load double* %16, align 8
  %18 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 0
  store double %17, double* %18, align 8
  %19 = load %struct.surf** %s, align 8
  %20 = getelementptr inbounds %struct.surf* %19, i32 0, i32 0
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 1
  %22 = load double* %21, align 8
  %23 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 1
  store double %22, double* %23, align 8
  %24 = load %struct.surf** %s, align 8
  %25 = getelementptr inbounds %struct.surf* %24, i32 0, i32 0
  %26 = getelementptr inbounds [3 x double]* %25, i32 0, i64 2
  %27 = load double* %26, align 8
  %28 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 2
  store double %27, double* %28, align 8
  %29 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 0), align 8
  %30 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 0
  %31 = load double* %30, align 8
  %32 = fmul double %29, %31
  %33 = getelementptr inbounds [3 x double]* %col, i32 0, i64 0
  store double %32, double* %33, align 8
  %34 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 1), align 8
  %35 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 1
  %36 = load double* %35, align 8
  %37 = fmul double %34, %36
  %38 = getelementptr inbounds [3 x double]* %col, i32 0, i64 1
  store double %37, double* %38, align 8
  %39 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 8, i64 2), align 8
  %40 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 2
  %41 = load double* %40, align 8
  %42 = fmul double %39, %41
  %43 = getelementptr inbounds [3 x double]* %col, i32 0, i64 2
  store double %42, double* %43, align 8
  %44 = load double** %1, align 8
  %45 = getelementptr inbounds double* %44, i64 0
  %46 = load double* %45, align 8
  %47 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 3
  %48 = getelementptr inbounds [3 x double]* %47, i32 0, i64 0
  store double %46, double* %48, align 8
  %49 = load double** %1, align 8
  %50 = getelementptr inbounds double* %49, i64 1
  %51 = load double* %50, align 8
  %52 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 3
  %53 = getelementptr inbounds [3 x double]* %52, i32 0, i64 1
  store double %51, double* %53, align 8
  %54 = load double** %1, align 8
  %55 = getelementptr inbounds double* %54, i64 2
  %56 = load double* %55, align 8
  %57 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 3
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  store double %56, double* %58, align 8
  %59 = load %struct.ray** %3, align 8
  %60 = getelementptr inbounds %struct.ray* %59, i32 0, i32 4
  %61 = getelementptr inbounds [3 x double]* %60, i32 0, i64 0
  %62 = load double* %61, align 8
  %63 = fsub double -0.000000e+00, %62
  %64 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 0
  store double %63, double* %64, align 8
  %65 = load %struct.ray** %3, align 8
  %66 = getelementptr inbounds %struct.ray* %65, i32 0, i32 4
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 1
  %68 = load double* %67, align 8
  %69 = fsub double -0.000000e+00, %68
  %70 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 1
  store double %69, double* %70, align 8
  %71 = load %struct.ray** %3, align 8
  %72 = getelementptr inbounds %struct.ray* %71, i32 0, i32 4
  %73 = getelementptr inbounds [3 x double]* %72, i32 0, i64 2
  %74 = load double* %73, align 8
  %75 = fsub double -0.000000e+00, %74
  %76 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 2
  store double %75, double* %76, align 8
  %77 = load %struct.light** @lights, align 8
  store %struct.light* %77, %struct.light** %lptr, align 8
  store i64 0, i64* %i, align 8
  br label %78

; <label>:78                                      ; preds = %339, %0
  %79 = load i64* %i, align 8
  %80 = load i64* @nlights, align 8
  %81 = icmp slt i64 %79, %80
  br i1 %81, label %82, label %342

; <label>:82                                      ; preds = %78
  %83 = load %struct.light** %lptr, align 8
  %84 = getelementptr inbounds %struct.light* %83, i32 0, i32 0
  %85 = getelementptr inbounds [4 x double]* %84, i32 0, i64 0
  %86 = load double* %85, align 8
  %87 = load double** %1, align 8
  %88 = getelementptr inbounds double* %87, i64 0
  %89 = load double* %88, align 8
  %90 = fsub double %86, %89
  %91 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  store double %90, double* %91, align 8
  %92 = load %struct.light** %lptr, align 8
  %93 = getelementptr inbounds %struct.light* %92, i32 0, i32 0
  %94 = getelementptr inbounds [4 x double]* %93, i32 0, i64 1
  %95 = load double* %94, align 8
  %96 = load double** %1, align 8
  %97 = getelementptr inbounds double* %96, i64 1
  %98 = load double* %97, align 8
  %99 = fsub double %95, %98
  %100 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  store double %99, double* %100, align 8
  %101 = load %struct.light** %lptr, align 8
  %102 = getelementptr inbounds %struct.light* %101, i32 0, i32 0
  %103 = getelementptr inbounds [4 x double]* %102, i32 0, i64 2
  %104 = load double* %103, align 8
  %105 = load double** %1, align 8
  %106 = getelementptr inbounds double* %105, i64 2
  %107 = load double* %106, align 8
  %108 = fsub double %104, %107
  %109 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  store double %108, double* %109, align 8
  %110 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  %111 = load double* %110, align 8
  %112 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  %113 = load double* %112, align 8
  %114 = fmul double %111, %113
  %115 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  %116 = load double* %115, align 8
  %117 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  %118 = load double* %117, align 8
  %119 = fmul double %116, %118
  %120 = fadd double %114, %119
  %121 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  %122 = load double* %121, align 8
  %123 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  %124 = load double* %123, align 8
  %125 = fmul double %122, %124
  %126 = fadd double %120, %125
  %127 = call double @sqrt(double %126)
  store double %127, double* %lightlen, align 8
  %128 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i32 0
  call void @VecNorm(double* %128)
  %129 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  %130 = load double* %129, align 8
  %131 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 4
  %132 = getelementptr inbounds [3 x double]* %131, i32 0, i64 0
  store double %130, double* %132, align 8
  %133 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  %134 = load double* %133, align 8
  %135 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 4
  %136 = getelementptr inbounds [3 x double]* %135, i32 0, i64 1
  store double %134, double* %136, align 8
  %137 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  %138 = load double* %137, align 8
  %139 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 4
  %140 = getelementptr inbounds [3 x double]* %139, i32 0, i64 2
  store double %138, double* %140, align 8
  %141 = load %struct.gmem** @gm, align 8
  %142 = getelementptr inbounds %struct.gmem* %141, i32 0, i32 10
  %143 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %142)
  %144 = load %struct.gmem** @gm, align 8
  %145 = getelementptr inbounds %struct.gmem* %144, i32 0, i32 2
  %146 = load i64* %145, align 8
  %147 = add nsw i64 %146, 1
  store i64 %147, i64* %145, align 8
  %148 = getelementptr inbounds %struct.ray* %shad_ray, i32 0, i32 0
  store i64 %146, i64* %148, align 8
  %149 = load %struct.gmem** @gm, align 8
  %150 = getelementptr inbounds %struct.gmem* %149, i32 0, i32 10
  %151 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %150)
  %152 = load double** %2, align 8
  %153 = getelementptr inbounds double* %152, i64 0
  %154 = load double* %153, align 8
  %155 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  %156 = load double* %155, align 8
  %157 = fmul double %154, %156
  %158 = load double** %2, align 8
  %159 = getelementptr inbounds double* %158, i64 1
  %160 = load double* %159, align 8
  %161 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  %162 = load double* %161, align 8
  %163 = fmul double %160, %162
  %164 = fadd double %157, %163
  %165 = load double** %2, align 8
  %166 = getelementptr inbounds double* %165, i64 2
  %167 = load double* %166, align 8
  %168 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  %169 = load double* %168, align 8
  %170 = fmul double %167, %169
  %171 = fadd double %164, %170
  store double %171, double* %NdotL, align 8
  %172 = load double* %NdotL, align 8
  %173 = fcmp ogt double %172, 0.000000e+00
  br i1 %173, label %174, label %335

; <label>:174                                     ; preds = %82
  %175 = load i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 9), align 8
  %176 = icmp ne i64 %175, 0
  br i1 %176, label %177, label %198

; <label>:177                                     ; preds = %174
  %178 = load %struct.light** %lptr, align 8
  %179 = getelementptr inbounds %struct.light* %178, i32 0, i32 2
  %180 = load i64* %179, align 8
  %181 = icmp ne i64 %180, 0
  br i1 %181, label %198, label %182

; <label>:182                                     ; preds = %177
  %183 = load i64* @TraversalType, align 8
  switch i64 %183, label %197 [
    i64 0, label %184
    i64 1, label %190
  ]

; <label>:184                                     ; preds = %182
  %185 = load double* %lightlen, align 8
  %186 = load %struct.irecord** %4, align 8
  %187 = getelementptr inbounds %struct.irecord* %186, i32 0, i32 1
  %188 = load %struct.element** %187, align 8
  %189 = call double @ShadowIntersect(%struct.ray* %shad_ray, double %185, %struct.element* %188)
  store double %189, double* %shadtrans, align 8
  br label %197

; <label>:190                                     ; preds = %182
  %191 = load double* %lightlen, align 8
  %192 = load %struct.irecord** %4, align 8
  %193 = getelementptr inbounds %struct.irecord* %192, i32 0, i32 1
  %194 = load %struct.element** %193, align 8
  %195 = load i64* %5, align 8
  %196 = call double @HuniformShadowIntersect(%struct.ray* %shad_ray, double %191, %struct.element* %194, i64 %195)
  store double %196, double* %shadtrans, align 8
  br label %197

; <label>:197                                     ; preds = %190, %184, %182
  br label %199

; <label>:198                                     ; preds = %177, %174
  store double 1.000000e+00, double* %shadtrans, align 8
  br label %199

; <label>:199                                     ; preds = %198, %197
  %200 = load double* %shadtrans, align 8
  %201 = fcmp ogt double %200, 0.000000e+00
  br i1 %201, label %202, label %334

; <label>:202                                     ; preds = %199
  %203 = load %struct.object** %po, align 8
  %204 = getelementptr inbounds %struct.object* %203, i32 0, i32 6
  %205 = load %struct.surf** %204, align 8
  %206 = getelementptr inbounds %struct.surf* %205, i32 0, i32 2
  %207 = load double* %206, align 8
  %208 = load double* %NdotL, align 8
  %209 = fmul double %207, %208
  %210 = load double* %shadtrans, align 8
  %211 = fmul double %209, %210
  store double %211, double* %Diff, align 8
  %212 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 0
  %213 = load double* %212, align 8
  %214 = load %struct.light** %lptr, align 8
  %215 = getelementptr inbounds %struct.light* %214, i32 0, i32 1
  %216 = getelementptr inbounds [3 x double]* %215, i32 0, i64 0
  %217 = load double* %216, align 8
  %218 = fmul double %213, %217
  %219 = load double* %Diff, align 8
  %220 = fmul double %218, %219
  %221 = getelementptr inbounds [3 x double]* %col, i32 0, i64 0
  %222 = load double* %221, align 8
  %223 = fadd double %222, %220
  store double %223, double* %221, align 8
  %224 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 1
  %225 = load double* %224, align 8
  %226 = load %struct.light** %lptr, align 8
  %227 = getelementptr inbounds %struct.light* %226, i32 0, i32 1
  %228 = getelementptr inbounds [3 x double]* %227, i32 0, i64 1
  %229 = load double* %228, align 8
  %230 = fmul double %225, %229
  %231 = load double* %Diff, align 8
  %232 = fmul double %230, %231
  %233 = getelementptr inbounds [3 x double]* %col, i32 0, i64 1
  %234 = load double* %233, align 8
  %235 = fadd double %234, %232
  store double %235, double* %233, align 8
  %236 = getelementptr inbounds [3 x double]* %surfcol, i32 0, i64 2
  %237 = load double* %236, align 8
  %238 = load %struct.light** %lptr, align 8
  %239 = getelementptr inbounds %struct.light* %238, i32 0, i32 1
  %240 = getelementptr inbounds [3 x double]* %239, i32 0, i64 2
  %241 = load double* %240, align 8
  %242 = fmul double %237, %241
  %243 = load double* %Diff, align 8
  %244 = fmul double %242, %243
  %245 = getelementptr inbounds [3 x double]* %col, i32 0, i64 2
  %246 = load double* %245, align 8
  %247 = fadd double %246, %244
  store double %247, double* %245, align 8
  %248 = load %struct.surf** %s, align 8
  %249 = getelementptr inbounds %struct.surf* %248, i32 0, i32 3
  %250 = load double* %249, align 8
  %251 = fcmp ogt double %250, 0.000000e+00
  br i1 %251, label %252, label %333

; <label>:252                                     ; preds = %202
  %253 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 0
  %254 = load double* %253, align 8
  %255 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 0
  %256 = load double* %255, align 8
  %257 = fadd double %254, %256
  %258 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 0
  store double %257, double* %258, align 8
  %259 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 1
  %260 = load double* %259, align 8
  %261 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 1
  %262 = load double* %261, align 8
  %263 = fadd double %260, %262
  %264 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 1
  store double %263, double* %264, align 8
  %265 = getelementptr inbounds [3 x double]* %Lvec, i32 0, i64 2
  %266 = load double* %265, align 8
  %267 = getelementptr inbounds [3 x double]* %Evec, i32 0, i64 2
  %268 = load double* %267, align 8
  %269 = fadd double %266, %268
  %270 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 2
  store double %269, double* %270, align 8
  %271 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i32 0
  call void @VecNorm(double* %271)
  %272 = load double** %2, align 8
  %273 = getelementptr inbounds double* %272, i64 0
  %274 = load double* %273, align 8
  %275 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 0
  %276 = load double* %275, align 8
  %277 = fmul double %274, %276
  %278 = load double** %2, align 8
  %279 = getelementptr inbounds double* %278, i64 1
  %280 = load double* %279, align 8
  %281 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 1
  %282 = load double* %281, align 8
  %283 = fmul double %280, %282
  %284 = fadd double %277, %283
  %285 = load double** %2, align 8
  %286 = getelementptr inbounds double* %285, i64 2
  %287 = load double* %286, align 8
  %288 = getelementptr inbounds [3 x double]* %Hvec, i32 0, i64 2
  %289 = load double* %288, align 8
  %290 = fmul double %287, %289
  %291 = fadd double %284, %290
  store double %291, double* %NdotH, align 8
  %292 = load double* %NdotH, align 8
  %293 = fcmp ogt double %292, 0.000000e+00
  br i1 %293, label %294, label %332

; <label>:294                                     ; preds = %252
  %295 = load double* %NdotH, align 8
  %296 = load %struct.surf** %s, align 8
  %297 = getelementptr inbounds %struct.surf* %296, i32 0, i32 6
  %298 = load double* %297, align 8
  %299 = call double @pow(double %295, double %298)
  store double %299, double* %spec, align 8
  %300 = load %struct.surf** %s, align 8
  %301 = getelementptr inbounds %struct.surf* %300, i32 0, i32 3
  %302 = load double* %301, align 8
  %303 = load double* %spec, align 8
  %304 = fmul double %303, %302
  store double %304, double* %spec, align 8
  %305 = load %struct.light** %lptr, align 8
  %306 = getelementptr inbounds %struct.light* %305, i32 0, i32 1
  %307 = getelementptr inbounds [3 x double]* %306, i32 0, i64 0
  %308 = load double* %307, align 8
  %309 = load double* %spec, align 8
  %310 = fmul double %308, %309
  %311 = getelementptr inbounds [3 x double]* %col, i32 0, i64 0
  %312 = load double* %311, align 8
  %313 = fadd double %312, %310
  store double %313, double* %311, align 8
  %314 = load %struct.light** %lptr, align 8
  %315 = getelementptr inbounds %struct.light* %314, i32 0, i32 1
  %316 = getelementptr inbounds [3 x double]* %315, i32 0, i64 1
  %317 = load double* %316, align 8
  %318 = load double* %spec, align 8
  %319 = fmul double %317, %318
  %320 = getelementptr inbounds [3 x double]* %col, i32 0, i64 1
  %321 = load double* %320, align 8
  %322 = fadd double %321, %319
  store double %322, double* %320, align 8
  %323 = load %struct.light** %lptr, align 8
  %324 = getelementptr inbounds %struct.light* %323, i32 0, i32 1
  %325 = getelementptr inbounds [3 x double]* %324, i32 0, i64 2
  %326 = load double* %325, align 8
  %327 = load double* %spec, align 8
  %328 = fmul double %326, %327
  %329 = getelementptr inbounds [3 x double]* %col, i32 0, i64 2
  %330 = load double* %329, align 8
  %331 = fadd double %330, %328
  store double %331, double* %329, align 8
  br label %332

; <label>:332                                     ; preds = %294, %252
  br label %333

; <label>:333                                     ; preds = %332, %202
  br label %334

; <label>:334                                     ; preds = %333, %199
  br label %335

; <label>:335                                     ; preds = %334, %82
  %336 = load %struct.light** %lptr, align 8
  %337 = getelementptr inbounds %struct.light* %336, i32 0, i32 3
  %338 = load %struct.light** %337, align 8
  store %struct.light* %338, %struct.light** %lptr, align 8
  br label %339

; <label>:339                                     ; preds = %335
  %340 = load i64* %i, align 8
  %341 = add nsw i64 %340, 1
  store i64 %341, i64* %i, align 8
  br label %78

; <label>:342                                     ; preds = %78
  %343 = load %struct.ray** %3, align 8
  %344 = getelementptr inbounds %struct.ray* %343, i32 0, i32 6
  %345 = load float* %344, align 4
  %346 = fpext float %345 to double
  %347 = getelementptr inbounds [3 x double]* %col, i32 0, i64 0
  %348 = load double* %347, align 8
  %349 = fmul double %346, %348
  %350 = getelementptr inbounds [3 x double]* %col, i32 0, i64 0
  store double %349, double* %350, align 8
  %351 = load %struct.ray** %3, align 8
  %352 = getelementptr inbounds %struct.ray* %351, i32 0, i32 6
  %353 = load float* %352, align 4
  %354 = fpext float %353 to double
  %355 = getelementptr inbounds [3 x double]* %col, i32 0, i64 1
  %356 = load double* %355, align 8
  %357 = fmul double %354, %356
  %358 = getelementptr inbounds [3 x double]* %col, i32 0, i64 1
  store double %357, double* %358, align 8
  %359 = load %struct.ray** %3, align 8
  %360 = getelementptr inbounds %struct.ray* %359, i32 0, i32 6
  %361 = load float* %360, align 4
  %362 = fpext float %361 to double
  %363 = getelementptr inbounds [3 x double]* %col, i32 0, i64 2
  %364 = load double* %363, align 8
  %365 = fmul double %362, %364
  %366 = getelementptr inbounds [3 x double]* %col, i32 0, i64 2
  store double %365, double* %366, align 8
  %367 = getelementptr inbounds [3 x double]* %col, i32 0, i32 0
  %368 = load %struct.ray** %3, align 8
  %369 = getelementptr inbounds %struct.ray* %368, i32 0, i32 1
  %370 = load i64* %369, align 8
  %371 = load %struct.ray** %3, align 8
  %372 = getelementptr inbounds %struct.ray* %371, i32 0, i32 2
  %373 = load i64* %372, align 8
  call void @AddPixelColor(double* %367, i64 %370, i64 %373)
  %374 = load %struct.ray** %3, align 8
  %375 = getelementptr inbounds %struct.ray* %374, i32 0, i32 5
  %376 = load i64* %375, align 8
  %377 = add nsw i64 %376, 1
  %378 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 0), align 8
  %379 = icmp slt i64 %377, %378
  br i1 %379, label %380, label %505

; <label>:380                                     ; preds = %342
  %381 = load double** %1, align 8
  %382 = getelementptr inbounds double* %381, i64 0
  %383 = load double* %382, align 8
  %384 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 3
  %385 = getelementptr inbounds [3 x double]* %384, i32 0, i64 0
  store double %383, double* %385, align 8
  %386 = load double** %1, align 8
  %387 = getelementptr inbounds double* %386, i64 1
  %388 = load double* %387, align 8
  %389 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 3
  %390 = getelementptr inbounds [3 x double]* %389, i32 0, i64 1
  store double %388, double* %390, align 8
  %391 = load double** %1, align 8
  %392 = getelementptr inbounds double* %391, i64 2
  %393 = load double* %392, align 8
  %394 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 3
  %395 = getelementptr inbounds [3 x double]* %394, i32 0, i64 2
  store double %393, double* %395, align 8
  %396 = load %struct.object** %po, align 8
  %397 = getelementptr inbounds %struct.object* %396, i32 0, i32 6
  %398 = load %struct.surf** %397, align 8
  %399 = getelementptr inbounds %struct.surf* %398, i32 0, i32 3
  %400 = load double* %399, align 8
  %401 = load %struct.ray** %3, align 8
  %402 = getelementptr inbounds %struct.ray* %401, i32 0, i32 6
  %403 = load float* %402, align 4
  %404 = fpext float %403 to double
  %405 = fmul double %400, %404
  %406 = fptrunc double %405 to float
  %407 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 6
  store float %406, float* %407, align 4
  %408 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 6
  %409 = load float* %408, align 4
  %410 = fpext float %409 to double
  %411 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %412 = fcmp ogt double %410, %411
  br i1 %412, label %413, label %445

; <label>:413                                     ; preds = %380
  %414 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 4
  %415 = getelementptr inbounds [3 x double]* %414, i32 0, i32 0
  %416 = load double** %2, align 8
  %417 = load %struct.ray** %3, align 8
  %418 = getelementptr inbounds %struct.ray* %417, i32 0, i32 4
  %419 = getelementptr inbounds [3 x double]* %418, i32 0, i32 0
  call void @SpecularDirection(double* %415, double* %416, double* %419)
  %420 = load %struct.ray** %3, align 8
  %421 = getelementptr inbounds %struct.ray* %420, i32 0, i32 5
  %422 = load i64* %421, align 8
  %423 = add nsw i64 %422, 1
  %424 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 5
  store i64 %423, i64* %424, align 8
  %425 = load %struct.gmem** @gm, align 8
  %426 = getelementptr inbounds %struct.gmem* %425, i32 0, i32 10
  %427 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %426)
  %428 = load %struct.gmem** @gm, align 8
  %429 = getelementptr inbounds %struct.gmem* %428, i32 0, i32 2
  %430 = load i64* %429, align 8
  %431 = add nsw i64 %430, 1
  store i64 %431, i64* %429, align 8
  %432 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 0
  store i64 %430, i64* %432, align 8
  %433 = load %struct.gmem** @gm, align 8
  %434 = getelementptr inbounds %struct.gmem* %433, i32 0, i32 10
  %435 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %434)
  %436 = load %struct.ray** %3, align 8
  %437 = getelementptr inbounds %struct.ray* %436, i32 0, i32 1
  %438 = load i64* %437, align 8
  %439 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 1
  store i64 %438, i64* %439, align 8
  %440 = load %struct.ray** %3, align 8
  %441 = getelementptr inbounds %struct.ray* %440, i32 0, i32 2
  %442 = load i64* %441, align 8
  %443 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 2
  store i64 %442, i64* %443, align 8
  %444 = load i64* %5, align 8
  call void @PushRayTreeStack(%struct.ray* %secondary_ray, i64 %444)
  br label %445

; <label>:445                                     ; preds = %413, %380
  %446 = load %struct.object** %po, align 8
  %447 = getelementptr inbounds %struct.object* %446, i32 0, i32 6
  %448 = load %struct.surf** %447, align 8
  %449 = getelementptr inbounds %struct.surf* %448, i32 0, i32 4
  %450 = load double* %449, align 8
  %451 = load %struct.ray** %3, align 8
  %452 = getelementptr inbounds %struct.ray* %451, i32 0, i32 6
  %453 = load float* %452, align 4
  %454 = fpext float %453 to double
  %455 = fmul double %450, %454
  %456 = fptrunc double %455 to float
  %457 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 6
  store float %456, float* %457, align 4
  %458 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 6
  %459 = load float* %458, align 4
  %460 = fpext float %459 to double
  %461 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 8), align 8
  %462 = fcmp ogt double %460, %461
  br i1 %462, label %463, label %504

; <label>:463                                     ; preds = %445
  %464 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 4
  %465 = getelementptr inbounds [3 x double]* %464, i32 0, i32 0
  %466 = load double** %2, align 8
  %467 = load %struct.ray** %3, align 8
  %468 = getelementptr inbounds %struct.ray* %467, i32 0, i32 4
  %469 = getelementptr inbounds [3 x double]* %468, i32 0, i32 0
  %470 = load %struct.object** %po, align 8
  %471 = getelementptr inbounds %struct.object* %470, i32 0, i32 6
  %472 = load %struct.surf** %471, align 8
  %473 = getelementptr inbounds %struct.surf* %472, i32 0, i32 5
  %474 = load double* %473, align 8
  %475 = call i64 @TransmissionDirection(double* %465, double* %466, double* %469, double %474)
  %476 = icmp ne i64 %475, 0
  br i1 %476, label %477, label %503

; <label>:477                                     ; preds = %463
  %478 = load %struct.ray** %3, align 8
  %479 = getelementptr inbounds %struct.ray* %478, i32 0, i32 5
  %480 = load i64* %479, align 8
  %481 = add nsw i64 %480, 1
  %482 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 5
  store i64 %481, i64* %482, align 8
  %483 = load %struct.gmem** @gm, align 8
  %484 = getelementptr inbounds %struct.gmem* %483, i32 0, i32 10
  %485 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %484)
  %486 = load %struct.gmem** @gm, align 8
  %487 = getelementptr inbounds %struct.gmem* %486, i32 0, i32 2
  %488 = load i64* %487, align 8
  %489 = add nsw i64 %488, 1
  store i64 %489, i64* %487, align 8
  %490 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 0
  store i64 %488, i64* %490, align 8
  %491 = load %struct.gmem** @gm, align 8
  %492 = getelementptr inbounds %struct.gmem* %491, i32 0, i32 10
  %493 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %492)
  %494 = load %struct.ray** %3, align 8
  %495 = getelementptr inbounds %struct.ray* %494, i32 0, i32 1
  %496 = load i64* %495, align 8
  %497 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 1
  store i64 %496, i64* %497, align 8
  %498 = load %struct.ray** %3, align 8
  %499 = getelementptr inbounds %struct.ray* %498, i32 0, i32 2
  %500 = load i64* %499, align 8
  %501 = getelementptr inbounds %struct.ray* %secondary_ray, i32 0, i32 2
  store i64 %500, i64* %501, align 8
  %502 = load i64* %5, align 8
  call void @PushRayTreeStack(%struct.ray* %secondary_ray, i64 %502)
  br label %503

; <label>:503                                     ; preds = %477, %463
  br label %504

; <label>:504                                     ; preds = %503, %445
  br label %505

; <label>:505                                     ; preds = %504, %342
  ret void
}

; Function Attrs: nounwind
declare double @pow(double, double)

; Function Attrs: nounwind uwtable
define internal i8* @SphName() {
  ret i8* getelementptr inbounds ([7 x i8]* @.str.404, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define internal void @SphPrint(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %ps = alloca %struct.sphere*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([16 x i8]* @.str.1.405, i32 0, i32 0))
  store i64 0, i64* %i, align 8
  br label %7

; <label>:7                                       ; preds = %42, %0
  %8 = load i64* %i, align 8
  %9 = load %struct.object** %1, align 8
  %10 = getelementptr inbounds %struct.object* %9, i32 0, i32 4
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %8, %11
  br i1 %12, label %13, label %45

; <label>:13                                      ; preds = %7
  %14 = load %struct.element** %pe, align 8
  %15 = getelementptr inbounds %struct.element* %14, i32 0, i32 3
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.sphere*
  store %struct.sphere* %17, %struct.sphere** %ps, align 8
  %18 = load %struct._IO_FILE** @stderr, align 8
  %19 = load %struct.sphere** %ps, align 8
  %20 = getelementptr inbounds %struct.sphere* %19, i32 0, i32 0
  %21 = getelementptr inbounds [4 x double]* %20, i32 0, i64 0
  %22 = load double* %21, align 8
  %23 = load %struct.sphere** %ps, align 8
  %24 = getelementptr inbounds %struct.sphere* %23, i32 0, i32 0
  %25 = getelementptr inbounds [4 x double]* %24, i32 0, i64 1
  %26 = load double* %25, align 8
  %27 = load %struct.sphere** %ps, align 8
  %28 = getelementptr inbounds %struct.sphere* %27, i32 0, i32 0
  %29 = getelementptr inbounds [4 x double]* %28, i32 0, i64 2
  %30 = load double* %29, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([20 x i8]* @.str.2.406, i32 0, i32 0), double %22, double %26, double %30)
  %32 = load %struct._IO_FILE** @stderr, align 8
  %33 = load %struct.sphere** %ps, align 8
  %34 = getelementptr inbounds %struct.sphere* %33, i32 0, i32 1
  %35 = load double* %34, align 8
  %36 = load %struct.sphere** %ps, align 8
  %37 = getelementptr inbounds %struct.sphere* %36, i32 0, i32 2
  %38 = load double* %37, align 8
  %39 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([25 x i8]* @.str.3.407, i32 0, i32 0), double %35, double %38)
  %40 = load %struct.element** %pe, align 8
  %41 = getelementptr inbounds %struct.element* %40, i32 1
  store %struct.element* %41, %struct.element** %pe, align 8
  br label %42

; <label>:42                                      ; preds = %13
  %43 = load i64* %i, align 8
  %44 = add nsw i64 %43, 1
  store i64 %44, i64* %i, align 8
  br label %7

; <label>:45                                      ; preds = %7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SphElementBoundBox(%struct.element* %pe, %struct.sphere* %ps) {
  %1 = alloca %struct.element*, align 8
  %2 = alloca %struct.sphere*, align 8
  %pbb = alloca %struct.bbox*, align 8
  store %struct.element* %pe, %struct.element** %1, align 8
  store %struct.sphere* %ps, %struct.sphere** %2, align 8
  %3 = load %struct.element** %1, align 8
  %4 = getelementptr inbounds %struct.element* %3, i32 0, i32 1
  store %struct.bbox* %4, %struct.bbox** %pbb, align 8
  %5 = load %struct.sphere** %2, align 8
  %6 = getelementptr inbounds %struct.sphere* %5, i32 0, i32 0
  %7 = getelementptr inbounds [4 x double]* %6, i32 0, i64 0
  %8 = load double* %7, align 8
  %9 = load %struct.sphere** %2, align 8
  %10 = getelementptr inbounds %struct.sphere* %9, i32 0, i32 1
  %11 = load double* %10, align 8
  %12 = fsub double %8, %11
  %13 = load %struct.bbox** %pbb, align 8
  %14 = getelementptr inbounds %struct.bbox* %13, i32 0, i32 0
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 0
  store double %12, double* %15, align 8
  %16 = load %struct.sphere** %2, align 8
  %17 = getelementptr inbounds %struct.sphere* %16, i32 0, i32 0
  %18 = getelementptr inbounds [4 x double]* %17, i32 0, i64 1
  %19 = load double* %18, align 8
  %20 = load %struct.sphere** %2, align 8
  %21 = getelementptr inbounds %struct.sphere* %20, i32 0, i32 1
  %22 = load double* %21, align 8
  %23 = fsub double %19, %22
  %24 = load %struct.bbox** %pbb, align 8
  %25 = getelementptr inbounds %struct.bbox* %24, i32 0, i32 0
  %26 = getelementptr inbounds [3 x double]* %25, i32 0, i64 1
  store double %23, double* %26, align 8
  %27 = load %struct.sphere** %2, align 8
  %28 = getelementptr inbounds %struct.sphere* %27, i32 0, i32 0
  %29 = getelementptr inbounds [4 x double]* %28, i32 0, i64 2
  %30 = load double* %29, align 8
  %31 = load %struct.sphere** %2, align 8
  %32 = getelementptr inbounds %struct.sphere* %31, i32 0, i32 1
  %33 = load double* %32, align 8
  %34 = fsub double %30, %33
  %35 = load %struct.bbox** %pbb, align 8
  %36 = getelementptr inbounds %struct.bbox* %35, i32 0, i32 0
  %37 = getelementptr inbounds [3 x double]* %36, i32 0, i64 2
  store double %34, double* %37, align 8
  %38 = load %struct.sphere** %2, align 8
  %39 = getelementptr inbounds %struct.sphere* %38, i32 0, i32 0
  %40 = getelementptr inbounds [4 x double]* %39, i32 0, i64 0
  %41 = load double* %40, align 8
  %42 = load %struct.sphere** %2, align 8
  %43 = getelementptr inbounds %struct.sphere* %42, i32 0, i32 1
  %44 = load double* %43, align 8
  %45 = fadd double %41, %44
  %46 = load %struct.bbox** %pbb, align 8
  %47 = getelementptr inbounds %struct.bbox* %46, i32 0, i32 1
  %48 = getelementptr inbounds [3 x double]* %47, i32 0, i64 0
  store double %45, double* %48, align 8
  %49 = load %struct.sphere** %2, align 8
  %50 = getelementptr inbounds %struct.sphere* %49, i32 0, i32 0
  %51 = getelementptr inbounds [4 x double]* %50, i32 0, i64 1
  %52 = load double* %51, align 8
  %53 = load %struct.sphere** %2, align 8
  %54 = getelementptr inbounds %struct.sphere* %53, i32 0, i32 1
  %55 = load double* %54, align 8
  %56 = fadd double %52, %55
  %57 = load %struct.bbox** %pbb, align 8
  %58 = getelementptr inbounds %struct.bbox* %57, i32 0, i32 1
  %59 = getelementptr inbounds [3 x double]* %58, i32 0, i64 1
  store double %56, double* %59, align 8
  %60 = load %struct.sphere** %2, align 8
  %61 = getelementptr inbounds %struct.sphere* %60, i32 0, i32 0
  %62 = getelementptr inbounds [4 x double]* %61, i32 0, i64 2
  %63 = load double* %62, align 8
  %64 = load %struct.sphere** %2, align 8
  %65 = getelementptr inbounds %struct.sphere* %64, i32 0, i32 1
  %66 = load double* %65, align 8
  %67 = fadd double %63, %66
  %68 = load %struct.bbox** %pbb, align 8
  %69 = getelementptr inbounds %struct.bbox* %68, i32 0, i32 1
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 2
  store double %67, double* %70, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SphBoundBox(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %ps = alloca %struct.sphere*, align 8
  %pe = alloca %struct.element*, align 8
  %pbb = alloca %struct.bbox*, align 8
  %minx = alloca double, align 8
  %maxx = alloca double, align 8
  %miny = alloca double, align 8
  %maxy = alloca double, align 8
  %minz = alloca double, align 8
  %maxz = alloca double, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct.object** %1, align 8
  %6 = getelementptr inbounds %struct.object* %5, i32 0, i32 2
  store %struct.bbox* %6, %struct.bbox** %pbb, align 8
  store double 1.000000e+32, double* %minz, align 8
  store double 1.000000e+32, double* %miny, align 8
  store double 1.000000e+32, double* %minx, align 8
  store double -1.000000e+32, double* %maxz, align 8
  store double -1.000000e+32, double* %maxy, align 8
  store double -1.000000e+32, double* %maxx, align 8
  store i64 0, i64* %i, align 8
  br label %7

; <label>:7                                       ; preds = %124, %0
  %8 = load i64* %i, align 8
  %9 = load %struct.object** %1, align 8
  %10 = getelementptr inbounds %struct.object* %9, i32 0, i32 4
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %8, %11
  br i1 %12, label %13, label %127

; <label>:13                                      ; preds = %7
  %14 = load %struct.element** %pe, align 8
  %15 = getelementptr inbounds %struct.element* %14, i32 0, i32 3
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.sphere*
  store %struct.sphere* %17, %struct.sphere** %ps, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = load %struct.sphere** %ps, align 8
  call void @SphElementBoundBox(%struct.element* %18, %struct.sphere* %19)
  %20 = load double* %minx, align 8
  %21 = load %struct.element** %pe, align 8
  %22 = getelementptr inbounds %struct.element* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.bbox* %22, i32 0, i32 0
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = fcmp olt double %20, %25
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %13
  %28 = load double* %minx, align 8
  br label %35

; <label>:29                                      ; preds = %13
  %30 = load %struct.element** %pe, align 8
  %31 = getelementptr inbounds %struct.element* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.bbox* %31, i32 0, i32 0
  %33 = getelementptr inbounds [3 x double]* %32, i32 0, i64 0
  %34 = load double* %33, align 8
  br label %35

; <label>:35                                      ; preds = %29, %27
  %36 = phi double [ %28, %27 ], [ %34, %29 ]
  store double %36, double* %minx, align 8
  %37 = load double* %miny, align 8
  %38 = load %struct.element** %pe, align 8
  %39 = getelementptr inbounds %struct.element* %38, i32 0, i32 1
  %40 = getelementptr inbounds %struct.bbox* %39, i32 0, i32 0
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 1
  %42 = load double* %41, align 8
  %43 = fcmp olt double %37, %42
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %35
  %45 = load double* %miny, align 8
  br label %52

; <label>:46                                      ; preds = %35
  %47 = load %struct.element** %pe, align 8
  %48 = getelementptr inbounds %struct.element* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.bbox* %48, i32 0, i32 0
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 1
  %51 = load double* %50, align 8
  br label %52

; <label>:52                                      ; preds = %46, %44
  %53 = phi double [ %45, %44 ], [ %51, %46 ]
  store double %53, double* %miny, align 8
  %54 = load double* %minz, align 8
  %55 = load %struct.element** %pe, align 8
  %56 = getelementptr inbounds %struct.element* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.bbox* %56, i32 0, i32 0
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  %59 = load double* %58, align 8
  %60 = fcmp olt double %54, %59
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %52
  %62 = load double* %minz, align 8
  br label %69

; <label>:63                                      ; preds = %52
  %64 = load %struct.element** %pe, align 8
  %65 = getelementptr inbounds %struct.element* %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.bbox* %65, i32 0, i32 0
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 2
  %68 = load double* %67, align 8
  br label %69

; <label>:69                                      ; preds = %63, %61
  %70 = phi double [ %62, %61 ], [ %68, %63 ]
  store double %70, double* %minz, align 8
  %71 = load double* %maxx, align 8
  %72 = load %struct.element** %pe, align 8
  %73 = getelementptr inbounds %struct.element* %72, i32 0, i32 1
  %74 = getelementptr inbounds %struct.bbox* %73, i32 0, i32 1
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 0
  %76 = load double* %75, align 8
  %77 = fcmp ogt double %71, %76
  br i1 %77, label %78, label %80

; <label>:78                                      ; preds = %69
  %79 = load double* %maxx, align 8
  br label %86

; <label>:80                                      ; preds = %69
  %81 = load %struct.element** %pe, align 8
  %82 = getelementptr inbounds %struct.element* %81, i32 0, i32 1
  %83 = getelementptr inbounds %struct.bbox* %82, i32 0, i32 1
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 0
  %85 = load double* %84, align 8
  br label %86

; <label>:86                                      ; preds = %80, %78
  %87 = phi double [ %79, %78 ], [ %85, %80 ]
  store double %87, double* %maxx, align 8
  %88 = load double* %maxy, align 8
  %89 = load %struct.element** %pe, align 8
  %90 = getelementptr inbounds %struct.element* %89, i32 0, i32 1
  %91 = getelementptr inbounds %struct.bbox* %90, i32 0, i32 1
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 1
  %93 = load double* %92, align 8
  %94 = fcmp ogt double %88, %93
  br i1 %94, label %95, label %97

; <label>:95                                      ; preds = %86
  %96 = load double* %maxy, align 8
  br label %103

; <label>:97                                      ; preds = %86
  %98 = load %struct.element** %pe, align 8
  %99 = getelementptr inbounds %struct.element* %98, i32 0, i32 1
  %100 = getelementptr inbounds %struct.bbox* %99, i32 0, i32 1
  %101 = getelementptr inbounds [3 x double]* %100, i32 0, i64 1
  %102 = load double* %101, align 8
  br label %103

; <label>:103                                     ; preds = %97, %95
  %104 = phi double [ %96, %95 ], [ %102, %97 ]
  store double %104, double* %maxy, align 8
  %105 = load double* %maxz, align 8
  %106 = load %struct.element** %pe, align 8
  %107 = getelementptr inbounds %struct.element* %106, i32 0, i32 1
  %108 = getelementptr inbounds %struct.bbox* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 2
  %110 = load double* %109, align 8
  %111 = fcmp ogt double %105, %110
  br i1 %111, label %112, label %114

; <label>:112                                     ; preds = %103
  %113 = load double* %maxz, align 8
  br label %120

; <label>:114                                     ; preds = %103
  %115 = load %struct.element** %pe, align 8
  %116 = getelementptr inbounds %struct.element* %115, i32 0, i32 1
  %117 = getelementptr inbounds %struct.bbox* %116, i32 0, i32 1
  %118 = getelementptr inbounds [3 x double]* %117, i32 0, i64 2
  %119 = load double* %118, align 8
  br label %120

; <label>:120                                     ; preds = %114, %112
  %121 = phi double [ %113, %112 ], [ %119, %114 ]
  store double %121, double* %maxz, align 8
  %122 = load %struct.element** %pe, align 8
  %123 = getelementptr inbounds %struct.element* %122, i32 1
  store %struct.element* %123, %struct.element** %pe, align 8
  br label %124

; <label>:124                                     ; preds = %120
  %125 = load i64* %i, align 8
  %126 = add nsw i64 %125, 1
  store i64 %126, i64* %i, align 8
  br label %7

; <label>:127                                     ; preds = %7
  %128 = load double* %minx, align 8
  %129 = load %struct.bbox** %pbb, align 8
  %130 = getelementptr inbounds %struct.bbox* %129, i32 0, i32 0
  %131 = getelementptr inbounds [3 x double]* %130, i32 0, i64 0
  store double %128, double* %131, align 8
  %132 = load double* %miny, align 8
  %133 = load %struct.bbox** %pbb, align 8
  %134 = getelementptr inbounds %struct.bbox* %133, i32 0, i32 0
  %135 = getelementptr inbounds [3 x double]* %134, i32 0, i64 1
  store double %132, double* %135, align 8
  %136 = load double* %minz, align 8
  %137 = load %struct.bbox** %pbb, align 8
  %138 = getelementptr inbounds %struct.bbox* %137, i32 0, i32 0
  %139 = getelementptr inbounds [3 x double]* %138, i32 0, i64 2
  store double %136, double* %139, align 8
  %140 = load double* %maxx, align 8
  %141 = load %struct.bbox** %pbb, align 8
  %142 = getelementptr inbounds %struct.bbox* %141, i32 0, i32 1
  %143 = getelementptr inbounds [3 x double]* %142, i32 0, i64 0
  store double %140, double* %143, align 8
  %144 = load double* %maxy, align 8
  %145 = load %struct.bbox** %pbb, align 8
  %146 = getelementptr inbounds %struct.bbox* %145, i32 0, i32 1
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 1
  store double %144, double* %147, align 8
  %148 = load double* %maxz, align 8
  %149 = load %struct.bbox** %pbb, align 8
  %150 = getelementptr inbounds %struct.bbox* %149, i32 0, i32 1
  %151 = getelementptr inbounds [3 x double]* %150, i32 0, i64 2
  store double %148, double* %151, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SphNormal(%struct.irecord* %hit, double* %Pi, double* %Ni) {
  %1 = alloca %struct.irecord*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %pe = alloca %struct.element*, align 8
  %ps = alloca %struct.sphere*, align 8
  store %struct.irecord* %hit, %struct.irecord** %1, align 8
  store double* %Pi, double** %2, align 8
  store double* %Ni, double** %3, align 8
  %4 = load %struct.irecord** %1, align 8
  %5 = getelementptr inbounds %struct.irecord* %4, i32 0, i32 1
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.element** %pe, align 8
  %8 = getelementptr inbounds %struct.element* %7, i32 0, i32 3
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.sphere*
  store %struct.sphere* %10, %struct.sphere** %ps, align 8
  %11 = load double** %2, align 8
  %12 = getelementptr inbounds double* %11, i64 0
  %13 = load double* %12, align 8
  %14 = load %struct.sphere** %ps, align 8
  %15 = getelementptr inbounds %struct.sphere* %14, i32 0, i32 0
  %16 = getelementptr inbounds [4 x double]* %15, i32 0, i64 0
  %17 = load double* %16, align 8
  %18 = fsub double %13, %17
  %19 = load double** %3, align 8
  %20 = getelementptr inbounds double* %19, i64 0
  store double %18, double* %20, align 8
  %21 = load double** %2, align 8
  %22 = getelementptr inbounds double* %21, i64 1
  %23 = load double* %22, align 8
  %24 = load %struct.sphere** %ps, align 8
  %25 = getelementptr inbounds %struct.sphere* %24, i32 0, i32 0
  %26 = getelementptr inbounds [4 x double]* %25, i32 0, i64 1
  %27 = load double* %26, align 8
  %28 = fsub double %23, %27
  %29 = load double** %3, align 8
  %30 = getelementptr inbounds double* %29, i64 1
  store double %28, double* %30, align 8
  %31 = load double** %2, align 8
  %32 = getelementptr inbounds double* %31, i64 2
  %33 = load double* %32, align 8
  %34 = load %struct.sphere** %ps, align 8
  %35 = getelementptr inbounds %struct.sphere* %34, i32 0, i32 0
  %36 = getelementptr inbounds [4 x double]* %35, i32 0, i64 2
  %37 = load double* %36, align 8
  %38 = fsub double %33, %37
  %39 = load double** %3, align 8
  %40 = getelementptr inbounds double* %39, i64 2
  store double %38, double* %40, align 8
  %41 = load %struct.sphere** %ps, align 8
  %42 = getelementptr inbounds %struct.sphere* %41, i32 0, i32 1
  %43 = load double* %42, align 8
  %44 = load double** %3, align 8
  %45 = getelementptr inbounds double* %44, i64 0
  %46 = load double* %45, align 8
  %47 = fdiv double %46, %43
  store double %47, double* %45, align 8
  %48 = load %struct.sphere** %ps, align 8
  %49 = getelementptr inbounds %struct.sphere* %48, i32 0, i32 1
  %50 = load double* %49, align 8
  %51 = load double** %3, align 8
  %52 = getelementptr inbounds double* %51, i64 1
  %53 = load double* %52, align 8
  %54 = fdiv double %53, %50
  store double %54, double* %52, align 8
  %55 = load %struct.sphere** %ps, align 8
  %56 = getelementptr inbounds %struct.sphere* %55, i32 0, i32 1
  %57 = load double* %56, align 8
  %58 = load double** %3, align 8
  %59 = getelementptr inbounds double* %58, i64 2
  %60 = load double* %59, align 8
  %61 = fdiv double %60, %57
  store double %61, double* %59, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SphDataNormalize(%struct.object* %po, [4 x double]* %normMat) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %ps = alloca %struct.sphere*, align 8
  %pe = alloca %struct.element*, align 8
  %surf_point = alloca [4 x double], align 16
  %center_point = alloca [4 x double], align 16
  %rad_vector = alloca [4 x double], align 16
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %normMat, [4 x double]** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 2
  %5 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %4, [4 x double]* %5)
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 3
  %8 = load %struct.element** %7, align 8
  store %struct.element* %8, %struct.element** %pe, align 8
  store i64 0, i64* %i, align 8
  br label %9

; <label>:9                                       ; preds = %129, %0
  %10 = load i64* %i, align 8
  %11 = load %struct.object** %1, align 8
  %12 = getelementptr inbounds %struct.object* %11, i32 0, i32 4
  %13 = load i64* %12, align 8
  %14 = icmp slt i64 %10, %13
  br i1 %14, label %15, label %132

; <label>:15                                      ; preds = %9
  %16 = load %struct.element** %pe, align 8
  %17 = getelementptr inbounds %struct.element* %16, i32 0, i32 3
  %18 = load i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.sphere*
  store %struct.sphere* %19, %struct.sphere** %ps, align 8
  %20 = load %struct.element** %pe, align 8
  %21 = getelementptr inbounds %struct.element* %20, i32 0, i32 1
  %22 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %21, [4 x double]* %22)
  %23 = load %struct.sphere** %ps, align 8
  %24 = getelementptr inbounds %struct.sphere* %23, i32 0, i32 0
  %25 = getelementptr inbounds [4 x double]* %24, i32 0, i64 0
  %26 = load double* %25, align 8
  %27 = load %struct.sphere** %ps, align 8
  %28 = getelementptr inbounds %struct.sphere* %27, i32 0, i32 1
  %29 = load double* %28, align 8
  %30 = fadd double %26, %29
  %31 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 0
  store double %30, double* %31, align 8
  %32 = load %struct.sphere** %ps, align 8
  %33 = getelementptr inbounds %struct.sphere* %32, i32 0, i32 0
  %34 = getelementptr inbounds [4 x double]* %33, i32 0, i64 1
  %35 = load double* %34, align 8
  %36 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 1
  store double %35, double* %36, align 8
  %37 = load %struct.sphere** %ps, align 8
  %38 = getelementptr inbounds %struct.sphere* %37, i32 0, i32 0
  %39 = getelementptr inbounds [4 x double]* %38, i32 0, i64 2
  %40 = load double* %39, align 8
  %41 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 2
  store double %40, double* %41, align 8
  %42 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 3
  store double 1.000000e+00, double* %42, align 8
  %43 = load %struct.sphere** %ps, align 8
  %44 = getelementptr inbounds %struct.sphere* %43, i32 0, i32 0
  %45 = getelementptr inbounds [4 x double]* %44, i32 0, i64 0
  %46 = load double* %45, align 8
  %47 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  store double %46, double* %47, align 8
  %48 = load %struct.sphere** %ps, align 8
  %49 = getelementptr inbounds %struct.sphere* %48, i32 0, i32 0
  %50 = getelementptr inbounds [4 x double]* %49, i32 0, i64 1
  %51 = load double* %50, align 8
  %52 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  store double %51, double* %52, align 8
  %53 = load %struct.sphere** %ps, align 8
  %54 = getelementptr inbounds %struct.sphere* %53, i32 0, i32 0
  %55 = getelementptr inbounds [4 x double]* %54, i32 0, i64 2
  %56 = load double* %55, align 8
  %57 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  store double %56, double* %57, align 8
  %58 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 3
  store double 1.000000e+00, double* %58, align 8
  %59 = getelementptr inbounds [4 x double]* %center_point, i32 0, i32 0
  %60 = load [4 x double]** %2, align 8
  %61 = getelementptr inbounds [4 x double]* %center_point, i32 0, i32 0
  call void @VecMatMult(double* %59, [4 x double]* %60, double* %61)
  %62 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i32 0
  %63 = load [4 x double]** %2, align 8
  %64 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i32 0
  call void @VecMatMult(double* %62, [4 x double]* %63, double* %64)
  %65 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 0
  %66 = load double* %65, align 8
  %67 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  %68 = load double* %67, align 8
  %69 = fsub double %66, %68
  %70 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  store double %69, double* %70, align 8
  %71 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 1
  %72 = load double* %71, align 8
  %73 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  %74 = load double* %73, align 8
  %75 = fsub double %72, %74
  %76 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  store double %75, double* %76, align 8
  %77 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 2
  %78 = load double* %77, align 8
  %79 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  %80 = load double* %79, align 8
  %81 = fsub double %78, %80
  %82 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  store double %81, double* %82, align 8
  %83 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  %84 = load double* %83, align 8
  %85 = load %struct.sphere** %ps, align 8
  %86 = getelementptr inbounds %struct.sphere* %85, i32 0, i32 0
  %87 = getelementptr inbounds [4 x double]* %86, i32 0, i64 0
  store double %84, double* %87, align 8
  %88 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  %89 = load double* %88, align 8
  %90 = load %struct.sphere** %ps, align 8
  %91 = getelementptr inbounds %struct.sphere* %90, i32 0, i32 0
  %92 = getelementptr inbounds [4 x double]* %91, i32 0, i64 1
  store double %89, double* %92, align 8
  %93 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  %94 = load double* %93, align 8
  %95 = load %struct.sphere** %ps, align 8
  %96 = getelementptr inbounds %struct.sphere* %95, i32 0, i32 0
  %97 = getelementptr inbounds [4 x double]* %96, i32 0, i64 2
  store double %94, double* %97, align 8
  %98 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  %99 = load double* %98, align 8
  %100 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  %101 = load double* %100, align 8
  %102 = fmul double %99, %101
  %103 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  %104 = load double* %103, align 8
  %105 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  %106 = load double* %105, align 8
  %107 = fmul double %104, %106
  %108 = fadd double %102, %107
  %109 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  %110 = load double* %109, align 8
  %111 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  %112 = load double* %111, align 8
  %113 = fmul double %110, %112
  %114 = fadd double %108, %113
  %115 = call double @sqrt(double %114)
  %116 = load %struct.sphere** %ps, align 8
  %117 = getelementptr inbounds %struct.sphere* %116, i32 0, i32 1
  store double %115, double* %117, align 8
  %118 = load %struct.sphere** %ps, align 8
  %119 = getelementptr inbounds %struct.sphere* %118, i32 0, i32 1
  %120 = load double* %119, align 8
  %121 = load %struct.sphere** %ps, align 8
  %122 = getelementptr inbounds %struct.sphere* %121, i32 0, i32 1
  %123 = load double* %122, align 8
  %124 = fmul double %120, %123
  %125 = load %struct.sphere** %ps, align 8
  %126 = getelementptr inbounds %struct.sphere* %125, i32 0, i32 2
  store double %124, double* %126, align 8
  %127 = load %struct.element** %pe, align 8
  %128 = getelementptr inbounds %struct.element* %127, i32 1
  store %struct.element* %128, %struct.element** %pe, align 8
  br label %129

; <label>:129                                     ; preds = %15
  %130 = load i64* %i, align 8
  %131 = add nsw i64 %130, 1
  store i64 %131, i64* %i, align 8
  br label %9

; <label>:132                                     ; preds = %9
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @SphPeIntersect(%struct.ray* %pr, %struct.element* %pe, %struct.irecord* %hit) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.element*, align 8
  %4 = alloca %struct.irecord*, align 8
  %nhits = alloca i64, align 8
  %b = alloca double, align 8
  %disc = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %vsq = alloca double, align 8
  %ps = alloca %struct.sphere*, align 8
  %V = alloca [4 x double], align 16
  %sphhit = alloca %struct.irecord*, align 8
  store %struct.ray* %pr, %struct.ray** %2, align 8
  store %struct.element* %pe, %struct.element** %3, align 8
  store %struct.irecord* %hit, %struct.irecord** %4, align 8
  %5 = load %struct.element** %3, align 8
  %6 = getelementptr inbounds %struct.element* %5, i32 0, i32 3
  %7 = load i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.sphere*
  store %struct.sphere* %8, %struct.sphere** %ps, align 8
  %9 = load %struct.irecord** %4, align 8
  store %struct.irecord* %9, %struct.irecord** %sphhit, align 8
  %10 = load %struct.sphere** %ps, align 8
  %11 = getelementptr inbounds %struct.sphere* %10, i32 0, i32 0
  %12 = getelementptr inbounds [4 x double]* %11, i32 0, i64 0
  %13 = load double* %12, align 8
  %14 = load %struct.ray** %2, align 8
  %15 = getelementptr inbounds %struct.ray* %14, i32 0, i32 3
  %16 = getelementptr inbounds [3 x double]* %15, i32 0, i64 0
  %17 = load double* %16, align 8
  %18 = fsub double %13, %17
  %19 = getelementptr inbounds [4 x double]* %V, i32 0, i64 0
  store double %18, double* %19, align 8
  %20 = load %struct.sphere** %ps, align 8
  %21 = getelementptr inbounds %struct.sphere* %20, i32 0, i32 0
  %22 = getelementptr inbounds [4 x double]* %21, i32 0, i64 1
  %23 = load double* %22, align 8
  %24 = load %struct.ray** %2, align 8
  %25 = getelementptr inbounds %struct.ray* %24, i32 0, i32 3
  %26 = getelementptr inbounds [3 x double]* %25, i32 0, i64 1
  %27 = load double* %26, align 8
  %28 = fsub double %23, %27
  %29 = getelementptr inbounds [4 x double]* %V, i32 0, i64 1
  store double %28, double* %29, align 8
  %30 = load %struct.sphere** %ps, align 8
  %31 = getelementptr inbounds %struct.sphere* %30, i32 0, i32 0
  %32 = getelementptr inbounds [4 x double]* %31, i32 0, i64 2
  %33 = load double* %32, align 8
  %34 = load %struct.ray** %2, align 8
  %35 = getelementptr inbounds %struct.ray* %34, i32 0, i32 3
  %36 = getelementptr inbounds [3 x double]* %35, i32 0, i64 2
  %37 = load double* %36, align 8
  %38 = fsub double %33, %37
  %39 = getelementptr inbounds [4 x double]* %V, i32 0, i64 2
  store double %38, double* %39, align 8
  %40 = getelementptr inbounds [4 x double]* %V, i32 0, i64 0
  %41 = load double* %40, align 8
  %42 = getelementptr inbounds [4 x double]* %V, i32 0, i64 0
  %43 = load double* %42, align 8
  %44 = fmul double %41, %43
  %45 = getelementptr inbounds [4 x double]* %V, i32 0, i64 1
  %46 = load double* %45, align 8
  %47 = getelementptr inbounds [4 x double]* %V, i32 0, i64 1
  %48 = load double* %47, align 8
  %49 = fmul double %46, %48
  %50 = fadd double %44, %49
  %51 = getelementptr inbounds [4 x double]* %V, i32 0, i64 2
  %52 = load double* %51, align 8
  %53 = getelementptr inbounds [4 x double]* %V, i32 0, i64 2
  %54 = load double* %53, align 8
  %55 = fmul double %52, %54
  %56 = fadd double %50, %55
  store double %56, double* %vsq, align 8
  %57 = getelementptr inbounds [4 x double]* %V, i32 0, i64 0
  %58 = load double* %57, align 8
  %59 = load %struct.ray** %2, align 8
  %60 = getelementptr inbounds %struct.ray* %59, i32 0, i32 4
  %61 = getelementptr inbounds [3 x double]* %60, i32 0, i64 0
  %62 = load double* %61, align 8
  %63 = fmul double %58, %62
  %64 = getelementptr inbounds [4 x double]* %V, i32 0, i64 1
  %65 = load double* %64, align 8
  %66 = load %struct.ray** %2, align 8
  %67 = getelementptr inbounds %struct.ray* %66, i32 0, i32 4
  %68 = getelementptr inbounds [3 x double]* %67, i32 0, i64 1
  %69 = load double* %68, align 8
  %70 = fmul double %65, %69
  %71 = fadd double %63, %70
  %72 = getelementptr inbounds [4 x double]* %V, i32 0, i64 2
  %73 = load double* %72, align 8
  %74 = load %struct.ray** %2, align 8
  %75 = getelementptr inbounds %struct.ray* %74, i32 0, i32 4
  %76 = getelementptr inbounds [3 x double]* %75, i32 0, i64 2
  %77 = load double* %76, align 8
  %78 = fmul double %73, %77
  %79 = fadd double %71, %78
  store double %79, double* %b, align 8
  %80 = load double* %vsq, align 8
  %81 = load %struct.sphere** %ps, align 8
  %82 = getelementptr inbounds %struct.sphere* %81, i32 0, i32 2
  %83 = load double* %82, align 8
  %84 = fcmp ogt double %80, %83
  br i1 %84, label %85, label %89

; <label>:85                                      ; preds = %0
  %86 = load double* %b, align 8
  %87 = fcmp olt double %86, 1.000000e-07
  br i1 %87, label %88, label %89

; <label>:88                                      ; preds = %85
  store i64 0, i64* %1
  br label %138

; <label>:89                                      ; preds = %85, %0
  %90 = load double* %b, align 8
  %91 = load double* %b, align 8
  %92 = fmul double %90, %91
  %93 = load double* %vsq, align 8
  %94 = fsub double %92, %93
  %95 = load %struct.sphere** %ps, align 8
  %96 = getelementptr inbounds %struct.sphere* %95, i32 0, i32 2
  %97 = load double* %96, align 8
  %98 = fadd double %94, %97
  store double %98, double* %disc, align 8
  %99 = load double* %disc, align 8
  %100 = fcmp olt double %99, 0.000000e+00
  br i1 %100, label %101, label %102

; <label>:101                                     ; preds = %89
  store i64 0, i64* %1
  br label %138

; <label>:102                                     ; preds = %89
  %103 = load double* %disc, align 8
  %104 = call double @sqrt(double %103)
  store double %104, double* %disc, align 8
  %105 = load double* %b, align 8
  %106 = load double* %disc, align 8
  %107 = fadd double %105, %106
  store double %107, double* %t2, align 8
  %108 = load double* %b, align 8
  %109 = load double* %disc, align 8
  %110 = fsub double %108, %109
  store double %110, double* %t1, align 8
  %111 = load double* %t2, align 8
  %112 = fcmp ole double %111, 1.000000e-07
  br i1 %112, label %113, label %114

; <label>:113                                     ; preds = %102
  store i64 0, i64* %1
  br label %138

; <label>:114                                     ; preds = %102
  store i64 0, i64* %nhits, align 8
  %115 = load double* %t1, align 8
  %116 = fcmp ogt double %115, 1.000000e-07
  br i1 %116, label %117, label %128

; <label>:117                                     ; preds = %114
  %118 = load double* %t1, align 8
  %119 = load %struct.irecord** %sphhit, align 8
  %120 = getelementptr inbounds %struct.irecord* %119, i32 0, i32 0
  store double %118, double* %120, align 8
  %121 = load %struct.element** %3, align 8
  %122 = load %struct.irecord** %sphhit, align 8
  %123 = getelementptr inbounds %struct.irecord* %122, i32 0, i32 1
  store %struct.element* %121, %struct.element** %123, align 8
  %124 = load %struct.irecord** %sphhit, align 8
  %125 = getelementptr inbounds %struct.irecord* %124, i32 1
  store %struct.irecord* %125, %struct.irecord** %sphhit, align 8
  %126 = load i64* %nhits, align 8
  %127 = add nsw i64 %126, 1
  store i64 %127, i64* %nhits, align 8
  br label %128

; <label>:128                                     ; preds = %117, %114
  %129 = load double* %t2, align 8
  %130 = load %struct.irecord** %sphhit, align 8
  %131 = getelementptr inbounds %struct.irecord* %130, i32 0, i32 0
  store double %129, double* %131, align 8
  %132 = load %struct.element** %3, align 8
  %133 = load %struct.irecord** %sphhit, align 8
  %134 = getelementptr inbounds %struct.irecord* %133, i32 0, i32 1
  store %struct.element* %132, %struct.element** %134, align 8
  %135 = load i64* %nhits, align 8
  %136 = add nsw i64 %135, 1
  store i64 %136, i64* %nhits, align 8
  %137 = load i64* %nhits, align 8
  store i64 %137, i64* %1
  br label %138

; <label>:138                                     ; preds = %128, %113, %101, %88
  %139 = load i64* %1
  ret i64 %139
}

; Function Attrs: nounwind uwtable
define internal i64 @SphIntersect(%struct.ray* %pr, %struct.object* %po, %struct.irecord* %hit) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca %struct.object*, align 8
  %3 = alloca %struct.irecord*, align 8
  %i = alloca i64, align 8
  %nhits = alloca i64, align 8
  %pe = alloca %struct.element*, align 8
  %newhit = alloca [2 x %struct.irecord], align 16
  store %struct.ray* %pr, %struct.ray** %1, align 8
  store %struct.object* %po, %struct.object** %2, align 8
  store %struct.irecord* %hit, %struct.irecord** %3, align 8
  store i64 0, i64* %nhits, align 8
  %4 = load %struct.object** %2, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.irecord** %3, align 8
  %8 = getelementptr inbounds %struct.irecord* %7, i64 0
  %9 = getelementptr inbounds %struct.irecord* %8, i32 0, i32 0
  store double 1.000000e+32, double* %9, align 8
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %50, %0
  %11 = load i64* %i, align 8
  %12 = load %struct.object** %2, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 4
  %14 = load i64* %13, align 8
  %15 = icmp slt i64 %11, %14
  br i1 %15, label %16, label %53

; <label>:16                                      ; preds = %10
  %17 = load %struct.ray** %1, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i32 0
  %20 = call i64 @SphPeIntersect(%struct.ray* %17, %struct.element* %18, %struct.irecord* %19)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %47

; <label>:22                                      ; preds = %16
  %23 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %24 = getelementptr inbounds %struct.irecord* %23, i32 0, i32 0
  %25 = load double* %24, align 8
  %26 = load %struct.irecord** %3, align 8
  %27 = getelementptr inbounds %struct.irecord* %26, i64 0
  %28 = getelementptr inbounds %struct.irecord* %27, i32 0, i32 0
  %29 = load double* %28, align 8
  %30 = fcmp olt double %25, %29
  br i1 %30, label %31, label %46

; <label>:31                                      ; preds = %22
  %32 = load i64* %nhits, align 8
  %33 = add nsw i64 %32, 1
  store i64 %33, i64* %nhits, align 8
  %34 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %35 = getelementptr inbounds %struct.irecord* %34, i32 0, i32 0
  %36 = load double* %35, align 8
  %37 = load %struct.irecord** %3, align 8
  %38 = getelementptr inbounds %struct.irecord* %37, i64 0
  %39 = getelementptr inbounds %struct.irecord* %38, i32 0, i32 0
  store double %36, double* %39, align 8
  %40 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0, i64 0
  %41 = getelementptr inbounds %struct.irecord* %40, i32 0, i32 1
  %42 = load %struct.element** %41, align 8
  %43 = load %struct.irecord** %3, align 8
  %44 = getelementptr inbounds %struct.irecord* %43, i64 0
  %45 = getelementptr inbounds %struct.irecord* %44, i32 0, i32 1
  store %struct.element* %42, %struct.element** %45, align 8
  br label %46

; <label>:46                                      ; preds = %31, %22
  br label %47

; <label>:47                                      ; preds = %46, %16
  %48 = load %struct.element** %pe, align 8
  %49 = getelementptr inbounds %struct.element* %48, i32 1
  store %struct.element* %49, %struct.element** %pe, align 8
  br label %50

; <label>:50                                      ; preds = %47
  %51 = load i64* %i, align 8
  %52 = add nsw i64 %51, 1
  store i64 %52, i64* %i, align 8
  br label %10

; <label>:53                                      ; preds = %10
  %54 = load i64* %nhits, align 8
  ret i64 %54
}

; Function Attrs: nounwind uwtable
define internal void @SphTransform(%struct.object* %po, [4 x double]* %xtrans, [4 x double]* %xinvT) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %numelems = alloca i64, align 8
  %new_rad = alloca double, align 8
  %ps = alloca %struct.sphere*, align 8
  %pe = alloca %struct.element*, align 8
  %surf_point = alloca [4 x double], align 16
  %center_point = alloca [4 x double], align 16
  %rad_vector = alloca [4 x double], align 16
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %xtrans, [4 x double]** %2, align 8
  store [4 x double]* %xinvT, [4 x double]** %3, align 8
  %4 = load %struct.object** %1, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.object** %1, align 8
  %8 = getelementptr inbounds %struct.object* %7, i32 0, i32 4
  %9 = load i64* %8, align 8
  store i64 %9, i64* %numelems, align 8
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %133, %0
  %11 = load i64* %i, align 8
  %12 = load i64* %numelems, align 8
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %14, label %136

; <label>:14                                      ; preds = %10
  %15 = load %struct.element** %pe, align 8
  %16 = getelementptr inbounds %struct.element* %15, i32 0, i32 3
  %17 = load i8** %16, align 8
  %18 = bitcast i8* %17 to %struct.sphere*
  store %struct.sphere* %18, %struct.sphere** %ps, align 8
  %19 = load %struct.sphere** %ps, align 8
  %20 = getelementptr inbounds %struct.sphere* %19, i32 0, i32 0
  %21 = getelementptr inbounds [4 x double]* %20, i32 0, i64 0
  %22 = load double* %21, align 8
  %23 = load %struct.sphere** %ps, align 8
  %24 = getelementptr inbounds %struct.sphere* %23, i32 0, i32 1
  %25 = load double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 0
  store double %26, double* %27, align 8
  %28 = load %struct.sphere** %ps, align 8
  %29 = getelementptr inbounds %struct.sphere* %28, i32 0, i32 0
  %30 = getelementptr inbounds [4 x double]* %29, i32 0, i64 1
  %31 = load double* %30, align 8
  %32 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 1
  store double %31, double* %32, align 8
  %33 = load %struct.sphere** %ps, align 8
  %34 = getelementptr inbounds %struct.sphere* %33, i32 0, i32 0
  %35 = getelementptr inbounds [4 x double]* %34, i32 0, i64 2
  %36 = load double* %35, align 8
  %37 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 2
  store double %36, double* %37, align 8
  %38 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 3
  store double 1.000000e+00, double* %38, align 8
  %39 = load %struct.sphere** %ps, align 8
  %40 = getelementptr inbounds %struct.sphere* %39, i32 0, i32 0
  %41 = getelementptr inbounds [4 x double]* %40, i32 0, i64 0
  %42 = load double* %41, align 8
  %43 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  store double %42, double* %43, align 8
  %44 = load %struct.sphere** %ps, align 8
  %45 = getelementptr inbounds %struct.sphere* %44, i32 0, i32 0
  %46 = getelementptr inbounds [4 x double]* %45, i32 0, i64 1
  %47 = load double* %46, align 8
  %48 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  store double %47, double* %48, align 8
  %49 = load %struct.sphere** %ps, align 8
  %50 = getelementptr inbounds %struct.sphere* %49, i32 0, i32 0
  %51 = getelementptr inbounds [4 x double]* %50, i32 0, i64 2
  %52 = load double* %51, align 8
  %53 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  store double %52, double* %53, align 8
  %54 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 3
  store double 1.000000e+00, double* %54, align 8
  %55 = getelementptr inbounds [4 x double]* %center_point, i32 0, i32 0
  %56 = load [4 x double]** %2, align 8
  %57 = getelementptr inbounds [4 x double]* %center_point, i32 0, i32 0
  call void @VecMatMult(double* %55, [4 x double]* %56, double* %57)
  %58 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i32 0
  %59 = load [4 x double]** %2, align 8
  %60 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i32 0
  call void @VecMatMult(double* %58, [4 x double]* %59, double* %60)
  %61 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 0
  %62 = load double* %61, align 8
  %63 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  %64 = load double* %63, align 8
  %65 = fsub double %62, %64
  %66 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  store double %65, double* %66, align 8
  %67 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 1
  %68 = load double* %67, align 8
  %69 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  %70 = load double* %69, align 8
  %71 = fsub double %68, %70
  %72 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  store double %71, double* %72, align 8
  %73 = getelementptr inbounds [4 x double]* %surf_point, i32 0, i64 2
  %74 = load double* %73, align 8
  %75 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  %76 = load double* %75, align 8
  %77 = fsub double %74, %76
  %78 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  store double %77, double* %78, align 8
  %79 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 0
  %80 = load double* %79, align 8
  %81 = load %struct.sphere** %ps, align 8
  %82 = getelementptr inbounds %struct.sphere* %81, i32 0, i32 0
  %83 = getelementptr inbounds [4 x double]* %82, i32 0, i64 0
  store double %80, double* %83, align 8
  %84 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 1
  %85 = load double* %84, align 8
  %86 = load %struct.sphere** %ps, align 8
  %87 = getelementptr inbounds %struct.sphere* %86, i32 0, i32 0
  %88 = getelementptr inbounds [4 x double]* %87, i32 0, i64 1
  store double %85, double* %88, align 8
  %89 = getelementptr inbounds [4 x double]* %center_point, i32 0, i64 2
  %90 = load double* %89, align 8
  %91 = load %struct.sphere** %ps, align 8
  %92 = getelementptr inbounds %struct.sphere* %91, i32 0, i32 0
  %93 = getelementptr inbounds [4 x double]* %92, i32 0, i64 2
  store double %90, double* %93, align 8
  %94 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  %95 = load double* %94, align 8
  %96 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 0
  %97 = load double* %96, align 8
  %98 = fmul double %95, %97
  %99 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  %100 = load double* %99, align 8
  %101 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 1
  %102 = load double* %101, align 8
  %103 = fmul double %100, %102
  %104 = fadd double %98, %103
  %105 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  %106 = load double* %105, align 8
  %107 = getelementptr inbounds [4 x double]* %rad_vector, i32 0, i64 2
  %108 = load double* %107, align 8
  %109 = fmul double %106, %108
  %110 = fadd double %104, %109
  %111 = call double @sqrt(double %110)
  store double %111, double* %new_rad, align 8
  %112 = load double* %new_rad, align 8
  %113 = load %struct.sphere** %ps, align 8
  %114 = getelementptr inbounds %struct.sphere* %113, i32 0, i32 1
  %115 = load double* %114, align 8
  %116 = fcmp une double %112, %115
  br i1 %116, label %117, label %130

; <label>:117                                     ; preds = %14
  %118 = load double* %new_rad, align 8
  %119 = load %struct.sphere** %ps, align 8
  %120 = getelementptr inbounds %struct.sphere* %119, i32 0, i32 1
  store double %118, double* %120, align 8
  %121 = load %struct.sphere** %ps, align 8
  %122 = getelementptr inbounds %struct.sphere* %121, i32 0, i32 1
  %123 = load double* %122, align 8
  %124 = load %struct.sphere** %ps, align 8
  %125 = getelementptr inbounds %struct.sphere* %124, i32 0, i32 1
  %126 = load double* %125, align 8
  %127 = fmul double %123, %126
  %128 = load %struct.sphere** %ps, align 8
  %129 = getelementptr inbounds %struct.sphere* %128, i32 0, i32 2
  store double %127, double* %129, align 8
  br label %130

; <label>:130                                     ; preds = %117, %14
  %131 = load %struct.element** %pe, align 8
  %132 = getelementptr inbounds %struct.element* %131, i32 1
  store %struct.element* %132, %struct.element** %pe, align 8
  br label %133

; <label>:133                                     ; preds = %130
  %134 = load i64* %i, align 8
  %135 = add nsw i64 %134, 1
  store i64 %135, i64* %i, align 8
  br label %10

; <label>:136                                     ; preds = %10
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SphRead(%struct.object* %po, %struct._IO_FILE* %pf) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca %struct._IO_FILE*, align 8
  %i = alloca i64, align 8
  %instat = alloca i64, align 8
  %ps = alloca %struct.sphere*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store %struct._IO_FILE* %pf, %struct._IO_FILE** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 3
  %5 = load %struct.element** %4, align 8
  store %struct.element* %5, %struct.element** %pe, align 8
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 4
  %8 = load i64* %7, align 8
  %9 = mul i64 48, %8
  %10 = call i8* @GlobalMalloc(i64 %9, i8* getelementptr inbounds ([6 x i8]* @.str.4.408, i32 0, i32 0))
  %11 = bitcast i8* %10 to %struct.sphere*
  store %struct.sphere* %11, %struct.sphere** %ps, align 8
  store i64 0, i64* %i, align 8
  br label %12

; <label>:12                                      ; preds = %64, %0
  %13 = load i64* %i, align 8
  %14 = load %struct.object** %1, align 8
  %15 = getelementptr inbounds %struct.object* %14, i32 0, i32 4
  %16 = load i64* %15, align 8
  %17 = icmp slt i64 %13, %16
  br i1 %17, label %18, label %67

; <label>:18                                      ; preds = %12
  %19 = load %struct._IO_FILE** %2, align 8
  %20 = load %struct.sphere** %ps, align 8
  %21 = getelementptr inbounds %struct.sphere* %20, i32 0, i32 0
  %22 = getelementptr inbounds [4 x double]* %21, i32 0, i64 0
  %23 = load %struct.sphere** %ps, align 8
  %24 = getelementptr inbounds %struct.sphere* %23, i32 0, i32 0
  %25 = getelementptr inbounds [4 x double]* %24, i32 0, i64 1
  %26 = load %struct.sphere** %ps, align 8
  %27 = getelementptr inbounds %struct.sphere* %26, i32 0, i32 0
  %28 = getelementptr inbounds [4 x double]* %27, i32 0, i64 2
  %29 = load %struct.sphere** %ps, align 8
  %30 = getelementptr inbounds %struct.sphere* %29, i32 0, i32 1
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([16 x i8]* @.str.5.409, i32 0, i32 0), double* %22, double* %25, double* %28, double* %30)
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %instat, align 8
  %33 = load i64* %instat, align 8
  %34 = icmp ne i64 %33, 4
  br i1 %34, label %35, label %38

; <label>:35                                      ; preds = %18
  %36 = load i64* %i, align 8
  %37 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.6.410, i32 0, i32 0), i64 %36)
  call void @exit(i32 1)
  unreachable

; <label>:38                                      ; preds = %18
  %39 = load %struct.sphere** %ps, align 8
  %40 = getelementptr inbounds %struct.sphere* %39, i32 0, i32 0
  %41 = getelementptr inbounds [4 x double]* %40, i32 0, i64 3
  store double 1.000000e+00, double* %41, align 8
  %42 = load %struct.sphere** %ps, align 8
  %43 = getelementptr inbounds %struct.sphere* %42, i32 0, i32 1
  %44 = load double* %43, align 8
  %45 = load %struct.sphere** %ps, align 8
  %46 = getelementptr inbounds %struct.sphere* %45, i32 0, i32 1
  %47 = load double* %46, align 8
  %48 = fmul double %44, %47
  %49 = load %struct.sphere** %ps, align 8
  %50 = getelementptr inbounds %struct.sphere* %49, i32 0, i32 2
  store double %48, double* %50, align 8
  %51 = load %struct.sphere** %ps, align 8
  %52 = bitcast %struct.sphere* %51 to i8*
  %53 = load %struct.element** %pe, align 8
  %54 = getelementptr inbounds %struct.element* %53, i32 0, i32 3
  store i8* %52, i8** %54, align 8
  %55 = load %struct.object** %1, align 8
  %56 = load %struct.element** %pe, align 8
  %57 = getelementptr inbounds %struct.element* %56, i32 0, i32 2
  store %struct.object* %55, %struct.object** %57, align 8
  %58 = load %struct.element** %pe, align 8
  %59 = load %struct.sphere** %ps, align 8
  call void @SphElementBoundBox(%struct.element* %58, %struct.sphere* %59)
  %60 = load %struct.sphere** %ps, align 8
  %61 = getelementptr inbounds %struct.sphere* %60, i32 1
  store %struct.sphere* %61, %struct.sphere** %ps, align 8
  %62 = load %struct.element** %pe, align 8
  %63 = getelementptr inbounds %struct.element* %62, i32 1
  store %struct.element* %63, %struct.element** %pe, align 8
  br label %64

; <label>:64                                      ; preds = %38
  %65 = load i64* %i, align 8
  %66 = add nsw i64 %65, 1
  store i64 %66, i64* %i, align 8
  br label %12

; <label>:67                                      ; preds = %12
  ret void
}

; Function Attrs: nounwind uwtable
define internal double @frand() {
  %r = alloca double, align 8
  %1 = load i64* @frand.lLastRand, align 8
  %2 = mul nsw i64 %1, 214013
  %3 = add nsw i64 %2, 2531011
  store i64 %3, i64* @frand.lLastRand, align 8
  %4 = load i64* @frand.lLastRand, align 8
  %5 = ashr i64 %4, 16
  %6 = and i64 %5, 32767
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %7, 3.276800e+04
  store double %8, double* %r, align 8
  %9 = load double* %r, align 8
  ret double %9
}

; Function Attrs: nounwind uwtable
define internal i64 @GetRayJobFromBundle(%struct.rayjob* %job, i64* %x, i64* %y) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.rayjob*, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  store %struct.rayjob* %job, %struct.rayjob** %2, align 8
  store i64* %x, i64** %3, align 8
  store i64* %y, i64** %4, align 8
  %5 = load %struct.rayjob** %2, align 8
  %6 = getelementptr inbounds %struct.rayjob* %5, i32 0, i32 4
  %7 = load i64* %6, align 8
  %8 = load i64** %3, align 8
  store i64 %7, i64* %8, align 8
  %9 = load %struct.rayjob** %2, align 8
  %10 = getelementptr inbounds %struct.rayjob* %9, i32 0, i32 5
  %11 = load i64* %10, align 8
  %12 = load i64** %4, align 8
  store i64 %11, i64* %12, align 8
  %13 = load %struct.rayjob** %2, align 8
  %14 = getelementptr inbounds %struct.rayjob* %13, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = load %struct.rayjob** %2, align 8
  %17 = getelementptr inbounds %struct.rayjob* %16, i32 0, i32 3
  %18 = load i64* %17, align 8
  %19 = add nsw i64 %15, %18
  %20 = load %struct.rayjob** %2, align 8
  %21 = getelementptr inbounds %struct.rayjob* %20, i32 0, i32 5
  %22 = load i64* %21, align 8
  %23 = icmp eq i64 %19, %22
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %0
  store i64 0, i64* %1
  br label %52

; <label>:25                                      ; preds = %0
  %26 = load %struct.rayjob** %2, align 8
  %27 = getelementptr inbounds %struct.rayjob* %26, i32 0, i32 4
  %28 = load i64* %27, align 8
  %29 = add nsw i64 %28, 1
  store i64 %29, i64* %27, align 8
  %30 = load %struct.rayjob** %2, align 8
  %31 = getelementptr inbounds %struct.rayjob* %30, i32 0, i32 0
  %32 = load i64* %31, align 8
  %33 = load %struct.rayjob** %2, align 8
  %34 = getelementptr inbounds %struct.rayjob* %33, i32 0, i32 2
  %35 = load i64* %34, align 8
  %36 = add nsw i64 %32, %35
  %37 = load %struct.rayjob** %2, align 8
  %38 = getelementptr inbounds %struct.rayjob* %37, i32 0, i32 4
  %39 = load i64* %38, align 8
  %40 = icmp eq i64 %36, %39
  br i1 %40, label %41, label %51

; <label>:41                                      ; preds = %25
  %42 = load %struct.rayjob** %2, align 8
  %43 = getelementptr inbounds %struct.rayjob* %42, i32 0, i32 0
  %44 = load i64* %43, align 8
  %45 = load %struct.rayjob** %2, align 8
  %46 = getelementptr inbounds %struct.rayjob* %45, i32 0, i32 4
  store i64 %44, i64* %46, align 8
  %47 = load %struct.rayjob** %2, align 8
  %48 = getelementptr inbounds %struct.rayjob* %47, i32 0, i32 5
  %49 = load i64* %48, align 8
  %50 = add nsw i64 %49, 1
  store i64 %50, i64* %48, align 8
  br label %51

; <label>:51                                      ; preds = %41, %25
  store i64 1, i64* %1
  br label %52

; <label>:52                                      ; preds = %51, %24
  %53 = load i64* %1
  ret i64 %53
}

; Function Attrs: nounwind uwtable
define internal void @ConvertPrimRayJobToRayMsg(%struct.ray* %ray, double %x, double %y) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %dir = alloca [4 x double], align 16
  %origin = alloca [4 x double], align 16
  store %struct.ray* %ray, %struct.ray** %1, align 8
  store double %x, double* %2, align 8
  store double %y, double* %3, align 8
  %4 = load i64* getelementptr inbounds (%struct.view* @View, i32 0, i32 6), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %52

; <label>:6                                       ; preds = %0
  %7 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 12), align 8
  %8 = fsub double -0.000000e+00, %7
  %9 = load double* %2, align 8
  %10 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 14), align 8
  %11 = fmul double %9, %10
  %12 = fadd double %8, %11
  %13 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 0
  store double %12, double* %13, align 8
  %14 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 13), align 8
  %15 = load double* %3, align 8
  %16 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 15), align 8
  %17 = fmul double %15, %16
  %18 = fsub double %14, %17
  %19 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 1
  store double %18, double* %19, align 8
  %20 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 9), align 8
  %21 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 2
  store double %20, double* %21, align 8
  %22 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 3
  store double 0.000000e+00, double* %22, align 8
  %23 = getelementptr inbounds [4 x double]* %dir, i32 0, i32 0
  call void @TransformViewRay(double* %23)
  %24 = getelementptr inbounds [4 x double]* %dir, i32 0, i32 0
  call void @VecNorm(double* %24)
  %25 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 0
  %26 = load double* %25, align 8
  %27 = load %struct.ray** %1, align 8
  %28 = getelementptr inbounds %struct.ray* %27, i32 0, i32 4
  %29 = getelementptr inbounds [3 x double]* %28, i32 0, i64 0
  store double %26, double* %29, align 8
  %30 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 1
  %31 = load double* %30, align 8
  %32 = load %struct.ray** %1, align 8
  %33 = getelementptr inbounds %struct.ray* %32, i32 0, i32 4
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 1
  store double %31, double* %34, align 8
  %35 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 2
  %36 = load double* %35, align 8
  %37 = load %struct.ray** %1, align 8
  %38 = getelementptr inbounds %struct.ray* %37, i32 0, i32 4
  %39 = getelementptr inbounds [3 x double]* %38, i32 0, i64 2
  store double %36, double* %39, align 8
  %40 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 0), align 8
  %41 = load %struct.ray** %1, align 8
  %42 = getelementptr inbounds %struct.ray* %41, i32 0, i32 3
  %43 = getelementptr inbounds [3 x double]* %42, i32 0, i64 0
  store double %40, double* %43, align 8
  %44 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 1), align 8
  %45 = load %struct.ray** %1, align 8
  %46 = getelementptr inbounds %struct.ray* %45, i32 0, i32 3
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 1
  store double %44, double* %47, align 8
  %48 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 0, i64 2), align 8
  %49 = load %struct.ray** %1, align 8
  %50 = getelementptr inbounds %struct.ray* %49, i32 0, i32 3
  %51 = getelementptr inbounds [3 x double]* %50, i32 0, i64 2
  store double %48, double* %51, align 8
  br label %105

; <label>:52                                      ; preds = %0
  %53 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 0
  store double 0.000000e+00, double* %53, align 8
  %54 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 1
  store double 0.000000e+00, double* %54, align 8
  %55 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 2
  store double 1.000000e+00, double* %55, align 8
  %56 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 3
  store double 0.000000e+00, double* %56, align 8
  %57 = getelementptr inbounds [4 x double]* %dir, i32 0, i32 0
  call void @TransformViewRay(double* %57)
  %58 = getelementptr inbounds [4 x double]* %dir, i32 0, i32 0
  call void @VecNorm(double* %58)
  %59 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 0
  %60 = load double* %59, align 8
  %61 = load %struct.ray** %1, align 8
  %62 = getelementptr inbounds %struct.ray* %61, i32 0, i32 4
  %63 = getelementptr inbounds [3 x double]* %62, i32 0, i64 0
  store double %60, double* %63, align 8
  %64 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 1
  %65 = load double* %64, align 8
  %66 = load %struct.ray** %1, align 8
  %67 = getelementptr inbounds %struct.ray* %66, i32 0, i32 4
  %68 = getelementptr inbounds [3 x double]* %67, i32 0, i64 1
  store double %65, double* %68, align 8
  %69 = getelementptr inbounds [4 x double]* %dir, i32 0, i64 2
  %70 = load double* %69, align 8
  %71 = load %struct.ray** %1, align 8
  %72 = getelementptr inbounds %struct.ray* %71, i32 0, i32 4
  %73 = getelementptr inbounds [3 x double]* %72, i32 0, i64 2
  store double %70, double* %73, align 8
  %74 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 12), align 8
  %75 = fsub double -0.000000e+00, %74
  %76 = load double* %2, align 8
  %77 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 14), align 8
  %78 = fmul double %76, %77
  %79 = fadd double %75, %78
  %80 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 0
  store double %79, double* %80, align 8
  %81 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 13), align 8
  %82 = load double* %3, align 8
  %83 = load double* getelementptr inbounds (%struct.display* @Display, i32 0, i32 15), align 8
  %84 = fmul double %82, %83
  %85 = fsub double %81, %84
  %86 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 1
  store double %85, double* %86, align 8
  %87 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 2
  store double 0.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 3
  store double 1.000000e+00, double* %88, align 8
  %89 = getelementptr inbounds [4 x double]* %origin, i32 0, i32 0
  call void @TransformViewRay(double* %89)
  %90 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 0
  %91 = load double* %90, align 8
  %92 = load %struct.ray** %1, align 8
  %93 = getelementptr inbounds %struct.ray* %92, i32 0, i32 3
  %94 = getelementptr inbounds [3 x double]* %93, i32 0, i64 0
  store double %91, double* %94, align 8
  %95 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 1
  %96 = load double* %95, align 8
  %97 = load %struct.ray** %1, align 8
  %98 = getelementptr inbounds %struct.ray* %97, i32 0, i32 3
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 1
  store double %96, double* %99, align 8
  %100 = getelementptr inbounds [4 x double]* %origin, i32 0, i64 2
  %101 = load double* %100, align 8
  %102 = load %struct.ray** %1, align 8
  %103 = getelementptr inbounds %struct.ray* %102, i32 0, i32 3
  %104 = getelementptr inbounds [3 x double]* %103, i32 0, i64 2
  store double %101, double* %104, align 8
  br label %105

; <label>:105                                     ; preds = %52, %6
  %106 = load %struct.ray** %1, align 8
  %107 = getelementptr inbounds %struct.ray* %106, i32 0, i32 5
  store i64 0, i64* %107, align 8
  %108 = load i64* @NumSubRays, align 8
  %109 = sitofp i64 %108 to double
  %110 = fdiv double 1.000000e+00, %109
  %111 = fptrunc double %110 to float
  %112 = load %struct.ray** %1, align 8
  %113 = getelementptr inbounds %struct.ray* %112, i32 0, i32 6
  store float %111, float* %113, align 4
  %114 = load %struct.gmem** @gm, align 8
  %115 = getelementptr inbounds %struct.gmem* %114, i32 0, i32 10
  %116 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %115)
  %117 = load %struct.gmem** @gm, align 8
  %118 = getelementptr inbounds %struct.gmem* %117, i32 0, i32 2
  %119 = load i64* %118, align 8
  %120 = add nsw i64 %119, 1
  store i64 %120, i64* %118, align 8
  %121 = load %struct.ray** %1, align 8
  %122 = getelementptr inbounds %struct.ray* %121, i32 0, i32 0
  store i64 %119, i64* %122, align 8
  %123 = load %struct.gmem** @gm, align 8
  %124 = getelementptr inbounds %struct.gmem* %123, i32 0, i32 10
  %125 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %124)
  %126 = load double* %2, align 8
  %127 = fptosi double %126 to i64
  %128 = load %struct.ray** %1, align 8
  %129 = getelementptr inbounds %struct.ray* %128, i32 0, i32 1
  store i64 %127, i64* %129, align 8
  %130 = load double* %3, align 8
  %131 = fptosi double %130 to i64
  %132 = load %struct.ray** %1, align 8
  %133 = getelementptr inbounds %struct.ray* %132, i32 0, i32 2
  store i64 %131, i64* %133, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @RayTrace(i64 %pid) {
  %1 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %xx = alloca double, align 8
  %yy = alloca double, align 8
  %N = alloca [3 x double], align 16
  %Ipoint = alloca [3 x double], align 16
  %c = alloca [3 x double], align 16
  %ray = alloca %struct.ray*, align 8
  %rmsg = alloca %struct.ray, align 8
  %job = alloca %struct.rayjob, align 8
  %po = alloca %struct.object*, align 8
  %hit = alloca i64, align 8
  %hitrecord = alloca %struct.irecord, align 8
  store i64 %pid, i64* %1, align 8
  store %struct.ray* %rmsg, %struct.ray** %ray, align 8
  br label %2

; <label>:2                                       ; preds = %194, %0
  %3 = load i64* %1, align 8
  %4 = call i64 @GetJobs(%struct.rayjob* %job, i64 %3)
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %195

; <label>:6                                       ; preds = %2
  br label %7

; <label>:7                                       ; preds = %193, %6
  %8 = call i64 @GetRayJobFromBundle(%struct.rayjob* %job, i64* %x, i64* %y)
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %194

; <label>:10                                      ; preds = %7
  %11 = load i64* %x, align 8
  %12 = sitofp i64 %11 to double
  store double %12, double* %xx, align 8
  %13 = load i64* %y, align 8
  %14 = sitofp i64 %13 to double
  store double %14, double* %yy, align 8
  %15 = load i64* @AntiAlias, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %36

; <label>:17                                      ; preds = %10
  store i64 0, i64* %j, align 8
  br label %18

; <label>:18                                      ; preds = %32, %17
  %19 = load i64* %j, align 8
  %20 = load i64* @NumSubRays, align 8
  %21 = icmp slt i64 %19, %20
  br i1 %21, label %22, label %35

; <label>:22                                      ; preds = %18
  %23 = load %struct.ray** %ray, align 8
  %24 = load double* %xx, align 8
  %25 = call double @frand()
  %26 = fadd double %24, %25
  %27 = load double* %yy, align 8
  %28 = call double @frand()
  %29 = fadd double %27, %28
  call void @ConvertPrimRayJobToRayMsg(%struct.ray* %23, double %26, double %29)
  %30 = load %struct.ray** %ray, align 8
  %31 = load i64* %1, align 8
  call void @PushRayTreeStack(%struct.ray* %30, i64 %31)
  br label %32

; <label>:32                                      ; preds = %22
  %33 = load i64* %j, align 8
  %34 = add nsw i64 %33, 1
  store i64 %34, i64* %j, align 8
  br label %18

; <label>:35                                      ; preds = %18
  br label %42

; <label>:36                                      ; preds = %10
  %37 = load %struct.ray** %ray, align 8
  %38 = load double* %xx, align 8
  %39 = load double* %yy, align 8
  call void @ConvertPrimRayJobToRayMsg(%struct.ray* %37, double %38, double %39)
  %40 = load %struct.ray** %ray, align 8
  %41 = load i64* %1, align 8
  call void @PushRayTreeStack(%struct.ray* %40, i64 %41)
  br label %42

; <label>:42                                      ; preds = %36, %35
  br label %43

; <label>:43                                      ; preds = %192, %42
  %44 = load %struct.ray** %ray, align 8
  %45 = load i64* %1, align 8
  %46 = call i64 @PopRayTreeStack(%struct.ray* %44, i64 %45)
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %193

; <label>:48                                      ; preds = %43
  %49 = load i64* @TraversalType, align 8
  switch i64 %49, label %57 [
    i64 0, label %50
    i64 1, label %53
  ]

; <label>:50                                      ; preds = %48
  %51 = load %struct.ray** %ray, align 8
  %52 = call i64 @Intersect(%struct.ray* %51, %struct.irecord* %hitrecord)
  store i64 %52, i64* %hit, align 8
  br label %57

; <label>:53                                      ; preds = %48
  %54 = load %struct.ray** %ray, align 8
  %55 = load i64* %1, align 8
  %56 = call i64 @TraverseHierarchyUniform(%struct.ray* %54, %struct.irecord* %hitrecord, i64 %55)
  store i64 %56, i64* %hit, align 8
  br label %57

; <label>:57                                      ; preds = %53, %50, %48
  %58 = load i64* %hit, align 8
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %154

; <label>:60                                      ; preds = %57
  %61 = getelementptr inbounds %struct.irecord* %hitrecord, i32 0, i32 1
  %62 = load %struct.element** %61, align 8
  %63 = getelementptr inbounds %struct.element* %62, i32 0, i32 2
  %64 = load %struct.object** %63, align 8
  store %struct.object* %64, %struct.object** %po, align 8
  %65 = load %struct.ray** %ray, align 8
  %66 = getelementptr inbounds %struct.ray* %65, i32 0, i32 3
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 0
  %68 = load double* %67, align 8
  %69 = load %struct.ray** %ray, align 8
  %70 = getelementptr inbounds %struct.ray* %69, i32 0, i32 4
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 0
  %72 = load double* %71, align 8
  %73 = getelementptr inbounds %struct.irecord* %hitrecord, i32 0, i32 0
  %74 = load double* %73, align 8
  %75 = fmul double %72, %74
  %76 = fadd double %68, %75
  %77 = getelementptr inbounds [3 x double]* %Ipoint, i32 0, i64 0
  store double %76, double* %77, align 8
  %78 = load %struct.ray** %ray, align 8
  %79 = getelementptr inbounds %struct.ray* %78, i32 0, i32 3
  %80 = getelementptr inbounds [3 x double]* %79, i32 0, i64 1
  %81 = load double* %80, align 8
  %82 = load %struct.ray** %ray, align 8
  %83 = getelementptr inbounds %struct.ray* %82, i32 0, i32 4
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 1
  %85 = load double* %84, align 8
  %86 = getelementptr inbounds %struct.irecord* %hitrecord, i32 0, i32 0
  %87 = load double* %86, align 8
  %88 = fmul double %85, %87
  %89 = fadd double %81, %88
  %90 = getelementptr inbounds [3 x double]* %Ipoint, i32 0, i64 1
  store double %89, double* %90, align 8
  %91 = load %struct.ray** %ray, align 8
  %92 = getelementptr inbounds %struct.ray* %91, i32 0, i32 3
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 2
  %94 = load double* %93, align 8
  %95 = load %struct.ray** %ray, align 8
  %96 = getelementptr inbounds %struct.ray* %95, i32 0, i32 4
  %97 = getelementptr inbounds [3 x double]* %96, i32 0, i64 2
  %98 = load double* %97, align 8
  %99 = getelementptr inbounds %struct.irecord* %hitrecord, i32 0, i32 0
  %100 = load double* %99, align 8
  %101 = fmul double %98, %100
  %102 = fadd double %94, %101
  %103 = getelementptr inbounds [3 x double]* %Ipoint, i32 0, i64 2
  store double %102, double* %103, align 8
  %104 = load %struct.object** %po, align 8
  %105 = getelementptr inbounds %struct.object* %104, i32 0, i32 5
  %106 = load %struct.pprocs** %105, align 8
  %107 = getelementptr inbounds %struct.pprocs* %106, i32 0, i32 7
  %108 = load void (...)** %107, align 8
  %109 = getelementptr inbounds [3 x double]* %Ipoint, i32 0, i32 0
  %110 = getelementptr inbounds [3 x double]* %N, i32 0, i32 0
  %111 = bitcast void (...)* %108 to void (%struct.irecord*, double*, double*, ...)*
  call void (%struct.irecord*, double*, double*, ...) %111(%struct.irecord* %hitrecord, double* %109, double* %110)
  %112 = load %struct.ray** %ray, align 8
  %113 = getelementptr inbounds %struct.ray* %112, i32 0, i32 4
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 0
  %115 = load double* %114, align 8
  %116 = getelementptr inbounds [3 x double]* %N, i32 0, i64 0
  %117 = load double* %116, align 8
  %118 = fmul double %115, %117
  %119 = load %struct.ray** %ray, align 8
  %120 = getelementptr inbounds %struct.ray* %119, i32 0, i32 4
  %121 = getelementptr inbounds [3 x double]* %120, i32 0, i64 1
  %122 = load double* %121, align 8
  %123 = getelementptr inbounds [3 x double]* %N, i32 0, i64 1
  %124 = load double* %123, align 8
  %125 = fmul double %122, %124
  %126 = fadd double %118, %125
  %127 = load %struct.ray** %ray, align 8
  %128 = getelementptr inbounds %struct.ray* %127, i32 0, i32 4
  %129 = getelementptr inbounds [3 x double]* %128, i32 0, i64 2
  %130 = load double* %129, align 8
  %131 = getelementptr inbounds [3 x double]* %N, i32 0, i64 2
  %132 = load double* %131, align 8
  %133 = fmul double %130, %132
  %134 = fadd double %126, %133
  %135 = fcmp ogt double %134, 0.000000e+00
  br i1 %135, label %136, label %149

; <label>:136                                     ; preds = %60
  %137 = getelementptr inbounds [3 x double]* %N, i32 0, i64 0
  %138 = load double* %137, align 8
  %139 = fsub double -0.000000e+00, %138
  %140 = getelementptr inbounds [3 x double]* %N, i32 0, i64 0
  store double %139, double* %140, align 8
  %141 = getelementptr inbounds [3 x double]* %N, i32 0, i64 1
  %142 = load double* %141, align 8
  %143 = fsub double -0.000000e+00, %142
  %144 = getelementptr inbounds [3 x double]* %N, i32 0, i64 1
  store double %143, double* %144, align 8
  %145 = getelementptr inbounds [3 x double]* %N, i32 0, i64 2
  %146 = load double* %145, align 8
  %147 = fsub double -0.000000e+00, %146
  %148 = getelementptr inbounds [3 x double]* %N, i32 0, i64 2
  store double %147, double* %148, align 8
  br label %149

; <label>:149                                     ; preds = %136, %60
  %150 = getelementptr inbounds [3 x double]* %Ipoint, i32 0, i32 0
  %151 = getelementptr inbounds [3 x double]* %N, i32 0, i32 0
  %152 = load %struct.ray** %ray, align 8
  %153 = load i64* %1, align 8
  call void @Shade(double* %150, double* %151, %struct.ray* %152, %struct.irecord* %hitrecord, i64 %153)
  br label %192

; <label>:154                                     ; preds = %57
  %155 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 0), align 8
  %156 = getelementptr inbounds [3 x double]* %c, i32 0, i64 0
  store double %155, double* %156, align 8
  %157 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 1), align 8
  %158 = getelementptr inbounds [3 x double]* %c, i32 0, i64 1
  store double %157, double* %158, align 8
  %159 = load double* getelementptr inbounds (%struct.view* @View, i32 0, i32 5, i64 2), align 8
  %160 = getelementptr inbounds [3 x double]* %c, i32 0, i64 2
  store double %159, double* %160, align 8
  %161 = load %struct.ray** %ray, align 8
  %162 = getelementptr inbounds %struct.ray* %161, i32 0, i32 6
  %163 = load float* %162, align 4
  %164 = fpext float %163 to double
  %165 = getelementptr inbounds [3 x double]* %c, i32 0, i64 0
  %166 = load double* %165, align 8
  %167 = fmul double %164, %166
  %168 = getelementptr inbounds [3 x double]* %c, i32 0, i64 0
  store double %167, double* %168, align 8
  %169 = load %struct.ray** %ray, align 8
  %170 = getelementptr inbounds %struct.ray* %169, i32 0, i32 6
  %171 = load float* %170, align 4
  %172 = fpext float %171 to double
  %173 = getelementptr inbounds [3 x double]* %c, i32 0, i64 1
  %174 = load double* %173, align 8
  %175 = fmul double %172, %174
  %176 = getelementptr inbounds [3 x double]* %c, i32 0, i64 1
  store double %175, double* %176, align 8
  %177 = load %struct.ray** %ray, align 8
  %178 = getelementptr inbounds %struct.ray* %177, i32 0, i32 6
  %179 = load float* %178, align 4
  %180 = fpext float %179 to double
  %181 = getelementptr inbounds [3 x double]* %c, i32 0, i64 2
  %182 = load double* %181, align 8
  %183 = fmul double %180, %182
  %184 = getelementptr inbounds [3 x double]* %c, i32 0, i64 2
  store double %183, double* %184, align 8
  %185 = getelementptr inbounds [3 x double]* %c, i32 0, i32 0
  %186 = load %struct.ray** %ray, align 8
  %187 = getelementptr inbounds %struct.ray* %186, i32 0, i32 1
  %188 = load i64* %187, align 8
  %189 = load %struct.ray** %ray, align 8
  %190 = getelementptr inbounds %struct.ray* %189, i32 0, i32 2
  %191 = load i64* %190, align 8
  call void @AddPixelColor(double* %185, i64 %188, i64 %191)
  br label %192

; <label>:192                                     ; preds = %154, %149
  br label %43

; <label>:193                                     ; preds = %43
  br label %7

; <label>:194                                     ; preds = %7
  br label %2

; <label>:195                                     ; preds = %2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @TriName() {
  ret i8* getelementptr inbounds ([5 x i8]* @.str.429, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define internal void @TriPrint(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %pt = alloca %struct.tri*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct._IO_FILE** @stderr, align 8
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 4
  %8 = load i64* %7, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([27 x i8]* @.str.1.430, i32 0, i32 0), i64 %8)
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %71, %0
  %11 = load i64* %i, align 8
  %12 = load %struct.object** %1, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 4
  %14 = load i64* %13, align 8
  %15 = icmp slt i64 %11, %14
  br i1 %15, label %16, label %74

; <label>:16                                      ; preds = %10
  %17 = load %struct.element** %pe, align 8
  %18 = getelementptr inbounds %struct.element* %17, i32 0, i32 3
  %19 = load i8** %18, align 8
  %20 = bitcast i8* %19 to %struct.tri*
  store %struct.tri* %20, %struct.tri** %pt, align 8
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = load %struct.tri** %pt, align 8
  %23 = getelementptr inbounds %struct.tri* %22, i32 0, i32 0
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = load %struct.tri** %pt, align 8
  %27 = getelementptr inbounds %struct.tri* %26, i32 0, i32 0
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 1
  %29 = load double* %28, align 8
  %30 = load %struct.tri** %pt, align 8
  %31 = getelementptr inbounds %struct.tri* %30, i32 0, i32 0
  %32 = getelementptr inbounds [3 x double]* %31, i32 0, i64 2
  %33 = load double* %32, align 8
  %34 = load %struct.tri** %pt, align 8
  %35 = getelementptr inbounds %struct.tri* %34, i32 0, i32 1
  %36 = load double* %35, align 8
  %37 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([39 x i8]* @.str.2.431, i32 0, i32 0), double %25, double %29, double %33, double %36)
  %38 = load %struct.tri** %pt, align 8
  %39 = getelementptr inbounds %struct.tri* %38, i32 0, i32 2
  %40 = load [3 x double]** %39, align 8
  store [3 x double]* %40, [3 x double]** %vlist, align 8
  %41 = load %struct.tri** %pt, align 8
  %42 = getelementptr inbounds %struct.tri* %41, i32 0, i32 4
  %43 = getelementptr inbounds [3 x i64]* %42, i32 0, i32 0
  store i64* %43, i64** %vindex, align 8
  store i64 0, i64* %j, align 8
  br label %44

; <label>:44                                      ; preds = %65, %16
  %45 = load i64* %j, align 8
  %46 = icmp slt i64 %45, 3
  br i1 %46, label %47, label %68

; <label>:47                                      ; preds = %44
  %48 = load [3 x double]** %vlist, align 8
  %49 = load i64** %vindex, align 8
  %50 = load i64* %49, align 8
  %51 = getelementptr inbounds [3 x double]* %48, i64 %50
  store [3 x double]* %51, [3 x double]** %vptr, align 8
  %52 = load %struct._IO_FILE** @stderr, align 8
  %53 = load [3 x double]** %vptr, align 8
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 0
  %55 = load double* %54, align 8
  %56 = load [3 x double]** %vptr, align 8
  %57 = getelementptr inbounds [3 x double]* %56, i32 0, i64 1
  %58 = load double* %57, align 8
  %59 = load [3 x double]** %vptr, align 8
  %60 = getelementptr inbounds [3 x double]* %59, i32 0, i64 2
  %61 = load double* %60, align 8
  %62 = call i32 (%struct._IO_FILE*, i8*, ...) *@fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([13 x i8]* @.str.3.432, i32 0, i32 0), double %55, double %58, double %61)
  %63 = load i64** %vindex, align 8
  %64 = getelementptr inbounds i64* %63, i32 1
  store i64* %64, i64** %vindex, align 8
  br label %65

; <label>:65                                      ; preds = %47
  %66 = load i64* %j, align 8
  %67 = add nsw i64 %66, 1
  store i64 %67, i64* %j, align 8
  br label %44

; <label>:68                                      ; preds = %44
  %69 = load %struct.element** %pe, align 8
  %70 = getelementptr inbounds %struct.element* %69, i32 1
  store %struct.element* %70, %struct.element** %pe, align 8
  br label %71

; <label>:71                                      ; preds = %68
  %72 = load i64* %i, align 8
  %73 = add nsw i64 %72, 1
  store i64 %73, i64* %i, align 8
  br label %10

; <label>:74                                      ; preds = %10
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TriElementBoundBox(%struct.element* %pe, %struct.tri* %pt) {
  %1 = alloca %struct.element*, align 8
  %2 = alloca %struct.tri*, align 8
  %i = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %pbb = alloca %struct.bbox*, align 8
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %minx = alloca double, align 8
  %maxx = alloca double, align 8
  %miny = alloca double, align 8
  %maxy = alloca double, align 8
  %minz = alloca double, align 8
  %maxz = alloca double, align 8
  store %struct.element* %pe, %struct.element** %1, align 8
  store %struct.tri* %pt, %struct.tri** %2, align 8
  %3 = load %struct.element** %1, align 8
  %4 = getelementptr inbounds %struct.element* %3, i32 0, i32 1
  store %struct.bbox* %4, %struct.bbox** %pbb, align 8
  store double 1.000000e+32, double* %minz, align 8
  store double 1.000000e+32, double* %miny, align 8
  store double 1.000000e+32, double* %minx, align 8
  store double -1.000000e+32, double* %maxz, align 8
  store double -1.000000e+32, double* %maxy, align 8
  store double -1.000000e+32, double* %maxx, align 8
  %5 = load %struct.tri** %2, align 8
  %6 = getelementptr inbounds %struct.tri* %5, i32 0, i32 2
  %7 = load [3 x double]** %6, align 8
  store [3 x double]* %7, [3 x double]** %vlist, align 8
  %8 = load %struct.tri** %2, align 8
  %9 = getelementptr inbounds %struct.tri* %8, i32 0, i32 4
  %10 = getelementptr inbounds [3 x i64]* %9, i32 0, i32 0
  store i64* %10, i64** %vindex, align 8
  store i64 0, i64* %i, align 8
  br label %11

; <label>:11                                      ; preds = %99, %0
  %12 = load i64* %i, align 8
  %13 = icmp slt i64 %12, 3
  br i1 %13, label %14, label %102

; <label>:14                                      ; preds = %11
  %15 = load [3 x double]** %vlist, align 8
  %16 = load i64** %vindex, align 8
  %17 = load i64* %16, align 8
  %18 = getelementptr inbounds [3 x double]* %15, i64 %17
  store [3 x double]* %18, [3 x double]** %vptr, align 8
  %19 = load double* %minx, align 8
  %20 = load [3 x double]** %vptr, align 8
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 0
  %22 = load double* %21, align 8
  %23 = fcmp olt double %19, %22
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %14
  %25 = load double* %minx, align 8
  br label %30

; <label>:26                                      ; preds = %14
  %27 = load [3 x double]** %vptr, align 8
  %28 = getelementptr inbounds [3 x double]* %27, i32 0, i64 0
  %29 = load double* %28, align 8
  br label %30

; <label>:30                                      ; preds = %26, %24
  %31 = phi double [ %25, %24 ], [ %29, %26 ]
  store double %31, double* %minx, align 8
  %32 = load double* %miny, align 8
  %33 = load [3 x double]** %vptr, align 8
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 1
  %35 = load double* %34, align 8
  %36 = fcmp olt double %32, %35
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %30
  %38 = load double* %miny, align 8
  br label %43

; <label>:39                                      ; preds = %30
  %40 = load [3 x double]** %vptr, align 8
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 1
  %42 = load double* %41, align 8
  br label %43

; <label>:43                                      ; preds = %39, %37
  %44 = phi double [ %38, %37 ], [ %42, %39 ]
  store double %44, double* %miny, align 8
  %45 = load double* %minz, align 8
  %46 = load [3 x double]** %vptr, align 8
  %47 = getelementptr inbounds [3 x double]* %46, i32 0, i64 2
  %48 = load double* %47, align 8
  %49 = fcmp olt double %45, %48
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %43
  %51 = load double* %minz, align 8
  br label %56

; <label>:52                                      ; preds = %43
  %53 = load [3 x double]** %vptr, align 8
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 2
  %55 = load double* %54, align 8
  br label %56

; <label>:56                                      ; preds = %52, %50
  %57 = phi double [ %51, %50 ], [ %55, %52 ]
  store double %57, double* %minz, align 8
  %58 = load double* %maxx, align 8
  %59 = load [3 x double]** %vptr, align 8
  %60 = getelementptr inbounds [3 x double]* %59, i32 0, i64 0
  %61 = load double* %60, align 8
  %62 = fcmp ogt double %58, %61
  br i1 %62, label %63, label %65

; <label>:63                                      ; preds = %56
  %64 = load double* %maxx, align 8
  br label %69

; <label>:65                                      ; preds = %56
  %66 = load [3 x double]** %vptr, align 8
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 0
  %68 = load double* %67, align 8
  br label %69

; <label>:69                                      ; preds = %65, %63
  %70 = phi double [ %64, %63 ], [ %68, %65 ]
  store double %70, double* %maxx, align 8
  %71 = load double* %maxy, align 8
  %72 = load [3 x double]** %vptr, align 8
  %73 = getelementptr inbounds [3 x double]* %72, i32 0, i64 1
  %74 = load double* %73, align 8
  %75 = fcmp ogt double %71, %74
  br i1 %75, label %76, label %78

; <label>:76                                      ; preds = %69
  %77 = load double* %maxy, align 8
  br label %82

; <label>:78                                      ; preds = %69
  %79 = load [3 x double]** %vptr, align 8
  %80 = getelementptr inbounds [3 x double]* %79, i32 0, i64 1
  %81 = load double* %80, align 8
  br label %82

; <label>:82                                      ; preds = %78, %76
  %83 = phi double [ %77, %76 ], [ %81, %78 ]
  store double %83, double* %maxy, align 8
  %84 = load double* %maxz, align 8
  %85 = load [3 x double]** %vptr, align 8
  %86 = getelementptr inbounds [3 x double]* %85, i32 0, i64 2
  %87 = load double* %86, align 8
  %88 = fcmp ogt double %84, %87
  br i1 %88, label %89, label %91

; <label>:89                                      ; preds = %82
  %90 = load double* %maxz, align 8
  br label %95

; <label>:91                                      ; preds = %82
  %92 = load [3 x double]** %vptr, align 8
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 2
  %94 = load double* %93, align 8
  br label %95

; <label>:95                                      ; preds = %91, %89
  %96 = phi double [ %90, %89 ], [ %94, %91 ]
  store double %96, double* %maxz, align 8
  %97 = load i64** %vindex, align 8
  %98 = getelementptr inbounds i64* %97, i32 1
  store i64* %98, i64** %vindex, align 8
  br label %99

; <label>:99                                      ; preds = %95
  %100 = load i64* %i, align 8
  %101 = add nsw i64 %100, 1
  store i64 %101, i64* %i, align 8
  br label %11

; <label>:102                                     ; preds = %11
  %103 = load double* %minx, align 8
  %104 = load %struct.bbox** %pbb, align 8
  %105 = getelementptr inbounds %struct.bbox* %104, i32 0, i32 0
  %106 = getelementptr inbounds [3 x double]* %105, i32 0, i64 0
  store double %103, double* %106, align 8
  %107 = load double* %miny, align 8
  %108 = load %struct.bbox** %pbb, align 8
  %109 = getelementptr inbounds %struct.bbox* %108, i32 0, i32 0
  %110 = getelementptr inbounds [3 x double]* %109, i32 0, i64 1
  store double %107, double* %110, align 8
  %111 = load double* %minz, align 8
  %112 = load %struct.bbox** %pbb, align 8
  %113 = getelementptr inbounds %struct.bbox* %112, i32 0, i32 0
  %114 = getelementptr inbounds [3 x double]* %113, i32 0, i64 2
  store double %111, double* %114, align 8
  %115 = load double* %maxx, align 8
  %116 = load %struct.bbox** %pbb, align 8
  %117 = getelementptr inbounds %struct.bbox* %116, i32 0, i32 1
  %118 = getelementptr inbounds [3 x double]* %117, i32 0, i64 0
  store double %115, double* %118, align 8
  %119 = load double* %maxy, align 8
  %120 = load %struct.bbox** %pbb, align 8
  %121 = getelementptr inbounds %struct.bbox* %120, i32 0, i32 1
  %122 = getelementptr inbounds [3 x double]* %121, i32 0, i64 1
  store double %119, double* %122, align 8
  %123 = load double* %maxz, align 8
  %124 = load %struct.bbox** %pbb, align 8
  %125 = getelementptr inbounds %struct.bbox* %124, i32 0, i32 1
  %126 = getelementptr inbounds [3 x double]* %125, i32 0, i64 2
  store double %123, double* %126, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TriBoundBox(%struct.object* %po) {
  %1 = alloca %struct.object*, align 8
  %i = alloca i64, align 8
  %pt = alloca %struct.tri*, align 8
  %pe = alloca %struct.element*, align 8
  %pbb = alloca %struct.bbox*, align 8
  %minx = alloca double, align 8
  %maxx = alloca double, align 8
  %miny = alloca double, align 8
  %maxy = alloca double, align 8
  %minz = alloca double, align 8
  %maxz = alloca double, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  %2 = load %struct.object** %1, align 8
  %3 = getelementptr inbounds %struct.object* %2, i32 0, i32 3
  %4 = load %struct.element** %3, align 8
  store %struct.element* %4, %struct.element** %pe, align 8
  %5 = load %struct.object** %1, align 8
  %6 = getelementptr inbounds %struct.object* %5, i32 0, i32 2
  store %struct.bbox* %6, %struct.bbox** %pbb, align 8
  store double 1.000000e+32, double* %minz, align 8
  store double 1.000000e+32, double* %miny, align 8
  store double 1.000000e+32, double* %minx, align 8
  store double -1.000000e+32, double* %maxz, align 8
  store double -1.000000e+32, double* %maxy, align 8
  store double -1.000000e+32, double* %maxx, align 8
  store i64 0, i64* %i, align 8
  br label %7

; <label>:7                                       ; preds = %124, %0
  %8 = load i64* %i, align 8
  %9 = load %struct.object** %1, align 8
  %10 = getelementptr inbounds %struct.object* %9, i32 0, i32 4
  %11 = load i64* %10, align 8
  %12 = icmp slt i64 %8, %11
  br i1 %12, label %13, label %127

; <label>:13                                      ; preds = %7
  %14 = load %struct.element** %pe, align 8
  %15 = getelementptr inbounds %struct.element* %14, i32 0, i32 3
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.tri*
  store %struct.tri* %17, %struct.tri** %pt, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = load %struct.tri** %pt, align 8
  call void @TriElementBoundBox(%struct.element* %18, %struct.tri* %19)
  %20 = load double* %minx, align 8
  %21 = load %struct.element** %pe, align 8
  %22 = getelementptr inbounds %struct.element* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.bbox* %22, i32 0, i32 0
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 0
  %25 = load double* %24, align 8
  %26 = fcmp olt double %20, %25
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %13
  %28 = load double* %minx, align 8
  br label %35

; <label>:29                                      ; preds = %13
  %30 = load %struct.element** %pe, align 8
  %31 = getelementptr inbounds %struct.element* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.bbox* %31, i32 0, i32 0
  %33 = getelementptr inbounds [3 x double]* %32, i32 0, i64 0
  %34 = load double* %33, align 8
  br label %35

; <label>:35                                      ; preds = %29, %27
  %36 = phi double [ %28, %27 ], [ %34, %29 ]
  store double %36, double* %minx, align 8
  %37 = load double* %miny, align 8
  %38 = load %struct.element** %pe, align 8
  %39 = getelementptr inbounds %struct.element* %38, i32 0, i32 1
  %40 = getelementptr inbounds %struct.bbox* %39, i32 0, i32 0
  %41 = getelementptr inbounds [3 x double]* %40, i32 0, i64 1
  %42 = load double* %41, align 8
  %43 = fcmp olt double %37, %42
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %35
  %45 = load double* %miny, align 8
  br label %52

; <label>:46                                      ; preds = %35
  %47 = load %struct.element** %pe, align 8
  %48 = getelementptr inbounds %struct.element* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.bbox* %48, i32 0, i32 0
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 1
  %51 = load double* %50, align 8
  br label %52

; <label>:52                                      ; preds = %46, %44
  %53 = phi double [ %45, %44 ], [ %51, %46 ]
  store double %53, double* %miny, align 8
  %54 = load double* %minz, align 8
  %55 = load %struct.element** %pe, align 8
  %56 = getelementptr inbounds %struct.element* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.bbox* %56, i32 0, i32 0
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  %59 = load double* %58, align 8
  %60 = fcmp olt double %54, %59
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %52
  %62 = load double* %minz, align 8
  br label %69

; <label>:63                                      ; preds = %52
  %64 = load %struct.element** %pe, align 8
  %65 = getelementptr inbounds %struct.element* %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.bbox* %65, i32 0, i32 0
  %67 = getelementptr inbounds [3 x double]* %66, i32 0, i64 2
  %68 = load double* %67, align 8
  br label %69

; <label>:69                                      ; preds = %63, %61
  %70 = phi double [ %62, %61 ], [ %68, %63 ]
  store double %70, double* %minz, align 8
  %71 = load double* %maxx, align 8
  %72 = load %struct.element** %pe, align 8
  %73 = getelementptr inbounds %struct.element* %72, i32 0, i32 1
  %74 = getelementptr inbounds %struct.bbox* %73, i32 0, i32 1
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 0
  %76 = load double* %75, align 8
  %77 = fcmp ogt double %71, %76
  br i1 %77, label %78, label %80

; <label>:78                                      ; preds = %69
  %79 = load double* %maxx, align 8
  br label %86

; <label>:80                                      ; preds = %69
  %81 = load %struct.element** %pe, align 8
  %82 = getelementptr inbounds %struct.element* %81, i32 0, i32 1
  %83 = getelementptr inbounds %struct.bbox* %82, i32 0, i32 1
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 0
  %85 = load double* %84, align 8
  br label %86

; <label>:86                                      ; preds = %80, %78
  %87 = phi double [ %79, %78 ], [ %85, %80 ]
  store double %87, double* %maxx, align 8
  %88 = load double* %maxy, align 8
  %89 = load %struct.element** %pe, align 8
  %90 = getelementptr inbounds %struct.element* %89, i32 0, i32 1
  %91 = getelementptr inbounds %struct.bbox* %90, i32 0, i32 1
  %92 = getelementptr inbounds [3 x double]* %91, i32 0, i64 1
  %93 = load double* %92, align 8
  %94 = fcmp ogt double %88, %93
  br i1 %94, label %95, label %97

; <label>:95                                      ; preds = %86
  %96 = load double* %maxy, align 8
  br label %103

; <label>:97                                      ; preds = %86
  %98 = load %struct.element** %pe, align 8
  %99 = getelementptr inbounds %struct.element* %98, i32 0, i32 1
  %100 = getelementptr inbounds %struct.bbox* %99, i32 0, i32 1
  %101 = getelementptr inbounds [3 x double]* %100, i32 0, i64 1
  %102 = load double* %101, align 8
  br label %103

; <label>:103                                     ; preds = %97, %95
  %104 = phi double [ %96, %95 ], [ %102, %97 ]
  store double %104, double* %maxy, align 8
  %105 = load double* %maxz, align 8
  %106 = load %struct.element** %pe, align 8
  %107 = getelementptr inbounds %struct.element* %106, i32 0, i32 1
  %108 = getelementptr inbounds %struct.bbox* %107, i32 0, i32 1
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 2
  %110 = load double* %109, align 8
  %111 = fcmp ogt double %105, %110
  br i1 %111, label %112, label %114

; <label>:112                                     ; preds = %103
  %113 = load double* %maxz, align 8
  br label %120

; <label>:114                                     ; preds = %103
  %115 = load %struct.element** %pe, align 8
  %116 = getelementptr inbounds %struct.element* %115, i32 0, i32 1
  %117 = getelementptr inbounds %struct.bbox* %116, i32 0, i32 1
  %118 = getelementptr inbounds [3 x double]* %117, i32 0, i64 2
  %119 = load double* %118, align 8
  br label %120

; <label>:120                                     ; preds = %114, %112
  %121 = phi double [ %113, %112 ], [ %119, %114 ]
  store double %121, double* %maxz, align 8
  %122 = load %struct.element** %pe, align 8
  %123 = getelementptr inbounds %struct.element* %122, i32 1
  store %struct.element* %123, %struct.element** %pe, align 8
  br label %124

; <label>:124                                     ; preds = %120
  %125 = load i64* %i, align 8
  %126 = add nsw i64 %125, 1
  store i64 %126, i64* %i, align 8
  br label %7

; <label>:127                                     ; preds = %7
  %128 = load double* %minx, align 8
  %129 = load %struct.bbox** %pbb, align 8
  %130 = getelementptr inbounds %struct.bbox* %129, i32 0, i32 0
  %131 = getelementptr inbounds [3 x double]* %130, i32 0, i64 0
  store double %128, double* %131, align 8
  %132 = load double* %miny, align 8
  %133 = load %struct.bbox** %pbb, align 8
  %134 = getelementptr inbounds %struct.bbox* %133, i32 0, i32 0
  %135 = getelementptr inbounds [3 x double]* %134, i32 0, i64 1
  store double %132, double* %135, align 8
  %136 = load double* %minz, align 8
  %137 = load %struct.bbox** %pbb, align 8
  %138 = getelementptr inbounds %struct.bbox* %137, i32 0, i32 0
  %139 = getelementptr inbounds [3 x double]* %138, i32 0, i64 2
  store double %136, double* %139, align 8
  %140 = load double* %maxx, align 8
  %141 = load %struct.bbox** %pbb, align 8
  %142 = getelementptr inbounds %struct.bbox* %141, i32 0, i32 1
  %143 = getelementptr inbounds [3 x double]* %142, i32 0, i64 0
  store double %140, double* %143, align 8
  %144 = load double* %maxy, align 8
  %145 = load %struct.bbox** %pbb, align 8
  %146 = getelementptr inbounds %struct.bbox* %145, i32 0, i32 1
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 1
  store double %144, double* %147, align 8
  %148 = load double* %maxz, align 8
  %149 = load %struct.bbox** %pbb, align 8
  %150 = getelementptr inbounds %struct.bbox* %149, i32 0, i32 1
  %151 = getelementptr inbounds [3 x double]* %150, i32 0, i64 2
  store double %148, double* %151, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TriNormal(%struct.irecord* %hit, double* %Pi, double* %Ni) {
  %1 = alloca %struct.irecord*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %pe = alloca %struct.element*, align 8
  %pt = alloca %struct.tri*, align 8
  %pn = alloca [3 x double]*, align 8
  %n0 = alloca [3 x double]*, align 8
  %n1 = alloca [3 x double]*, align 8
  %n2 = alloca [3 x double]*, align 8
  store %struct.irecord* %hit, %struct.irecord** %1, align 8
  store double* %Pi, double** %2, align 8
  store double* %Ni, double** %3, align 8
  %4 = load %struct.irecord** %1, align 8
  %5 = getelementptr inbounds %struct.irecord* %4, i32 0, i32 1
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.element** %pe, align 8
  %8 = getelementptr inbounds %struct.element* %7, i32 0, i32 3
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.tri*
  store %struct.tri* %10, %struct.tri** %pt, align 8
  %11 = load %struct.tri** %pt, align 8
  %12 = getelementptr inbounds %struct.tri* %11, i32 0, i32 3
  %13 = load [3 x double]** %12, align 8
  store [3 x double]* %13, [3 x double]** %pn, align 8
  %14 = load %struct.tri** %pt, align 8
  %15 = getelementptr inbounds %struct.tri* %14, i32 0, i32 6
  %16 = load i64* %15, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %217

; <label>:18                                      ; preds = %0
  %19 = load %struct.tri** %pt, align 8
  %20 = getelementptr inbounds %struct.tri* %19, i32 0, i32 7
  %21 = load i64* %20, align 8
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %23, label %42

; <label>:23                                      ; preds = %18
  %24 = load [3 x double]** %pn, align 8
  %25 = load %struct.tri** %pt, align 8
  %26 = getelementptr inbounds %struct.tri* %25, i32 0, i32 4
  %27 = getelementptr inbounds [3 x i64]* %26, i32 0, i64 0
  %28 = load i64* %27, align 8
  %29 = getelementptr inbounds [3 x double]* %24, i64 %28
  store [3 x double]* %29, [3 x double]** %n0, align 8
  %30 = load [3 x double]** %pn, align 8
  %31 = load %struct.tri** %pt, align 8
  %32 = getelementptr inbounds %struct.tri* %31, i32 0, i32 4
  %33 = getelementptr inbounds [3 x i64]* %32, i32 0, i64 1
  %34 = load i64* %33, align 8
  %35 = getelementptr inbounds [3 x double]* %30, i64 %34
  store [3 x double]* %35, [3 x double]** %n1, align 8
  %36 = load [3 x double]** %pn, align 8
  %37 = load %struct.tri** %pt, align 8
  %38 = getelementptr inbounds %struct.tri* %37, i32 0, i32 4
  %39 = getelementptr inbounds [3 x i64]* %38, i32 0, i64 2
  %40 = load i64* %39, align 8
  %41 = getelementptr inbounds [3 x double]* %36, i64 %40
  store [3 x double]* %41, [3 x double]** %n2, align 8
  br label %61

; <label>:42                                      ; preds = %18
  %43 = load [3 x double]** %pn, align 8
  %44 = load %struct.tri** %pt, align 8
  %45 = getelementptr inbounds %struct.tri* %44, i32 0, i32 4
  %46 = getelementptr inbounds [3 x i64]* %45, i32 0, i64 0
  %47 = load i64* %46, align 8
  %48 = getelementptr inbounds [3 x double]* %43, i64 %47
  store [3 x double]* %48, [3 x double]** %n0, align 8
  %49 = load [3 x double]** %pn, align 8
  %50 = load %struct.tri** %pt, align 8
  %51 = getelementptr inbounds %struct.tri* %50, i32 0, i32 4
  %52 = getelementptr inbounds [3 x i64]* %51, i32 0, i64 2
  %53 = load i64* %52, align 8
  %54 = getelementptr inbounds [3 x double]* %49, i64 %53
  store [3 x double]* %54, [3 x double]** %n1, align 8
  %55 = load [3 x double]** %pn, align 8
  %56 = load %struct.tri** %pt, align 8
  %57 = getelementptr inbounds %struct.tri* %56, i32 0, i32 4
  %58 = getelementptr inbounds [3 x i64]* %57, i32 0, i64 1
  %59 = load i64* %58, align 8
  %60 = getelementptr inbounds [3 x double]* %55, i64 %59
  store [3 x double]* %60, [3 x double]** %n2, align 8
  br label %61

; <label>:61                                      ; preds = %42, %23
  %62 = load %struct.tri** %pt, align 8
  %63 = getelementptr inbounds %struct.tri* %62, i32 0, i32 5
  %64 = load i64* %63, align 8
  switch i64 %64, label %140 [
    i64 1, label %65
    i64 2, label %90
    i64 3, label %115
  ]

; <label>:65                                      ; preds = %61
  %66 = load %struct.tri** %pt, align 8
  %67 = getelementptr inbounds %struct.tri* %66, i32 0, i32 0
  %68 = getelementptr inbounds [3 x double]* %67, i32 0, i64 0
  %69 = load double* %68, align 8
  %70 = load %struct.irecord** %1, align 8
  %71 = getelementptr inbounds %struct.irecord* %70, i32 0, i32 2
  %72 = load double* %71, align 8
  %73 = fdiv double %72, %69
  store double %73, double* %71, align 8
  %74 = load %struct.tri** %pt, align 8
  %75 = getelementptr inbounds %struct.tri* %74, i32 0, i32 0
  %76 = getelementptr inbounds [3 x double]* %75, i32 0, i64 0
  %77 = load double* %76, align 8
  %78 = load %struct.irecord** %1, align 8
  %79 = getelementptr inbounds %struct.irecord* %78, i32 0, i32 3
  %80 = load double* %79, align 8
  %81 = fdiv double %80, %77
  store double %81, double* %79, align 8
  %82 = load %struct.tri** %pt, align 8
  %83 = getelementptr inbounds %struct.tri* %82, i32 0, i32 0
  %84 = getelementptr inbounds [3 x double]* %83, i32 0, i64 0
  %85 = load double* %84, align 8
  %86 = load %struct.irecord** %1, align 8
  %87 = getelementptr inbounds %struct.irecord* %86, i32 0, i32 4
  %88 = load double* %87, align 8
  %89 = fdiv double %88, %85
  store double %89, double* %87, align 8
  br label %140

; <label>:90                                      ; preds = %61
  %91 = load %struct.tri** %pt, align 8
  %92 = getelementptr inbounds %struct.tri* %91, i32 0, i32 0
  %93 = getelementptr inbounds [3 x double]* %92, i32 0, i64 1
  %94 = load double* %93, align 8
  %95 = load %struct.irecord** %1, align 8
  %96 = getelementptr inbounds %struct.irecord* %95, i32 0, i32 2
  %97 = load double* %96, align 8
  %98 = fdiv double %97, %94
  store double %98, double* %96, align 8
  %99 = load %struct.tri** %pt, align 8
  %100 = getelementptr inbounds %struct.tri* %99, i32 0, i32 0
  %101 = getelementptr inbounds [3 x double]* %100, i32 0, i64 1
  %102 = load double* %101, align 8
  %103 = load %struct.irecord** %1, align 8
  %104 = getelementptr inbounds %struct.irecord* %103, i32 0, i32 3
  %105 = load double* %104, align 8
  %106 = fdiv double %105, %102
  store double %106, double* %104, align 8
  %107 = load %struct.tri** %pt, align 8
  %108 = getelementptr inbounds %struct.tri* %107, i32 0, i32 0
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 1
  %110 = load double* %109, align 8
  %111 = load %struct.irecord** %1, align 8
  %112 = getelementptr inbounds %struct.irecord* %111, i32 0, i32 4
  %113 = load double* %112, align 8
  %114 = fdiv double %113, %110
  store double %114, double* %112, align 8
  br label %140

; <label>:115                                     ; preds = %61
  %116 = load %struct.tri** %pt, align 8
  %117 = getelementptr inbounds %struct.tri* %116, i32 0, i32 0
  %118 = getelementptr inbounds [3 x double]* %117, i32 0, i64 2
  %119 = load double* %118, align 8
  %120 = load %struct.irecord** %1, align 8
  %121 = getelementptr inbounds %struct.irecord* %120, i32 0, i32 2
  %122 = load double* %121, align 8
  %123 = fdiv double %122, %119
  store double %123, double* %121, align 8
  %124 = load %struct.tri** %pt, align 8
  %125 = getelementptr inbounds %struct.tri* %124, i32 0, i32 0
  %126 = getelementptr inbounds [3 x double]* %125, i32 0, i64 2
  %127 = load double* %126, align 8
  %128 = load %struct.irecord** %1, align 8
  %129 = getelementptr inbounds %struct.irecord* %128, i32 0, i32 3
  %130 = load double* %129, align 8
  %131 = fdiv double %130, %127
  store double %131, double* %129, align 8
  %132 = load %struct.tri** %pt, align 8
  %133 = getelementptr inbounds %struct.tri* %132, i32 0, i32 0
  %134 = getelementptr inbounds [3 x double]* %133, i32 0, i64 2
  %135 = load double* %134, align 8
  %136 = load %struct.irecord** %1, align 8
  %137 = getelementptr inbounds %struct.irecord* %136, i32 0, i32 4
  %138 = load double* %137, align 8
  %139 = fdiv double %138, %135
  store double %139, double* %137, align 8
  br label %140

; <label>:140                                     ; preds = %115, %90, %65, %61
  %141 = load %struct.irecord** %1, align 8
  %142 = getelementptr inbounds %struct.irecord* %141, i32 0, i32 2
  %143 = load double* %142, align 8
  %144 = load [3 x double]** %n0, align 8
  %145 = getelementptr inbounds [3 x double]* %144, i32 0, i64 0
  %146 = load double* %145, align 8
  %147 = fmul double %143, %146
  %148 = load %struct.irecord** %1, align 8
  %149 = getelementptr inbounds %struct.irecord* %148, i32 0, i32 3
  %150 = load double* %149, align 8
  %151 = load [3 x double]** %n1, align 8
  %152 = getelementptr inbounds [3 x double]* %151, i32 0, i64 0
  %153 = load double* %152, align 8
  %154 = fmul double %150, %153
  %155 = fadd double %147, %154
  %156 = load %struct.irecord** %1, align 8
  %157 = getelementptr inbounds %struct.irecord* %156, i32 0, i32 4
  %158 = load double* %157, align 8
  %159 = load [3 x double]** %n2, align 8
  %160 = getelementptr inbounds [3 x double]* %159, i32 0, i64 0
  %161 = load double* %160, align 8
  %162 = fmul double %158, %161
  %163 = fadd double %155, %162
  %164 = load double** %3, align 8
  %165 = getelementptr inbounds double* %164, i64 0
  store double %163, double* %165, align 8
  %166 = load %struct.irecord** %1, align 8
  %167 = getelementptr inbounds %struct.irecord* %166, i32 0, i32 2
  %168 = load double* %167, align 8
  %169 = load [3 x double]** %n0, align 8
  %170 = getelementptr inbounds [3 x double]* %169, i32 0, i64 1
  %171 = load double* %170, align 8
  %172 = fmul double %168, %171
  %173 = load %struct.irecord** %1, align 8
  %174 = getelementptr inbounds %struct.irecord* %173, i32 0, i32 3
  %175 = load double* %174, align 8
  %176 = load [3 x double]** %n1, align 8
  %177 = getelementptr inbounds [3 x double]* %176, i32 0, i64 1
  %178 = load double* %177, align 8
  %179 = fmul double %175, %178
  %180 = fadd double %172, %179
  %181 = load %struct.irecord** %1, align 8
  %182 = getelementptr inbounds %struct.irecord* %181, i32 0, i32 4
  %183 = load double* %182, align 8
  %184 = load [3 x double]** %n2, align 8
  %185 = getelementptr inbounds [3 x double]* %184, i32 0, i64 1
  %186 = load double* %185, align 8
  %187 = fmul double %183, %186
  %188 = fadd double %180, %187
  %189 = load double** %3, align 8
  %190 = getelementptr inbounds double* %189, i64 1
  store double %188, double* %190, align 8
  %191 = load %struct.irecord** %1, align 8
  %192 = getelementptr inbounds %struct.irecord* %191, i32 0, i32 2
  %193 = load double* %192, align 8
  %194 = load [3 x double]** %n0, align 8
  %195 = getelementptr inbounds [3 x double]* %194, i32 0, i64 2
  %196 = load double* %195, align 8
  %197 = fmul double %193, %196
  %198 = load %struct.irecord** %1, align 8
  %199 = getelementptr inbounds %struct.irecord* %198, i32 0, i32 3
  %200 = load double* %199, align 8
  %201 = load [3 x double]** %n1, align 8
  %202 = getelementptr inbounds [3 x double]* %201, i32 0, i64 2
  %203 = load double* %202, align 8
  %204 = fmul double %200, %203
  %205 = fadd double %197, %204
  %206 = load %struct.irecord** %1, align 8
  %207 = getelementptr inbounds %struct.irecord* %206, i32 0, i32 4
  %208 = load double* %207, align 8
  %209 = load [3 x double]** %n2, align 8
  %210 = getelementptr inbounds [3 x double]* %209, i32 0, i64 2
  %211 = load double* %210, align 8
  %212 = fmul double %208, %211
  %213 = fadd double %205, %212
  %214 = load double** %3, align 8
  %215 = getelementptr inbounds double* %214, i64 2
  store double %213, double* %215, align 8
  %216 = load double** %3, align 8
  call void @VecNorm(double* %216)
  br label %236

; <label>:217                                     ; preds = %0
  %218 = load %struct.tri** %pt, align 8
  %219 = getelementptr inbounds %struct.tri* %218, i32 0, i32 0
  %220 = getelementptr inbounds [3 x double]* %219, i32 0, i64 0
  %221 = load double* %220, align 8
  %222 = load double** %3, align 8
  %223 = getelementptr inbounds double* %222, i64 0
  store double %221, double* %223, align 8
  %224 = load %struct.tri** %pt, align 8
  %225 = getelementptr inbounds %struct.tri* %224, i32 0, i32 0
  %226 = getelementptr inbounds [3 x double]* %225, i32 0, i64 1
  %227 = load double* %226, align 8
  %228 = load double** %3, align 8
  %229 = getelementptr inbounds double* %228, i64 1
  store double %227, double* %229, align 8
  %230 = load %struct.tri** %pt, align 8
  %231 = getelementptr inbounds %struct.tri* %230, i32 0, i32 0
  %232 = getelementptr inbounds [3 x double]* %231, i32 0, i64 2
  %233 = load double* %232, align 8
  %234 = load double** %3, align 8
  %235 = getelementptr inbounds double* %234, i64 2
  store double %233, double* %235, align 8
  br label %236

; <label>:236                                     ; preds = %217, %140
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TriDataNormalize(%struct.object* %po, [4 x double]* %normMat) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %coord = alloca [4 x double], align 16
  %pv = alloca [3 x double]*, align 8
  %pt = alloca %struct.tri*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %normMat, [4 x double]** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 3
  %5 = load %struct.element** %4, align 8
  store %struct.element* %5, %struct.element** %pe, align 8
  %6 = load %struct.object** %1, align 8
  %7 = getelementptr inbounds %struct.object* %6, i32 0, i32 2
  %8 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %7, [4 x double]* %8)
  %9 = load %struct.element** %pe, align 8
  %10 = getelementptr inbounds %struct.element* %9, i32 0, i32 3
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.tri*
  store %struct.tri* %12, %struct.tri** %pt, align 8
  %13 = load %struct.tri** %pt, align 8
  %14 = getelementptr inbounds %struct.tri* %13, i32 0, i32 2
  %15 = load [3 x double]** %14, align 8
  store [3 x double]* %15, [3 x double]** %pv, align 8
  %16 = load [3 x double]** %pv, align 8
  %17 = getelementptr inbounds [3 x double]* %16, i32 0, i64 0
  %18 = load double* %17, align 8
  %19 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %18, double* %19, align 8
  %20 = load [3 x double]** %pv, align 8
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 1
  %22 = load double* %21, align 8
  %23 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %22, double* %23, align 8
  %24 = load [3 x double]** %pv, align 8
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 2
  %26 = load double* %25, align 8
  %27 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %26, double* %27, align 8
  %28 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %28, align 8
  br label %29

; <label>:29                                      ; preds = %43, %0
  %30 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %31 = load double* %30, align 8
  %32 = fcmp une double %31, 1.000000e+32
  br i1 %32, label %33, label %41

; <label>:33                                      ; preds = %29
  %34 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %35 = load double* %34, align 8
  %36 = fcmp une double %35, 1.000000e+32
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %39 = load double* %38, align 8
  %40 = fcmp une double %39, 1.000000e+32
  br label %41

; <label>:41                                      ; preds = %37, %33, %29
  %42 = phi i1 [ false, %33 ], [ false, %29 ], [ %40, %37 ]
  br i1 %42, label %43, label %74

; <label>:43                                      ; preds = %41
  %44 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  %45 = load [4 x double]** %2, align 8
  %46 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  call void @VecMatMult(double* %44, [4 x double]* %45, double* %46)
  %47 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %48 = load double* %47, align 8
  %49 = load [3 x double]** %pv, align 8
  %50 = getelementptr inbounds [3 x double]* %49, i32 0, i64 0
  store double %48, double* %50, align 8
  %51 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %52 = load double* %51, align 8
  %53 = load [3 x double]** %pv, align 8
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 1
  store double %52, double* %54, align 8
  %55 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %56 = load double* %55, align 8
  %57 = load [3 x double]** %pv, align 8
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 2
  store double %56, double* %58, align 8
  %59 = load [3 x double]** %pv, align 8
  %60 = getelementptr inbounds [3 x double]* %59, i32 1
  store [3 x double]* %60, [3 x double]** %pv, align 8
  %61 = load [3 x double]** %pv, align 8
  %62 = getelementptr inbounds [3 x double]* %61, i32 0, i64 0
  %63 = load double* %62, align 8
  %64 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %63, double* %64, align 8
  %65 = load [3 x double]** %pv, align 8
  %66 = getelementptr inbounds [3 x double]* %65, i32 0, i64 1
  %67 = load double* %66, align 8
  %68 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %67, double* %68, align 8
  %69 = load [3 x double]** %pv, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 2
  %71 = load double* %70, align 8
  %72 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %71, double* %72, align 8
  %73 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %73, align 8
  br label %29

; <label>:74                                      ; preds = %41
  store i64 0, i64* %i, align 8
  br label %75

; <label>:75                                      ; preds = %128, %74
  %76 = load i64* %i, align 8
  %77 = load %struct.object** %1, align 8
  %78 = getelementptr inbounds %struct.object* %77, i32 0, i32 4
  %79 = load i64* %78, align 8
  %80 = icmp slt i64 %76, %79
  br i1 %80, label %81, label %131

; <label>:81                                      ; preds = %75
  %82 = load %struct.element** %pe, align 8
  %83 = getelementptr inbounds %struct.element* %82, i32 0, i32 3
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.tri*
  store %struct.tri* %85, %struct.tri** %pt, align 8
  %86 = load %struct.element** %pe, align 8
  %87 = getelementptr inbounds %struct.element* %86, i32 0, i32 1
  %88 = load [4 x double]** %2, align 8
  call void @NormalizeBoundBox(%struct.bbox* %87, [4 x double]* %88)
  %89 = load %struct.tri** %pt, align 8
  %90 = getelementptr inbounds %struct.tri* %89, i32 0, i32 2
  %91 = load [3 x double]** %90, align 8
  %92 = load %struct.tri** %pt, align 8
  %93 = getelementptr inbounds %struct.tri* %92, i32 0, i32 4
  %94 = getelementptr inbounds [3 x i64]* %93, i32 0, i32 0
  %95 = load i64* %94, align 8
  %96 = getelementptr inbounds [3 x double]* %91, i64 %95
  store [3 x double]* %96, [3 x double]** %pv, align 8
  %97 = load %struct.tri** %pt, align 8
  %98 = getelementptr inbounds %struct.tri* %97, i32 0, i32 0
  %99 = getelementptr inbounds [3 x double]* %98, i32 0, i64 0
  %100 = load double* %99, align 8
  %101 = load [3 x double]** %pv, align 8
  %102 = getelementptr inbounds [3 x double]* %101, i32 0, i64 0
  %103 = load double* %102, align 8
  %104 = fmul double %100, %103
  %105 = load %struct.tri** %pt, align 8
  %106 = getelementptr inbounds %struct.tri* %105, i32 0, i32 0
  %107 = getelementptr inbounds [3 x double]* %106, i32 0, i64 1
  %108 = load double* %107, align 8
  %109 = load [3 x double]** %pv, align 8
  %110 = getelementptr inbounds [3 x double]* %109, i32 0, i64 1
  %111 = load double* %110, align 8
  %112 = fmul double %108, %111
  %113 = fadd double %104, %112
  %114 = load %struct.tri** %pt, align 8
  %115 = getelementptr inbounds %struct.tri* %114, i32 0, i32 0
  %116 = getelementptr inbounds [3 x double]* %115, i32 0, i64 2
  %117 = load double* %116, align 8
  %118 = load [3 x double]** %pv, align 8
  %119 = getelementptr inbounds [3 x double]* %118, i32 0, i64 2
  %120 = load double* %119, align 8
  %121 = fmul double %117, %120
  %122 = fadd double %113, %121
  %123 = fsub double -0.000000e+00, %122
  %124 = load %struct.tri** %pt, align 8
  %125 = getelementptr inbounds %struct.tri* %124, i32 0, i32 1
  store double %123, double* %125, align 8
  %126 = load %struct.element** %pe, align 8
  %127 = getelementptr inbounds %struct.element* %126, i32 1
  store %struct.element* %127, %struct.element** %pe, align 8
  br label %128

; <label>:128                                     ; preds = %81
  %129 = load i64* %i, align 8
  %130 = add nsw i64 %129, 1
  store i64 %130, i64* %i, align 8
  br label %75

; <label>:131                                     ; preds = %75
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @TriPeIntersect(%struct.ray* %pr, %struct.element* %pe, %struct.irecord* %hit) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.ray*, align 8
  %3 = alloca %struct.element*, align 8
  %4 = alloca %struct.irecord*, align 8
  %i = alloca i64, align 8
  %Rd_dot_Pn = alloca double, align 8
  %Ro_dot_Pn = alloca double, align 8
  %q1 = alloca double, align 8
  %q2 = alloca double, align 8
  %tval = alloca double, align 8
  %v1 = alloca [3 x double]*, align 8
  %v2 = alloca [3 x double]*, align 8
  %v3 = alloca [3 x double]*, align 8
  %e1 = alloca [3 x double], align 16
  %e2 = alloca [3 x double], align 16
  %e3 = alloca [3 x double], align 16
  %pt = alloca %struct.tri*, align 8
  store %struct.ray* %pr, %struct.ray** %2, align 8
  store %struct.element* %pe, %struct.element** %3, align 8
  store %struct.irecord* %hit, %struct.irecord** %4, align 8
  %5 = load %struct.element** %3, align 8
  %6 = getelementptr inbounds %struct.element* %5, i32 0, i32 3
  %7 = load i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.tri*
  store %struct.tri* %8, %struct.tri** %pt, align 8
  %9 = load %struct.tri** %pt, align 8
  %10 = getelementptr inbounds %struct.tri* %9, i32 0, i32 0
  %11 = getelementptr inbounds [3 x double]* %10, i32 0, i64 0
  %12 = load double* %11, align 8
  %13 = load %struct.ray** %2, align 8
  %14 = getelementptr inbounds %struct.ray* %13, i32 0, i32 4
  %15 = getelementptr inbounds [3 x double]* %14, i32 0, i64 0
  %16 = load double* %15, align 8
  %17 = fmul double %12, %16
  %18 = load %struct.tri** %pt, align 8
  %19 = getelementptr inbounds %struct.tri* %18, i32 0, i32 0
  %20 = getelementptr inbounds [3 x double]* %19, i32 0, i64 1
  %21 = load double* %20, align 8
  %22 = load %struct.ray** %2, align 8
  %23 = getelementptr inbounds %struct.ray* %22, i32 0, i32 4
  %24 = getelementptr inbounds [3 x double]* %23, i32 0, i64 1
  %25 = load double* %24, align 8
  %26 = fmul double %21, %25
  %27 = fadd double %17, %26
  %28 = load %struct.tri** %pt, align 8
  %29 = getelementptr inbounds %struct.tri* %28, i32 0, i32 0
  %30 = getelementptr inbounds [3 x double]* %29, i32 0, i64 2
  %31 = load double* %30, align 8
  %32 = load %struct.ray** %2, align 8
  %33 = getelementptr inbounds %struct.ray* %32, i32 0, i32 4
  %34 = getelementptr inbounds [3 x double]* %33, i32 0, i64 2
  %35 = load double* %34, align 8
  %36 = fmul double %31, %35
  %37 = fadd double %27, %36
  store double %37, double* %Rd_dot_Pn, align 8
  %38 = load double* %Rd_dot_Pn, align 8
  %39 = fcmp ogt double %38, 0.000000e+00
  br i1 %39, label %40, label %42

; <label>:40                                      ; preds = %0
  %41 = load double* %Rd_dot_Pn, align 8
  br label %45

; <label>:42                                      ; preds = %0
  %43 = load double* %Rd_dot_Pn, align 8
  %44 = fsub double -0.000000e+00, %43
  br label %45

; <label>:45                                      ; preds = %42, %40
  %46 = phi double [ %41, %40 ], [ %44, %42 ]
  %47 = fcmp olt double %46, 1.000000e-07
  br i1 %47, label %48, label %49

; <label>:48                                      ; preds = %45
  store i64 0, i64* %1
  br label %829

; <label>:49                                      ; preds = %45
  %50 = load %struct.tri** %pt, align 8
  %51 = getelementptr inbounds %struct.tri* %50, i32 0, i32 0
  %52 = getelementptr inbounds [3 x double]* %51, i32 0, i64 0
  %53 = load double* %52, align 8
  %54 = load %struct.ray** %2, align 8
  %55 = getelementptr inbounds %struct.ray* %54, i32 0, i32 3
  %56 = getelementptr inbounds [3 x double]* %55, i32 0, i64 0
  %57 = load double* %56, align 8
  %58 = fmul double %53, %57
  %59 = load %struct.tri** %pt, align 8
  %60 = getelementptr inbounds %struct.tri* %59, i32 0, i32 0
  %61 = getelementptr inbounds [3 x double]* %60, i32 0, i64 1
  %62 = load double* %61, align 8
  %63 = load %struct.ray** %2, align 8
  %64 = getelementptr inbounds %struct.ray* %63, i32 0, i32 3
  %65 = getelementptr inbounds [3 x double]* %64, i32 0, i64 1
  %66 = load double* %65, align 8
  %67 = fmul double %62, %66
  %68 = fadd double %58, %67
  %69 = load %struct.tri** %pt, align 8
  %70 = getelementptr inbounds %struct.tri* %69, i32 0, i32 0
  %71 = getelementptr inbounds [3 x double]* %70, i32 0, i64 2
  %72 = load double* %71, align 8
  %73 = load %struct.ray** %2, align 8
  %74 = getelementptr inbounds %struct.ray* %73, i32 0, i32 3
  %75 = getelementptr inbounds [3 x double]* %74, i32 0, i64 2
  %76 = load double* %75, align 8
  %77 = fmul double %72, %76
  %78 = fadd double %68, %77
  store double %78, double* %Ro_dot_Pn, align 8
  %79 = load %struct.tri** %pt, align 8
  %80 = getelementptr inbounds %struct.tri* %79, i32 0, i32 1
  %81 = load double* %80, align 8
  %82 = load double* %Ro_dot_Pn, align 8
  %83 = fadd double %81, %82
  %84 = fsub double -0.000000e+00, %83
  %85 = load double* %Rd_dot_Pn, align 8
  %86 = fdiv double %84, %85
  store double %86, double* %tval, align 8
  %87 = load double* %tval, align 8
  %88 = fcmp olt double %87, 1.000000e-07
  br i1 %88, label %89, label %90

; <label>:89                                      ; preds = %49
  store i64 0, i64* %1
  br label %829

; <label>:90                                      ; preds = %49
  %91 = load %struct.tri** %pt, align 8
  %92 = getelementptr inbounds %struct.tri* %91, i32 0, i32 2
  %93 = load [3 x double]** %92, align 8
  %94 = load %struct.tri** %pt, align 8
  %95 = getelementptr inbounds %struct.tri* %94, i32 0, i32 4
  %96 = getelementptr inbounds [3 x i64]* %95, i32 0, i64 0
  %97 = load i64* %96, align 8
  %98 = getelementptr inbounds [3 x double]* %93, i64 %97
  store [3 x double]* %98, [3 x double]** %v1, align 8
  %99 = load %struct.tri** %pt, align 8
  %100 = getelementptr inbounds %struct.tri* %99, i32 0, i32 7
  %101 = load i64* %100, align 8
  %102 = icmp eq i64 %101, 2
  br i1 %102, label %103, label %120

; <label>:103                                     ; preds = %90
  %104 = load %struct.tri** %pt, align 8
  %105 = getelementptr inbounds %struct.tri* %104, i32 0, i32 2
  %106 = load [3 x double]** %105, align 8
  %107 = load %struct.tri** %pt, align 8
  %108 = getelementptr inbounds %struct.tri* %107, i32 0, i32 4
  %109 = getelementptr inbounds [3 x i64]* %108, i32 0, i64 2
  %110 = load i64* %109, align 8
  %111 = getelementptr inbounds [3 x double]* %106, i64 %110
  store [3 x double]* %111, [3 x double]** %v2, align 8
  %112 = load %struct.tri** %pt, align 8
  %113 = getelementptr inbounds %struct.tri* %112, i32 0, i32 2
  %114 = load [3 x double]** %113, align 8
  %115 = load %struct.tri** %pt, align 8
  %116 = getelementptr inbounds %struct.tri* %115, i32 0, i32 4
  %117 = getelementptr inbounds [3 x i64]* %116, i32 0, i64 1
  %118 = load i64* %117, align 8
  %119 = getelementptr inbounds [3 x double]* %114, i64 %118
  store [3 x double]* %119, [3 x double]** %v3, align 8
  br label %137

; <label>:120                                     ; preds = %90
  %121 = load %struct.tri** %pt, align 8
  %122 = getelementptr inbounds %struct.tri* %121, i32 0, i32 2
  %123 = load [3 x double]** %122, align 8
  %124 = load %struct.tri** %pt, align 8
  %125 = getelementptr inbounds %struct.tri* %124, i32 0, i32 4
  %126 = getelementptr inbounds [3 x i64]* %125, i32 0, i64 1
  %127 = load i64* %126, align 8
  %128 = getelementptr inbounds [3 x double]* %123, i64 %127
  store [3 x double]* %128, [3 x double]** %v2, align 8
  %129 = load %struct.tri** %pt, align 8
  %130 = getelementptr inbounds %struct.tri* %129, i32 0, i32 2
  %131 = load [3 x double]** %130, align 8
  %132 = load %struct.tri** %pt, align 8
  %133 = getelementptr inbounds %struct.tri* %132, i32 0, i32 4
  %134 = getelementptr inbounds [3 x i64]* %133, i32 0, i64 2
  %135 = load i64* %134, align 8
  %136 = getelementptr inbounds [3 x double]* %131, i64 %135
  store [3 x double]* %136, [3 x double]** %v3, align 8
  br label %137

; <label>:137                                     ; preds = %120, %103
  %138 = load [3 x double]** %v2, align 8
  %139 = getelementptr inbounds [3 x double]* %138, i32 0, i64 0
  %140 = load double* %139, align 8
  %141 = load [3 x double]** %v1, align 8
  %142 = getelementptr inbounds [3 x double]* %141, i32 0, i64 0
  %143 = load double* %142, align 8
  %144 = fsub double %140, %143
  %145 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 0
  store double %144, double* %145, align 8
  %146 = load [3 x double]** %v2, align 8
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 1
  %148 = load double* %147, align 8
  %149 = load [3 x double]** %v1, align 8
  %150 = getelementptr inbounds [3 x double]* %149, i32 0, i64 1
  %151 = load double* %150, align 8
  %152 = fsub double %148, %151
  %153 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 1
  store double %152, double* %153, align 8
  %154 = load [3 x double]** %v2, align 8
  %155 = getelementptr inbounds [3 x double]* %154, i32 0, i64 2
  %156 = load double* %155, align 8
  %157 = load [3 x double]** %v1, align 8
  %158 = getelementptr inbounds [3 x double]* %157, i32 0, i64 2
  %159 = load double* %158, align 8
  %160 = fsub double %156, %159
  %161 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 2
  store double %160, double* %161, align 8
  %162 = load [3 x double]** %v3, align 8
  %163 = getelementptr inbounds [3 x double]* %162, i32 0, i64 0
  %164 = load double* %163, align 8
  %165 = load [3 x double]** %v2, align 8
  %166 = getelementptr inbounds [3 x double]* %165, i32 0, i64 0
  %167 = load double* %166, align 8
  %168 = fsub double %164, %167
  %169 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 0
  store double %168, double* %169, align 8
  %170 = load [3 x double]** %v3, align 8
  %171 = getelementptr inbounds [3 x double]* %170, i32 0, i64 1
  %172 = load double* %171, align 8
  %173 = load [3 x double]** %v2, align 8
  %174 = getelementptr inbounds [3 x double]* %173, i32 0, i64 1
  %175 = load double* %174, align 8
  %176 = fsub double %172, %175
  %177 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 1
  store double %176, double* %177, align 8
  %178 = load [3 x double]** %v3, align 8
  %179 = getelementptr inbounds [3 x double]* %178, i32 0, i64 2
  %180 = load double* %179, align 8
  %181 = load [3 x double]** %v2, align 8
  %182 = getelementptr inbounds [3 x double]* %181, i32 0, i64 2
  %183 = load double* %182, align 8
  %184 = fsub double %180, %183
  %185 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 2
  store double %184, double* %185, align 8
  %186 = load [3 x double]** %v1, align 8
  %187 = getelementptr inbounds [3 x double]* %186, i32 0, i64 0
  %188 = load double* %187, align 8
  %189 = load [3 x double]** %v3, align 8
  %190 = getelementptr inbounds [3 x double]* %189, i32 0, i64 0
  %191 = load double* %190, align 8
  %192 = fsub double %188, %191
  %193 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 0
  store double %192, double* %193, align 8
  %194 = load [3 x double]** %v1, align 8
  %195 = getelementptr inbounds [3 x double]* %194, i32 0, i64 1
  %196 = load double* %195, align 8
  %197 = load [3 x double]** %v3, align 8
  %198 = getelementptr inbounds [3 x double]* %197, i32 0, i64 1
  %199 = load double* %198, align 8
  %200 = fsub double %196, %199
  %201 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 1
  store double %200, double* %201, align 8
  %202 = load [3 x double]** %v1, align 8
  %203 = getelementptr inbounds [3 x double]* %202, i32 0, i64 2
  %204 = load double* %203, align 8
  %205 = load [3 x double]** %v3, align 8
  %206 = getelementptr inbounds [3 x double]* %205, i32 0, i64 2
  %207 = load double* %206, align 8
  %208 = fsub double %204, %207
  %209 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 2
  store double %208, double* %209, align 8
  %210 = load %struct.tri** %pt, align 8
  %211 = getelementptr inbounds %struct.tri* %210, i32 0, i32 5
  %212 = load i64* %211, align 8
  switch i64 %212, label %822 [
    i64 1, label %213
    i64 2, label %416
    i64 3, label %619
  ]

; <label>:213                                     ; preds = %137
  %214 = load %struct.ray** %2, align 8
  %215 = getelementptr inbounds %struct.ray* %214, i32 0, i32 3
  %216 = getelementptr inbounds [3 x double]* %215, i32 0, i64 1
  %217 = load double* %216, align 8
  %218 = load double* %tval, align 8
  %219 = load %struct.ray** %2, align 8
  %220 = getelementptr inbounds %struct.ray* %219, i32 0, i32 4
  %221 = getelementptr inbounds [3 x double]* %220, i32 0, i64 1
  %222 = load double* %221, align 8
  %223 = fmul double %218, %222
  %224 = fadd double %217, %223
  store double %224, double* %q1, align 8
  %225 = load %struct.ray** %2, align 8
  %226 = getelementptr inbounds %struct.ray* %225, i32 0, i32 3
  %227 = getelementptr inbounds [3 x double]* %226, i32 0, i64 2
  %228 = load double* %227, align 8
  %229 = load double* %tval, align 8
  %230 = load %struct.ray** %2, align 8
  %231 = getelementptr inbounds %struct.ray* %230, i32 0, i32 4
  %232 = getelementptr inbounds [3 x double]* %231, i32 0, i64 2
  %233 = load double* %232, align 8
  %234 = fmul double %229, %233
  %235 = fadd double %228, %234
  store double %235, double* %q2, align 8
  %236 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 1
  %237 = load double* %236, align 8
  %238 = load double* %q2, align 8
  %239 = load [3 x double]** %v2, align 8
  %240 = getelementptr inbounds [3 x double]* %239, i32 0, i64 2
  %241 = load double* %240, align 8
  %242 = fsub double %238, %241
  %243 = fmul double %237, %242
  %244 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 2
  %245 = load double* %244, align 8
  %246 = load double* %q1, align 8
  %247 = load [3 x double]** %v2, align 8
  %248 = getelementptr inbounds [3 x double]* %247, i32 0, i64 1
  %249 = load double* %248, align 8
  %250 = fsub double %246, %249
  %251 = fmul double %245, %250
  %252 = fsub double %243, %251
  %253 = load %struct.irecord** %4, align 8
  %254 = getelementptr inbounds %struct.irecord* %253, i32 0, i32 2
  store double %252, double* %254, align 8
  %255 = load %struct.tri** %pt, align 8
  %256 = getelementptr inbounds %struct.tri* %255, i32 0, i32 0
  %257 = getelementptr inbounds [3 x double]* %256, i32 0, i64 0
  %258 = load double* %257, align 8
  %259 = fcmp ole double %258, 0.000000e+00
  br i1 %259, label %260, label %274

; <label>:260                                     ; preds = %213
  %261 = load %struct.irecord** %4, align 8
  %262 = getelementptr inbounds %struct.irecord* %261, i32 0, i32 2
  %263 = load double* %262, align 8
  %264 = load %struct.tri** %pt, align 8
  %265 = getelementptr inbounds %struct.tri* %264, i32 0, i32 0
  %266 = getelementptr inbounds [3 x double]* %265, i32 0, i64 0
  %267 = load double* %266, align 8
  %268 = fcmp oge double %263, %267
  br i1 %268, label %269, label %274

; <label>:269                                     ; preds = %260
  %270 = load %struct.irecord** %4, align 8
  %271 = getelementptr inbounds %struct.irecord* %270, i32 0, i32 2
  %272 = load double* %271, align 8
  %273 = fcmp ole double %272, 0.000000e+00
  br i1 %273, label %295, label %274

; <label>:274                                     ; preds = %269, %260, %213
  %275 = load %struct.tri** %pt, align 8
  %276 = getelementptr inbounds %struct.tri* %275, i32 0, i32 0
  %277 = getelementptr inbounds [3 x double]* %276, i32 0, i64 0
  %278 = load double* %277, align 8
  %279 = fcmp ogt double %278, 0.000000e+00
  br i1 %279, label %280, label %294

; <label>:280                                     ; preds = %274
  %281 = load %struct.irecord** %4, align 8
  %282 = getelementptr inbounds %struct.irecord* %281, i32 0, i32 2
  %283 = load double* %282, align 8
  %284 = fcmp oge double %283, 0.000000e+00
  br i1 %284, label %285, label %294

; <label>:285                                     ; preds = %280
  %286 = load %struct.irecord** %4, align 8
  %287 = getelementptr inbounds %struct.irecord* %286, i32 0, i32 2
  %288 = load double* %287, align 8
  %289 = load %struct.tri** %pt, align 8
  %290 = getelementptr inbounds %struct.tri* %289, i32 0, i32 0
  %291 = getelementptr inbounds [3 x double]* %290, i32 0, i64 0
  %292 = load double* %291, align 8
  %293 = fcmp ole double %288, %292
  br i1 %293, label %295, label %294

; <label>:294                                     ; preds = %285, %280, %274
  store i64 0, i64* %1
  br label %829

; <label>:295                                     ; preds = %285, %269
  %296 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 1
  %297 = load double* %296, align 8
  %298 = load double* %q2, align 8
  %299 = load [3 x double]** %v3, align 8
  %300 = getelementptr inbounds [3 x double]* %299, i32 0, i64 2
  %301 = load double* %300, align 8
  %302 = fsub double %298, %301
  %303 = fmul double %297, %302
  %304 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 2
  %305 = load double* %304, align 8
  %306 = load double* %q1, align 8
  %307 = load [3 x double]** %v3, align 8
  %308 = getelementptr inbounds [3 x double]* %307, i32 0, i64 1
  %309 = load double* %308, align 8
  %310 = fsub double %306, %309
  %311 = fmul double %305, %310
  %312 = fsub double %303, %311
  %313 = load %struct.irecord** %4, align 8
  %314 = getelementptr inbounds %struct.irecord* %313, i32 0, i32 3
  store double %312, double* %314, align 8
  %315 = load %struct.tri** %pt, align 8
  %316 = getelementptr inbounds %struct.tri* %315, i32 0, i32 0
  %317 = getelementptr inbounds [3 x double]* %316, i32 0, i64 0
  %318 = load double* %317, align 8
  %319 = fcmp ole double %318, 0.000000e+00
  br i1 %319, label %320, label %334

; <label>:320                                     ; preds = %295
  %321 = load %struct.irecord** %4, align 8
  %322 = getelementptr inbounds %struct.irecord* %321, i32 0, i32 3
  %323 = load double* %322, align 8
  %324 = load %struct.tri** %pt, align 8
  %325 = getelementptr inbounds %struct.tri* %324, i32 0, i32 0
  %326 = getelementptr inbounds [3 x double]* %325, i32 0, i64 0
  %327 = load double* %326, align 8
  %328 = fcmp oge double %323, %327
  br i1 %328, label %329, label %334

; <label>:329                                     ; preds = %320
  %330 = load %struct.irecord** %4, align 8
  %331 = getelementptr inbounds %struct.irecord* %330, i32 0, i32 3
  %332 = load double* %331, align 8
  %333 = fcmp ole double %332, 0.000000e+00
  br i1 %333, label %355, label %334

; <label>:334                                     ; preds = %329, %320, %295
  %335 = load %struct.tri** %pt, align 8
  %336 = getelementptr inbounds %struct.tri* %335, i32 0, i32 0
  %337 = getelementptr inbounds [3 x double]* %336, i32 0, i64 0
  %338 = load double* %337, align 8
  %339 = fcmp ogt double %338, 0.000000e+00
  br i1 %339, label %340, label %354

; <label>:340                                     ; preds = %334
  %341 = load %struct.irecord** %4, align 8
  %342 = getelementptr inbounds %struct.irecord* %341, i32 0, i32 3
  %343 = load double* %342, align 8
  %344 = fcmp oge double %343, 0.000000e+00
  br i1 %344, label %345, label %354

; <label>:345                                     ; preds = %340
  %346 = load %struct.irecord** %4, align 8
  %347 = getelementptr inbounds %struct.irecord* %346, i32 0, i32 3
  %348 = load double* %347, align 8
  %349 = load %struct.tri** %pt, align 8
  %350 = getelementptr inbounds %struct.tri* %349, i32 0, i32 0
  %351 = getelementptr inbounds [3 x double]* %350, i32 0, i64 0
  %352 = load double* %351, align 8
  %353 = fcmp ole double %348, %352
  br i1 %353, label %355, label %354

; <label>:354                                     ; preds = %345, %340, %334
  store i64 0, i64* %1
  br label %829

; <label>:355                                     ; preds = %345, %329
  %356 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 1
  %357 = load double* %356, align 8
  %358 = load double* %q2, align 8
  %359 = load [3 x double]** %v1, align 8
  %360 = getelementptr inbounds [3 x double]* %359, i32 0, i64 2
  %361 = load double* %360, align 8
  %362 = fsub double %358, %361
  %363 = fmul double %357, %362
  %364 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 2
  %365 = load double* %364, align 8
  %366 = load double* %q1, align 8
  %367 = load [3 x double]** %v1, align 8
  %368 = getelementptr inbounds [3 x double]* %367, i32 0, i64 1
  %369 = load double* %368, align 8
  %370 = fsub double %366, %369
  %371 = fmul double %365, %370
  %372 = fsub double %363, %371
  %373 = load %struct.irecord** %4, align 8
  %374 = getelementptr inbounds %struct.irecord* %373, i32 0, i32 4
  store double %372, double* %374, align 8
  %375 = load %struct.tri** %pt, align 8
  %376 = getelementptr inbounds %struct.tri* %375, i32 0, i32 0
  %377 = getelementptr inbounds [3 x double]* %376, i32 0, i64 0
  %378 = load double* %377, align 8
  %379 = fcmp ole double %378, 0.000000e+00
  br i1 %379, label %380, label %394

; <label>:380                                     ; preds = %355
  %381 = load %struct.irecord** %4, align 8
  %382 = getelementptr inbounds %struct.irecord* %381, i32 0, i32 4
  %383 = load double* %382, align 8
  %384 = load %struct.tri** %pt, align 8
  %385 = getelementptr inbounds %struct.tri* %384, i32 0, i32 0
  %386 = getelementptr inbounds [3 x double]* %385, i32 0, i64 0
  %387 = load double* %386, align 8
  %388 = fcmp oge double %383, %387
  br i1 %388, label %389, label %394

; <label>:389                                     ; preds = %380
  %390 = load %struct.irecord** %4, align 8
  %391 = getelementptr inbounds %struct.irecord* %390, i32 0, i32 4
  %392 = load double* %391, align 8
  %393 = fcmp ole double %392, 0.000000e+00
  br i1 %393, label %415, label %394

; <label>:394                                     ; preds = %389, %380, %355
  %395 = load %struct.tri** %pt, align 8
  %396 = getelementptr inbounds %struct.tri* %395, i32 0, i32 0
  %397 = getelementptr inbounds [3 x double]* %396, i32 0, i64 0
  %398 = load double* %397, align 8
  %399 = fcmp ogt double %398, 0.000000e+00
  br i1 %399, label %400, label %414

; <label>:400                                     ; preds = %394
  %401 = load %struct.irecord** %4, align 8
  %402 = getelementptr inbounds %struct.irecord* %401, i32 0, i32 4
  %403 = load double* %402, align 8
  %404 = fcmp oge double %403, 0.000000e+00
  br i1 %404, label %405, label %414

; <label>:405                                     ; preds = %400
  %406 = load %struct.irecord** %4, align 8
  %407 = getelementptr inbounds %struct.irecord* %406, i32 0, i32 4
  %408 = load double* %407, align 8
  %409 = load %struct.tri** %pt, align 8
  %410 = getelementptr inbounds %struct.tri* %409, i32 0, i32 0
  %411 = getelementptr inbounds [3 x double]* %410, i32 0, i64 0
  %412 = load double* %411, align 8
  %413 = fcmp ole double %408, %412
  br i1 %413, label %415, label %414

; <label>:414                                     ; preds = %405, %400, %394
  store i64 0, i64* %1
  br label %829

; <label>:415                                     ; preds = %405, %389
  br label %822

; <label>:416                                     ; preds = %137
  %417 = load %struct.ray** %2, align 8
  %418 = getelementptr inbounds %struct.ray* %417, i32 0, i32 3
  %419 = getelementptr inbounds [3 x double]* %418, i32 0, i64 0
  %420 = load double* %419, align 8
  %421 = load double* %tval, align 8
  %422 = load %struct.ray** %2, align 8
  %423 = getelementptr inbounds %struct.ray* %422, i32 0, i32 4
  %424 = getelementptr inbounds [3 x double]* %423, i32 0, i64 0
  %425 = load double* %424, align 8
  %426 = fmul double %421, %425
  %427 = fadd double %420, %426
  store double %427, double* %q1, align 8
  %428 = load %struct.ray** %2, align 8
  %429 = getelementptr inbounds %struct.ray* %428, i32 0, i32 3
  %430 = getelementptr inbounds [3 x double]* %429, i32 0, i64 2
  %431 = load double* %430, align 8
  %432 = load double* %tval, align 8
  %433 = load %struct.ray** %2, align 8
  %434 = getelementptr inbounds %struct.ray* %433, i32 0, i32 4
  %435 = getelementptr inbounds [3 x double]* %434, i32 0, i64 2
  %436 = load double* %435, align 8
  %437 = fmul double %432, %436
  %438 = fadd double %431, %437
  store double %438, double* %q2, align 8
  %439 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 2
  %440 = load double* %439, align 8
  %441 = load double* %q1, align 8
  %442 = load [3 x double]** %v2, align 8
  %443 = getelementptr inbounds [3 x double]* %442, i32 0, i64 0
  %444 = load double* %443, align 8
  %445 = fsub double %441, %444
  %446 = fmul double %440, %445
  %447 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 0
  %448 = load double* %447, align 8
  %449 = load double* %q2, align 8
  %450 = load [3 x double]** %v2, align 8
  %451 = getelementptr inbounds [3 x double]* %450, i32 0, i64 2
  %452 = load double* %451, align 8
  %453 = fsub double %449, %452
  %454 = fmul double %448, %453
  %455 = fsub double %446, %454
  %456 = load %struct.irecord** %4, align 8
  %457 = getelementptr inbounds %struct.irecord* %456, i32 0, i32 2
  store double %455, double* %457, align 8
  %458 = load %struct.tri** %pt, align 8
  %459 = getelementptr inbounds %struct.tri* %458, i32 0, i32 0
  %460 = getelementptr inbounds [3 x double]* %459, i32 0, i64 1
  %461 = load double* %460, align 8
  %462 = fcmp ole double %461, 0.000000e+00
  br i1 %462, label %463, label %477

; <label>:463                                     ; preds = %416
  %464 = load %struct.irecord** %4, align 8
  %465 = getelementptr inbounds %struct.irecord* %464, i32 0, i32 2
  %466 = load double* %465, align 8
  %467 = load %struct.tri** %pt, align 8
  %468 = getelementptr inbounds %struct.tri* %467, i32 0, i32 0
  %469 = getelementptr inbounds [3 x double]* %468, i32 0, i64 1
  %470 = load double* %469, align 8
  %471 = fcmp oge double %466, %470
  br i1 %471, label %472, label %477

; <label>:472                                     ; preds = %463
  %473 = load %struct.irecord** %4, align 8
  %474 = getelementptr inbounds %struct.irecord* %473, i32 0, i32 2
  %475 = load double* %474, align 8
  %476 = fcmp ole double %475, 0.000000e+00
  br i1 %476, label %498, label %477

; <label>:477                                     ; preds = %472, %463, %416
  %478 = load %struct.tri** %pt, align 8
  %479 = getelementptr inbounds %struct.tri* %478, i32 0, i32 0
  %480 = getelementptr inbounds [3 x double]* %479, i32 0, i64 1
  %481 = load double* %480, align 8
  %482 = fcmp ogt double %481, 0.000000e+00
  br i1 %482, label %483, label %497

; <label>:483                                     ; preds = %477
  %484 = load %struct.irecord** %4, align 8
  %485 = getelementptr inbounds %struct.irecord* %484, i32 0, i32 2
  %486 = load double* %485, align 8
  %487 = fcmp oge double %486, 0.000000e+00
  br i1 %487, label %488, label %497

; <label>:488                                     ; preds = %483
  %489 = load %struct.irecord** %4, align 8
  %490 = getelementptr inbounds %struct.irecord* %489, i32 0, i32 2
  %491 = load double* %490, align 8
  %492 = load %struct.tri** %pt, align 8
  %493 = getelementptr inbounds %struct.tri* %492, i32 0, i32 0
  %494 = getelementptr inbounds [3 x double]* %493, i32 0, i64 1
  %495 = load double* %494, align 8
  %496 = fcmp ole double %491, %495
  br i1 %496, label %498, label %497

; <label>:497                                     ; preds = %488, %483, %477
  store i64 0, i64* %1
  br label %829

; <label>:498                                     ; preds = %488, %472
  %499 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 2
  %500 = load double* %499, align 8
  %501 = load double* %q1, align 8
  %502 = load [3 x double]** %v3, align 8
  %503 = getelementptr inbounds [3 x double]* %502, i32 0, i64 0
  %504 = load double* %503, align 8
  %505 = fsub double %501, %504
  %506 = fmul double %500, %505
  %507 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 0
  %508 = load double* %507, align 8
  %509 = load double* %q2, align 8
  %510 = load [3 x double]** %v3, align 8
  %511 = getelementptr inbounds [3 x double]* %510, i32 0, i64 2
  %512 = load double* %511, align 8
  %513 = fsub double %509, %512
  %514 = fmul double %508, %513
  %515 = fsub double %506, %514
  %516 = load %struct.irecord** %4, align 8
  %517 = getelementptr inbounds %struct.irecord* %516, i32 0, i32 3
  store double %515, double* %517, align 8
  %518 = load %struct.tri** %pt, align 8
  %519 = getelementptr inbounds %struct.tri* %518, i32 0, i32 0
  %520 = getelementptr inbounds [3 x double]* %519, i32 0, i64 1
  %521 = load double* %520, align 8
  %522 = fcmp ole double %521, 0.000000e+00
  br i1 %522, label %523, label %537

; <label>:523                                     ; preds = %498
  %524 = load %struct.irecord** %4, align 8
  %525 = getelementptr inbounds %struct.irecord* %524, i32 0, i32 3
  %526 = load double* %525, align 8
  %527 = load %struct.tri** %pt, align 8
  %528 = getelementptr inbounds %struct.tri* %527, i32 0, i32 0
  %529 = getelementptr inbounds [3 x double]* %528, i32 0, i64 1
  %530 = load double* %529, align 8
  %531 = fcmp oge double %526, %530
  br i1 %531, label %532, label %537

; <label>:532                                     ; preds = %523
  %533 = load %struct.irecord** %4, align 8
  %534 = getelementptr inbounds %struct.irecord* %533, i32 0, i32 3
  %535 = load double* %534, align 8
  %536 = fcmp ole double %535, 0.000000e+00
  br i1 %536, label %558, label %537

; <label>:537                                     ; preds = %532, %523, %498
  %538 = load %struct.tri** %pt, align 8
  %539 = getelementptr inbounds %struct.tri* %538, i32 0, i32 0
  %540 = getelementptr inbounds [3 x double]* %539, i32 0, i64 1
  %541 = load double* %540, align 8
  %542 = fcmp ogt double %541, 0.000000e+00
  br i1 %542, label %543, label %557

; <label>:543                                     ; preds = %537
  %544 = load %struct.irecord** %4, align 8
  %545 = getelementptr inbounds %struct.irecord* %544, i32 0, i32 3
  %546 = load double* %545, align 8
  %547 = fcmp oge double %546, 0.000000e+00
  br i1 %547, label %548, label %557

; <label>:548                                     ; preds = %543
  %549 = load %struct.irecord** %4, align 8
  %550 = getelementptr inbounds %struct.irecord* %549, i32 0, i32 3
  %551 = load double* %550, align 8
  %552 = load %struct.tri** %pt, align 8
  %553 = getelementptr inbounds %struct.tri* %552, i32 0, i32 0
  %554 = getelementptr inbounds [3 x double]* %553, i32 0, i64 1
  %555 = load double* %554, align 8
  %556 = fcmp ole double %551, %555
  br i1 %556, label %558, label %557

; <label>:557                                     ; preds = %548, %543, %537
  store i64 0, i64* %1
  br label %829

; <label>:558                                     ; preds = %548, %532
  %559 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 2
  %560 = load double* %559, align 8
  %561 = load double* %q1, align 8
  %562 = load [3 x double]** %v1, align 8
  %563 = getelementptr inbounds [3 x double]* %562, i32 0, i64 0
  %564 = load double* %563, align 8
  %565 = fsub double %561, %564
  %566 = fmul double %560, %565
  %567 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 0
  %568 = load double* %567, align 8
  %569 = load double* %q2, align 8
  %570 = load [3 x double]** %v1, align 8
  %571 = getelementptr inbounds [3 x double]* %570, i32 0, i64 2
  %572 = load double* %571, align 8
  %573 = fsub double %569, %572
  %574 = fmul double %568, %573
  %575 = fsub double %566, %574
  %576 = load %struct.irecord** %4, align 8
  %577 = getelementptr inbounds %struct.irecord* %576, i32 0, i32 4
  store double %575, double* %577, align 8
  %578 = load %struct.tri** %pt, align 8
  %579 = getelementptr inbounds %struct.tri* %578, i32 0, i32 0
  %580 = getelementptr inbounds [3 x double]* %579, i32 0, i64 1
  %581 = load double* %580, align 8
  %582 = fcmp ole double %581, 0.000000e+00
  br i1 %582, label %583, label %597

; <label>:583                                     ; preds = %558
  %584 = load %struct.irecord** %4, align 8
  %585 = getelementptr inbounds %struct.irecord* %584, i32 0, i32 4
  %586 = load double* %585, align 8
  %587 = load %struct.tri** %pt, align 8
  %588 = getelementptr inbounds %struct.tri* %587, i32 0, i32 0
  %589 = getelementptr inbounds [3 x double]* %588, i32 0, i64 1
  %590 = load double* %589, align 8
  %591 = fcmp oge double %586, %590
  br i1 %591, label %592, label %597

; <label>:592                                     ; preds = %583
  %593 = load %struct.irecord** %4, align 8
  %594 = getelementptr inbounds %struct.irecord* %593, i32 0, i32 4
  %595 = load double* %594, align 8
  %596 = fcmp ole double %595, 0.000000e+00
  br i1 %596, label %618, label %597

; <label>:597                                     ; preds = %592, %583, %558
  %598 = load %struct.tri** %pt, align 8
  %599 = getelementptr inbounds %struct.tri* %598, i32 0, i32 0
  %600 = getelementptr inbounds [3 x double]* %599, i32 0, i64 1
  %601 = load double* %600, align 8
  %602 = fcmp ogt double %601, 0.000000e+00
  br i1 %602, label %603, label %617

; <label>:603                                     ; preds = %597
  %604 = load %struct.irecord** %4, align 8
  %605 = getelementptr inbounds %struct.irecord* %604, i32 0, i32 4
  %606 = load double* %605, align 8
  %607 = fcmp oge double %606, 0.000000e+00
  br i1 %607, label %608, label %617

; <label>:608                                     ; preds = %603
  %609 = load %struct.irecord** %4, align 8
  %610 = getelementptr inbounds %struct.irecord* %609, i32 0, i32 4
  %611 = load double* %610, align 8
  %612 = load %struct.tri** %pt, align 8
  %613 = getelementptr inbounds %struct.tri* %612, i32 0, i32 0
  %614 = getelementptr inbounds [3 x double]* %613, i32 0, i64 1
  %615 = load double* %614, align 8
  %616 = fcmp ole double %611, %615
  br i1 %616, label %618, label %617

; <label>:617                                     ; preds = %608, %603, %597
  store i64 0, i64* %1
  br label %829

; <label>:618                                     ; preds = %608, %592
  br label %822

; <label>:619                                     ; preds = %137
  %620 = load %struct.ray** %2, align 8
  %621 = getelementptr inbounds %struct.ray* %620, i32 0, i32 3
  %622 = getelementptr inbounds [3 x double]* %621, i32 0, i64 0
  %623 = load double* %622, align 8
  %624 = load double* %tval, align 8
  %625 = load %struct.ray** %2, align 8
  %626 = getelementptr inbounds %struct.ray* %625, i32 0, i32 4
  %627 = getelementptr inbounds [3 x double]* %626, i32 0, i64 0
  %628 = load double* %627, align 8
  %629 = fmul double %624, %628
  %630 = fadd double %623, %629
  store double %630, double* %q1, align 8
  %631 = load %struct.ray** %2, align 8
  %632 = getelementptr inbounds %struct.ray* %631, i32 0, i32 3
  %633 = getelementptr inbounds [3 x double]* %632, i32 0, i64 1
  %634 = load double* %633, align 8
  %635 = load double* %tval, align 8
  %636 = load %struct.ray** %2, align 8
  %637 = getelementptr inbounds %struct.ray* %636, i32 0, i32 4
  %638 = getelementptr inbounds [3 x double]* %637, i32 0, i64 1
  %639 = load double* %638, align 8
  %640 = fmul double %635, %639
  %641 = fadd double %634, %640
  store double %641, double* %q2, align 8
  %642 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 0
  %643 = load double* %642, align 8
  %644 = load double* %q2, align 8
  %645 = load [3 x double]** %v2, align 8
  %646 = getelementptr inbounds [3 x double]* %645, i32 0, i64 1
  %647 = load double* %646, align 8
  %648 = fsub double %644, %647
  %649 = fmul double %643, %648
  %650 = getelementptr inbounds [3 x double]* %e2, i32 0, i64 1
  %651 = load double* %650, align 8
  %652 = load double* %q1, align 8
  %653 = load [3 x double]** %v2, align 8
  %654 = getelementptr inbounds [3 x double]* %653, i32 0, i64 0
  %655 = load double* %654, align 8
  %656 = fsub double %652, %655
  %657 = fmul double %651, %656
  %658 = fsub double %649, %657
  %659 = load %struct.irecord** %4, align 8
  %660 = getelementptr inbounds %struct.irecord* %659, i32 0, i32 2
  store double %658, double* %660, align 8
  %661 = load %struct.tri** %pt, align 8
  %662 = getelementptr inbounds %struct.tri* %661, i32 0, i32 0
  %663 = getelementptr inbounds [3 x double]* %662, i32 0, i64 2
  %664 = load double* %663, align 8
  %665 = fcmp ole double %664, 0.000000e+00
  br i1 %665, label %666, label %680

; <label>:666                                     ; preds = %619
  %667 = load %struct.irecord** %4, align 8
  %668 = getelementptr inbounds %struct.irecord* %667, i32 0, i32 2
  %669 = load double* %668, align 8
  %670 = load %struct.tri** %pt, align 8
  %671 = getelementptr inbounds %struct.tri* %670, i32 0, i32 0
  %672 = getelementptr inbounds [3 x double]* %671, i32 0, i64 2
  %673 = load double* %672, align 8
  %674 = fcmp oge double %669, %673
  br i1 %674, label %675, label %680

; <label>:675                                     ; preds = %666
  %676 = load %struct.irecord** %4, align 8
  %677 = getelementptr inbounds %struct.irecord* %676, i32 0, i32 2
  %678 = load double* %677, align 8
  %679 = fcmp ole double %678, 0.000000e+00
  br i1 %679, label %701, label %680

; <label>:680                                     ; preds = %675, %666, %619
  %681 = load %struct.tri** %pt, align 8
  %682 = getelementptr inbounds %struct.tri* %681, i32 0, i32 0
  %683 = getelementptr inbounds [3 x double]* %682, i32 0, i64 2
  %684 = load double* %683, align 8
  %685 = fcmp ogt double %684, 0.000000e+00
  br i1 %685, label %686, label %700

; <label>:686                                     ; preds = %680
  %687 = load %struct.irecord** %4, align 8
  %688 = getelementptr inbounds %struct.irecord* %687, i32 0, i32 2
  %689 = load double* %688, align 8
  %690 = fcmp oge double %689, 0.000000e+00
  br i1 %690, label %691, label %700

; <label>:691                                     ; preds = %686
  %692 = load %struct.irecord** %4, align 8
  %693 = getelementptr inbounds %struct.irecord* %692, i32 0, i32 2
  %694 = load double* %693, align 8
  %695 = load %struct.tri** %pt, align 8
  %696 = getelementptr inbounds %struct.tri* %695, i32 0, i32 0
  %697 = getelementptr inbounds [3 x double]* %696, i32 0, i64 2
  %698 = load double* %697, align 8
  %699 = fcmp ole double %694, %698
  br i1 %699, label %701, label %700

; <label>:700                                     ; preds = %691, %686, %680
  store i64 0, i64* %1
  br label %829

; <label>:701                                     ; preds = %691, %675
  %702 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 0
  %703 = load double* %702, align 8
  %704 = load double* %q2, align 8
  %705 = load [3 x double]** %v3, align 8
  %706 = getelementptr inbounds [3 x double]* %705, i32 0, i64 1
  %707 = load double* %706, align 8
  %708 = fsub double %704, %707
  %709 = fmul double %703, %708
  %710 = getelementptr inbounds [3 x double]* %e3, i32 0, i64 1
  %711 = load double* %710, align 8
  %712 = load double* %q1, align 8
  %713 = load [3 x double]** %v3, align 8
  %714 = getelementptr inbounds [3 x double]* %713, i32 0, i64 0
  %715 = load double* %714, align 8
  %716 = fsub double %712, %715
  %717 = fmul double %711, %716
  %718 = fsub double %709, %717
  %719 = load %struct.irecord** %4, align 8
  %720 = getelementptr inbounds %struct.irecord* %719, i32 0, i32 3
  store double %718, double* %720, align 8
  %721 = load %struct.tri** %pt, align 8
  %722 = getelementptr inbounds %struct.tri* %721, i32 0, i32 0
  %723 = getelementptr inbounds [3 x double]* %722, i32 0, i64 2
  %724 = load double* %723, align 8
  %725 = fcmp ole double %724, 0.000000e+00
  br i1 %725, label %726, label %740

; <label>:726                                     ; preds = %701
  %727 = load %struct.irecord** %4, align 8
  %728 = getelementptr inbounds %struct.irecord* %727, i32 0, i32 3
  %729 = load double* %728, align 8
  %730 = load %struct.tri** %pt, align 8
  %731 = getelementptr inbounds %struct.tri* %730, i32 0, i32 0
  %732 = getelementptr inbounds [3 x double]* %731, i32 0, i64 2
  %733 = load double* %732, align 8
  %734 = fcmp oge double %729, %733
  br i1 %734, label %735, label %740

; <label>:735                                     ; preds = %726
  %736 = load %struct.irecord** %4, align 8
  %737 = getelementptr inbounds %struct.irecord* %736, i32 0, i32 3
  %738 = load double* %737, align 8
  %739 = fcmp ole double %738, 0.000000e+00
  br i1 %739, label %761, label %740

; <label>:740                                     ; preds = %735, %726, %701
  %741 = load %struct.tri** %pt, align 8
  %742 = getelementptr inbounds %struct.tri* %741, i32 0, i32 0
  %743 = getelementptr inbounds [3 x double]* %742, i32 0, i64 2
  %744 = load double* %743, align 8
  %745 = fcmp ogt double %744, 0.000000e+00
  br i1 %745, label %746, label %760

; <label>:746                                     ; preds = %740
  %747 = load %struct.irecord** %4, align 8
  %748 = getelementptr inbounds %struct.irecord* %747, i32 0, i32 3
  %749 = load double* %748, align 8
  %750 = fcmp oge double %749, 0.000000e+00
  br i1 %750, label %751, label %760

; <label>:751                                     ; preds = %746
  %752 = load %struct.irecord** %4, align 8
  %753 = getelementptr inbounds %struct.irecord* %752, i32 0, i32 3
  %754 = load double* %753, align 8
  %755 = load %struct.tri** %pt, align 8
  %756 = getelementptr inbounds %struct.tri* %755, i32 0, i32 0
  %757 = getelementptr inbounds [3 x double]* %756, i32 0, i64 2
  %758 = load double* %757, align 8
  %759 = fcmp ole double %754, %758
  br i1 %759, label %761, label %760

; <label>:760                                     ; preds = %751, %746, %740
  store i64 0, i64* %1
  br label %829

; <label>:761                                     ; preds = %751, %735
  %762 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 0
  %763 = load double* %762, align 8
  %764 = load double* %q2, align 8
  %765 = load [3 x double]** %v1, align 8
  %766 = getelementptr inbounds [3 x double]* %765, i32 0, i64 1
  %767 = load double* %766, align 8
  %768 = fsub double %764, %767
  %769 = fmul double %763, %768
  %770 = getelementptr inbounds [3 x double]* %e1, i32 0, i64 1
  %771 = load double* %770, align 8
  %772 = load double* %q1, align 8
  %773 = load [3 x double]** %v1, align 8
  %774 = getelementptr inbounds [3 x double]* %773, i32 0, i64 0
  %775 = load double* %774, align 8
  %776 = fsub double %772, %775
  %777 = fmul double %771, %776
  %778 = fsub double %769, %777
  %779 = load %struct.irecord** %4, align 8
  %780 = getelementptr inbounds %struct.irecord* %779, i32 0, i32 4
  store double %778, double* %780, align 8
  %781 = load %struct.tri** %pt, align 8
  %782 = getelementptr inbounds %struct.tri* %781, i32 0, i32 0
  %783 = getelementptr inbounds [3 x double]* %782, i32 0, i64 2
  %784 = load double* %783, align 8
  %785 = fcmp ole double %784, 0.000000e+00
  br i1 %785, label %786, label %800

; <label>:786                                     ; preds = %761
  %787 = load %struct.irecord** %4, align 8
  %788 = getelementptr inbounds %struct.irecord* %787, i32 0, i32 4
  %789 = load double* %788, align 8
  %790 = load %struct.tri** %pt, align 8
  %791 = getelementptr inbounds %struct.tri* %790, i32 0, i32 0
  %792 = getelementptr inbounds [3 x double]* %791, i32 0, i64 2
  %793 = load double* %792, align 8
  %794 = fcmp oge double %789, %793
  br i1 %794, label %795, label %800

; <label>:795                                     ; preds = %786
  %796 = load %struct.irecord** %4, align 8
  %797 = getelementptr inbounds %struct.irecord* %796, i32 0, i32 4
  %798 = load double* %797, align 8
  %799 = fcmp ole double %798, 0.000000e+00
  br i1 %799, label %821, label %800

; <label>:800                                     ; preds = %795, %786, %761
  %801 = load %struct.tri** %pt, align 8
  %802 = getelementptr inbounds %struct.tri* %801, i32 0, i32 0
  %803 = getelementptr inbounds [3 x double]* %802, i32 0, i64 2
  %804 = load double* %803, align 8
  %805 = fcmp ogt double %804, 0.000000e+00
  br i1 %805, label %806, label %820

; <label>:806                                     ; preds = %800
  %807 = load %struct.irecord** %4, align 8
  %808 = getelementptr inbounds %struct.irecord* %807, i32 0, i32 4
  %809 = load double* %808, align 8
  %810 = fcmp oge double %809, 0.000000e+00
  br i1 %810, label %811, label %820

; <label>:811                                     ; preds = %806
  %812 = load %struct.irecord** %4, align 8
  %813 = getelementptr inbounds %struct.irecord* %812, i32 0, i32 4
  %814 = load double* %813, align 8
  %815 = load %struct.tri** %pt, align 8
  %816 = getelementptr inbounds %struct.tri* %815, i32 0, i32 0
  %817 = getelementptr inbounds [3 x double]* %816, i32 0, i64 2
  %818 = load double* %817, align 8
  %819 = fcmp ole double %814, %818
  br i1 %819, label %821, label %820

; <label>:820                                     ; preds = %811, %806, %800
  store i64 0, i64* %1
  br label %829

; <label>:821                                     ; preds = %811, %795
  br label %822

; <label>:822                                     ; preds = %821, %618, %415, %137
  %823 = load double* %tval, align 8
  %824 = load %struct.irecord** %4, align 8
  %825 = getelementptr inbounds %struct.irecord* %824, i32 0, i32 0
  store double %823, double* %825, align 8
  %826 = load %struct.element** %3, align 8
  %827 = load %struct.irecord** %4, align 8
  %828 = getelementptr inbounds %struct.irecord* %827, i32 0, i32 1
  store %struct.element* %826, %struct.element** %828, align 8
  store i64 1, i64* %1
  br label %829

; <label>:829                                     ; preds = %822, %820, %760, %700, %617, %557, %497, %414, %354, %294, %89, %48
  %830 = load i64* %1
  ret i64 %830
}

; Function Attrs: nounwind uwtable
define internal i64 @TriIntersect(%struct.ray* %pr, %struct.object* %po, %struct.irecord* %hit) {
  %1 = alloca %struct.ray*, align 8
  %2 = alloca %struct.object*, align 8
  %3 = alloca %struct.irecord*, align 8
  %i = alloca i64, align 8
  %nhits = alloca i64, align 8
  %pe = alloca %struct.element*, align 8
  %newhit = alloca %struct.irecord, align 8
  store %struct.ray* %pr, %struct.ray** %1, align 8
  store %struct.object* %po, %struct.object** %2, align 8
  store %struct.irecord* %hit, %struct.irecord** %3, align 8
  store i64 0, i64* %nhits, align 8
  %4 = load %struct.object** %2, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.irecord** %3, align 8
  %8 = getelementptr inbounds %struct.irecord* %7, i64 0
  %9 = getelementptr inbounds %struct.irecord* %8, i32 0, i32 0
  store double 1.000000e+32, double* %9, align 8
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %40, %0
  %11 = load i64* %i, align 8
  %12 = load %struct.object** %2, align 8
  %13 = getelementptr inbounds %struct.object* %12, i32 0, i32 4
  %14 = load i64* %13, align 8
  %15 = icmp slt i64 %11, %14
  br i1 %15, label %16, label %43

; <label>:16                                      ; preds = %10
  %17 = load %struct.ray** %1, align 8
  %18 = load %struct.element** %pe, align 8
  %19 = call i64 @TriPeIntersect(%struct.ray* %17, %struct.element* %18, %struct.irecord* %newhit)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %37

; <label>:21                                      ; preds = %16
  %22 = load i64* %nhits, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* %nhits, align 8
  %24 = getelementptr inbounds %struct.irecord* %newhit, i32 0, i32 0
  %25 = load double* %24, align 8
  %26 = load %struct.irecord** %3, align 8
  %27 = getelementptr inbounds %struct.irecord* %26, i64 0
  %28 = getelementptr inbounds %struct.irecord* %27, i32 0, i32 0
  %29 = load double* %28, align 8
  %30 = fcmp olt double %25, %29
  br i1 %30, label %31, label %36

; <label>:31                                      ; preds = %21
  %32 = load %struct.irecord** %3, align 8
  %33 = getelementptr inbounds %struct.irecord* %32, i64 0
  %34 = bitcast %struct.irecord* %33 to i8*
  %35 = bitcast %struct.irecord* %newhit to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 40, i32 8, i1 false)
  br label %36

; <label>:36                                      ; preds = %31, %21
  br label %37

; <label>:37                                      ; preds = %36, %16
  %38 = load %struct.element** %pe, align 8
  %39 = getelementptr inbounds %struct.element* %38, i32 1
  store %struct.element* %39, %struct.element** %pe, align 8
  br label %40

; <label>:40                                      ; preds = %37
  %41 = load i64* %i, align 8
  %42 = add nsw i64 %41, 1
  store i64 %42, i64* %i, align 8
  br label %10

; <label>:43                                      ; preds = %10
  %44 = load i64* %nhits, align 8
  ret i64 %44
}

; Function Attrs: nounwind uwtable
define internal void @TriTransform(%struct.object* %po, [4 x double]* %xtrans, [4 x double]* %xinvT) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca [4 x double]*, align 8
  %3 = alloca [4 x double]*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %numelems = alloca i64, align 8
  %vindex = alloca i64*, align 8
  %vptr = alloca [3 x double]*, align 8
  %vp = alloca [3 x double]*, align 8
  %nptr = alloca [3 x double]*, align 8
  %np = alloca [3 x double]*, align 8
  %vp1 = alloca [3 x double]*, align 8
  %vp2 = alloca [3 x double]*, align 8
  %vp3 = alloca [3 x double]*, align 8
  %vec1 = alloca [3 x double], align 16
  %vec2 = alloca [3 x double], align 16
  %pnorm = alloca [4 x double], align 16
  %norm = alloca [4 x double], align 16
  %coord = alloca [4 x double], align 16
  %pt = alloca %struct.tri*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store [4 x double]* %xtrans, [4 x double]** %2, align 8
  store [4 x double]* %xinvT, [4 x double]** %3, align 8
  %4 = load %struct.object** %1, align 8
  %5 = getelementptr inbounds %struct.object* %4, i32 0, i32 3
  %6 = load %struct.element** %5, align 8
  store %struct.element* %6, %struct.element** %pe, align 8
  %7 = load %struct.object** %1, align 8
  %8 = getelementptr inbounds %struct.object* %7, i32 0, i32 4
  %9 = load i64* %8, align 8
  store i64 %9, i64* %numelems, align 8
  %10 = load %struct.element** %pe, align 8
  %11 = getelementptr inbounds %struct.element* %10, i32 0, i32 3
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.tri*
  store %struct.tri* %13, %struct.tri** %pt, align 8
  %14 = load %struct.tri** %pt, align 8
  %15 = getelementptr inbounds %struct.tri* %14, i32 0, i32 2
  %16 = load [3 x double]** %15, align 8
  store [3 x double]* %16, [3 x double]** %vptr, align 8
  %17 = load %struct.tri** %pt, align 8
  %18 = getelementptr inbounds %struct.tri* %17, i32 0, i32 3
  %19 = load [3 x double]** %18, align 8
  store [3 x double]* %19, [3 x double]** %nptr, align 8
  %20 = load [3 x double]** %vptr, align 8
  %21 = getelementptr inbounds [3 x double]* %20, i32 0, i64 0
  %22 = load double* %21, align 8
  %23 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %22, double* %23, align 8
  %24 = load [3 x double]** %vptr, align 8
  %25 = getelementptr inbounds [3 x double]* %24, i32 0, i64 1
  %26 = load double* %25, align 8
  %27 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %26, double* %27, align 8
  %28 = load [3 x double]** %vptr, align 8
  %29 = getelementptr inbounds [3 x double]* %28, i32 0, i64 2
  %30 = load double* %29, align 8
  %31 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %30, double* %31, align 8
  %32 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %32, align 8
  br label %33

; <label>:33                                      ; preds = %47, %0
  %34 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %35 = load double* %34, align 8
  %36 = fcmp une double %35, 1.000000e+32
  br i1 %36, label %37, label %45

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %39 = load double* %38, align 8
  %40 = fcmp une double %39, 1.000000e+32
  br i1 %40, label %41, label %45

; <label>:41                                      ; preds = %37
  %42 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %43 = load double* %42, align 8
  %44 = fcmp une double %43, 1.000000e+32
  br label %45

; <label>:45                                      ; preds = %41, %37, %33
  %46 = phi i1 [ false, %37 ], [ false, %33 ], [ %44, %41 ]
  br i1 %46, label %47, label %109

; <label>:47                                      ; preds = %45
  %48 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  %49 = load [4 x double]** %2, align 8
  %50 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0
  call void @VecMatMult(double* %48, [4 x double]* %49, double* %50)
  %51 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  %52 = load double* %51, align 8
  %53 = load [3 x double]** %vptr, align 8
  %54 = getelementptr inbounds [3 x double]* %53, i32 0, i64 0
  store double %52, double* %54, align 8
  %55 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  %56 = load double* %55, align 8
  %57 = load [3 x double]** %vptr, align 8
  %58 = getelementptr inbounds [3 x double]* %57, i32 0, i64 1
  store double %56, double* %58, align 8
  %59 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  %60 = load double* %59, align 8
  %61 = load [3 x double]** %vptr, align 8
  %62 = getelementptr inbounds [3 x double]* %61, i32 0, i64 2
  store double %60, double* %62, align 8
  %63 = load [3 x double]** %vptr, align 8
  %64 = getelementptr inbounds [3 x double]* %63, i32 1
  store [3 x double]* %64, [3 x double]** %vptr, align 8
  %65 = load [3 x double]** %vptr, align 8
  %66 = getelementptr inbounds [3 x double]* %65, i32 0, i64 0
  %67 = load double* %66, align 8
  %68 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0
  store double %67, double* %68, align 8
  %69 = load [3 x double]** %vptr, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 1
  %71 = load double* %70, align 8
  %72 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1
  store double %71, double* %72, align 8
  %73 = load [3 x double]** %vptr, align 8
  %74 = getelementptr inbounds [3 x double]* %73, i32 0, i64 2
  %75 = load double* %74, align 8
  %76 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2
  store double %75, double* %76, align 8
  %77 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 3
  store double 1.000000e+00, double* %77, align 8
  %78 = load [3 x double]** %nptr, align 8
  %79 = getelementptr inbounds [3 x double]* %78, i32 0, i64 0
  %80 = load double* %79, align 8
  %81 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  store double %80, double* %81, align 8
  %82 = load [3 x double]** %nptr, align 8
  %83 = getelementptr inbounds [3 x double]* %82, i32 0, i64 1
  %84 = load double* %83, align 8
  %85 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  store double %84, double* %85, align 8
  %86 = load [3 x double]** %nptr, align 8
  %87 = getelementptr inbounds [3 x double]* %86, i32 0, i64 2
  %88 = load double* %87, align 8
  %89 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  store double %88, double* %89, align 8
  %90 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 3
  store double 0.000000e+00, double* %90, align 8
  %91 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  %92 = load [4 x double]** %3, align 8
  %93 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  call void @VecMatMult(double* %91, [4 x double]* %92, double* %93)
  %94 = getelementptr inbounds [4 x double]* %norm, i32 0, i32 0
  call void @VecNorm(double* %94)
  %95 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %96 = load double* %95, align 8
  %97 = load [3 x double]** %nptr, align 8
  %98 = getelementptr inbounds [3 x double]* %97, i32 0, i64 0
  store double %96, double* %98, align 8
  %99 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %100 = load double* %99, align 8
  %101 = load [3 x double]** %nptr, align 8
  %102 = getelementptr inbounds [3 x double]* %101, i32 0, i64 1
  store double %100, double* %102, align 8
  %103 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %104 = load double* %103, align 8
  %105 = load [3 x double]** %nptr, align 8
  %106 = getelementptr inbounds [3 x double]* %105, i32 0, i64 2
  store double %104, double* %106, align 8
  %107 = load [3 x double]** %nptr, align 8
  %108 = getelementptr inbounds [3 x double]* %107, i32 1
  store [3 x double]* %108, [3 x double]** %nptr, align 8
  br label %33

; <label>:109                                     ; preds = %45
  store i64 0, i64* %i, align 8
  br label %110

; <label>:110                                     ; preds = %450, %109
  %111 = load i64* %i, align 8
  %112 = load i64* %numelems, align 8
  %113 = icmp slt i64 %111, %112
  br i1 %113, label %114, label %453

; <label>:114                                     ; preds = %110
  %115 = load %struct.element** %pe, align 8
  %116 = getelementptr inbounds %struct.element* %115, i32 0, i32 3
  %117 = load i8** %116, align 8
  %118 = bitcast i8* %117 to %struct.tri*
  store %struct.tri* %118, %struct.tri** %pt, align 8
  %119 = load %struct.tri** %pt, align 8
  %120 = getelementptr inbounds %struct.tri* %119, i32 0, i32 4
  %121 = getelementptr inbounds [3 x i64]* %120, i32 0, i32 0
  store i64* %121, i64** %vindex, align 8
  %122 = load %struct.tri** %pt, align 8
  %123 = getelementptr inbounds %struct.tri* %122, i32 0, i32 2
  %124 = load [3 x double]** %123, align 8
  store [3 x double]* %124, [3 x double]** %vptr, align 8
  %125 = load [3 x double]** %vptr, align 8
  %126 = load i64** %vindex, align 8
  %127 = load i64* %126, align 8
  %128 = getelementptr inbounds [3 x double]* %125, i64 %127
  store [3 x double]* %128, [3 x double]** %vp1, align 8
  %129 = load i64** %vindex, align 8
  %130 = getelementptr inbounds i64* %129, i32 1
  store i64* %130, i64** %vindex, align 8
  %131 = load [3 x double]** %vptr, align 8
  %132 = load i64** %vindex, align 8
  %133 = load i64* %132, align 8
  %134 = getelementptr inbounds [3 x double]* %131, i64 %133
  store [3 x double]* %134, [3 x double]** %vp2, align 8
  %135 = load [3 x double]** %vp2, align 8
  %136 = getelementptr inbounds [3 x double]* %135, i32 0, i64 0
  %137 = load double* %136, align 8
  %138 = load [3 x double]** %vp1, align 8
  %139 = getelementptr inbounds [3 x double]* %138, i32 0, i64 0
  %140 = load double* %139, align 8
  %141 = fsub double %137, %140
  %142 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 0
  store double %141, double* %142, align 8
  %143 = load [3 x double]** %vp2, align 8
  %144 = getelementptr inbounds [3 x double]* %143, i32 0, i64 1
  %145 = load double* %144, align 8
  %146 = load [3 x double]** %vp1, align 8
  %147 = getelementptr inbounds [3 x double]* %146, i32 0, i64 1
  %148 = load double* %147, align 8
  %149 = fsub double %145, %148
  %150 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 1
  store double %149, double* %150, align 8
  %151 = load [3 x double]** %vp2, align 8
  %152 = getelementptr inbounds [3 x double]* %151, i32 0, i64 2
  %153 = load double* %152, align 8
  %154 = load [3 x double]** %vp1, align 8
  %155 = getelementptr inbounds [3 x double]* %154, i32 0, i64 2
  %156 = load double* %155, align 8
  %157 = fsub double %153, %156
  %158 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 2
  store double %157, double* %158, align 8
  %159 = load i64** %vindex, align 8
  %160 = getelementptr inbounds i64* %159, i32 1
  store i64* %160, i64** %vindex, align 8
  %161 = load [3 x double]** %vptr, align 8
  %162 = load i64** %vindex, align 8
  %163 = load i64* %162, align 8
  %164 = getelementptr inbounds [3 x double]* %161, i64 %163
  store [3 x double]* %164, [3 x double]** %vp3, align 8
  %165 = load [3 x double]** %vp3, align 8
  %166 = getelementptr inbounds [3 x double]* %165, i32 0, i64 0
  %167 = load double* %166, align 8
  %168 = load [3 x double]** %vp1, align 8
  %169 = getelementptr inbounds [3 x double]* %168, i32 0, i64 0
  %170 = load double* %169, align 8
  %171 = fsub double %167, %170
  %172 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 0
  store double %171, double* %172, align 8
  %173 = load [3 x double]** %vp3, align 8
  %174 = getelementptr inbounds [3 x double]* %173, i32 0, i64 1
  %175 = load double* %174, align 8
  %176 = load [3 x double]** %vp1, align 8
  %177 = getelementptr inbounds [3 x double]* %176, i32 0, i64 1
  %178 = load double* %177, align 8
  %179 = fsub double %175, %178
  %180 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 1
  store double %179, double* %180, align 8
  %181 = load [3 x double]** %vp3, align 8
  %182 = getelementptr inbounds [3 x double]* %181, i32 0, i64 2
  %183 = load double* %182, align 8
  %184 = load [3 x double]** %vp1, align 8
  %185 = getelementptr inbounds [3 x double]* %184, i32 0, i64 2
  %186 = load double* %185, align 8
  %187 = fsub double %183, %186
  %188 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 2
  store double %187, double* %188, align 8
  %189 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 1
  %190 = load double* %189, align 8
  %191 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 2
  %192 = load double* %191, align 8
  %193 = fmul double %190, %192
  %194 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 2
  %195 = load double* %194, align 8
  %196 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 1
  %197 = load double* %196, align 8
  %198 = fmul double %195, %197
  %199 = fsub double %193, %198
  %200 = load %struct.tri** %pt, align 8
  %201 = getelementptr inbounds %struct.tri* %200, i32 0, i32 0
  %202 = getelementptr inbounds [3 x double]* %201, i32 0, i64 0
  store double %199, double* %202, align 8
  %203 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 2
  %204 = load double* %203, align 8
  %205 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 0
  %206 = load double* %205, align 8
  %207 = fmul double %204, %206
  %208 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 0
  %209 = load double* %208, align 8
  %210 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 2
  %211 = load double* %210, align 8
  %212 = fmul double %209, %211
  %213 = fsub double %207, %212
  %214 = load %struct.tri** %pt, align 8
  %215 = getelementptr inbounds %struct.tri* %214, i32 0, i32 0
  %216 = getelementptr inbounds [3 x double]* %215, i32 0, i64 1
  store double %213, double* %216, align 8
  %217 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 0
  %218 = load double* %217, align 8
  %219 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 1
  %220 = load double* %219, align 8
  %221 = fmul double %218, %220
  %222 = getelementptr inbounds [3 x double]* %vec1, i32 0, i64 1
  %223 = load double* %222, align 8
  %224 = getelementptr inbounds [3 x double]* %vec2, i32 0, i64 0
  %225 = load double* %224, align 8
  %226 = fmul double %223, %225
  %227 = fsub double %221, %226
  %228 = load %struct.tri** %pt, align 8
  %229 = getelementptr inbounds %struct.tri* %228, i32 0, i32 0
  %230 = getelementptr inbounds [3 x double]* %229, i32 0, i64 2
  store double %227, double* %230, align 8
  %231 = load %struct.tri** %pt, align 8
  %232 = getelementptr inbounds %struct.tri* %231, i32 0, i32 2
  %233 = load [3 x double]** %232, align 8
  %234 = load %struct.tri** %pt, align 8
  %235 = getelementptr inbounds %struct.tri* %234, i32 0, i32 4
  %236 = getelementptr inbounds [3 x i64]* %235, i32 0, i32 0
  %237 = load i64* %236, align 8
  %238 = getelementptr inbounds [3 x double]* %233, i64 %237
  store [3 x double]* %238, [3 x double]** %vp, align 8
  %239 = load %struct.tri** %pt, align 8
  %240 = getelementptr inbounds %struct.tri* %239, i32 0, i32 0
  %241 = getelementptr inbounds [3 x double]* %240, i32 0, i64 0
  %242 = load double* %241, align 8
  %243 = load [3 x double]** %vp, align 8
  %244 = getelementptr inbounds [3 x double]* %243, i32 0, i64 0
  %245 = load double* %244, align 8
  %246 = fmul double %242, %245
  %247 = load %struct.tri** %pt, align 8
  %248 = getelementptr inbounds %struct.tri* %247, i32 0, i32 0
  %249 = getelementptr inbounds [3 x double]* %248, i32 0, i64 1
  %250 = load double* %249, align 8
  %251 = load [3 x double]** %vp, align 8
  %252 = getelementptr inbounds [3 x double]* %251, i32 0, i64 1
  %253 = load double* %252, align 8
  %254 = fmul double %250, %253
  %255 = fadd double %246, %254
  %256 = load %struct.tri** %pt, align 8
  %257 = getelementptr inbounds %struct.tri* %256, i32 0, i32 0
  %258 = getelementptr inbounds [3 x double]* %257, i32 0, i64 2
  %259 = load double* %258, align 8
  %260 = load [3 x double]** %vp, align 8
  %261 = getelementptr inbounds [3 x double]* %260, i32 0, i64 2
  %262 = load double* %261, align 8
  %263 = fmul double %259, %262
  %264 = fadd double %255, %263
  %265 = fsub double -0.000000e+00, %264
  %266 = load %struct.tri** %pt, align 8
  %267 = getelementptr inbounds %struct.tri* %266, i32 0, i32 1
  store double %265, double* %267, align 8
  %268 = load %struct.tri** %pt, align 8
  %269 = getelementptr inbounds %struct.tri* %268, i32 0, i32 6
  %270 = load i64* %269, align 8
  %271 = icmp ne i64 %270, 0
  br i1 %271, label %272, label %356

; <label>:272                                     ; preds = %114
  %273 = load %struct.tri** %pt, align 8
  %274 = getelementptr inbounds %struct.tri* %273, i32 0, i32 4
  %275 = getelementptr inbounds [3 x i64]* %274, i32 0, i32 0
  store i64* %275, i64** %vindex, align 8
  %276 = load %struct.tri** %pt, align 8
  %277 = getelementptr inbounds %struct.tri* %276, i32 0, i32 3
  %278 = load [3 x double]** %277, align 8
  %279 = load i64** %vindex, align 8
  %280 = load i64* %279, align 8
  %281 = getelementptr inbounds [3 x double]* %278, i64 %280
  store [3 x double]* %281, [3 x double]** %np, align 8
  %282 = load %struct.tri** %pt, align 8
  %283 = getelementptr inbounds %struct.tri* %282, i32 0, i32 0
  %284 = getelementptr inbounds [3 x double]* %283, i32 0, i64 0
  %285 = load double* %284, align 8
  %286 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 0
  store double %285, double* %286, align 8
  %287 = load %struct.tri** %pt, align 8
  %288 = getelementptr inbounds %struct.tri* %287, i32 0, i32 0
  %289 = getelementptr inbounds [3 x double]* %288, i32 0, i64 1
  %290 = load double* %289, align 8
  %291 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 1
  store double %290, double* %291, align 8
  %292 = load %struct.tri** %pt, align 8
  %293 = getelementptr inbounds %struct.tri* %292, i32 0, i32 0
  %294 = getelementptr inbounds [3 x double]* %293, i32 0, i64 2
  %295 = load double* %294, align 8
  %296 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 2
  store double %295, double* %296, align 8
  %297 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i32 0
  call void @VecNorm(double* %297)
  %298 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 0
  %299 = load double* %298, align 8
  %300 = load [3 x double]** %np, align 8
  %301 = getelementptr inbounds [3 x double]* %300, i32 0, i64 0
  %302 = load double* %301, align 8
  %303 = fmul double %299, %302
  %304 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 1
  %305 = load double* %304, align 8
  %306 = load [3 x double]** %np, align 8
  %307 = getelementptr inbounds [3 x double]* %306, i32 0, i64 1
  %308 = load double* %307, align 8
  %309 = fmul double %305, %308
  %310 = fadd double %303, %309
  %311 = getelementptr inbounds [4 x double]* %pnorm, i32 0, i64 2
  %312 = load double* %311, align 8
  %313 = load [3 x double]** %np, align 8
  %314 = getelementptr inbounds [3 x double]* %313, i32 0, i64 2
  %315 = load double* %314, align 8
  %316 = fmul double %312, %315
  %317 = fadd double %310, %316
  %318 = fcmp oge double %317, 0.000000e+00
  br i1 %318, label %319, label %322

; <label>:319                                     ; preds = %272
  %320 = load %struct.tri** %pt, align 8
  %321 = getelementptr inbounds %struct.tri* %320, i32 0, i32 7
  store i64 1, i64* %321, align 8
  br label %355

; <label>:322                                     ; preds = %272
  %323 = load %struct.tri** %pt, align 8
  %324 = getelementptr inbounds %struct.tri* %323, i32 0, i32 7
  store i64 2, i64* %324, align 8
  %325 = load %struct.tri** %pt, align 8
  %326 = getelementptr inbounds %struct.tri* %325, i32 0, i32 0
  %327 = getelementptr inbounds [3 x double]* %326, i32 0, i64 0
  %328 = load double* %327, align 8
  %329 = fmul double -1.000000e+00, %328
  %330 = load %struct.tri** %pt, align 8
  %331 = getelementptr inbounds %struct.tri* %330, i32 0, i32 0
  %332 = getelementptr inbounds [3 x double]* %331, i32 0, i64 0
  store double %329, double* %332, align 8
  %333 = load %struct.tri** %pt, align 8
  %334 = getelementptr inbounds %struct.tri* %333, i32 0, i32 0
  %335 = getelementptr inbounds [3 x double]* %334, i32 0, i64 1
  %336 = load double* %335, align 8
  %337 = fmul double -1.000000e+00, %336
  %338 = load %struct.tri** %pt, align 8
  %339 = getelementptr inbounds %struct.tri* %338, i32 0, i32 0
  %340 = getelementptr inbounds [3 x double]* %339, i32 0, i64 1
  store double %337, double* %340, align 8
  %341 = load %struct.tri** %pt, align 8
  %342 = getelementptr inbounds %struct.tri* %341, i32 0, i32 0
  %343 = getelementptr inbounds [3 x double]* %342, i32 0, i64 2
  %344 = load double* %343, align 8
  %345 = fmul double -1.000000e+00, %344
  %346 = load %struct.tri** %pt, align 8
  %347 = getelementptr inbounds %struct.tri* %346, i32 0, i32 0
  %348 = getelementptr inbounds [3 x double]* %347, i32 0, i64 2
  store double %345, double* %348, align 8
  %349 = load %struct.tri** %pt, align 8
  %350 = getelementptr inbounds %struct.tri* %349, i32 0, i32 1
  %351 = load double* %350, align 8
  %352 = fsub double -0.000000e+00, %351
  %353 = load %struct.tri** %pt, align 8
  %354 = getelementptr inbounds %struct.tri* %353, i32 0, i32 1
  store double %352, double* %354, align 8
  br label %355

; <label>:355                                     ; preds = %322, %319
  br label %356

; <label>:356                                     ; preds = %355, %114
  %357 = load %struct.tri** %pt, align 8
  %358 = getelementptr inbounds %struct.tri* %357, i32 0, i32 0
  %359 = getelementptr inbounds [3 x double]* %358, i32 0, i64 0
  %360 = load double* %359, align 8
  %361 = fcmp ogt double %360, 0.000000e+00
  br i1 %361, label %362, label %367

; <label>:362                                     ; preds = %356
  %363 = load %struct.tri** %pt, align 8
  %364 = getelementptr inbounds %struct.tri* %363, i32 0, i32 0
  %365 = getelementptr inbounds [3 x double]* %364, i32 0, i64 0
  %366 = load double* %365, align 8
  br label %373

; <label>:367                                     ; preds = %356
  %368 = load %struct.tri** %pt, align 8
  %369 = getelementptr inbounds %struct.tri* %368, i32 0, i32 0
  %370 = getelementptr inbounds [3 x double]* %369, i32 0, i64 0
  %371 = load double* %370, align 8
  %372 = fsub double -0.000000e+00, %371
  br label %373

; <label>:373                                     ; preds = %367, %362
  %374 = phi double [ %366, %362 ], [ %372, %367 ]
  %375 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  store double %374, double* %375, align 8
  %376 = load %struct.tri** %pt, align 8
  %377 = getelementptr inbounds %struct.tri* %376, i32 0, i32 0
  %378 = getelementptr inbounds [3 x double]* %377, i32 0, i64 1
  %379 = load double* %378, align 8
  %380 = fcmp ogt double %379, 0.000000e+00
  br i1 %380, label %381, label %386

; <label>:381                                     ; preds = %373
  %382 = load %struct.tri** %pt, align 8
  %383 = getelementptr inbounds %struct.tri* %382, i32 0, i32 0
  %384 = getelementptr inbounds [3 x double]* %383, i32 0, i64 1
  %385 = load double* %384, align 8
  br label %392

; <label>:386                                     ; preds = %373
  %387 = load %struct.tri** %pt, align 8
  %388 = getelementptr inbounds %struct.tri* %387, i32 0, i32 0
  %389 = getelementptr inbounds [3 x double]* %388, i32 0, i64 1
  %390 = load double* %389, align 8
  %391 = fsub double -0.000000e+00, %390
  br label %392

; <label>:392                                     ; preds = %386, %381
  %393 = phi double [ %385, %381 ], [ %391, %386 ]
  %394 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  store double %393, double* %394, align 8
  %395 = load %struct.tri** %pt, align 8
  %396 = getelementptr inbounds %struct.tri* %395, i32 0, i32 0
  %397 = getelementptr inbounds [3 x double]* %396, i32 0, i64 2
  %398 = load double* %397, align 8
  %399 = fcmp ogt double %398, 0.000000e+00
  br i1 %399, label %400, label %405

; <label>:400                                     ; preds = %392
  %401 = load %struct.tri** %pt, align 8
  %402 = getelementptr inbounds %struct.tri* %401, i32 0, i32 0
  %403 = getelementptr inbounds [3 x double]* %402, i32 0, i64 2
  %404 = load double* %403, align 8
  br label %411

; <label>:405                                     ; preds = %392
  %406 = load %struct.tri** %pt, align 8
  %407 = getelementptr inbounds %struct.tri* %406, i32 0, i32 0
  %408 = getelementptr inbounds [3 x double]* %407, i32 0, i64 2
  %409 = load double* %408, align 8
  %410 = fsub double -0.000000e+00, %409
  br label %411

; <label>:411                                     ; preds = %405, %400
  %412 = phi double [ %404, %400 ], [ %410, %405 ]
  %413 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  store double %412, double* %413, align 8
  %414 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %415 = load double* %414, align 8
  %416 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %417 = load double* %416, align 8
  %418 = fcmp oge double %415, %417
  br i1 %418, label %419, label %428

; <label>:419                                     ; preds = %411
  %420 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %421 = load double* %420, align 8
  %422 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %423 = load double* %422, align 8
  %424 = fcmp oge double %421, %423
  br i1 %424, label %425, label %428

; <label>:425                                     ; preds = %419
  %426 = load %struct.tri** %pt, align 8
  %427 = getelementptr inbounds %struct.tri* %426, i32 0, i32 5
  store i64 1, i64* %427, align 8
  br label %447

; <label>:428                                     ; preds = %419, %411
  %429 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %430 = load double* %429, align 8
  %431 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 0
  %432 = load double* %431, align 8
  %433 = fcmp oge double %430, %432
  br i1 %433, label %434, label %443

; <label>:434                                     ; preds = %428
  %435 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 1
  %436 = load double* %435, align 8
  %437 = getelementptr inbounds [4 x double]* %norm, i32 0, i64 2
  %438 = load double* %437, align 8
  %439 = fcmp oge double %436, %438
  br i1 %439, label %440, label %443

; <label>:440                                     ; preds = %434
  %441 = load %struct.tri** %pt, align 8
  %442 = getelementptr inbounds %struct.tri* %441, i32 0, i32 5
  store i64 2, i64* %442, align 8
  br label %446

; <label>:443                                     ; preds = %434, %428
  %444 = load %struct.tri** %pt, align 8
  %445 = getelementptr inbounds %struct.tri* %444, i32 0, i32 5
  store i64 3, i64* %445, align 8
  br label %446

; <label>:446                                     ; preds = %443, %440
  br label %447

; <label>:447                                     ; preds = %446, %425
  %448 = load %struct.element** %pe, align 8
  %449 = getelementptr inbounds %struct.element* %448, i32 1
  store %struct.element* %449, %struct.element** %pe, align 8
  br label %450

; <label>:450                                     ; preds = %447
  %451 = load i64* %i, align 8
  %452 = add nsw i64 %451, 1
  store i64 %452, i64* %i, align 8
  br label %110

; <label>:453                                     ; preds = %110
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @TriRead(%struct.object* %po, %struct._IO_FILE* %pf) {
  %1 = alloca %struct.object*, align 8
  %2 = alloca %struct._IO_FILE*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %instat = alloca i64, align 8
  %totalverts = alloca i64, align 8
  %normstr = alloca [5 x i8], align 1
  %pnormals = alloca i64, align 8
  %vnormals = alloca i64, align 8
  %vlist = alloca [3 x double]*, align 8
  %vptr = alloca [3 x double]*, align 8
  %nlist = alloca [3 x double]*, align 8
  %nptr = alloca [3 x double]*, align 8
  %pt = alloca %struct.tri*, align 8
  %pe = alloca %struct.element*, align 8
  store %struct.object* %po, %struct.object** %1, align 8
  store %struct._IO_FILE* %pf, %struct._IO_FILE** %2, align 8
  %3 = load %struct.object** %1, align 8
  %4 = getelementptr inbounds %struct.object* %3, i32 0, i32 3
  %5 = load %struct.element** %4, align 8
  store %struct.element* %5, %struct.element** %pe, align 8
  %6 = load %struct._IO_FILE** %2, align 8
  %7 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8]* @.str.4.433, i32 0, i32 0), i64* %totalverts)
  %8 = sext i32 %7 to i64
  store i64 %8, i64* %instat, align 8
  %9 = load i64* %instat, align 8
  %10 = icmp ne i64 %9, 1
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.5.434, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:13                                      ; preds = %0
  %14 = load %struct.object** %1, align 8
  %15 = getelementptr inbounds %struct.object* %14, i32 0, i32 4
  %16 = load i64* %15, align 8
  %17 = mul i64 96, %16
  %18 = call i8* @GlobalMalloc(i64 %17, i8* getelementptr inbounds ([6 x i8]* @.str.6.435, i32 0, i32 0))
  %19 = bitcast i8* %18 to %struct.tri*
  store %struct.tri* %19, %struct.tri** %pt, align 8
  %20 = load i64* %totalverts, align 8
  %21 = add nsw i64 %20, 1
  %22 = mul i64 24, %21
  %23 = call i8* @GlobalMalloc(i64 %22, i8* getelementptr inbounds ([6 x i8]* @.str.6.435, i32 0, i32 0))
  %24 = bitcast i8* %23 to [3 x double]*
  store [3 x double]* %24, [3 x double]** %vlist, align 8
  %25 = load i64* %totalverts, align 8
  %26 = mul i64 24, %25
  %27 = call i8* @GlobalMalloc(i64 %26, i8* getelementptr inbounds ([6 x i8]* @.str.6.435, i32 0, i32 0))
  %28 = bitcast i8* %27 to [3 x double]*
  store [3 x double]* %28, [3 x double]** %nlist, align 8
  %29 = load [3 x double]** %vlist, align 8
  store [3 x double]* %29, [3 x double]** %vptr, align 8
  %30 = load [3 x double]** %nlist, align 8
  store [3 x double]* %30, [3 x double]** %nptr, align 8
  %31 = load %struct._IO_FILE** %2, align 8
  %32 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i32 0
  %33 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([4 x i8]* @.str.7.436, i32 0, i32 0), i8* %32)
  %34 = sext i32 %33 to i64
  store i64 %34, i64* %instat, align 8
  %35 = load i64* %instat, align 8
  %36 = icmp ne i64 %35, 1
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %13
  %38 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([42 x i8]* @.str.8.437, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:39                                      ; preds = %13
  %40 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i64 2
  %41 = load i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %42, 121
  %44 = select i1 %43, i32 1, i32 0
  %45 = sext i32 %44 to i64
  store i64 %45, i64* %pnormals, align 8
  %46 = load %struct._IO_FILE** %2, align 8
  %47 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i32 0
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([4 x i8]* @.str.7.436, i32 0, i32 0), i8* %47)
  %49 = sext i32 %48 to i64
  store i64 %49, i64* %instat, align 8
  %50 = load i64* %instat, align 8
  %51 = icmp ne i64 %50, 1
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %39
  %53 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([44 x i8]* @.str.9.438, i32 0, i32 0))
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:54                                      ; preds = %39
  %55 = getelementptr inbounds [5 x i8]* %normstr, i32 0, i64 2
  %56 = load i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 121
  %59 = select i1 %58, i32 1, i32 0
  %60 = sext i32 %59 to i64
  store i64 %60, i64* %vnormals, align 8
  store i64 0, i64* %i, align 8
  br label %61

; <label>:61                                      ; preds = %104, %54
  %62 = load i64* %i, align 8
  %63 = load i64* %totalverts, align 8
  %64 = icmp slt i64 %62, %63
  br i1 %64, label %65, label %107

; <label>:65                                      ; preds = %61
  %66 = load %struct._IO_FILE** %2, align 8
  %67 = load [3 x double]** %vptr, align 8
  %68 = getelementptr inbounds [3 x double]* %67, i32 0, i64 0
  %69 = load [3 x double]** %vptr, align 8
  %70 = getelementptr inbounds [3 x double]* %69, i32 0, i64 1
  %71 = load [3 x double]** %vptr, align 8
  %72 = getelementptr inbounds [3 x double]* %71, i32 0, i64 2
  %73 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([12 x i8]* @.str.10.439, i32 0, i32 0), double* %68, double* %70, double* %72)
  %74 = sext i32 %73 to i64
  store i64 %74, i64* %instat, align 8
  %75 = load i64* %instat, align 8
  %76 = icmp ne i64 %75, 3
  br i1 %76, label %77, label %80

; <label>:77                                      ; preds = %65
  %78 = load i64* %i, align 8
  %79 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([31 x i8]* @.str.11.440, i32 0, i32 0), i64 %78)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:80                                      ; preds = %65
  %81 = load i64* %vnormals, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %101

; <label>:83                                      ; preds = %80
  %84 = load %struct._IO_FILE** %2, align 8
  %85 = load [3 x double]** %nptr, align 8
  %86 = getelementptr inbounds [3 x double]* %85, i32 0, i64 0
  %87 = load [3 x double]** %nptr, align 8
  %88 = getelementptr inbounds [3 x double]* %87, i32 0, i64 1
  %89 = load [3 x double]** %nptr, align 8
  %90 = getelementptr inbounds [3 x double]* %89, i32 0, i64 2
  %91 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([12 x i8]* @.str.10.439, i32 0, i32 0), double* %86, double* %88, double* %90)
  %92 = sext i32 %91 to i64
  store i64 %92, i64* %instat, align 8
  %93 = load i64* %instat, align 8
  %94 = icmp ne i64 %93, 3
  br i1 %94, label %95, label %98

; <label>:95                                      ; preds = %83
  %96 = load i64* %i, align 8
  %97 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([38 x i8]* @.str.12.441, i32 0, i32 0), i64 %96)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:98                                      ; preds = %83
  %99 = load [3 x double]** %nptr, align 8
  %100 = getelementptr inbounds [3 x double]* %99, i32 1
  store [3 x double]* %100, [3 x double]** %nptr, align 8
  br label %101

; <label>:101                                     ; preds = %98, %80
  %102 = load [3 x double]** %vptr, align 8
  %103 = getelementptr inbounds [3 x double]* %102, i32 1
  store [3 x double]* %103, [3 x double]** %vptr, align 8
  br label %104

; <label>:104                                     ; preds = %101
  %105 = load i64* %i, align 8
  %106 = add nsw i64 %105, 1
  store i64 %106, i64* %i, align 8
  br label %61

; <label>:107                                     ; preds = %61
  %108 = load [3 x double]** %vptr, align 8
  %109 = getelementptr inbounds [3 x double]* %108, i32 0, i64 0
  store double 1.000000e+32, double* %109, align 8
  %110 = load [3 x double]** %vptr, align 8
  %111 = getelementptr inbounds [3 x double]* %110, i32 0, i64 1
  store double 1.000000e+32, double* %111, align 8
  %112 = load [3 x double]** %vptr, align 8
  %113 = getelementptr inbounds [3 x double]* %112, i32 0, i64 2
  store double 1.000000e+32, double* %113, align 8
  store i64 0, i64* %i, align 8
  br label %114

; <label>:114                                     ; preds = %183, %107
  %115 = load i64* %i, align 8
  %116 = load %struct.object** %1, align 8
  %117 = getelementptr inbounds %struct.object* %116, i32 0, i32 4
  %118 = load i64* %117, align 8
  %119 = icmp slt i64 %115, %118
  br i1 %119, label %120, label %186

; <label>:120                                     ; preds = %114
  %121 = load i64* %pnormals, align 8
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %142

; <label>:123                                     ; preds = %120
  %124 = load %struct._IO_FILE** %2, align 8
  %125 = load %struct.tri** %pt, align 8
  %126 = getelementptr inbounds %struct.tri* %125, i32 0, i32 0
  %127 = getelementptr inbounds [3 x double]* %126, i32 0, i64 0
  %128 = load %struct.tri** %pt, align 8
  %129 = getelementptr inbounds %struct.tri* %128, i32 0, i32 0
  %130 = getelementptr inbounds [3 x double]* %129, i32 0, i64 1
  %131 = load %struct.tri** %pt, align 8
  %132 = getelementptr inbounds %struct.tri* %131, i32 0, i32 0
  %133 = getelementptr inbounds [3 x double]* %132, i32 0, i64 2
  %134 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([13 x i8]* @.str.13.442, i32 0, i32 0), double* %127, double* %130, double* %133)
  %135 = sext i32 %134 to i64
  store i64 %135, i64* %instat, align 8
  %136 = load i64* %instat, align 8
  %137 = icmp ne i64 %136, 3
  br i1 %137, label %138, label %141

; <label>:138                                     ; preds = %123
  %139 = load i64* %i, align 8
  %140 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([36 x i8]* @.str.14.443, i32 0, i32 0), i64 %139)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:141                                     ; preds = %123
  br label %142

; <label>:142                                     ; preds = %141, %120
  %143 = load [3 x double]** %vlist, align 8
  %144 = load %struct.tri** %pt, align 8
  %145 = getelementptr inbounds %struct.tri* %144, i32 0, i32 2
  store [3 x double]* %143, [3 x double]** %145, align 8
  %146 = load [3 x double]** %nlist, align 8
  %147 = load %struct.tri** %pt, align 8
  %148 = getelementptr inbounds %struct.tri* %147, i32 0, i32 3
  store [3 x double]* %146, [3 x double]** %148, align 8
  %149 = load i64* %vnormals, align 8
  %150 = load %struct.tri** %pt, align 8
  %151 = getelementptr inbounds %struct.tri* %150, i32 0, i32 6
  store i64 %149, i64* %151, align 8
  %152 = load %struct._IO_FILE** %2, align 8
  %153 = load %struct.tri** %pt, align 8
  %154 = getelementptr inbounds %struct.tri* %153, i32 0, i32 4
  %155 = getelementptr inbounds [3 x i64]* %154, i32 0, i64 0
  %156 = load %struct.tri** %pt, align 8
  %157 = getelementptr inbounds %struct.tri* %156, i32 0, i32 4
  %158 = getelementptr inbounds [3 x i64]* %157, i32 0, i64 1
  %159 = load %struct.tri** %pt, align 8
  %160 = getelementptr inbounds %struct.tri* %159, i32 0, i32 4
  %161 = getelementptr inbounds [3 x i64]* %160, i32 0, i64 2
  %162 = call i32 (%struct._IO_FILE*, i8*, ...) *@fscanf(%struct._IO_FILE* %152, i8* getelementptr inbounds ([12 x i8]* @.str.15.444, i32 0, i32 0), i64* %155, i64* %158, i64* %161)
  %163 = sext i32 %162 to i64
  store i64 %163, i64* %instat, align 8
  %164 = load i64* %instat, align 8
  %165 = icmp ne i64 %164, 3
  br i1 %165, label %166, label %169

; <label>:166                                     ; preds = %142
  %167 = load i64* %i, align 8
  %168 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([37 x i8]* @.str.16.445, i32 0, i32 0), i64 %167)
  call void @exit(i32 -1)
  br label %UnifiedUnreachableBlock

; <label>:169                                     ; preds = %142
  %170 = load %struct.tri** %pt, align 8
  %171 = bitcast %struct.tri* %170 to i8*
  %172 = load %struct.element** %pe, align 8
  %173 = getelementptr inbounds %struct.element* %172, i32 0, i32 3
  store i8* %171, i8** %173, align 8
  %174 = load %struct.object** %1, align 8
  %175 = load %struct.element** %pe, align 8
  %176 = getelementptr inbounds %struct.element* %175, i32 0, i32 2
  store %struct.object* %174, %struct.object** %176, align 8
  %177 = load %struct.element** %pe, align 8
  %178 = load %struct.tri** %pt, align 8
  call void @TriElementBoundBox(%struct.element* %177, %struct.tri* %178)
  %179 = load %struct.tri** %pt, align 8
  %180 = getelementptr inbounds %struct.tri* %179, i32 1
  store %struct.tri* %180, %struct.tri** %pt, align 8
  %181 = load %struct.element** %pe, align 8
  %182 = getelementptr inbounds %struct.element* %181, i32 1
  store %struct.element* %182, %struct.element** %pe, align 8
  br label %183

; <label>:183                                     ; preds = %169
  %184 = load i64* %i, align 8
  %185 = add nsw i64 %184, 1
  store i64 %185, i64* %i, align 8
  br label %114

; <label>:186                                     ; preds = %114
  %187 = load i64* %vnormals, align 8
  %188 = icmp ne i64 %187, 0
  br i1 %188, label %192, label %189

; <label>:189                                     ; preds = %186
  %190 = load [3 x double]** %nlist, align 8
  %191 = bitcast [3 x double]* %190 to i8*
  call void @GlobalFree(i8* %191)
  br label %192

; <label>:192                                     ; preds = %189, %186
  ret void

UnifiedUnreachableBlock:                          ; preds = %166, %138, %95, %77, %52, %37, %11
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @PutJob(i64 %xs, i64 %ys, i64 %xe, i64 %ye, i64 %xbe, i64 %ybe, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %xb_addr = alloca i64, align 8
  %yb_addr = alloca i64, align 8
  %xb_end = alloca i64, align 8
  %yb_end = alloca i64, align 8
  %xb_size = alloca i64, align 8
  %yb_size = alloca i64, align 8
  %wpentry = alloca %struct.wpjob*, align 8
  store i64 %xs, i64* %1, align 8
  store i64 %ys, i64* %2, align 8
  store i64 %xe, i64* %3, align 8
  store i64 %ye, i64* %4, align 8
  store i64 %xbe, i64* %5, align 8
  store i64 %ybe, i64* %6, align 8
  store i64 %pid, i64* %7, align 8
  %8 = load i64* %1, align 8
  store i64 %8, i64* %xb_addr, align 8
  %9 = load i64* %2, align 8
  store i64 %9, i64* %yb_addr, align 8
  %10 = load i64* %xb_addr, align 8
  %11 = load i64* %3, align 8
  %12 = add nsw i64 %10, %11
  %13 = sub nsw i64 %12, 1
  store i64 %13, i64* %xb_end, align 8
  %14 = load i64* %yb_addr, align 8
  %15 = load i64* %4, align 8
  %16 = add nsw i64 %14, %15
  %17 = sub nsw i64 %16, 1
  store i64 %17, i64* %yb_end, align 8
  store i64 0, i64* %i, align 8
  br label %18

; <label>:18                                      ; preds = %108, %0
  %19 = load i64* %i, align 8
  %20 = load i64* %4, align 8
  %21 = icmp slt i64 %19, %20
  br i1 %21, label %22, label %112

; <label>:22                                      ; preds = %18
  store i64 0, i64* %j, align 8
  br label %23

; <label>:23                                      ; preds = %99, %22
  %24 = load i64* %j, align 8
  %25 = load i64* %3, align 8
  %26 = icmp slt i64 %24, %25
  br i1 %26, label %27, label %103

; <label>:27                                      ; preds = %23
  %28 = load i64* %xb_addr, align 8
  %29 = load i64* %5, align 8
  %30 = add nsw i64 %28, %29
  %31 = sub nsw i64 %30, 1
  %32 = load i64* %xb_end, align 8
  %33 = icmp sle i64 %31, %32
  br i1 %33, label %34, label %36

; <label>:34                                      ; preds = %27
  %35 = load i64* %5, align 8
  store i64 %35, i64* %xb_size, align 8
  br label %41

; <label>:36                                      ; preds = %27
  %37 = load i64* %xb_end, align 8
  %38 = load i64* %xb_addr, align 8
  %39 = sub nsw i64 %37, %38
  %40 = add nsw i64 %39, 1
  store i64 %40, i64* %xb_size, align 8
  br label %41

; <label>:41                                      ; preds = %36, %34
  %42 = load i64* %yb_addr, align 8
  %43 = load i64* %6, align 8
  %44 = add nsw i64 %42, %43
  %45 = sub nsw i64 %44, 1
  %46 = load i64* %yb_end, align 8
  %47 = icmp sle i64 %45, %46
  br i1 %47, label %48, label %50

; <label>:48                                      ; preds = %41
  %49 = load i64* %6, align 8
  store i64 %49, i64* %yb_size, align 8
  br label %55

; <label>:50                                      ; preds = %41
  %51 = load i64* %yb_end, align 8
  %52 = load i64* %yb_addr, align 8
  %53 = sub nsw i64 %51, %52
  %54 = add nsw i64 %53, 1
  store i64 %54, i64* %yb_size, align 8
  br label %55

; <label>:55                                      ; preds = %50, %48
  %56 = call i8* @GlobalMalloc(i64 40, i8* getelementptr inbounds ([11 x i8]* @.str.450, i32 0, i32 0))
  %57 = bitcast i8* %56 to %struct.wpjob*
  store %struct.wpjob* %57, %struct.wpjob** %wpentry, align 8
  %58 = load i64* %xb_addr, align 8
  %59 = load %struct.wpjob** %wpentry, align 8
  %60 = getelementptr inbounds %struct.wpjob* %59, i32 0, i32 1
  store i64 %58, i64* %60, align 8
  %61 = load i64* %yb_addr, align 8
  %62 = load %struct.wpjob** %wpentry, align 8
  %63 = getelementptr inbounds %struct.wpjob* %62, i32 0, i32 0
  store i64 %61, i64* %63, align 8
  %64 = load i64* %xb_size, align 8
  %65 = load %struct.wpjob** %wpentry, align 8
  %66 = getelementptr inbounds %struct.wpjob* %65, i32 0, i32 2
  store i64 %64, i64* %66, align 8
  %67 = load i64* %yb_size, align 8
  %68 = load %struct.wpjob** %wpentry, align 8
  %69 = getelementptr inbounds %struct.wpjob* %68, i32 0, i32 3
  store i64 %67, i64* %69, align 8
  %70 = load i64* %7, align 8
  %71 = load %struct.gmem** @gm, align 8
  %72 = getelementptr inbounds %struct.gmem* %71, i32 0, i32 7
  %73 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %72, i32 0, i64 %70
  %74 = getelementptr inbounds [256 x %struct.wpjob*]* %73, i32 0, i64 0
  %75 = load %struct.wpjob** %74, align 8
  %76 = icmp ne %struct.wpjob* %75, null
  br i1 %76, label %80, label %77

; <label>:77                                      ; preds = %55
  %78 = load %struct.wpjob** %wpentry, align 8
  %79 = getelementptr inbounds %struct.wpjob* %78, i32 0, i32 4
  store %struct.wpjob* null, %struct.wpjob** %79, align 8
  br label %89

; <label>:80                                      ; preds = %55
  %81 = load i64* %7, align 8
  %82 = load %struct.gmem** @gm, align 8
  %83 = getelementptr inbounds %struct.gmem* %82, i32 0, i32 7
  %84 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %83, i32 0, i64 %81
  %85 = getelementptr inbounds [256 x %struct.wpjob*]* %84, i32 0, i64 0
  %86 = load %struct.wpjob** %85, align 8
  %87 = load %struct.wpjob** %wpentry, align 8
  %88 = getelementptr inbounds %struct.wpjob* %87, i32 0, i32 4
  store %struct.wpjob* %86, %struct.wpjob** %88, align 8
  br label %89

; <label>:89                                      ; preds = %80, %77
  %90 = load %struct.wpjob** %wpentry, align 8
  %91 = load i64* %7, align 8
  %92 = load %struct.gmem** @gm, align 8
  %93 = getelementptr inbounds %struct.gmem* %92, i32 0, i32 7
  %94 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %93, i32 0, i64 %91
  %95 = getelementptr inbounds [256 x %struct.wpjob*]* %94, i32 0, i64 0
  store %struct.wpjob* %90, %struct.wpjob** %95, align 8
  %96 = load i64* %5, align 8
  %97 = load i64* %xb_addr, align 8
  %98 = add nsw i64 %97, %96
  store i64 %98, i64* %xb_addr, align 8
  br label %99

; <label>:99                                      ; preds = %89
  %100 = load i64* %5, align 8
  %101 = load i64* %j, align 8
  %102 = add nsw i64 %101, %100
  store i64 %102, i64* %j, align 8
  br label %23

; <label>:103                                     ; preds = %23
  %104 = load i64* %1, align 8
  store i64 %104, i64* %xb_addr, align 8
  %105 = load i64* %6, align 8
  %106 = load i64* %yb_addr, align 8
  %107 = add nsw i64 %106, %105
  store i64 %107, i64* %yb_addr, align 8
  br label %108

; <label>:108                                     ; preds = %103
  %109 = load i64* %6, align 8
  %110 = load i64* %i, align 8
  %111 = add nsw i64 %110, %109
  store i64 %111, i64* %i, align 8
  br label %18

; <label>:112                                     ; preds = %18
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @GetJob(%struct.rayjob* %job, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.rayjob*, align 8
  %3 = alloca i64, align 8
  %wpentry = alloca %struct.wpjob*, align 8
  store %struct.rayjob* %job, %struct.rayjob** %2, align 8
  store i64 %pid, i64* %3, align 8
  %4 = load i64* %3, align 8
  %5 = load %struct.gmem** @gm, align 8
  %6 = getelementptr inbounds %struct.gmem* %5, i32 0, i32 12
  %7 = getelementptr inbounds [128 x %union.pthread_mutex_t]* %6, i32 0, i64 %4
  %8 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %7)
  %9 = load i64* %3, align 8
  %10 = load %struct.gmem** @gm, align 8
  %11 = getelementptr inbounds %struct.gmem* %10, i32 0, i32 7
  %12 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %11, i32 0, i64 %9
  %13 = getelementptr inbounds [256 x %struct.wpjob*]* %12, i32 0, i64 0
  %14 = load %struct.wpjob** %13, align 8
  store %struct.wpjob* %14, %struct.wpjob** %wpentry, align 8
  %15 = load %struct.wpjob** %wpentry, align 8
  %16 = icmp ne %struct.wpjob* %15, null
  br i1 %16, label %28, label %17

; <label>:17                                      ; preds = %0
  %18 = load i64* %3, align 8
  %19 = load %struct.gmem** @gm, align 8
  %20 = getelementptr inbounds %struct.gmem* %19, i32 0, i32 6
  %21 = getelementptr inbounds [128 x [256 x i64]]* %20, i32 0, i64 %18
  %22 = getelementptr inbounds [256 x i64]* %21, i32 0, i64 0
  store i64 0, i64* %22, align 8
  %23 = load i64* %3, align 8
  %24 = load %struct.gmem** @gm, align 8
  %25 = getelementptr inbounds %struct.gmem* %24, i32 0, i32 12
  %26 = getelementptr inbounds [128 x %union.pthread_mutex_t]* %25, i32 0, i64 %23
  %27 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %26)
  store i64 0, i64* %1
  br label %74

; <label>:28                                      ; preds = %0
  %29 = load %struct.wpjob** %wpentry, align 8
  %30 = getelementptr inbounds %struct.wpjob* %29, i32 0, i32 4
  %31 = load %struct.wpjob** %30, align 8
  %32 = load i64* %3, align 8
  %33 = load %struct.gmem** @gm, align 8
  %34 = getelementptr inbounds %struct.gmem* %33, i32 0, i32 7
  %35 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %34, i32 0, i64 %32
  %36 = getelementptr inbounds [256 x %struct.wpjob*]* %35, i32 0, i64 0
  store %struct.wpjob* %31, %struct.wpjob** %36, align 8
  %37 = load i64* %3, align 8
  %38 = load %struct.gmem** @gm, align 8
  %39 = getelementptr inbounds %struct.gmem* %38, i32 0, i32 12
  %40 = getelementptr inbounds [128 x %union.pthread_mutex_t]* %39, i32 0, i64 %37
  %41 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %40)
  %42 = load %struct.wpjob** %wpentry, align 8
  %43 = getelementptr inbounds %struct.wpjob* %42, i32 0, i32 1
  %44 = load i64* %43, align 8
  %45 = load %struct.rayjob** %2, align 8
  %46 = getelementptr inbounds %struct.rayjob* %45, i32 0, i32 0
  store i64 %44, i64* %46, align 8
  %47 = load %struct.wpjob** %wpentry, align 8
  %48 = getelementptr inbounds %struct.wpjob* %47, i32 0, i32 0
  %49 = load i64* %48, align 8
  %50 = load %struct.rayjob** %2, align 8
  %51 = getelementptr inbounds %struct.rayjob* %50, i32 0, i32 1
  store i64 %49, i64* %51, align 8
  %52 = load %struct.wpjob** %wpentry, align 8
  %53 = getelementptr inbounds %struct.wpjob* %52, i32 0, i32 1
  %54 = load i64* %53, align 8
  %55 = load %struct.rayjob** %2, align 8
  %56 = getelementptr inbounds %struct.rayjob* %55, i32 0, i32 4
  store i64 %54, i64* %56, align 8
  %57 = load %struct.wpjob** %wpentry, align 8
  %58 = getelementptr inbounds %struct.wpjob* %57, i32 0, i32 0
  %59 = load i64* %58, align 8
  %60 = load %struct.rayjob** %2, align 8
  %61 = getelementptr inbounds %struct.rayjob* %60, i32 0, i32 5
  store i64 %59, i64* %61, align 8
  %62 = load %struct.wpjob** %wpentry, align 8
  %63 = getelementptr inbounds %struct.wpjob* %62, i32 0, i32 2
  %64 = load i64* %63, align 8
  %65 = load %struct.rayjob** %2, align 8
  %66 = getelementptr inbounds %struct.rayjob* %65, i32 0, i32 2
  store i64 %64, i64* %66, align 8
  %67 = load %struct.wpjob** %wpentry, align 8
  %68 = getelementptr inbounds %struct.wpjob* %67, i32 0, i32 3
  %69 = load i64* %68, align 8
  %70 = load %struct.rayjob** %2, align 8
  %71 = getelementptr inbounds %struct.rayjob* %70, i32 0, i32 3
  store i64 %69, i64* %71, align 8
  %72 = load %struct.wpjob** %wpentry, align 8
  %73 = bitcast %struct.wpjob* %72 to i8*
  call void @GlobalFree(i8* %73)
  store i64 1, i64* %1
  br label %74

; <label>:74                                      ; preds = %28, %17
  %75 = load i64* %1
  ret i64 %75
}

; Function Attrs: nounwind uwtable
define internal i64 @GetJobs(%struct.rayjob* %job, i64 %pid) {
  %1 = alloca i64, align 8
  %2 = alloca %struct.rayjob*, align 8
  %3 = alloca i64, align 8
  %i = alloca i64, align 8
  store %struct.rayjob* %job, %struct.rayjob** %2, align 8
  store i64 %pid, i64* %3, align 8
  %4 = load i64* %3, align 8
  store i64 %4, i64* %i, align 8
  %5 = load i64* %i, align 8
  %6 = load %struct.gmem** @gm, align 8
  %7 = getelementptr inbounds %struct.gmem* %6, i32 0, i32 6
  %8 = getelementptr inbounds [128 x [256 x i64]]* %7, i32 0, i64 %5
  %9 = getelementptr inbounds [256 x i64]* %8, i32 0, i64 0
  %10 = load i64* %9, align 8
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %12, label %19

; <label>:12                                      ; preds = %0
  %13 = load %struct.rayjob** %2, align 8
  %14 = load i64* %i, align 8
  %15 = call i64 @GetJob(%struct.rayjob* %13, i64 %14)
  %16 = icmp eq i64 %15, 1
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %12
  store i64 1, i64* %1
  br label %53

; <label>:18                                      ; preds = %12
  br label %19

; <label>:19                                      ; preds = %18, %0
  %20 = load i64* %3, align 8
  %21 = add nsw i64 %20, 1
  %22 = load %struct.gmem** @gm, align 8
  %23 = getelementptr inbounds %struct.gmem* %22, i32 0, i32 0
  %24 = load i64* %23, align 8
  %25 = srem i64 %21, %24
  store i64 %25, i64* %i, align 8
  br label %26

; <label>:26                                      ; preds = %45, %19
  %27 = load i64* %i, align 8
  %28 = load i64* %3, align 8
  %29 = icmp ne i64 %27, %28
  br i1 %29, label %30, label %52

; <label>:30                                      ; preds = %26
  %31 = load i64* %i, align 8
  %32 = load %struct.gmem** @gm, align 8
  %33 = getelementptr inbounds %struct.gmem* %32, i32 0, i32 6
  %34 = getelementptr inbounds [128 x [256 x i64]]* %33, i32 0, i64 %31
  %35 = getelementptr inbounds [256 x i64]* %34, i32 0, i64 0
  %36 = load i64* %35, align 8
  %37 = icmp eq i64 %36, 1
  br i1 %37, label %38, label %45

; <label>:38                                      ; preds = %30
  %39 = load %struct.rayjob** %2, align 8
  %40 = load i64* %i, align 8
  %41 = call i64 @GetJob(%struct.rayjob* %39, i64 %40)
  %42 = icmp eq i64 %41, 1
  br i1 %42, label %43, label %44

; <label>:43                                      ; preds = %38
  store i64 1, i64* %1
  br label %53

; <label>:44                                      ; preds = %38
  br label %45

; <label>:45                                      ; preds = %44, %30
  %46 = load i64* %i, align 8
  %47 = add nsw i64 %46, 1
  %48 = load %struct.gmem** @gm, align 8
  %49 = getelementptr inbounds %struct.gmem* %48, i32 0, i32 0
  %50 = load i64* %49, align 8
  %51 = srem i64 %47, %50
  store i64 %51, i64* %i, align 8
  br label %26

; <label>:52                                      ; preds = %26
  store i64 0, i64* %1
  br label %53

; <label>:53                                      ; preds = %52, %43, %17
  %54 = load i64* %1
  ret i64 %54
}

; Function Attrs: nounwind uwtable
define internal void @PrintWorkPool(i64 %pid) {
  %1 = alloca i64, align 8
  %j = alloca %struct.wpjob*, align 8
  store i64 %pid, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = load %struct.gmem** @gm, align 8
  %4 = getelementptr inbounds %struct.gmem* %3, i32 0, i32 7
  %5 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %4, i32 0, i64 %2
  %6 = getelementptr inbounds [256 x %struct.wpjob*]* %5, i32 0, i64 0
  %7 = load %struct.wpjob** %6, align 8
  store %struct.wpjob* %7, %struct.wpjob** %j, align 8
  br label %8

; <label>:8                                       ; preds = %11, %0
  %9 = load %struct.wpjob** %j, align 8
  %10 = icmp ne %struct.wpjob* %9, null
  br i1 %10, label %11, label %29

; <label>:11                                      ; preds = %8
  %12 = load i64* %1, align 8
  %13 = load %struct.wpjob** %j, align 8
  %14 = getelementptr inbounds %struct.wpjob* %13, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = load %struct.wpjob** %j, align 8
  %17 = getelementptr inbounds %struct.wpjob* %16, i32 0, i32 0
  %18 = load i64* %17, align 8
  %19 = load %struct.wpjob** %j, align 8
  %20 = getelementptr inbounds %struct.wpjob* %19, i32 0, i32 2
  %21 = load i64* %20, align 8
  %22 = load %struct.wpjob** %j, align 8
  %23 = getelementptr inbounds %struct.wpjob* %22, i32 0, i32 3
  %24 = load i64* %23, align 8
  %25 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([73 x i8]* @.str.1.451, i32 0, i32 0), i64 %12, i64 %15, i64 %18, i64 %21, i64 %24)
  %26 = load %struct.wpjob** %j, align 8
  %27 = getelementptr inbounds %struct.wpjob* %26, i32 0, i32 4
  %28 = load %struct.wpjob** %27, align 8
  store %struct.wpjob* %28, %struct.wpjob** %j, align 8
  br label %8

; <label>:29                                      ; preds = %8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @InitWorkPool(i64 %pid) {
  %1 = alloca i64, align 8
  %i = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %xe = alloca i64, align 8
  %ye = alloca i64, align 8
  %xsize = alloca i64, align 8
  %ysize = alloca i64, align 8
  store i64 %pid, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = load %struct.gmem** @gm, align 8
  %4 = getelementptr inbounds %struct.gmem* %3, i32 0, i32 6
  %5 = getelementptr inbounds [128 x [256 x i64]]* %4, i32 0, i64 %2
  %6 = getelementptr inbounds [256 x i64]* %5, i32 0, i64 0
  store i64 1, i64* %6, align 8
  %7 = load i64* %1, align 8
  %8 = load %struct.gmem** @gm, align 8
  %9 = getelementptr inbounds %struct.gmem* %8, i32 0, i32 7
  %10 = getelementptr inbounds [128 x [256 x %struct.wpjob*]]* %9, i32 0, i64 %7
  %11 = getelementptr inbounds [256 x %struct.wpjob*]* %10, i32 0, i64 0
  store %struct.wpjob* null, %struct.wpjob** %11, align 8
  store i64 0, i64* %i, align 8
  %12 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %13 = load i64* @blockx, align 8
  %14 = sdiv i64 %12, %13
  store i64 %14, i64* %xsize, align 8
  %15 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %16 = load i64* @blocky, align 8
  %17 = sdiv i64 %15, %16
  store i64 %17, i64* %ysize, align 8
  store i64 0, i64* %y, align 8
  br label %18

; <label>:18                                      ; preds = %75, %0
  %19 = load i64* %y, align 8
  %20 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %21 = icmp slt i64 %19, %20
  br i1 %21, label %22, label %79

; <label>:22                                      ; preds = %18
  %23 = load i64* %y, align 8
  %24 = load i64* %ysize, align 8
  %25 = add nsw i64 %23, %24
  %26 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %27 = icmp sgt i64 %25, %26
  br i1 %27, label %28, label %32

; <label>:28                                      ; preds = %22
  %29 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 6), align 8
  %30 = load i64* %y, align 8
  %31 = sub nsw i64 %29, %30
  store i64 %31, i64* %ye, align 8
  br label %34

; <label>:32                                      ; preds = %22
  %33 = load i64* %ysize, align 8
  store i64 %33, i64* %ye, align 8
  br label %34

; <label>:34                                      ; preds = %32, %28
  store i64 0, i64* %x, align 8
  br label %35

; <label>:35                                      ; preds = %70, %34
  %36 = load i64* %x, align 8
  %37 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %38 = icmp slt i64 %36, %37
  br i1 %38, label %39, label %74

; <label>:39                                      ; preds = %35
  %40 = load i64* %x, align 8
  %41 = load i64* %xsize, align 8
  %42 = add nsw i64 %40, %41
  %43 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %44 = icmp sgt i64 %42, %43
  br i1 %44, label %45, label %49

; <label>:45                                      ; preds = %39
  %46 = load i64* getelementptr inbounds (%struct.display* @Display, i32 0, i32 5), align 8
  %47 = load i64* %x, align 8
  %48 = sub nsw i64 %46, %47
  store i64 %48, i64* %xe, align 8
  br label %51

; <label>:49                                      ; preds = %39
  %50 = load i64* %xsize, align 8
  store i64 %50, i64* %xe, align 8
  br label %51

; <label>:51                                      ; preds = %49, %45
  %52 = load i64* %i, align 8
  %53 = load i64* %1, align 8
  %54 = icmp eq i64 %52, %53
  br i1 %54, label %55, label %63

; <label>:55                                      ; preds = %51
  %56 = load i64* %x, align 8
  %57 = load i64* %y, align 8
  %58 = load i64* %xe, align 8
  %59 = load i64* %ye, align 8
  %60 = load i64* @bundlex, align 8
  %61 = load i64* @bundley, align 8
  %62 = load i64* %1, align 8
  call void @PutJob(i64 %56, i64 %57, i64 %58, i64 %59, i64 %60, i64 %61, i64 %62)
  br label %63

; <label>:63                                      ; preds = %55, %51
  %64 = load i64* %i, align 8
  %65 = add nsw i64 %64, 1
  %66 = load %struct.gmem** @gm, align 8
  %67 = getelementptr inbounds %struct.gmem* %66, i32 0, i32 0
  %68 = load i64* %67, align 8
  %69 = srem i64 %65, %68
  store i64 %69, i64* %i, align 8
  br label %70

; <label>:70                                      ; preds = %63
  %71 = load i64* %xsize, align 8
  %72 = load i64* %x, align 8
  %73 = add nsw i64 %72, %71
  store i64 %73, i64* %x, align 8
  br label %35

; <label>:74                                      ; preds = %35
  br label %75

; <label>:75                                      ; preds = %74
  %76 = load i64* %ysize, align 8
  %77 = load i64* %y, align 8
  %78 = add nsw i64 %77, %76
  store i64 %78, i64* %y, align 8
  br label %18

; <label>:79                                      ; preds = %18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @DeriveInvariant() {
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @CheckInvariant() {
  ret void
}

define internal void @RecordSyncVariable() {
  ret void
}

define internal void @printX() {
  %1 = load i32* @index_out, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %2
  store i8 88, i8* %3, align 1
  %4 = load i32* @index_out, align 4
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @index_out, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @appendY() {
  %1 = load i32* @index_out, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %2
  store i8 89, i8* %3, align 1
  %4 = load i32* @index_out, align 4
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @index_out, align 4
  ret void
}

define internal void @printY() {
  call void @appendY()
  call void @DecrementCounter()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @DecrementCounter() {
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %1 = call i32 (...) *@pthread_self()
  store i32 %1, i32* %idx, align 4
  %2 = load i32* %idx, align 4
  %3 = zext i32 %2 to i64
  %4 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %3
  store i8 0, i8* %4, align 1
  %5 = load i32* %idx, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %6
  %8 = load i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %31

; <label>:10                                      ; preds = %0
  %11 = load i32* @counter0, align 4
  %12 = add nsw i32 %11, -1
  store i32 %12, i32* @counter0, align 4
  %13 = load i32* @counter0, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

; <label>:15                                      ; preds = %10
  call void @flushAll()
  call void @DeriveInvariant()
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %23, %15
  %17 = load i32* %i, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %26

; <label>:19                                      ; preds = %16
  %20 = load i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %21
  store i8 1, i8* %22, align 1
  br label %23

; <label>:23                                      ; preds = %19
  %24 = load i32* %i, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %i, align 4
  br label %16

; <label>:26                                      ; preds = %16
  br label %27

; <label>:27                                      ; preds = %26, %10
  %28 = load i32* %idx, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %29
  store i32 1, i32* %30, align 4
  br label %52

; <label>:31                                      ; preds = %0
  %32 = load i32* @counter1, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* @counter1, align 4
  %34 = load i32* @counter1, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %48

; <label>:36                                      ; preds = %31
  call void @flushAll()
  call void @DeriveInvariant()
  store i32 0, i32* %i1, align 4
  br label %37

; <label>:37                                      ; preds = %44, %36
  %38 = load i32* %i1, align 4
  %39 = icmp slt i32 %38, 3
  br i1 %39, label %40, label %47

; <label>:40                                      ; preds = %37
  %41 = load i32* %i1, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %42
  store i8 1, i8* %43, align 1
  br label %44

; <label>:44                                      ; preds = %40
  %45 = load i32* %i1, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %i1, align 4
  br label %37

; <label>:47                                      ; preds = %37
  br label %48

; <label>:48                                      ; preds = %47, %31
  %49 = load i32* %idx, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %50
  store i32 0, i32* %51, align 4
  br label %52

; <label>:52                                      ; preds = %48, %27
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @flushAll() {
  %1 = load i32* @index_out, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %2
  store i8 0, i8* %3, align 1
  %4 = call i32 (i8*, ...) *@printf(i8* getelementptr inbounds ([4 x i8]* @.str.452, i32 0, i32 0), i8* getelementptr inbounds ([200 x i8]* @mystring, i32 0, i32 0))
  ret void
}

define internal void @printChar(i8 signext %ch) {
  %1 = alloca i8, align 1
  store i8 %ch, i8* %1, align 1
  %2 = load i8* %1, align 1
  %3 = load i32* @index_out, align 4
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [200 x i8]* @mystring, i32 0, i64 %4
  store i8 %2, i8* %5, align 1
  %6 = load i32* @index_out, align 4
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* @index_out, align 4
  ret void
}

define internal void @waitForAll() {
  %1 = call i32 (i32, i32, ...) *bitcast (i32 (...)* @pthread_join to i32 (i32, i32, ...)*)(i32 0, i32 0)
  call void @flushAll()
  ret void
}

declare i32 @pthread_join(...)

; Function Attrs: nounwind uwtable
define internal void @snapshot(i32 %gvar, i32 %index) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %idx = alloca i32, align 4
  store i32 %gvar, i32* %1, align 4
  store i32 %index, i32* %2, align 4
  %3 = call i32 (...) *@pthread_self()
  store i32 %3, i32* %idx, align 4
  %4 = load i32* %idx, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %5
  %7 = load i8* %6, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %27

; <label>:9                                       ; preds = %0
  %10 = load i32* %2, align 4
  switch i32 %10, label %17 [
    i32 0, label %11
    i32 1, label %13
    i32 2, label %15
  ]

; <label>:11                                      ; preds = %9
  %12 = load i32* %1, align 4
  store i32 %12, i32* @gSyncVar_0, align 4
  br label %18

; <label>:13                                      ; preds = %9
  %14 = load i32* %1, align 4
  store i32 %14, i32* @gSyncVar_1, align 4
  br label %18

; <label>:15                                      ; preds = %9
  %16 = load i32* %1, align 4
  store i32 %16, i32* @gSyncVar_2, align 4
  br label %17

; <label>:17                                      ; preds = %15, %9
  br label %18

; <label>:18                                      ; preds = %17, %13, %11
  %19 = load i32* %2, align 4
  %20 = add nsw i32 %19, 1
  %21 = load i32* @gSyncVarsTotalNum, align 4
  %22 = icmp sgt i32 %20, %21
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %18
  %24 = load i32* %2, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* @gSyncVarsTotalNum, align 4
  br label %26

; <label>:26                                      ; preds = %23, %18
  br label %27

; <label>:27                                      ; preds = %26, %0
  ret void
}

declare i32 @pthread_self(...)

; Function Attrs: nounwind uwtable
define internal void @snapshot64(i64 %gvar, i32 %index) {
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  store i64 %gvar, i64* %1, align 8
  store i32 %index, i32* %2, align 4
  %3 = load i64* %1, align 8
  %4 = trunc i64 %3 to i32
  %5 = load i32* %2, align 4
  call void @snapshot(i32 %4, i32 %5)
  ret void
}

define internal void @InitializeSwitchesAndCounter(i32 %id) {
  %1 = alloca i32, align 4
  store i32 %id, i32* %1, align 4
  ret void
}

define internal void @IncrementCounter() {
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = call i32 (...) *@pthread_self()
  store i32 %1, i32* %idx, align 4
  %2 = load i32* %idx, align 4
  %3 = zext i32 %2 to i64
  %4 = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %3
  %5 = load i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %29

; <label>:7                                       ; preds = %0
  %8 = load i32* @counter0, align 4
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* @counter0, align 4
  %10 = load i32* @counter0, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %7
  call void @CheckInvariant()
  br label %13

; <label>:13                                      ; preds = %12, %7
  %14 = load i8* @firstSync, align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %16, label %28

; <label>:16                                      ; preds = %13
  store i32 0, i32* %i, align 4
  br label %17

; <label>:17                                      ; preds = %24, %16
  %18 = load i32* %i, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %17
  %21 = load i32* %i, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %22
  store i8 1, i8* %23, align 1
  br label %24

; <label>:24                                      ; preds = %20
  %25 = load i32* %i, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %i, align 4
  br label %17

; <label>:27                                      ; preds = %17
  store i8 0, i8* @firstSync, align 1
  br label %28

; <label>:28                                      ; preds = %27, %13
  br label %36

; <label>:29                                      ; preds = %0
  %30 = load i32* @counter1, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* @counter1, align 4
  %32 = load i32* @counter1, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %29
  call void @CheckInvariant()
  br label %35

; <label>:35                                      ; preds = %34, %29
  br label %36

; <label>:36                                      ; preds = %35, %28
  ret void
}

declare i32 @sleep(i32)


