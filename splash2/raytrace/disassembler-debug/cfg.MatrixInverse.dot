digraph "CFG for 'MatrixInverse' function" {
	label="CFG for 'MatrixInverse' function";

	Node0x5fdb5f0 [shape=record,label="{entry:\l  %Minv.addr = alloca [4 x double]*, align 8\l  %Mat.addr = alloca [4 x double]*, align 8\l  %i = alloca i64, align 8\l  %j = alloca i64, align 8\l  %k = alloca i64, align 8\l  %gjmat = alloca [4 x [8 x double]], align 16\l  %tbuf = alloca [8 x double], align 16\l  %pval = alloca double, align 8\l  %aval = alloca double, align 8\l  %prow = alloca i64, align 8\l  %c = alloca double, align 8\l  %tmp = alloca [4 x [4 x double]], align 16\l  store [4 x double]* %Minv, [4 x double]** %Minv.addr, align 8\l  store [4 x double]* %Mat, [4 x double]** %Mat.addr, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5fdb5f0 -> Node0x5fdb640;
	Node0x5fdb640 [shape=record,label="{for.cond:                                         \l  %0 = load i64* %i, align 8\l  %cmp = icmp slt i64 %0, 4\l  br i1 %cmp, label %for.body, label %for.end.9\l|{<s0>T|<s1>F}}"];
	Node0x5fdb640:s0 -> Node0x5fdb690;
	Node0x5fdb640:s1 -> Node0x5fdc3c0;
	Node0x5fdb690 [shape=record,label="{for.body:                                         \l  store i64 0, i64* %j, align 8\l  br label %for.cond.1\l}"];
	Node0x5fdb690 -> Node0x5fdb6e0;
	Node0x5fdb6e0 [shape=record,label="{for.cond.1:                                       \l  %1 = load i64* %j, align 8\l  %cmp2 = icmp slt i64 %1, 4\l  br i1 %cmp2, label %for.body.3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5fdb6e0:s0 -> Node0x5fdb730;
	Node0x5fdb6e0:s1 -> Node0x5fdb7d0;
	Node0x5fdb730 [shape=record,label="{for.body.3:                                       \l  %2 = load i64* %j, align 8\l  %3 = load i64* %i, align 8\l  %4 = load [4 x double]** %Mat.addr, align 8\l  %arrayidx = getelementptr inbounds [4 x double]* %4, i64 %3\l  %arrayidx4 = getelementptr inbounds [4 x double]* %arrayidx, i32 0, i64 %2\l  %5 = load double* %arrayidx4, align 8\l  %6 = load i64* %j, align 8\l  %7 = load i64* %i, align 8\l  %arrayidx5 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64 %7\l  %arrayidx6 = getelementptr inbounds [8 x double]* %arrayidx5, i32 0, i64 %6\l  store double %5, double* %arrayidx6, align 8\l  br label %for.inc\l}"];
	Node0x5fdb730 -> Node0x5fdb780;
	Node0x5fdb780 [shape=record,label="{for.inc:                                          \l  %8 = load i64* %j, align 8\l  %inc = add nsw i64 %8, 1\l  store i64 %inc, i64* %j, align 8\l  br label %for.cond.1\l}"];
	Node0x5fdb780 -> Node0x5fdb6e0;
	Node0x5fdb7d0 [shape=record,label="{for.end:                                          \l  br label %for.inc.7\l}"];
	Node0x5fdb7d0 -> Node0x5fdc370;
	Node0x5fdc370 [shape=record,label="{for.inc.7:                                        \l  %9 = load i64* %i, align 8\l  %inc8 = add nsw i64 %9, 1\l  store i64 %inc8, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5fdc370 -> Node0x5fdb640;
	Node0x5fdc3c0 [shape=record,label="{for.end.9:                                        \l  store i64 0, i64* %k, align 8\l  store i64 4, i64* %i, align 8\l  br label %for.cond.10\l}"];
	Node0x5fdc3c0 -> Node0x5fdc410;
	Node0x5fdc410 [shape=record,label="{for.cond.10:                                      \l  %10 = load i64* %i, align 8\l  %cmp11 = icmp slt i64 %10, 8\l  br i1 %cmp11, label %for.body.12, label %for.end.27\l|{<s0>T|<s1>F}}"];
	Node0x5fdc410:s0 -> Node0x5fdc460;
	Node0x5fdc410:s1 -> Node0x5fdc730;
	Node0x5fdc460 [shape=record,label="{for.body.12:                                      \l  store i64 4, i64* %j, align 8\l  br label %for.cond.13\l}"];
	Node0x5fdc460 -> Node0x5fdc4b0;
	Node0x5fdc4b0 [shape=record,label="{for.cond.13:                                      \l  %11 = load i64* %j, align 8\l  %cmp14 = icmp slt i64 %11, 8\l  br i1 %cmp14, label %for.body.15, label %for.end.23\l|{<s0>T|<s1>F}}"];
	Node0x5fdc4b0:s0 -> Node0x5fdc500;
	Node0x5fdc4b0:s1 -> Node0x5fdc690;
	Node0x5fdc500 [shape=record,label="{for.body.15:                                      \l  %12 = load i64* %i, align 8\l  %13 = load i64* %j, align 8\l  %cmp16 = icmp eq i64 %12, %13\l  br i1 %cmp16, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5fdc500:s0 -> Node0x5fdc550;
	Node0x5fdc500:s1 -> Node0x5fdc5a0;
	Node0x5fdc550 [shape=record,label="{if.then:                                          \l  %14 = load i64* %j, align 8\l  %15 = load i64* %k, align 8\l  %arrayidx17 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %15\l  %arrayidx18 = getelementptr inbounds [8 x double]* %arrayidx17, i32 0, i64\l... %14\l  store double 1.000000e+00, double* %arrayidx18, align 8\l  br label %if.end\l}"];
	Node0x5fdc550 -> Node0x5fdc5f0;
	Node0x5fdc5a0 [shape=record,label="{if.else:                                          \l  %16 = load i64* %j, align 8\l  %17 = load i64* %k, align 8\l  %arrayidx19 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %17\l  %arrayidx20 = getelementptr inbounds [8 x double]* %arrayidx19, i32 0, i64\l... %16\l  store double 0.000000e+00, double* %arrayidx20, align 8\l  br label %if.end\l}"];
	Node0x5fdc5a0 -> Node0x5fdc5f0;
	Node0x5fdc5f0 [shape=record,label="{if.end:                                           \l  br label %for.inc.21\l}"];
	Node0x5fdc5f0 -> Node0x5fdc640;
	Node0x5fdc640 [shape=record,label="{for.inc.21:                                       \l  %18 = load i64* %j, align 8\l  %inc22 = add nsw i64 %18, 1\l  store i64 %inc22, i64* %j, align 8\l  br label %for.cond.13\l}"];
	Node0x5fdc640 -> Node0x5fdc4b0;
	Node0x5fdc690 [shape=record,label="{for.end.23:                                       \l  %19 = load i64* %k, align 8\l  %inc24 = add nsw i64 %19, 1\l  store i64 %inc24, i64* %k, align 8\l  br label %for.inc.25\l}"];
	Node0x5fdc690 -> Node0x5fdc6e0;
	Node0x5fdc6e0 [shape=record,label="{for.inc.25:                                       \l  %20 = load i64* %i, align 8\l  %inc26 = add nsw i64 %20, 1\l  store i64 %inc26, i64* %i, align 8\l  br label %for.cond.10\l}"];
	Node0x5fdc6e0 -> Node0x5fdc410;
	Node0x5fdc730 [shape=record,label="{for.end.27:                                       \l  store i64 0, i64* %i, align 8\l  br label %for.cond.28\l}"];
	Node0x5fdc730 -> Node0x5fdc780;
	Node0x5fdc780 [shape=record,label="{for.cond.28:                                      \l  %21 = load i64* %i, align 8\l  %cmp29 = icmp slt i64 %21, 3\l  br i1 %cmp29, label %for.body.30, label %for.end.119\l|{<s0>T|<s1>F}}"];
	Node0x5fdc780:s0 -> Node0x5fdc7d0;
	Node0x5fdc780:s1 -> Node0x5fdd310;
	Node0x5fdc7d0 [shape=record,label="{for.body.30:                                      \l  %22 = load i64* %i, align 8\l  %23 = load i64* %i, align 8\l  %arrayidx31 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %23\l  %arrayidx32 = getelementptr inbounds [8 x double]* %arrayidx31, i32 0, i64\l... %22\l  %24 = load double* %arrayidx32, align 8\l  %cmp33 = fcmp ogt double %24, 0.000000e+00\l  br i1 %cmp33, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x5fdc7d0:s0 -> Node0x5fdc820;
	Node0x5fdc7d0:s1 -> Node0x5fdc870;
	Node0x5fdc820 [shape=record,label="{cond.true:                                        \l  %25 = load i64* %i, align 8\l  %26 = load i64* %i, align 8\l  %arrayidx34 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %26\l  %arrayidx35 = getelementptr inbounds [8 x double]* %arrayidx34, i32 0, i64\l... %25\l  %27 = load double* %arrayidx35, align 8\l  br label %cond.end\l}"];
	Node0x5fdc820 -> Node0x5fdc8c0;
	Node0x5fdc870 [shape=record,label="{cond.false:                                       \l  %28 = load i64* %i, align 8\l  %29 = load i64* %i, align 8\l  %arrayidx36 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %29\l  %arrayidx37 = getelementptr inbounds [8 x double]* %arrayidx36, i32 0, i64\l... %28\l  %30 = load double* %arrayidx37, align 8\l  %sub = fsub double -0.000000e+00, %30\l  br label %cond.end\l}"];
	Node0x5fdc870 -> Node0x5fdc8c0;
	Node0x5fdc8c0 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %27, %cond.true ], [ %sub, %cond.false ]\l  store double %cond, double* %pval, align 8\l  %31 = load i64* %i, align 8\l  store i64 %31, i64* %prow, align 8\l  %32 = load i64* %i, align 8\l  %add = add nsw i64 %32, 1\l  store i64 %add, i64* %j, align 8\l  br label %for.cond.38\l}"];
	Node0x5fdc8c0 -> Node0x5fdc910;
	Node0x5fdc910 [shape=record,label="{for.cond.38:                                      \l  %33 = load i64* %j, align 8\l  %cmp39 = icmp slt i64 %33, 4\l  br i1 %cmp39, label %for.body.40, label %for.end.58\l|{<s0>T|<s1>F}}"];
	Node0x5fdc910:s0 -> Node0x5fdc960;
	Node0x5fdc910:s1 -> Node0x5fdcb90;
	Node0x5fdc960 [shape=record,label="{for.body.40:                                      \l  %34 = load i64* %i, align 8\l  %35 = load i64* %j, align 8\l  %arrayidx41 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %35\l  %arrayidx42 = getelementptr inbounds [8 x double]* %arrayidx41, i32 0, i64\l... %34\l  %36 = load double* %arrayidx42, align 8\l  %cmp43 = fcmp ogt double %36, 0.000000e+00\l  br i1 %cmp43, label %cond.true.44, label %cond.false.47\l|{<s0>T|<s1>F}}"];
	Node0x5fdc960:s0 -> Node0x5fdc9b0;
	Node0x5fdc960:s1 -> Node0x5fdca00;
	Node0x5fdc9b0 [shape=record,label="{cond.true.44:                                     \l  %37 = load i64* %i, align 8\l  %38 = load i64* %j, align 8\l  %arrayidx45 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %38\l  %arrayidx46 = getelementptr inbounds [8 x double]* %arrayidx45, i32 0, i64\l... %37\l  %39 = load double* %arrayidx46, align 8\l  br label %cond.end.51\l}"];
	Node0x5fdc9b0 -> Node0x5fdca50;
	Node0x5fdca00 [shape=record,label="{cond.false.47:                                    \l  %40 = load i64* %i, align 8\l  %41 = load i64* %j, align 8\l  %arrayidx48 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %41\l  %arrayidx49 = getelementptr inbounds [8 x double]* %arrayidx48, i32 0, i64\l... %40\l  %42 = load double* %arrayidx49, align 8\l  %sub50 = fsub double -0.000000e+00, %42\l  br label %cond.end.51\l}"];
	Node0x5fdca00 -> Node0x5fdca50;
	Node0x5fdca50 [shape=record,label="{cond.end.51:                                      \l  %cond52 = phi double [ %39, %cond.true.44 ], [ %sub50, %cond.false.47 ]\l  store double %cond52, double* %aval, align 8\l  %43 = load double* %aval, align 8\l  %44 = load double* %pval, align 8\l  %cmp53 = fcmp ogt double %43, %44\l  br i1 %cmp53, label %if.then.54, label %if.end.55\l|{<s0>T|<s1>F}}"];
	Node0x5fdca50:s0 -> Node0x5fdcaa0;
	Node0x5fdca50:s1 -> Node0x5fdcaf0;
	Node0x5fdcaa0 [shape=record,label="{if.then.54:                                       \l  %45 = load double* %aval, align 8\l  store double %45, double* %pval, align 8\l  %46 = load i64* %j, align 8\l  store i64 %46, i64* %prow, align 8\l  br label %if.end.55\l}"];
	Node0x5fdcaa0 -> Node0x5fdcaf0;
	Node0x5fdcaf0 [shape=record,label="{if.end.55:                                        \l  br label %for.inc.56\l}"];
	Node0x5fdcaf0 -> Node0x5fdcb40;
	Node0x5fdcb40 [shape=record,label="{for.inc.56:                                       \l  %47 = load i64* %j, align 8\l  %inc57 = add nsw i64 %47, 1\l  store i64 %inc57, i64* %j, align 8\l  br label %for.cond.38\l}"];
	Node0x5fdcb40 -> Node0x5fdc910;
	Node0x5fdcb90 [shape=record,label="{for.end.58:                                       \l  %48 = load i64* %i, align 8\l  %49 = load i64* %prow, align 8\l  %cmp59 = icmp ne i64 %48, %49\l  br i1 %cmp59, label %if.then.60, label %if.end.89\l|{<s0>T|<s1>F}}"];
	Node0x5fdcb90:s0 -> Node0x5fdcbe0;
	Node0x5fdcb90:s1 -> Node0x5fdcff0;
	Node0x5fdcbe0 [shape=record,label="{if.then.60:                                       \l  store i64 0, i64* %k, align 8\l  br label %for.cond.61\l}"];
	Node0x5fdcbe0 -> Node0x5fdcc30;
	Node0x5fdcc30 [shape=record,label="{for.cond.61:                                      \l  %50 = load i64* %k, align 8\l  %cmp62 = icmp slt i64 %50, 8\l  br i1 %cmp62, label %for.body.63, label %for.end.69\l|{<s0>T|<s1>F}}"];
	Node0x5fdcc30:s0 -> Node0x5fdcc80;
	Node0x5fdcc30:s1 -> Node0x5fdcd20;
	Node0x5fdcc80 [shape=record,label="{for.body.63:                                      \l  %51 = load i64* %k, align 8\l  %52 = load i64* %i, align 8\l  %arrayidx64 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %52\l  %arrayidx65 = getelementptr inbounds [8 x double]* %arrayidx64, i32 0, i64\l... %51\l  %53 = load double* %arrayidx65, align 8\l  %54 = load i64* %k, align 8\l  %arrayidx66 = getelementptr inbounds [8 x double]* %tbuf, i32 0, i64 %54\l  store double %53, double* %arrayidx66, align 8\l  br label %for.inc.67\l}"];
	Node0x5fdcc80 -> Node0x5fdccd0;
	Node0x5fdccd0 [shape=record,label="{for.inc.67:                                       \l  %55 = load i64* %k, align 8\l  %inc68 = add nsw i64 %55, 1\l  store i64 %inc68, i64* %k, align 8\l  br label %for.cond.61\l}"];
	Node0x5fdccd0 -> Node0x5fdcc30;
	Node0x5fdcd20 [shape=record,label="{for.end.69:                                       \l  store i64 0, i64* %k, align 8\l  br label %for.cond.70\l}"];
	Node0x5fdcd20 -> Node0x5fdcd70;
	Node0x5fdcd70 [shape=record,label="{for.cond.70:                                      \l  %56 = load i64* %k, align 8\l  %cmp71 = icmp slt i64 %56, 8\l  br i1 %cmp71, label %for.body.72, label %for.end.79\l|{<s0>T|<s1>F}}"];
	Node0x5fdcd70:s0 -> Node0x5fdcdc0;
	Node0x5fdcd70:s1 -> Node0x5fdce60;
	Node0x5fdcdc0 [shape=record,label="{for.body.72:                                      \l  %57 = load i64* %k, align 8\l  %58 = load i64* %prow, align 8\l  %arrayidx73 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %58\l  %arrayidx74 = getelementptr inbounds [8 x double]* %arrayidx73, i32 0, i64\l... %57\l  %59 = load double* %arrayidx74, align 8\l  %60 = load i64* %k, align 8\l  %61 = load i64* %i, align 8\l  %arrayidx75 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %61\l  %arrayidx76 = getelementptr inbounds [8 x double]* %arrayidx75, i32 0, i64\l... %60\l  store double %59, double* %arrayidx76, align 8\l  br label %for.inc.77\l}"];
	Node0x5fdcdc0 -> Node0x5fdce10;
	Node0x5fdce10 [shape=record,label="{for.inc.77:                                       \l  %62 = load i64* %k, align 8\l  %inc78 = add nsw i64 %62, 1\l  store i64 %inc78, i64* %k, align 8\l  br label %for.cond.70\l}"];
	Node0x5fdce10 -> Node0x5fdcd70;
	Node0x5fdce60 [shape=record,label="{for.end.79:                                       \l  store i64 0, i64* %k, align 8\l  br label %for.cond.80\l}"];
	Node0x5fdce60 -> Node0x5fdceb0;
	Node0x5fdceb0 [shape=record,label="{for.cond.80:                                      \l  %63 = load i64* %k, align 8\l  %cmp81 = icmp slt i64 %63, 8\l  br i1 %cmp81, label %for.body.82, label %for.end.88\l|{<s0>T|<s1>F}}"];
	Node0x5fdceb0:s0 -> Node0x5fdcf00;
	Node0x5fdceb0:s1 -> Node0x5fdcfa0;
	Node0x5fdcf00 [shape=record,label="{for.body.82:                                      \l  %64 = load i64* %k, align 8\l  %arrayidx83 = getelementptr inbounds [8 x double]* %tbuf, i32 0, i64 %64\l  %65 = load double* %arrayidx83, align 8\l  %66 = load i64* %k, align 8\l  %67 = load i64* %prow, align 8\l  %arrayidx84 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %67\l  %arrayidx85 = getelementptr inbounds [8 x double]* %arrayidx84, i32 0, i64\l... %66\l  store double %65, double* %arrayidx85, align 8\l  br label %for.inc.86\l}"];
	Node0x5fdcf00 -> Node0x5fdcf50;
	Node0x5fdcf50 [shape=record,label="{for.inc.86:                                       \l  %68 = load i64* %k, align 8\l  %inc87 = add nsw i64 %68, 1\l  store i64 %inc87, i64* %k, align 8\l  br label %for.cond.80\l}"];
	Node0x5fdcf50 -> Node0x5fdceb0;
	Node0x5fdcfa0 [shape=record,label="{for.end.88:                                       \l  br label %if.end.89\l}"];
	Node0x5fdcfa0 -> Node0x5fdcff0;
	Node0x5fdcff0 [shape=record,label="{if.end.89:                                        \l  %69 = load i64* %i, align 8\l  %add90 = add nsw i64 %69, 1\l  store i64 %add90, i64* %j, align 8\l  br label %for.cond.91\l}"];
	Node0x5fdcff0 -> Node0x5fdd040;
	Node0x5fdd040 [shape=record,label="{for.cond.91:                                      \l  %70 = load i64* %j, align 8\l  %cmp92 = icmp slt i64 %70, 4\l  br i1 %cmp92, label %for.body.93, label %for.end.116\l|{<s0>T|<s1>F}}"];
	Node0x5fdd040:s0 -> Node0x5fdd090;
	Node0x5fdd040:s1 -> Node0x5fdd270;
	Node0x5fdd090 [shape=record,label="{for.body.93:                                      \l  %71 = load i64* %i, align 8\l  %72 = load i64* %j, align 8\l  %arrayidx94 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %72\l  %arrayidx95 = getelementptr inbounds [8 x double]* %arrayidx94, i32 0, i64\l... %71\l  %73 = load double* %arrayidx95, align 8\l  %74 = load i64* %i, align 8\l  %75 = load i64* %i, align 8\l  %arrayidx96 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %75\l  %arrayidx97 = getelementptr inbounds [8 x double]* %arrayidx96, i32 0, i64\l... %74\l  %76 = load double* %arrayidx97, align 8\l  %div = fdiv double %73, %76\l  store double %div, double* %c, align 8\l  %77 = load i64* %i, align 8\l  %78 = load i64* %j, align 8\l  %arrayidx98 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %78\l  %arrayidx99 = getelementptr inbounds [8 x double]* %arrayidx98, i32 0, i64\l... %77\l  store double 0.000000e+00, double* %arrayidx99, align 8\l  %79 = load i64* %i, align 8\l  %add100 = add nsw i64 %79, 1\l  store i64 %add100, i64* %k, align 8\l  br label %for.cond.101\l}"];
	Node0x5fdd090 -> Node0x5fdd0e0;
	Node0x5fdd0e0 [shape=record,label="{for.cond.101:                                     \l  %80 = load i64* %k, align 8\l  %cmp102 = icmp slt i64 %80, 8\l  br i1 %cmp102, label %for.body.103, label %for.end.113\l|{<s0>T|<s1>F}}"];
	Node0x5fdd0e0:s0 -> Node0x5fdd130;
	Node0x5fdd0e0:s1 -> Node0x5fdd1d0;
	Node0x5fdd130 [shape=record,label="{for.body.103:                                     \l  %81 = load i64* %k, align 8\l  %82 = load i64* %j, align 8\l  %arrayidx104 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %82\l  %arrayidx105 = getelementptr inbounds [8 x double]* %arrayidx104, i32 0, i64\l... %81\l  %83 = load double* %arrayidx105, align 8\l  %84 = load double* %c, align 8\l  %85 = load i64* %k, align 8\l  %86 = load i64* %i, align 8\l  %arrayidx106 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %86\l  %arrayidx107 = getelementptr inbounds [8 x double]* %arrayidx106, i32 0, i64\l... %85\l  %87 = load double* %arrayidx107, align 8\l  %mul = fmul double %84, %87\l  %sub108 = fsub double %83, %mul\l  %88 = load i64* %k, align 8\l  %89 = load i64* %j, align 8\l  %arrayidx109 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %89\l  %arrayidx110 = getelementptr inbounds [8 x double]* %arrayidx109, i32 0, i64\l... %88\l  store double %sub108, double* %arrayidx110, align 8\l  br label %for.inc.111\l}"];
	Node0x5fdd130 -> Node0x5fdd180;
	Node0x5fdd180 [shape=record,label="{for.inc.111:                                      \l  %90 = load i64* %k, align 8\l  %inc112 = add nsw i64 %90, 1\l  store i64 %inc112, i64* %k, align 8\l  br label %for.cond.101\l}"];
	Node0x5fdd180 -> Node0x5fdd0e0;
	Node0x5fdd1d0 [shape=record,label="{for.end.113:                                      \l  br label %for.inc.114\l}"];
	Node0x5fdd1d0 -> Node0x5fdd220;
	Node0x5fdd220 [shape=record,label="{for.inc.114:                                      \l  %91 = load i64* %j, align 8\l  %inc115 = add nsw i64 %91, 1\l  store i64 %inc115, i64* %j, align 8\l  br label %for.cond.91\l}"];
	Node0x5fdd220 -> Node0x5fdd040;
	Node0x5fdd270 [shape=record,label="{for.end.116:                                      \l  br label %for.inc.117\l}"];
	Node0x5fdd270 -> Node0x5fdd2c0;
	Node0x5fdd2c0 [shape=record,label="{for.inc.117:                                      \l  %92 = load i64* %i, align 8\l  %inc118 = add nsw i64 %92, 1\l  store i64 %inc118, i64* %i, align 8\l  br label %for.cond.28\l}"];
	Node0x5fdd2c0 -> Node0x5fdc780;
	Node0x5fdd310 [shape=record,label="{for.end.119:                                      \l  store i64 0, i64* %i, align 8\l  br label %for.cond.120\l}"];
	Node0x5fdd310 -> Node0x5fdd360;
	Node0x5fdd360 [shape=record,label="{for.cond.120:                                     \l  %93 = load i64* %i, align 8\l  %cmp121 = icmp slt i64 %93, 3\l  br i1 %cmp121, label %for.body.122, label %for.end.154\l|{<s0>T|<s1>F}}"];
	Node0x5fdd360:s0 -> Node0x5fdd3b0;
	Node0x5fdd360:s1 -> Node0x5fdd6d0;
	Node0x5fdd3b0 [shape=record,label="{for.body.122:                                     \l  %94 = load i64* %i, align 8\l  %add123 = add nsw i64 %94, 1\l  store i64 %add123, i64* %j, align 8\l  br label %for.cond.124\l}"];
	Node0x5fdd3b0 -> Node0x5fdd400;
	Node0x5fdd400 [shape=record,label="{for.cond.124:                                     \l  %95 = load i64* %j, align 8\l  %cmp125 = icmp slt i64 %95, 4\l  br i1 %cmp125, label %for.body.126, label %for.end.151\l|{<s0>T|<s1>F}}"];
	Node0x5fdd400:s0 -> Node0x5fdd450;
	Node0x5fdd400:s1 -> Node0x5fdd630;
	Node0x5fdd450 [shape=record,label="{for.body.126:                                     \l  %96 = load i64* %j, align 8\l  %97 = load i64* %i, align 8\l  %arrayidx127 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %97\l  %arrayidx128 = getelementptr inbounds [8 x double]* %arrayidx127, i32 0, i64\l... %96\l  %98 = load double* %arrayidx128, align 8\l  %99 = load i64* %j, align 8\l  %100 = load i64* %j, align 8\l  %arrayidx129 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %100\l  %arrayidx130 = getelementptr inbounds [8 x double]* %arrayidx129, i32 0, i64\l... %99\l  %101 = load double* %arrayidx130, align 8\l  %div131 = fdiv double %98, %101\l  store double %div131, double* %c, align 8\l  %102 = load i64* %j, align 8\l  %103 = load i64* %i, align 8\l  %arrayidx132 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %103\l  %arrayidx133 = getelementptr inbounds [8 x double]* %arrayidx132, i32 0, i64\l... %102\l  store double 0.000000e+00, double* %arrayidx133, align 8\l  %104 = load i64* %j, align 8\l  %add134 = add nsw i64 %104, 1\l  store i64 %add134, i64* %k, align 8\l  br label %for.cond.135\l}"];
	Node0x5fdd450 -> Node0x5fdd4a0;
	Node0x5fdd4a0 [shape=record,label="{for.cond.135:                                     \l  %105 = load i64* %k, align 8\l  %cmp136 = icmp slt i64 %105, 8\l  br i1 %cmp136, label %for.body.137, label %for.end.148\l|{<s0>T|<s1>F}}"];
	Node0x5fdd4a0:s0 -> Node0x5fdd4f0;
	Node0x5fdd4a0:s1 -> Node0x5fdd590;
	Node0x5fdd4f0 [shape=record,label="{for.body.137:                                     \l  %106 = load i64* %k, align 8\l  %107 = load i64* %i, align 8\l  %arrayidx138 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %107\l  %arrayidx139 = getelementptr inbounds [8 x double]* %arrayidx138, i32 0, i64\l... %106\l  %108 = load double* %arrayidx139, align 8\l  %109 = load double* %c, align 8\l  %110 = load i64* %k, align 8\l  %111 = load i64* %j, align 8\l  %arrayidx140 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %111\l  %arrayidx141 = getelementptr inbounds [8 x double]* %arrayidx140, i32 0, i64\l... %110\l  %112 = load double* %arrayidx141, align 8\l  %mul142 = fmul double %109, %112\l  %sub143 = fsub double %108, %mul142\l  %113 = load i64* %k, align 8\l  %114 = load i64* %i, align 8\l  %arrayidx144 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %114\l  %arrayidx145 = getelementptr inbounds [8 x double]* %arrayidx144, i32 0, i64\l... %113\l  store double %sub143, double* %arrayidx145, align 8\l  br label %for.inc.146\l}"];
	Node0x5fdd4f0 -> Node0x5fdd540;
	Node0x5fdd540 [shape=record,label="{for.inc.146:                                      \l  %115 = load i64* %k, align 8\l  %inc147 = add nsw i64 %115, 1\l  store i64 %inc147, i64* %k, align 8\l  br label %for.cond.135\l}"];
	Node0x5fdd540 -> Node0x5fdd4a0;
	Node0x5fdd590 [shape=record,label="{for.end.148:                                      \l  br label %for.inc.149\l}"];
	Node0x5fdd590 -> Node0x5fdd5e0;
	Node0x5fdd5e0 [shape=record,label="{for.inc.149:                                      \l  %116 = load i64* %j, align 8\l  %inc150 = add nsw i64 %116, 1\l  store i64 %inc150, i64* %j, align 8\l  br label %for.cond.124\l}"];
	Node0x5fdd5e0 -> Node0x5fdd400;
	Node0x5fdd630 [shape=record,label="{for.end.151:                                      \l  br label %for.inc.152\l}"];
	Node0x5fdd630 -> Node0x5fdd680;
	Node0x5fdd680 [shape=record,label="{for.inc.152:                                      \l  %117 = load i64* %i, align 8\l  %inc153 = add nsw i64 %117, 1\l  store i64 %inc153, i64* %i, align 8\l  br label %for.cond.120\l}"];
	Node0x5fdd680 -> Node0x5fdd360;
	Node0x5fdd6d0 [shape=record,label="{for.end.154:                                      \l  store i64 0, i64* %i, align 8\l  br label %for.cond.155\l}"];
	Node0x5fdd6d0 -> Node0x5fdd720;
	Node0x5fdd720 [shape=record,label="{for.cond.155:                                     \l  %118 = load i64* %i, align 8\l  %cmp156 = icmp slt i64 %118, 4\l  br i1 %cmp156, label %for.body.157, label %for.end.171\l|{<s0>T|<s1>F}}"];
	Node0x5fdd720:s0 -> Node0x5fdd770;
	Node0x5fdd720:s1 -> Node0x5fdd950;
	Node0x5fdd770 [shape=record,label="{for.body.157:                                     \l  store i64 4, i64* %k, align 8\l  br label %for.cond.158\l}"];
	Node0x5fdd770 -> Node0x5fdd7c0;
	Node0x5fdd7c0 [shape=record,label="{for.cond.158:                                     \l  %119 = load i64* %k, align 8\l  %cmp159 = icmp slt i64 %119, 8\l  br i1 %cmp159, label %for.body.160, label %for.end.168\l|{<s0>T|<s1>F}}"];
	Node0x5fdd7c0:s0 -> Node0x5fdd810;
	Node0x5fdd7c0:s1 -> Node0x5fdd8b0;
	Node0x5fdd810 [shape=record,label="{for.body.160:                                     \l  %120 = load i64* %i, align 8\l  %121 = load i64* %i, align 8\l  %arrayidx161 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %121\l  %arrayidx162 = getelementptr inbounds [8 x double]* %arrayidx161, i32 0, i64\l... %120\l  %122 = load double* %arrayidx162, align 8\l  %123 = load i64* %k, align 8\l  %124 = load i64* %i, align 8\l  %arrayidx163 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %124\l  %arrayidx164 = getelementptr inbounds [8 x double]* %arrayidx163, i32 0, i64\l... %123\l  %125 = load double* %arrayidx164, align 8\l  %div165 = fdiv double %125, %122\l  store double %div165, double* %arrayidx164, align 8\l  br label %for.inc.166\l}"];
	Node0x5fdd810 -> Node0x5fdd860;
	Node0x5fdd860 [shape=record,label="{for.inc.166:                                      \l  %126 = load i64* %k, align 8\l  %inc167 = add nsw i64 %126, 1\l  store i64 %inc167, i64* %k, align 8\l  br label %for.cond.158\l}"];
	Node0x5fdd860 -> Node0x5fdd7c0;
	Node0x5fdd8b0 [shape=record,label="{for.end.168:                                      \l  br label %for.inc.169\l}"];
	Node0x5fdd8b0 -> Node0x5fdd900;
	Node0x5fdd900 [shape=record,label="{for.inc.169:                                      \l  %127 = load i64* %i, align 8\l  %inc170 = add nsw i64 %127, 1\l  store i64 %inc170, i64* %i, align 8\l  br label %for.cond.155\l}"];
	Node0x5fdd900 -> Node0x5fdd720;
	Node0x5fdd950 [shape=record,label="{for.end.171:                                      \l  store i64 0, i64* %i, align 8\l  br label %for.cond.172\l}"];
	Node0x5fdd950 -> Node0x5fdd9a0;
	Node0x5fdd9a0 [shape=record,label="{for.cond.172:                                     \l  %128 = load i64* %i, align 8\l  %cmp173 = icmp slt i64 %128, 4\l  br i1 %cmp173, label %for.body.174, label %for.end.188\l|{<s0>T|<s1>F}}"];
	Node0x5fdd9a0:s0 -> Node0x5fdd9f0;
	Node0x5fdd9a0:s1 -> Node0x5fddbd0;
	Node0x5fdd9f0 [shape=record,label="{for.body.174:                                     \l  store i64 4, i64* %j, align 8\l  br label %for.cond.175\l}"];
	Node0x5fdd9f0 -> Node0x5fdda40;
	Node0x5fdda40 [shape=record,label="{for.cond.175:                                     \l  %129 = load i64* %j, align 8\l  %cmp176 = icmp slt i64 %129, 8\l  br i1 %cmp176, label %for.body.177, label %for.end.185\l|{<s0>T|<s1>F}}"];
	Node0x5fdda40:s0 -> Node0x5fdda90;
	Node0x5fdda40:s1 -> Node0x5fddb30;
	Node0x5fdda90 [shape=record,label="{for.body.177:                                     \l  %130 = load i64* %j, align 8\l  %131 = load i64* %i, align 8\l  %arrayidx178 = getelementptr inbounds [4 x [8 x double]]* %gjmat, i32 0, i64\l... %131\l  %arrayidx179 = getelementptr inbounds [8 x double]* %arrayidx178, i32 0, i64\l... %130\l  %132 = load double* %arrayidx179, align 8\l  %133 = load i64* %j, align 8\l  %sub180 = sub nsw i64 %133, 4\l  %134 = load i64* %i, align 8\l  %135 = load [4 x double]** %Minv.addr, align 8\l  %arrayidx181 = getelementptr inbounds [4 x double]* %135, i64 %134\l  %arrayidx182 = getelementptr inbounds [4 x double]* %arrayidx181, i32 0, i64\l... %sub180\l  store double %132, double* %arrayidx182, align 8\l  br label %for.inc.183\l}"];
	Node0x5fdda90 -> Node0x5fddae0;
	Node0x5fddae0 [shape=record,label="{for.inc.183:                                      \l  %136 = load i64* %j, align 8\l  %inc184 = add nsw i64 %136, 1\l  store i64 %inc184, i64* %j, align 8\l  br label %for.cond.175\l}"];
	Node0x5fddae0 -> Node0x5fdda40;
	Node0x5fddb30 [shape=record,label="{for.end.185:                                      \l  br label %for.inc.186\l}"];
	Node0x5fddb30 -> Node0x5fddb80;
	Node0x5fddb80 [shape=record,label="{for.inc.186:                                      \l  %137 = load i64* %i, align 8\l  %inc187 = add nsw i64 %137, 1\l  store i64 %inc187, i64* %i, align 8\l  br label %for.cond.172\l}"];
	Node0x5fddb80 -> Node0x5fdd9a0;
	Node0x5fddbd0 [shape=record,label="{for.end.188:                                      \l  %arraydecay = getelementptr inbounds [4 x [4 x double]]* %tmp, i32 0, i32 0\l  %138 = load [4 x double]** %Mat.addr, align 8\l  %139 = load [4 x double]** %Minv.addr, align 8\l  call void @MatrixMult([4 x double]* %arraydecay, [4 x double]* %138, [4 x\l... double]* %139)\l  ret void\l}"];
}
