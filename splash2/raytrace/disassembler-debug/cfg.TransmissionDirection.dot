digraph "CFG for 'TransmissionDirection' function" {
	label="CFG for 'TransmissionDirection' function";

	Node0x60614f0 [shape=record,label="{entry:\l  %retval = alloca i64, align 8\l  %T.addr = alloca double*, align 8\l  %N.addr = alloca double*, align 8\l  %I.addr = alloca double*, align 8\l  %kn.addr = alloca double, align 8\l  %vprime = alloca [4 x double], align 16\l  %vplusn = alloca [4 x double], align 16\l  %I_dot_N = alloca double, align 8\l  %kf = alloca double, align 8\l  %vprime_sq = alloca double, align 8\l  %vplusn_sq = alloca double, align 8\l  store double* %T, double** %T.addr, align 8\l  store double* %N, double** %N.addr, align 8\l  store double* %I, double** %I.addr, align 8\l  store double %kn, double* %kn.addr, align 8\l  %0 = load double** %I.addr, align 8\l  %arrayidx = getelementptr inbounds double* %0, i64 0\l  %1 = load double* %arrayidx, align 8\l  %2 = load double** %N.addr, align 8\l  %arrayidx1 = getelementptr inbounds double* %2, i64 0\l  %3 = load double* %arrayidx1, align 8\l  %mul = fmul double %1, %3\l  %4 = load double** %I.addr, align 8\l  %arrayidx2 = getelementptr inbounds double* %4, i64 1\l  %5 = load double* %arrayidx2, align 8\l  %6 = load double** %N.addr, align 8\l  %arrayidx3 = getelementptr inbounds double* %6, i64 1\l  %7 = load double* %arrayidx3, align 8\l  %mul4 = fmul double %5, %7\l  %add = fadd double %mul, %mul4\l  %8 = load double** %I.addr, align 8\l  %arrayidx5 = getelementptr inbounds double* %8, i64 2\l  %9 = load double* %arrayidx5, align 8\l  %10 = load double** %N.addr, align 8\l  %arrayidx6 = getelementptr inbounds double* %10, i64 2\l  %11 = load double* %arrayidx6, align 8\l  %mul7 = fmul double %9, %11\l  %add8 = fadd double %add, %mul7\l  store double %add8, double* %I_dot_N, align 8\l  %12 = load double* %I_dot_N, align 8\l  %cmp = fcmp ogt double %12, 0.000000e+00\l  br i1 %cmp, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x60614f0:s0 -> Node0x6061dc0;
	Node0x60614f0:s1 -> Node0x6061e10;
	Node0x6061dc0 [shape=record,label="{cond.true:                                        \l  %13 = load double* %I_dot_N, align 8\l  br label %cond.end\l}"];
	Node0x6061dc0 -> Node0x6061e60;
	Node0x6061e10 [shape=record,label="{cond.false:                                       \l  %14 = load double* %I_dot_N, align 8\l  %sub = fsub double -0.000000e+00, %14\l  br label %cond.end\l}"];
	Node0x6061e10 -> Node0x6061e60;
	Node0x6061e60 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %13, %cond.true ], [ %sub, %cond.false ]\l  store double %cond, double* %I_dot_N, align 8\l  %15 = load double* %I_dot_N, align 8\l  %div = fdiv double 1.000000e+00, %15\l  store double %div, double* %I_dot_N, align 8\l  %16 = load double* %I_dot_N, align 8\l  %17 = load double** %I.addr, align 8\l  %arrayidx9 = getelementptr inbounds double* %17, i64 0\l  %18 = load double* %arrayidx9, align 8\l  %mul10 = fmul double %16, %18\l  %arrayidx11 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  store double %mul10, double* %arrayidx11, align 8\l  %19 = load double* %I_dot_N, align 8\l  %20 = load double** %I.addr, align 8\l  %arrayidx12 = getelementptr inbounds double* %20, i64 1\l  %21 = load double* %arrayidx12, align 8\l  %mul13 = fmul double %19, %21\l  %arrayidx14 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  store double %mul13, double* %arrayidx14, align 8\l  %22 = load double* %I_dot_N, align 8\l  %23 = load double** %I.addr, align 8\l  %arrayidx15 = getelementptr inbounds double* %23, i64 2\l  %24 = load double* %arrayidx15, align 8\l  %mul16 = fmul double %22, %24\l  %arrayidx17 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  store double %mul16, double* %arrayidx17, align 8\l  %arrayidx18 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  %25 = load double* %arrayidx18, align 8\l  %26 = load double** %N.addr, align 8\l  %arrayidx19 = getelementptr inbounds double* %26, i64 0\l  %27 = load double* %arrayidx19, align 8\l  %add20 = fadd double %25, %27\l  %arrayidx21 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  store double %add20, double* %arrayidx21, align 8\l  %arrayidx22 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  %28 = load double* %arrayidx22, align 8\l  %29 = load double** %N.addr, align 8\l  %arrayidx23 = getelementptr inbounds double* %29, i64 1\l  %30 = load double* %arrayidx23, align 8\l  %add24 = fadd double %28, %30\l  %arrayidx25 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  store double %add24, double* %arrayidx25, align 8\l  %arrayidx26 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  %31 = load double* %arrayidx26, align 8\l  %32 = load double** %N.addr, align 8\l  %arrayidx27 = getelementptr inbounds double* %32, i64 2\l  %33 = load double* %arrayidx27, align 8\l  %add28 = fadd double %31, %33\l  %arrayidx29 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  store double %add28, double* %arrayidx29, align 8\l  %arrayidx30 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  %34 = load double* %arrayidx30, align 8\l  %arrayidx31 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  %35 = load double* %arrayidx31, align 8\l  %mul32 = fmul double %34, %35\l  %arrayidx33 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  %36 = load double* %arrayidx33, align 8\l  %arrayidx34 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  %37 = load double* %arrayidx34, align 8\l  %mul35 = fmul double %36, %37\l  %add36 = fadd double %mul32, %mul35\l  %arrayidx37 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  %38 = load double* %arrayidx37, align 8\l  %arrayidx38 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  %39 = load double* %arrayidx38, align 8\l  %mul39 = fmul double %38, %39\l  %add40 = fadd double %add36, %mul39\l  store double %add40, double* %vprime_sq, align 8\l  %arrayidx41 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  %40 = load double* %arrayidx41, align 8\l  %arrayidx42 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  %41 = load double* %arrayidx42, align 8\l  %mul43 = fmul double %40, %41\l  %arrayidx44 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  %42 = load double* %arrayidx44, align 8\l  %arrayidx45 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  %43 = load double* %arrayidx45, align 8\l  %mul46 = fmul double %42, %43\l  %add47 = fadd double %mul43, %mul46\l  %arrayidx48 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  %44 = load double* %arrayidx48, align 8\l  %arrayidx49 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  %45 = load double* %arrayidx49, align 8\l  %mul50 = fmul double %44, %45\l  %add51 = fadd double %add47, %mul50\l  store double %add51, double* %vplusn_sq, align 8\l  %46 = load double* %kn.addr, align 8\l  %47 = load double* %kn.addr, align 8\l  %mul52 = fmul double %46, %47\l  %48 = load double* %vprime_sq, align 8\l  %mul53 = fmul double %mul52, %48\l  %49 = load double* %vplusn_sq, align 8\l  %sub54 = fsub double %mul53, %49\l  store double %sub54, double* %kf, align 8\l  %50 = load double* %kf, align 8\l  %cmp55 = fcmp ogt double %50, 1.000000e-07\l  br i1 %cmp55, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x6061e60:s0 -> Node0x6061eb0;
	Node0x6061e60:s1 -> Node0x6061f00;
	Node0x6061eb0 [shape=record,label="{if.then:                                          \l  %51 = load double* %kf, align 8\l  %call = call double @sqrt(double %51)\l  %div56 = fdiv double 1.000000e+00, %call\l  store double %div56, double* %kf, align 8\l  %52 = load double* %kf, align 8\l  %arrayidx57 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  %53 = load double* %arrayidx57, align 8\l  %mul58 = fmul double %52, %53\l  %arrayidx59 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  store double %mul58, double* %arrayidx59, align 8\l  %54 = load double* %kf, align 8\l  %arrayidx60 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  %55 = load double* %arrayidx60, align 8\l  %mul61 = fmul double %54, %55\l  %arrayidx62 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  store double %mul61, double* %arrayidx62, align 8\l  %56 = load double* %kf, align 8\l  %arrayidx63 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  %57 = load double* %arrayidx63, align 8\l  %mul64 = fmul double %56, %57\l  %arrayidx65 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  store double %mul64, double* %arrayidx65, align 8\l  %arrayidx66 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 0\l  %58 = load double* %arrayidx66, align 8\l  %59 = load double** %N.addr, align 8\l  %arrayidx67 = getelementptr inbounds double* %59, i64 0\l  %60 = load double* %arrayidx67, align 8\l  %sub68 = fsub double %58, %60\l  %61 = load double** %T.addr, align 8\l  %arrayidx69 = getelementptr inbounds double* %61, i64 0\l  store double %sub68, double* %arrayidx69, align 8\l  %arrayidx70 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 1\l  %62 = load double* %arrayidx70, align 8\l  %63 = load double** %N.addr, align 8\l  %arrayidx71 = getelementptr inbounds double* %63, i64 1\l  %64 = load double* %arrayidx71, align 8\l  %sub72 = fsub double %62, %64\l  %65 = load double** %T.addr, align 8\l  %arrayidx73 = getelementptr inbounds double* %65, i64 1\l  store double %sub72, double* %arrayidx73, align 8\l  %arrayidx74 = getelementptr inbounds [4 x double]* %vplusn, i32 0, i64 2\l  %66 = load double* %arrayidx74, align 8\l  %67 = load double** %N.addr, align 8\l  %arrayidx75 = getelementptr inbounds double* %67, i64 2\l  %68 = load double* %arrayidx75, align 8\l  %sub76 = fsub double %66, %68\l  %69 = load double** %T.addr, align 8\l  %arrayidx77 = getelementptr inbounds double* %69, i64 2\l  store double %sub76, double* %arrayidx77, align 8\l  %70 = load double** %T.addr, align 8\l  call void @VecNorm(double* %70)\l  br label %if.end\l}"];
	Node0x6061eb0 -> Node0x6061f50;
	Node0x6061f00 [shape=record,label="{if.else:                                          \l  store i64 0, i64* %retval\l  br label %return\l}"];
	Node0x6061f00 -> Node0x6061fa0;
	Node0x6061f50 [shape=record,label="{if.end:                                           \l  store i64 1, i64* %retval\l  br label %return\l}"];
	Node0x6061f50 -> Node0x6061fa0;
	Node0x6061fa0 [shape=record,label="{return:                                           \l  %71 = load i64* %retval\l  ret i64 %71\l}"];
}
