digraph "CFG for 'SphPeIntersect' function" {
	label="CFG for 'SphPeIntersect' function";

	Node0x608a2e0 [shape=record,label="{entry:\l  %retval = alloca i64, align 8\l  %pr.addr = alloca %struct.ray*, align 8\l  %pe.addr = alloca %struct.element*, align 8\l  %hit.addr = alloca %struct.irecord*, align 8\l  %nhits = alloca i64, align 8\l  %b = alloca double, align 8\l  %disc = alloca double, align 8\l  %t1 = alloca double, align 8\l  %t2 = alloca double, align 8\l  %vsq = alloca double, align 8\l  %ps = alloca %struct.sphere*, align 8\l  %V = alloca [4 x double], align 16\l  %sphhit = alloca %struct.irecord*, align 8\l  br label %return\l}"];
	Node0x608a2e0 -> Node0x608a600;
	Node0x608a330 [shape=record,label="{land.lhs.true:                                    \l  br label %return\l}"];
	Node0x608a330 -> Node0x608a600;
	Node0x608a380 [shape=record,label="{if.then:                                          \l  br label %return\l}"];
	Node0x608a380 -> Node0x608a600;
	Node0x608a3d0 [shape=record,label="{if.end:                                           \l  br label %return\l}"];
	Node0x608a3d0 -> Node0x608a600;
	Node0x608a420 [shape=record,label="{if.then.43:                                       \l  br label %return\l}"];
	Node0x608a420 -> Node0x608a600;
	Node0x608a470 [shape=record,label="{if.end.44:                                        \l  br label %return\l}"];
	Node0x608a470 -> Node0x608a600;
	Node0x608a4c0 [shape=record,label="{if.then.48:                                       \l  br label %return\l}"];
	Node0x608a4c0 -> Node0x608a600;
	Node0x608a510 [shape=record,label="{if.end.49:                                        \l  br label %if.end.52\l}"];
	Node0x608a510 -> Node0x608a5b0;
	Node0x608a560 [shape=record,label="{if.then.51:                                       \l  br label %if.end.52\l}"];
	Node0x608a560 -> Node0x608a5b0;
	Node0x608a5b0 [shape=record,label="{if.end.52:                                        \l  br label %return\l}"];
	Node0x608a5b0 -> Node0x608a600;
	Node0x608a600 [shape=record,label="{return:                                           \l  ret i64 undef\l}"];
}
