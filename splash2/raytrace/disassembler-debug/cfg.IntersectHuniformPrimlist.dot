digraph "CFG for 'IntersectHuniformPrimlist' function" {
	label="CFG for 'IntersectHuniformPrimlist' function";

	Node0x5f65de0 [shape=record,label="{entry:\l  %intersectPrim.addr = alloca i64*, align 8\l  %hit.addr = alloca %struct.irecord*, align 8\l  %v.addr = alloca %struct.voxel*, align 8\l  %r.addr = alloca %struct.ray*, align 8\l  %pid.addr = alloca i64, align 8\l  %pptr = alloca %struct.element**, align 8\l  %peParent = alloca %struct.object*, align 8\l  %pe = alloca %struct.element*, align 8\l  %newhit = alloca [2 x %struct.irecord], align 16\l  %hitcode = alloca i64, align 8\l  %i = alloca i64, align 8\l  %t_out = alloca double, align 8\l  store i64* %intersectPrim, i64** %intersectPrim.addr, align 8\l  store %struct.irecord* %hit, %struct.irecord** %hit.addr, align 8\l  store %struct.voxel* %v, %struct.voxel** %v.addr, align 8\l  store %struct.ray* %r, %struct.ray** %r.addr, align 8\l  %0 = load %struct.ray** %r.addr, align 8\l  %ri = getelementptr inbounds %struct.ray* %0, i32 0, i32 8\l  %1 = load %struct.rayinfo** %ri, align 8\l  %t_out1 = getelementptr inbounds %struct.rayinfo* %1, i32 0, i32 5\l  %2 = load double* %t_out1, align 8\l  store double %2, double* %t_out, align 8\l  %3 = load %struct.irecord** %hit.addr, align 8\l  %arrayidx = getelementptr inbounds %struct.irecord* %3, i64 0\l  %t = getelementptr inbounds %struct.irecord* %arrayidx, i32 0, i32 0\l  store double 1.000000e+32, double* %t, align 8\l  %4 = load %struct.voxel** %v.addr, align 8\l  %cell = getelementptr inbounds %struct.voxel* %4, i32 0, i32 1\l  %5 = load i8** %cell, align 8\l  %6 = bitcast i8* %5 to %struct.element**\l  store %struct.element** %6, %struct.element*** %pptr, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5f65de0 -> Node0x5f65e30;
	Node0x5f65e30 [shape=record,label="{for.cond:                                         \l  %7 = load i64* %i, align 8\l  %8 = load %struct.voxel** %v.addr, align 8\l  %numelements = getelementptr inbounds %struct.voxel* %8, i32 0, i32 3\l  %9 = load i64* %numelements, align 8\l  %cmp = icmp slt i64 %7, %9\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5f65e30:s0 -> Node0x5f65e80;
	Node0x5f65e30:s1 -> Node0x5f660b0;
	Node0x5f65e80 [shape=record,label="{for.body:                                         \l  %10 = load i64* %i, align 8\l  %11 = load %struct.element*** %pptr, align 8\l  %arrayidx2 = getelementptr inbounds %struct.element** %11, i64 %10\l  %12 = load %struct.element** %arrayidx2, align 8\l  store %struct.element* %12, %struct.element** %pe, align 8\l  %13 = load %struct.element** %pe, align 8\l  %parent = getelementptr inbounds %struct.element* %13, i32 0, i32 2\l  %14 = load %struct.object** %parent, align 8\l  store %struct.object* %14, %struct.object** %peParent, align 8\l  %15 = load %struct.object** %peParent, align 8\l  %procs = getelementptr inbounds %struct.object* %15, i32 0, i32 5\l  %16 = load %struct.pprocs** %procs, align 8\l  %pe_intersect = getelementptr inbounds %struct.pprocs* %16, i32 0, i32 6\l  %17 = load i64 (...)** %pe_intersect, align 8\l  %callee.knr.cast = bitcast i64 (...)* %17 to i64 (%struct.ray*,\l... %struct.element*, %struct.irecord*, ...)*\l  %call = call i64 (%struct.ray*, %struct.element*, %struct.irecord*, ...)\l... *%callee.knr.cast(%struct.ray* undef, %struct.element* undef,\l... %struct.irecord* undef)\l  store i64 %call, i64* %hitcode, align 8\l  %18 = load i64* %hitcode, align 8\l  %tobool = icmp ne i64 %18, 0\l  br i1 %tobool, label %if.then, label %if.end.14\l|{<s0>T|<s1>F}}"];
	Node0x5f65e80:s0 -> Node0x5f65ed0;
	Node0x5f65e80:s1 -> Node0x5f66010;
	Node0x5f65ed0 [shape=record,label="{if.then:                                          \l  %arrayidx3 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0,\l... i64 0\l  %t4 = getelementptr inbounds %struct.irecord* %arrayidx3, i32 0, i32 0\l  %19 = load double* %t4, align 8\l  %20 = load %struct.irecord** %hit.addr, align 8\l  %arrayidx5 = getelementptr inbounds %struct.irecord* %20, i64 0\l  %t6 = getelementptr inbounds %struct.irecord* %arrayidx5, i32 0, i32 0\l  %21 = load double* %t6, align 8\l  %cmp7 = fcmp olt double %19, %21\l  br i1 %cmp7, label %land.lhs.true, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5f65ed0:s0 -> Node0x5f65f20;
	Node0x5f65ed0:s1 -> Node0x5f65fc0;
	Node0x5f65f20 [shape=record,label="{land.lhs.true:                                    \l  %arrayidx8 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0,\l... i64 0\l  %t9 = getelementptr inbounds %struct.irecord* %arrayidx8, i32 0, i32 0\l  %22 = load double* %t9, align 8\l  %23 = load double* %t_out, align 8\l  %cmp10 = fcmp olt double %22, %23\l  br i1 %cmp10, label %if.then.11, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5f65f20:s0 -> Node0x5f65f70;
	Node0x5f65f20:s1 -> Node0x5f65fc0;
	Node0x5f65f70 [shape=record,label="{if.then.11:                                       \l  %24 = load %struct.irecord** %hit.addr, align 8\l  %arrayidx12 = getelementptr inbounds %struct.irecord* %24, i64 0\l  %arrayidx13 = getelementptr inbounds [2 x %struct.irecord]* %newhit, i32 0,\l... i64 0\l  %25 = bitcast %struct.irecord* %arrayidx12 to i8*\l  %26 = bitcast %struct.irecord* %arrayidx13 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 40, i32 8, i1\l... false)\l  br label %if.end\l}"];
	Node0x5f65f70 -> Node0x5f65fc0;
	Node0x5f65fc0 [shape=record,label="{if.end:                                           \l  br label %if.end.14\l}"];
	Node0x5f65fc0 -> Node0x5f66010;
	Node0x5f66010 [shape=record,label="{if.end.14:                                        \l  br label %for.inc\l}"];
	Node0x5f66010 -> Node0x5f66060;
	Node0x5f66060 [shape=record,label="{for.inc:                                          \l  %27 = load i64* %i, align 8\l  %inc = add nsw i64 %27, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5f66060 -> Node0x5f65e30;
	Node0x5f660b0 [shape=record,label="{for.end:                                          \l  %28 = load %struct.irecord** %hit.addr, align 8\l  %arrayidx15 = getelementptr inbounds %struct.irecord* %28, i64 0\l  %t16 = getelementptr inbounds %struct.irecord* %arrayidx15, i32 0, i32 0\l  %29 = load double* %t16, align 8\l  %cmp17 = fcmp olt double %29, 1.000000e+32\l  br i1 %cmp17, label %if.then.18, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5f660b0:s0 -> Node0x5f66100;
	Node0x5f660b0:s1 -> Node0x5f66150;
	Node0x5f66100 [shape=record,label="{if.then.18:                                       \l  %30 = load i64** %intersectPrim.addr, align 8\l  store i64 1, i64* %30, align 8\l  br label %if.end.19\l}"];
	Node0x5f66100 -> Node0x5f661a0;
	Node0x5f66150 [shape=record,label="{if.else:                                          \l  %31 = load i64** %intersectPrim.addr, align 8\l  store i64 0, i64* %31, align 8\l  br label %if.end.19\l}"];
	Node0x5f66150 -> Node0x5f661a0;
	Node0x5f661a0 [shape=record,label="{if.end.19:                                        \l  ret void\l}"];
}
