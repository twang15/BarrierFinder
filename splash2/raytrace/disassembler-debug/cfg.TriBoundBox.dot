digraph "CFG for 'TriBoundBox' function" {
	label="CFG for 'TriBoundBox' function";

	Node0x60a7c90 [shape=record,label="{entry:\l  %po.addr = alloca %struct.object*, align 8\l  %i = alloca i64, align 8\l  %pt = alloca %struct.tri*, align 8\l  %pe = alloca %struct.element*, align 8\l  %pbb = alloca %struct.bbox*, align 8\l  %minx = alloca double, align 8\l  %maxx = alloca double, align 8\l  %miny = alloca double, align 8\l  %maxy = alloca double, align 8\l  %minz = alloca double, align 8\l  %maxz = alloca double, align 8\l  store %struct.object* %po, %struct.object** %po.addr, align 8\l  %0 = load %struct.object** %po.addr, align 8\l  %pelem = getelementptr inbounds %struct.object* %0, i32 0, i32 3\l  %1 = load %struct.element** %pelem, align 8\l  store %struct.element* %1, %struct.element** %pe, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x60a7c90 -> Node0x60ae540;
	Node0x60ae540 [shape=record,label="{for.cond:                                         \l  %2 = load i64* %i, align 8\l  %3 = load %struct.object** %po.addr, align 8\l  %numelements = getelementptr inbounds %struct.object* %3, i32 0, i32 4\l  %4 = load i64* %numelements, align 8\l  %cmp = icmp slt i64 %2, %4\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x60ae540:s0 -> Node0x60ae590;
	Node0x60ae540:s1 -> Node0x60aebd0;
	Node0x60ae590 [shape=record,label="{for.body:                                         \l  %5 = load %struct.element** %pe, align 8\l  %data = getelementptr inbounds %struct.element* %5, i32 0, i32 3\l  %6 = load i8** %data, align 8\l  %7 = bitcast i8* %6 to %struct.tri*\l  store %struct.tri* %7, %struct.tri** %pt, align 8\l  %8 = load %struct.element** %pe, align 8\l  %9 = load %struct.tri** %pt, align 8\l  call void @TriElementBoundBox(%struct.element* %8, %struct.tri* %9)\l  br label %cond.end\l}"];
	Node0x60ae590 -> Node0x60ae680;
	Node0x60ae5e0 [shape=record,label="{cond.true:                                        \l  br label %cond.end\l}"];
	Node0x60ae5e0 -> Node0x60ae680;
	Node0x60ae630 [shape=record,label="{cond.false:                                       \l  br label %cond.end\l}"];
	Node0x60ae630 -> Node0x60ae680;
	Node0x60ae680 [shape=record,label="{cond.end:                                         \l  br label %cond.end.15\l}"];
	Node0x60ae680 -> Node0x60ae770;
	Node0x60ae6d0 [shape=record,label="{cond.true.10:                                     \l  br label %cond.end.15\l}"];
	Node0x60ae6d0 -> Node0x60ae770;
	Node0x60ae720 [shape=record,label="{cond.false.11:                                    \l  br label %cond.end.15\l}"];
	Node0x60ae720 -> Node0x60ae770;
	Node0x60ae770 [shape=record,label="{cond.end.15:                                      \l  br label %cond.end.26\l}"];
	Node0x60ae770 -> Node0x60ae860;
	Node0x60ae7c0 [shape=record,label="{cond.true.21:                                     \l  br label %cond.end.26\l}"];
	Node0x60ae7c0 -> Node0x60ae860;
	Node0x60ae810 [shape=record,label="{cond.false.22:                                    \l  br label %cond.end.26\l}"];
	Node0x60ae810 -> Node0x60ae860;
	Node0x60ae860 [shape=record,label="{cond.end.26:                                      \l  br label %cond.end.36\l}"];
	Node0x60ae860 -> Node0x60ae950;
	Node0x60ae8b0 [shape=record,label="{cond.true.31:                                     \l  br label %cond.end.36\l}"];
	Node0x60ae8b0 -> Node0x60ae950;
	Node0x60ae900 [shape=record,label="{cond.false.32:                                    \l  br label %cond.end.36\l}"];
	Node0x60ae900 -> Node0x60ae950;
	Node0x60ae950 [shape=record,label="{cond.end.36:                                      \l  br label %cond.end.47\l}"];
	Node0x60ae950 -> Node0x60aea40;
	Node0x60ae9a0 [shape=record,label="{cond.true.42:                                     \l  br label %cond.end.47\l}"];
	Node0x60ae9a0 -> Node0x60aea40;
	Node0x60ae9f0 [shape=record,label="{cond.false.43:                                    \l  br label %cond.end.47\l}"];
	Node0x60ae9f0 -> Node0x60aea40;
	Node0x60aea40 [shape=record,label="{cond.end.47:                                      \l  br label %cond.end.58\l}"];
	Node0x60aea40 -> Node0x60aeb30;
	Node0x60aea90 [shape=record,label="{cond.true.53:                                     \l  br label %cond.end.58\l}"];
	Node0x60aea90 -> Node0x60aeb30;
	Node0x60aeae0 [shape=record,label="{cond.false.54:                                    \l  br label %cond.end.58\l}"];
	Node0x60aeae0 -> Node0x60aeb30;
	Node0x60aeb30 [shape=record,label="{cond.end.58:                                      \l  %10 = load %struct.element** %pe, align 8\l  %incdec.ptr = getelementptr inbounds %struct.element* %10, i32 1\l  store %struct.element* %incdec.ptr, %struct.element** %pe, align 8\l  br label %for.inc\l}"];
	Node0x60aeb30 -> Node0x60aeb80;
	Node0x60aeb80 [shape=record,label="{for.inc:                                          \l  %11 = load i64* %i, align 8\l  %inc = add nsw i64 %11, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x60aeb80 -> Node0x60ae540;
	Node0x60aebd0 [shape=record,label="{for.end:                                          \l  ret void\l}"];
}
