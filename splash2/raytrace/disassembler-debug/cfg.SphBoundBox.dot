digraph "CFG for 'SphBoundBox' function" {
	label="CFG for 'SphBoundBox' function";

	Node0x6081870 [shape=record,label="{entry:\l  %po.addr = alloca %struct.object*, align 8\l  %i = alloca i64, align 8\l  %ps = alloca %struct.sphere*, align 8\l  %pe = alloca %struct.element*, align 8\l  %pbb = alloca %struct.bbox*, align 8\l  %minx = alloca double, align 8\l  %maxx = alloca double, align 8\l  %miny = alloca double, align 8\l  %maxy = alloca double, align 8\l  %minz = alloca double, align 8\l  %maxz = alloca double, align 8\l  br label %for.cond\l}"];
	Node0x6081870 -> Node0x60818c0;
	Node0x60818c0 [shape=record,label="{for.cond:                                         \l  br label %for.end\l}"];
	Node0x60818c0 -> Node0x6081f50;
	Node0x6081910 [shape=record,label="{for.body:                                         \l  br label %cond.end\l}"];
	Node0x6081910 -> Node0x6081a00;
	Node0x6081960 [shape=record,label="{cond.true:                                        \l  br label %cond.end\l}"];
	Node0x6081960 -> Node0x6081a00;
	Node0x60819b0 [shape=record,label="{cond.false:                                       \l  br label %cond.end\l}"];
	Node0x60819b0 -> Node0x6081a00;
	Node0x6081a00 [shape=record,label="{cond.end:                                         \l  br label %cond.end.15\l}"];
	Node0x6081a00 -> Node0x6081af0;
	Node0x6081a50 [shape=record,label="{cond.true.10:                                     \l  br label %cond.end.15\l}"];
	Node0x6081a50 -> Node0x6081af0;
	Node0x6081aa0 [shape=record,label="{cond.false.11:                                    \l  br label %cond.end.15\l}"];
	Node0x6081aa0 -> Node0x6081af0;
	Node0x6081af0 [shape=record,label="{cond.end.15:                                      \l  br label %cond.end.26\l}"];
	Node0x6081af0 -> Node0x6081be0;
	Node0x6081b40 [shape=record,label="{cond.true.21:                                     \l  br label %cond.end.26\l}"];
	Node0x6081b40 -> Node0x6081be0;
	Node0x6081b90 [shape=record,label="{cond.false.22:                                    \l  br label %cond.end.26\l}"];
	Node0x6081b90 -> Node0x6081be0;
	Node0x6081be0 [shape=record,label="{cond.end.26:                                      \l  br label %cond.end.36\l}"];
	Node0x6081be0 -> Node0x6081cd0;
	Node0x6081c30 [shape=record,label="{cond.true.31:                                     \l  br label %cond.end.36\l}"];
	Node0x6081c30 -> Node0x6081cd0;
	Node0x6081c80 [shape=record,label="{cond.false.32:                                    \l  br label %cond.end.36\l}"];
	Node0x6081c80 -> Node0x6081cd0;
	Node0x6081cd0 [shape=record,label="{cond.end.36:                                      \l  br label %cond.end.47\l}"];
	Node0x6081cd0 -> Node0x6081dc0;
	Node0x6081d20 [shape=record,label="{cond.true.42:                                     \l  br label %cond.end.47\l}"];
	Node0x6081d20 -> Node0x6081dc0;
	Node0x6081d70 [shape=record,label="{cond.false.43:                                    \l  br label %cond.end.47\l}"];
	Node0x6081d70 -> Node0x6081dc0;
	Node0x6081dc0 [shape=record,label="{cond.end.47:                                      \l  br label %cond.end.58\l}"];
	Node0x6081dc0 -> Node0x6081eb0;
	Node0x6081e10 [shape=record,label="{cond.true.53:                                     \l  br label %cond.end.58\l}"];
	Node0x6081e10 -> Node0x6081eb0;
	Node0x6081e60 [shape=record,label="{cond.false.54:                                    \l  br label %cond.end.58\l}"];
	Node0x6081e60 -> Node0x6081eb0;
	Node0x6081eb0 [shape=record,label="{cond.end.58:                                      \l  br label %for.inc\l}"];
	Node0x6081eb0 -> Node0x6081f00;
	Node0x6081f00 [shape=record,label="{for.inc:                                          \l  br label %for.cond\l}"];
	Node0x6081f00 -> Node0x60818c0;
	Node0x6081f50 [shape=record,label="{for.end:                                          \l  ret void\l}"];
}
