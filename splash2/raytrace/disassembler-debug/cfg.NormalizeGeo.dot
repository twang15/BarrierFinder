digraph "CFG for 'NormalizeGeo' function" {
	label="CFG for 'NormalizeGeo' function";

	Node0x5f4ce30 [shape=record,label="{entry:\l  %po.addr = alloca %struct.object*, align 8\l  %model.addr = alloca [4 x double]*, align 8\l  %modelInvT.addr = alloca [4 x double]*, align 8\l  %norm_minx = alloca double, align 8\l  %norm_miny = alloca double, align 8\l  %norm_minz = alloca double, align 8\l  %norm_maxx = alloca double, align 8\l  %norm_maxy = alloca double, align 8\l  %norm_maxz = alloca double, align 8\l  %scale_min = alloca double, align 8\l  %scale_max = alloca double, align 8\l  %scale = alloca double, align 8\l  %trans = alloca double, align 8\l  %poHead = alloca %struct.object*, align 8\l  %normMat = alloca [4 x [4 x double]], align 16\l  %tempMat = alloca [4 x [4 x double]], align 16\l  store %struct.object* %po, %struct.object** %po.addr, align 8\l  %0 = load i64* @TraversalType, align 8\l  %cmp = icmp eq i64 %0, 0\l  br i1 %cmp, label %land.lhs.true, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x5f4ce30:s0 -> Node0x5f4ce80;
	Node0x5f4ce30:s1 -> Node0x5f4ced0;
	Node0x5f4ce80 [shape=record,label="{land.lhs.true:                                    \l  %1 = load i64* @ModelNorm, align 8\l  %cmp1 = icmp eq i64 %1, 0\l  br i1 %cmp1, label %if.end, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x5f4ce80:s0 -> Node0x5f4da60;
	Node0x5f4ce80:s1 -> Node0x5f4ced0;
	Node0x5f4ced0 [shape=record,label="{if.then:                                          \l  store double 1.000000e+32, double* %norm_minz, align 8\l  store double 1.000000e+32, double* %norm_miny, align 8\l  store double 1.000000e+32, double* %norm_minx, align 8\l  store double -1.000000e+32, double* %norm_maxz, align 8\l  store double -1.000000e+32, double* %norm_maxy, align 8\l  store double -1.000000e+32, double* %norm_maxx, align 8\l  br label %while.cond\l}"];
	Node0x5f4ced0 -> Node0x5f4cf20;
	Node0x5f4cf20 [shape=record,label="{while.cond:                                       \l  %2 = load %struct.object** %po.addr, align 8\l  %tobool = icmp ne %struct.object* %2, null\l  br i1 %tobool, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x5f4cf20:s0 -> Node0x5f4cf70;
	Node0x5f4cf20:s1 -> Node0x5f4d560;
	Node0x5f4cf70 [shape=record,label="{while.body:                                       \l  %3 = load double* %norm_minx, align 8\l  %4 = load %struct.object** %po.addr, align 8\l  %bv = getelementptr inbounds %struct.object* %4, i32 0, i32 2\l  %dnear = getelementptr inbounds %struct.bbox* %bv, i32 0, i32 0\l  %arrayidx = getelementptr inbounds [3 x double]* %dnear, i32 0, i64 0\l  %5 = load double* %arrayidx, align 8\l  %cmp2 = fcmp olt double %3, %5\l  br i1 %cmp2, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x5f4cf70:s0 -> Node0x5f4cfc0;
	Node0x5f4cf70:s1 -> Node0x5f4d010;
	Node0x5f4cfc0 [shape=record,label="{cond.true:                                        \l  %6 = load double* %norm_minx, align 8\l  br label %cond.end\l}"];
	Node0x5f4cfc0 -> Node0x5f4d060;
	Node0x5f4d010 [shape=record,label="{cond.false:                                       \l  %7 = load %struct.object** %po.addr, align 8\l  %bv3 = getelementptr inbounds %struct.object* %7, i32 0, i32 2\l  %dnear4 = getelementptr inbounds %struct.bbox* %bv3, i32 0, i32 0\l  %arrayidx5 = getelementptr inbounds [3 x double]* %dnear4, i32 0, i64 0\l  %8 = load double* %arrayidx5, align 8\l  br label %cond.end\l}"];
	Node0x5f4d010 -> Node0x5f4d060;
	Node0x5f4d060 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %6, %cond.true ], [ %8, %cond.false ]\l  store double %cond, double* %norm_minx, align 8\l  %9 = load double* %norm_miny, align 8\l  %10 = load %struct.object** %po.addr, align 8\l  %bv6 = getelementptr inbounds %struct.object* %10, i32 0, i32 2\l  %dnear7 = getelementptr inbounds %struct.bbox* %bv6, i32 0, i32 0\l  %arrayidx8 = getelementptr inbounds [3 x double]* %dnear7, i32 0, i64 1\l  %11 = load double* %arrayidx8, align 8\l  %cmp9 = fcmp olt double %9, %11\l  br i1 %cmp9, label %cond.true.10, label %cond.false.11\l|{<s0>T|<s1>F}}"];
	Node0x5f4d060:s0 -> Node0x5f4d0b0;
	Node0x5f4d060:s1 -> Node0x5f4d100;
	Node0x5f4d0b0 [shape=record,label="{cond.true.10:                                     \l  %12 = load double* %norm_miny, align 8\l  br label %cond.end.15\l}"];
	Node0x5f4d0b0 -> Node0x5f4d150;
	Node0x5f4d100 [shape=record,label="{cond.false.11:                                    \l  %13 = load %struct.object** %po.addr, align 8\l  %bv12 = getelementptr inbounds %struct.object* %13, i32 0, i32 2\l  %dnear13 = getelementptr inbounds %struct.bbox* %bv12, i32 0, i32 0\l  %arrayidx14 = getelementptr inbounds [3 x double]* %dnear13, i32 0, i64 1\l  %14 = load double* %arrayidx14, align 8\l  br label %cond.end.15\l}"];
	Node0x5f4d100 -> Node0x5f4d150;
	Node0x5f4d150 [shape=record,label="{cond.end.15:                                      \l  %cond16 = phi double [ %12, %cond.true.10 ], [ %14, %cond.false.11 ]\l  store double %cond16, double* %norm_miny, align 8\l  %15 = load double* %norm_minz, align 8\l  %16 = load %struct.object** %po.addr, align 8\l  %bv17 = getelementptr inbounds %struct.object* %16, i32 0, i32 2\l  %dnear18 = getelementptr inbounds %struct.bbox* %bv17, i32 0, i32 0\l  %arrayidx19 = getelementptr inbounds [3 x double]* %dnear18, i32 0, i64 2\l  %17 = load double* %arrayidx19, align 8\l  %cmp20 = fcmp olt double %15, %17\l  br i1 %cmp20, label %cond.true.21, label %cond.false.22\l|{<s0>T|<s1>F}}"];
	Node0x5f4d150:s0 -> Node0x5f4d1a0;
	Node0x5f4d150:s1 -> Node0x5f4d1f0;
	Node0x5f4d1a0 [shape=record,label="{cond.true.21:                                     \l  %18 = load double* %norm_minz, align 8\l  br label %cond.end.26\l}"];
	Node0x5f4d1a0 -> Node0x5f4d240;
	Node0x5f4d1f0 [shape=record,label="{cond.false.22:                                    \l  %19 = load %struct.object** %po.addr, align 8\l  %bv23 = getelementptr inbounds %struct.object* %19, i32 0, i32 2\l  %dnear24 = getelementptr inbounds %struct.bbox* %bv23, i32 0, i32 0\l  %arrayidx25 = getelementptr inbounds [3 x double]* %dnear24, i32 0, i64 2\l  %20 = load double* %arrayidx25, align 8\l  br label %cond.end.26\l}"];
	Node0x5f4d1f0 -> Node0x5f4d240;
	Node0x5f4d240 [shape=record,label="{cond.end.26:                                      \l  %cond27 = phi double [ %18, %cond.true.21 ], [ %20, %cond.false.22 ]\l  store double %cond27, double* %norm_minz, align 8\l  %21 = load double* %norm_maxx, align 8\l  %22 = load %struct.object** %po.addr, align 8\l  %bv28 = getelementptr inbounds %struct.object* %22, i32 0, i32 2\l  %dfar = getelementptr inbounds %struct.bbox* %bv28, i32 0, i32 1\l  %arrayidx29 = getelementptr inbounds [3 x double]* %dfar, i32 0, i64 0\l  %23 = load double* %arrayidx29, align 8\l  %cmp30 = fcmp ogt double %21, %23\l  br i1 %cmp30, label %cond.true.31, label %cond.false.32\l|{<s0>T|<s1>F}}"];
	Node0x5f4d240:s0 -> Node0x5f4d290;
	Node0x5f4d240:s1 -> Node0x5f4d2e0;
	Node0x5f4d290 [shape=record,label="{cond.true.31:                                     \l  %24 = load double* %norm_maxx, align 8\l  br label %cond.end.36\l}"];
	Node0x5f4d290 -> Node0x5f4d330;
	Node0x5f4d2e0 [shape=record,label="{cond.false.32:                                    \l  %25 = load %struct.object** %po.addr, align 8\l  %bv33 = getelementptr inbounds %struct.object* %25, i32 0, i32 2\l  %dfar34 = getelementptr inbounds %struct.bbox* %bv33, i32 0, i32 1\l  %arrayidx35 = getelementptr inbounds [3 x double]* %dfar34, i32 0, i64 0\l  %26 = load double* %arrayidx35, align 8\l  br label %cond.end.36\l}"];
	Node0x5f4d2e0 -> Node0x5f4d330;
	Node0x5f4d330 [shape=record,label="{cond.end.36:                                      \l  %cond37 = phi double [ %24, %cond.true.31 ], [ %26, %cond.false.32 ]\l  store double %cond37, double* %norm_maxx, align 8\l  %27 = load double* %norm_maxy, align 8\l  %28 = load %struct.object** %po.addr, align 8\l  %bv38 = getelementptr inbounds %struct.object* %28, i32 0, i32 2\l  %dfar39 = getelementptr inbounds %struct.bbox* %bv38, i32 0, i32 1\l  %arrayidx40 = getelementptr inbounds [3 x double]* %dfar39, i32 0, i64 1\l  %29 = load double* %arrayidx40, align 8\l  %cmp41 = fcmp ogt double %27, %29\l  br i1 %cmp41, label %cond.true.42, label %cond.false.43\l|{<s0>T|<s1>F}}"];
	Node0x5f4d330:s0 -> Node0x5f4d380;
	Node0x5f4d330:s1 -> Node0x5f4d3d0;
	Node0x5f4d380 [shape=record,label="{cond.true.42:                                     \l  %30 = load double* %norm_maxy, align 8\l  br label %cond.end.47\l}"];
	Node0x5f4d380 -> Node0x5f4d420;
	Node0x5f4d3d0 [shape=record,label="{cond.false.43:                                    \l  %31 = load %struct.object** %po.addr, align 8\l  %bv44 = getelementptr inbounds %struct.object* %31, i32 0, i32 2\l  %dfar45 = getelementptr inbounds %struct.bbox* %bv44, i32 0, i32 1\l  %arrayidx46 = getelementptr inbounds [3 x double]* %dfar45, i32 0, i64 1\l  %32 = load double* %arrayidx46, align 8\l  br label %cond.end.47\l}"];
	Node0x5f4d3d0 -> Node0x5f4d420;
	Node0x5f4d420 [shape=record,label="{cond.end.47:                                      \l  %cond48 = phi double [ %30, %cond.true.42 ], [ %32, %cond.false.43 ]\l  store double %cond48, double* %norm_maxy, align 8\l  %33 = load double* %norm_maxz, align 8\l  %34 = load %struct.object** %po.addr, align 8\l  %bv49 = getelementptr inbounds %struct.object* %34, i32 0, i32 2\l  %dfar50 = getelementptr inbounds %struct.bbox* %bv49, i32 0, i32 1\l  %arrayidx51 = getelementptr inbounds [3 x double]* %dfar50, i32 0, i64 2\l  %35 = load double* %arrayidx51, align 8\l  %cmp52 = fcmp ogt double %33, %35\l  br i1 %cmp52, label %cond.true.53, label %cond.false.54\l|{<s0>T|<s1>F}}"];
	Node0x5f4d420:s0 -> Node0x5f4d470;
	Node0x5f4d420:s1 -> Node0x5f4d4c0;
	Node0x5f4d470 [shape=record,label="{cond.true.53:                                     \l  %36 = load double* %norm_maxz, align 8\l  br label %cond.end.58\l}"];
	Node0x5f4d470 -> Node0x5f4d510;
	Node0x5f4d4c0 [shape=record,label="{cond.false.54:                                    \l  %37 = load %struct.object** %po.addr, align 8\l  %bv55 = getelementptr inbounds %struct.object* %37, i32 0, i32 2\l  %dfar56 = getelementptr inbounds %struct.bbox* %bv55, i32 0, i32 1\l  %arrayidx57 = getelementptr inbounds [3 x double]* %dfar56, i32 0, i64 2\l  %38 = load double* %arrayidx57, align 8\l  br label %cond.end.58\l}"];
	Node0x5f4d4c0 -> Node0x5f4d510;
	Node0x5f4d510 [shape=record,label="{cond.end.58:                                      \l  %cond59 = phi double [ %36, %cond.true.53 ], [ %38, %cond.false.54 ]\l  store double %cond59, double* %norm_maxz, align 8\l  %39 = load %struct.object** %po.addr, align 8\l  %next = getelementptr inbounds %struct.object* %39, i32 0, i32 7\l  %40 = load %struct.object** %next, align 8\l  store %struct.object* %40, %struct.object** %po.addr, align 8\l  br label %while.cond\l}"];
	Node0x5f4d510 -> Node0x5f4cf20;
	Node0x5f4d560 [shape=record,label="{while.end:                                        \l  %41 = load double* %norm_minx, align 8\l  %42 = load double* %norm_miny, align 8\l  %cmp60 = fcmp olt double %41, %42\l  br i1 %cmp60, label %cond.true.61, label %cond.false.62\l|{<s0>T|<s1>F}}"];
	Node0x5f4d560:s0 -> Node0x5f4d5b0;
	Node0x5f4d560:s1 -> Node0x5f4d600;
	Node0x5f4d5b0 [shape=record,label="{cond.true.61:                                     \l  %43 = load double* %norm_minx, align 8\l  br label %cond.end.63\l}"];
	Node0x5f4d5b0 -> Node0x5f4d650;
	Node0x5f4d600 [shape=record,label="{cond.false.62:                                    \l  %44 = load double* %norm_miny, align 8\l  br label %cond.end.63\l}"];
	Node0x5f4d600 -> Node0x5f4d650;
	Node0x5f4d650 [shape=record,label="{cond.end.63:                                      \l  %cond64 = phi double [ %43, %cond.true.61 ], [ %44, %cond.false.62 ]\l  store double %cond64, double* %scale_min, align 8\l  %45 = load double* %scale_min, align 8\l  %46 = load double* %norm_minz, align 8\l  %cmp65 = fcmp olt double %45, %46\l  br i1 %cmp65, label %cond.true.66, label %cond.false.67\l|{<s0>T|<s1>F}}"];
	Node0x5f4d650:s0 -> Node0x5f4d6a0;
	Node0x5f4d650:s1 -> Node0x5f4d6f0;
	Node0x5f4d6a0 [shape=record,label="{cond.true.66:                                     \l  %47 = load double* %scale_min, align 8\l  br label %cond.end.68\l}"];
	Node0x5f4d6a0 -> Node0x5f4d740;
	Node0x5f4d6f0 [shape=record,label="{cond.false.67:                                    \l  %48 = load double* %norm_minz, align 8\l  br label %cond.end.68\l}"];
	Node0x5f4d6f0 -> Node0x5f4d740;
	Node0x5f4d740 [shape=record,label="{cond.end.68:                                      \l  %cond69 = phi double [ %47, %cond.true.66 ], [ %48, %cond.false.67 ]\l  store double %cond69, double* %scale_min, align 8\l  %49 = load double* %norm_maxx, align 8\l  %50 = load double* %norm_maxy, align 8\l  %cmp70 = fcmp ogt double %49, %50\l  br i1 %cmp70, label %cond.true.71, label %cond.false.72\l|{<s0>T|<s1>F}}"];
	Node0x5f4d740:s0 -> Node0x5f4d790;
	Node0x5f4d740:s1 -> Node0x5f4d7e0;
	Node0x5f4d790 [shape=record,label="{cond.true.71:                                     \l  %51 = load double* %norm_maxx, align 8\l  br label %cond.end.73\l}"];
	Node0x5f4d790 -> Node0x5f4d830;
	Node0x5f4d7e0 [shape=record,label="{cond.false.72:                                    \l  %52 = load double* %norm_maxy, align 8\l  br label %cond.end.73\l}"];
	Node0x5f4d7e0 -> Node0x5f4d830;
	Node0x5f4d830 [shape=record,label="{cond.end.73:                                      \l  %cond74 = phi double [ %51, %cond.true.71 ], [ %52, %cond.false.72 ]\l  store double %cond74, double* %scale_max, align 8\l  %53 = load double* %scale_max, align 8\l  %54 = load double* %norm_maxz, align 8\l  %cmp75 = fcmp ogt double %53, %54\l  br i1 %cmp75, label %cond.true.76, label %cond.false.77\l|{<s0>T|<s1>F}}"];
	Node0x5f4d830:s0 -> Node0x5f4d880;
	Node0x5f4d830:s1 -> Node0x5f4d8d0;
	Node0x5f4d880 [shape=record,label="{cond.true.76:                                     \l  %55 = load double* %scale_max, align 8\l  br label %cond.end.78\l}"];
	Node0x5f4d880 -> Node0x5f4d920;
	Node0x5f4d8d0 [shape=record,label="{cond.false.77:                                    \l  %56 = load double* %norm_maxz, align 8\l  br label %cond.end.78\l}"];
	Node0x5f4d8d0 -> Node0x5f4d920;
	Node0x5f4d920 [shape=record,label="{cond.end.78:                                      \l  %cond79 = phi double [ %55, %cond.true.76 ], [ %56, %cond.false.77 ]\l  store double %cond79, double* %scale_max, align 8\l  %57 = load double* %scale_max, align 8\l  %58 = load double* %scale_min, align 8\l  %sub = fsub double %57, %58\l  %div = fdiv double 1.000000e+00, %sub\l  store double %div, double* %scale, align 8\l  %59 = load double* %scale_min, align 8\l  %sub80 = fsub double -0.000000e+00, %59\l  %60 = load double* %scale, align 8\l  %mul = fmul double %sub80, %60\l  store double %mul, double* %trans, align 8\l  %arraydecay = getelementptr inbounds [4 x [4 x double]]* %tempMat, i32 0,\l... i32 0\l  %61 = load double* %scale, align 8\l  call void @Scale([4 x double]* %arraydecay, double %61, double undef, double\l... undef)\l  %arraydecay81 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0,\l... i32 0\l  %62 = load double* %trans, align 8\l  call void @Translate([4 x double]* %arraydecay81, double undef, double\l... undef, double %62)\l  %arraydecay82 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0,\l... i32 0\l  %arraydecay83 = getelementptr inbounds [4 x [4 x double]]* %tempMat, i32 0,\l... i32 0\l  %arraydecay84 = getelementptr inbounds [4 x [4 x double]]* %normMat, i32 0,\l... i32 0\l  call void @MatrixMult([4 x double]* %arraydecay82, [4 x double]*\l... %arraydecay83, [4 x double]* %arraydecay84)\l  br label %while.cond.85\l}"];
	Node0x5f4d920 -> Node0x5f4d970;
	Node0x5f4d970 [shape=record,label="{while.cond.85:                                    \l  br label %while.end.90\l}"];
	Node0x5f4d970 -> Node0x5f4da10;
	Node0x5f4d9c0 [shape=record,label="{while.body.87:                                    \l  br label %while.cond.85\l}"];
	Node0x5f4d9c0 -> Node0x5f4d970;
	Node0x5f4da10 [shape=record,label="{while.end.90:                                     \l  br label %if.end\l}"];
	Node0x5f4da10 -> Node0x5f4da60;
	Node0x5f4da60 [shape=record,label="{if.end:                                           \l  ret void\l}"];
}
