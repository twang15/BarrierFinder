digraph "CFG for 'PolyDataNormalize' function" {
	label="CFG for 'PolyDataNormalize' function";

	Node0x5ef2170 [shape=record,label="{entry:\l  %po.addr = alloca %struct.object*, align 8\l  %normMat.addr = alloca [4 x double]*, align 8\l  %i = alloca i64, align 8\l  %coord = alloca [4 x double], align 16\l  %pv = alloca [3 x double]*, align 8\l  %pp = alloca %struct.poly*, align 8\l  %pe = alloca %struct.element*, align 8\l  store %struct.object* %po, %struct.object** %po.addr, align 8\l  store [4 x double]* %normMat, [4 x double]** %normMat.addr, align 8\l  %0 = load %struct.object** %po.addr, align 8\l  %pelem = getelementptr inbounds %struct.object* %0, i32 0, i32 3\l  %1 = load %struct.element** %pelem, align 8\l  store %struct.element* %1, %struct.element** %pe, align 8\l  %2 = load %struct.object** %po.addr, align 8\l  %bv = getelementptr inbounds %struct.object* %2, i32 0, i32 2\l  %3 = load [4 x double]** %normMat.addr, align 8\l  call void @NormalizeBoundBox(%struct.bbox* %bv, [4 x double]* %3)\l  %4 = load %struct.element** %pe, align 8\l  %data = getelementptr inbounds %struct.element* %4, i32 0, i32 3\l  %5 = load i8** %data, align 8\l  %6 = bitcast i8* %5 to %struct.poly*\l  store %struct.poly* %6, %struct.poly** %pp, align 8\l  %7 = load %struct.poly** %pp, align 8\l  %vptr = getelementptr inbounds %struct.poly* %7, i32 0, i32 3\l  %8 = load [3 x double]** %vptr, align 8\l  store [3 x double]* %8, [3 x double]** %pv, align 8\l  %9 = load [3 x double]** %pv, align 8\l  %arrayidx = getelementptr inbounds [3 x double]* %9, i32 0, i64 0\l  %10 = load double* %arrayidx, align 8\l  %arrayidx1 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0\l  store double %10, double* %arrayidx1, align 8\l  %11 = load [3 x double]** %pv, align 8\l  %arrayidx2 = getelementptr inbounds [3 x double]* %11, i32 0, i64 1\l  %12 = load double* %arrayidx2, align 8\l  %arrayidx3 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1\l  store double %12, double* %arrayidx3, align 8\l  %13 = load [3 x double]** %pv, align 8\l  %arrayidx4 = getelementptr inbounds [3 x double]* %13, i32 0, i64 2\l  %14 = load double* %arrayidx4, align 8\l  %arrayidx5 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2\l  store double %14, double* %arrayidx5, align 8\l  br label %while.cond\l}"];
	Node0x5ef2170 -> Node0x5ef21c0;
	Node0x5ef21c0 [shape=record,label="{while.cond:                                       \l  %arrayidx7 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0\l  %15 = load double* %arrayidx7, align 8\l  %cmp = fcmp une double %15, 1.000000e+32\l  br i1 %cmp, label %land.lhs.true, label %land.end\l|{<s0>T|<s1>F}}"];
	Node0x5ef21c0:s0 -> Node0x5ef2210;
	Node0x5ef21c0:s1 -> Node0x5ef22b0;
	Node0x5ef2210 [shape=record,label="{land.lhs.true:                                    \l  %arrayidx8 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1\l  %16 = load double* %arrayidx8, align 8\l  %cmp9 = fcmp une double %16, 1.000000e+32\l  br i1 %cmp9, label %land.rhs, label %land.end\l|{<s0>T|<s1>F}}"];
	Node0x5ef2210:s0 -> Node0x5ef2260;
	Node0x5ef2210:s1 -> Node0x5ef22b0;
	Node0x5ef2260 [shape=record,label="{land.rhs:                                         \l  %arrayidx10 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2\l  %17 = load double* %arrayidx10, align 8\l  %cmp11 = fcmp une double %17, 1.000000e+32\l  br label %land.end\l}"];
	Node0x5ef2260 -> Node0x5ef22b0;
	Node0x5ef22b0 [shape=record,label="{land.end:                                         \l  %18 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp11,\l... %land.rhs ]\l  br i1 %18, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x5ef22b0:s0 -> Node0x5ef2300;
	Node0x5ef22b0:s1 -> Node0x5ef2350;
	Node0x5ef2300 [shape=record,label="{while.body:                                       \l  %arraydecay = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0\l  %19 = load [4 x double]** %normMat.addr, align 8\l  %arraydecay12 = getelementptr inbounds [4 x double]* %coord, i32 0, i32 0\l  call void @VecMatMult(double* %arraydecay, [4 x double]* %19, double*\l... %arraydecay12)\l  %arrayidx13 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0\l  %20 = load double* %arrayidx13, align 8\l  %21 = load [3 x double]** %pv, align 8\l  %arrayidx14 = getelementptr inbounds [3 x double]* %21, i32 0, i64 0\l  store double %20, double* %arrayidx14, align 8\l  %arrayidx15 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1\l  %22 = load double* %arrayidx15, align 8\l  %23 = load [3 x double]** %pv, align 8\l  %arrayidx16 = getelementptr inbounds [3 x double]* %23, i32 0, i64 1\l  store double %22, double* %arrayidx16, align 8\l  %arrayidx17 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2\l  %24 = load double* %arrayidx17, align 8\l  %25 = load [3 x double]** %pv, align 8\l  %arrayidx18 = getelementptr inbounds [3 x double]* %25, i32 0, i64 2\l  store double %24, double* %arrayidx18, align 8\l  %26 = load [3 x double]** %pv, align 8\l  %incdec.ptr = getelementptr inbounds [3 x double]* %26, i32 1\l  store [3 x double]* %incdec.ptr, [3 x double]** %pv, align 8\l  %27 = load [3 x double]** %pv, align 8\l  %arrayidx19 = getelementptr inbounds [3 x double]* %27, i32 0, i64 0\l  %28 = load double* %arrayidx19, align 8\l  %arrayidx20 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 0\l  store double %28, double* %arrayidx20, align 8\l  %29 = load [3 x double]** %pv, align 8\l  %arrayidx21 = getelementptr inbounds [3 x double]* %29, i32 0, i64 1\l  %30 = load double* %arrayidx21, align 8\l  %arrayidx22 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 1\l  store double %30, double* %arrayidx22, align 8\l  %31 = load [3 x double]** %pv, align 8\l  %arrayidx23 = getelementptr inbounds [3 x double]* %31, i32 0, i64 2\l  %32 = load double* %arrayidx23, align 8\l  %arrayidx24 = getelementptr inbounds [4 x double]* %coord, i32 0, i64 2\l  store double %32, double* %arrayidx24, align 8\l  br label %while.cond\l}"];
	Node0x5ef2300 -> Node0x5ef21c0;
	Node0x5ef2350 [shape=record,label="{while.end:                                        \l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5ef2350 -> Node0x5ef23a0;
	Node0x5ef23a0 [shape=record,label="{for.cond:                                         \l  %33 = load i64* %i, align 8\l  %34 = load %struct.object** %po.addr, align 8\l  %numelements = getelementptr inbounds %struct.object* %34, i32 0, i32 4\l  %35 = load i64* %numelements, align 8\l  %cmp26 = icmp slt i64 %33, %35\l  br i1 %cmp26, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5ef23a0:s0 -> Node0x5ef23f0;
	Node0x5ef23a0:s1 -> Node0x5ef2490;
	Node0x5ef23f0 [shape=record,label="{for.body:                                         \l  %36 = load %struct.element** %pe, align 8\l  %data27 = getelementptr inbounds %struct.element* %36, i32 0, i32 3\l  %37 = load i8** %data27, align 8\l  %38 = bitcast i8* %37 to %struct.poly*\l  store %struct.poly* %38, %struct.poly** %pp, align 8\l  %39 = load %struct.element** %pe, align 8\l  %bv28 = getelementptr inbounds %struct.element* %39, i32 0, i32 1\l  %40 = load [4 x double]** %normMat.addr, align 8\l  call void @NormalizeBoundBox(%struct.bbox* %bv28, [4 x double]* %40)\l  %41 = load %struct.poly** %pp, align 8\l  %vptr29 = getelementptr inbounds %struct.poly* %41, i32 0, i32 3\l  %42 = load [3 x double]** %vptr29, align 8\l  %43 = load %struct.poly** %pp, align 8\l  %vindex = getelementptr inbounds %struct.poly* %43, i32 0, i32 4\l  %44 = load i64** %vindex, align 8\l  %45 = load i64* %44, align 8\l  %add.ptr = getelementptr inbounds [3 x double]* %42, i64 %45\l  store [3 x double]* %add.ptr, [3 x double]** %pv, align 8\l  %46 = load %struct.poly** %pp, align 8\l  %norm = getelementptr inbounds %struct.poly* %46, i32 0, i32 1\l  %arrayidx30 = getelementptr inbounds [3 x double]* %norm, i32 0, i64 0\l  %47 = load double* %arrayidx30, align 8\l  %48 = load [3 x double]** %pv, align 8\l  %arrayidx31 = getelementptr inbounds [3 x double]* %48, i32 0, i64 0\l  %49 = load double* %arrayidx31, align 8\l  %mul = fmul double %47, %49\l  %50 = load %struct.poly** %pp, align 8\l  %norm32 = getelementptr inbounds %struct.poly* %50, i32 0, i32 1\l  %arrayidx33 = getelementptr inbounds [3 x double]* %norm32, i32 0, i64 1\l  %51 = load double* %arrayidx33, align 8\l  %52 = load [3 x double]** %pv, align 8\l  %arrayidx34 = getelementptr inbounds [3 x double]* %52, i32 0, i64 1\l  %53 = load double* %arrayidx34, align 8\l  %mul35 = fmul double %51, %53\l  %add = fadd double %mul, %mul35\l  %54 = load %struct.poly** %pp, align 8\l  %norm36 = getelementptr inbounds %struct.poly* %54, i32 0, i32 1\l  %arrayidx37 = getelementptr inbounds [3 x double]* %norm36, i32 0, i64 2\l  %55 = load double* %arrayidx37, align 8\l  %56 = load [3 x double]** %pv, align 8\l  %arrayidx38 = getelementptr inbounds [3 x double]* %56, i32 0, i64 2\l  %57 = load double* %arrayidx38, align 8\l  %mul39 = fmul double %55, %57\l  %add40 = fadd double %add, %mul39\l  %sub = fsub double -0.000000e+00, %add40\l  %58 = load %struct.poly** %pp, align 8\l  %d = getelementptr inbounds %struct.poly* %58, i32 0, i32 2\l  store double %sub, double* %d, align 8\l  %59 = load %struct.element** %pe, align 8\l  %incdec.ptr41 = getelementptr inbounds %struct.element* %59, i32 1\l  store %struct.element* %incdec.ptr41, %struct.element** %pe, align 8\l  br label %for.inc\l}"];
	Node0x5ef23f0 -> Node0x5ef2440;
	Node0x5ef2440 [shape=record,label="{for.inc:                                          \l  %60 = load i64* %i, align 8\l  %inc = add nsw i64 %60, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5ef2440 -> Node0x5ef23a0;
	Node0x5ef2490 [shape=record,label="{for.end:                                          \l  ret void\l}"];
}
