digraph "CFG for 'MatrixMult' function" {
	label="CFG for 'MatrixMult' function";

	Node0x5fd25b0 [shape=record,label="{entry:\l  %C.addr = alloca [4 x double]*, align 8\l  %A.addr = alloca [4 x double]*, align 8\l  %B.addr = alloca [4 x double]*, align 8\l  %i = alloca i64, align 8\l  %j = alloca i64, align 8\l  %k = alloca i64, align 8\l  %T = alloca [4 x [4 x double]], align 16\l  store [4 x double]* %C, [4 x double]** %C.addr, align 8\l  store [4 x double]* %A, [4 x double]** %A.addr, align 8\l  store [4 x double]* %B, [4 x double]** %B.addr, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5fd25b0 -> Node0x5fd7d70;
	Node0x5fd7d70 [shape=record,label="{for.cond:                                         \l  %0 = load i64* %i, align 8\l  %cmp = icmp slt i64 %0, 4\l  br i1 %cmp, label %for.body, label %for.end.19\l|{<s0>T|<s1>F}}"];
	Node0x5fd7d70:s0 -> Node0x5fd7dc0;
	Node0x5fd7d70:s1 -> Node0x5fd80e0;
	Node0x5fd7dc0 [shape=record,label="{for.body:                                         \l  store i64 0, i64* %j, align 8\l  br label %for.cond.1\l}"];
	Node0x5fd7dc0 -> Node0x5fd7e10;
	Node0x5fd7e10 [shape=record,label="{for.cond.1:                                       \l  %1 = load i64* %j, align 8\l  %cmp2 = icmp slt i64 %1, 4\l  br i1 %cmp2, label %for.body.3, label %for.end.16\l|{<s0>T|<s1>F}}"];
	Node0x5fd7e10:s0 -> Node0x5fd7e60;
	Node0x5fd7e10:s1 -> Node0x5fd8040;
	Node0x5fd7e60 [shape=record,label="{for.body.3:                                       \l  %2 = load i64* %j, align 8\l  %3 = load i64* %i, align 8\l  %arrayidx = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %3\l  %arrayidx4 = getelementptr inbounds [4 x double]* %arrayidx, i32 0, i64 %2\l  store double 0.000000e+00, double* %arrayidx4, align 8\l  store i64 0, i64* %k, align 8\l  br label %for.cond.5\l}"];
	Node0x5fd7e60 -> Node0x5fd7eb0;
	Node0x5fd7eb0 [shape=record,label="{for.cond.5:                                       \l  %4 = load i64* %k, align 8\l  %cmp6 = icmp slt i64 %4, 4\l  br i1 %cmp6, label %for.body.7, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5fd7eb0:s0 -> Node0x5fd7f00;
	Node0x5fd7eb0:s1 -> Node0x5fd7fa0;
	Node0x5fd7f00 [shape=record,label="{for.body.7:                                       \l  %5 = load i64* %k, align 8\l  %6 = load i64* %i, align 8\l  %7 = load [4 x double]** %A.addr, align 8\l  %arrayidx8 = getelementptr inbounds [4 x double]* %7, i64 %6\l  %arrayidx9 = getelementptr inbounds [4 x double]* %arrayidx8, i32 0, i64 %5\l  %8 = load double* %arrayidx9, align 8\l  %9 = load i64* %j, align 8\l  %10 = load i64* %k, align 8\l  %11 = load [4 x double]** %B.addr, align 8\l  %arrayidx10 = getelementptr inbounds [4 x double]* %11, i64 %10\l  %arrayidx11 = getelementptr inbounds [4 x double]* %arrayidx10, i32 0, i64 %9\l  %12 = load double* %arrayidx11, align 8\l  %mul = fmul double %8, %12\l  %13 = load i64* %j, align 8\l  %14 = load i64* %i, align 8\l  %arrayidx12 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %14\l  %arrayidx13 = getelementptr inbounds [4 x double]* %arrayidx12, i32 0, i64\l... %13\l  %15 = load double* %arrayidx13, align 8\l  %add = fadd double %15, %mul\l  store double %add, double* %arrayidx13, align 8\l  br label %for.inc\l}"];
	Node0x5fd7f00 -> Node0x5fd7f50;
	Node0x5fd7f50 [shape=record,label="{for.inc:                                          \l  %16 = load i64* %k, align 8\l  %inc = add nsw i64 %16, 1\l  store i64 %inc, i64* %k, align 8\l  br label %for.cond.5\l}"];
	Node0x5fd7f50 -> Node0x5fd7eb0;
	Node0x5fd7fa0 [shape=record,label="{for.end:                                          \l  br label %for.inc.14\l}"];
	Node0x5fd7fa0 -> Node0x5fd7ff0;
	Node0x5fd7ff0 [shape=record,label="{for.inc.14:                                       \l  %17 = load i64* %j, align 8\l  %inc15 = add nsw i64 %17, 1\l  store i64 %inc15, i64* %j, align 8\l  br label %for.cond.1\l}"];
	Node0x5fd7ff0 -> Node0x5fd7e10;
	Node0x5fd8040 [shape=record,label="{for.end.16:                                       \l  br label %for.inc.17\l}"];
	Node0x5fd8040 -> Node0x5fd8090;
	Node0x5fd8090 [shape=record,label="{for.inc.17:                                       \l  %18 = load i64* %i, align 8\l  %inc18 = add nsw i64 %18, 1\l  store i64 %inc18, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5fd8090 -> Node0x5fd7d70;
	Node0x5fd80e0 [shape=record,label="{for.end.19:                                       \l  store i64 0, i64* %i, align 8\l  br label %for.cond.20\l}"];
	Node0x5fd80e0 -> Node0x5fd8130;
	Node0x5fd8130 [shape=record,label="{for.cond.20:                                      \l  %19 = load i64* %i, align 8\l  %cmp21 = icmp slt i64 %19, 4\l  br i1 %cmp21, label %for.body.22, label %for.end.35\l|{<s0>T|<s1>F}}"];
	Node0x5fd8130:s0 -> Node0x5fd8180;
	Node0x5fd8130:s1 -> Node0x5fd8360;
	Node0x5fd8180 [shape=record,label="{for.body.22:                                      \l  store i64 0, i64* %j, align 8\l  br label %for.cond.23\l}"];
	Node0x5fd8180 -> Node0x5fd81d0;
	Node0x5fd81d0 [shape=record,label="{for.cond.23:                                      \l  %20 = load i64* %j, align 8\l  %cmp24 = icmp slt i64 %20, 4\l  br i1 %cmp24, label %for.body.25, label %for.end.32\l|{<s0>T|<s1>F}}"];
	Node0x5fd81d0:s0 -> Node0x5fd8220;
	Node0x5fd81d0:s1 -> Node0x5fd82c0;
	Node0x5fd8220 [shape=record,label="{for.body.25:                                      \l  %21 = load i64* %j, align 8\l  %22 = load i64* %i, align 8\l  %arrayidx26 = getelementptr inbounds [4 x [4 x double]]* %T, i32 0, i64 %22\l  %arrayidx27 = getelementptr inbounds [4 x double]* %arrayidx26, i32 0, i64\l... %21\l  %23 = load double* %arrayidx27, align 8\l  %24 = load i64* %j, align 8\l  %25 = load i64* %i, align 8\l  %26 = load [4 x double]** %C.addr, align 8\l  %arrayidx28 = getelementptr inbounds [4 x double]* %26, i64 %25\l  %arrayidx29 = getelementptr inbounds [4 x double]* %arrayidx28, i32 0, i64\l... %24\l  store double %23, double* %arrayidx29, align 8\l  br label %for.inc.30\l}"];
	Node0x5fd8220 -> Node0x5fd8270;
	Node0x5fd8270 [shape=record,label="{for.inc.30:                                       \l  %27 = load i64* %j, align 8\l  %inc31 = add nsw i64 %27, 1\l  store i64 %inc31, i64* %j, align 8\l  br label %for.cond.23\l}"];
	Node0x5fd8270 -> Node0x5fd81d0;
	Node0x5fd82c0 [shape=record,label="{for.end.32:                                       \l  br label %for.inc.33\l}"];
	Node0x5fd82c0 -> Node0x5fd8310;
	Node0x5fd8310 [shape=record,label="{for.inc.33:                                       \l  %28 = load i64* %i, align 8\l  %inc34 = add nsw i64 %28, 1\l  store i64 %inc34, i64* %i, align 8\l  br label %for.cond.20\l}"];
	Node0x5fd8310 -> Node0x5fd8130;
	Node0x5fd8360 [shape=record,label="{for.end.35:                                       \l  ret void\l}"];
}
