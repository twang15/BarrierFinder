digraph "CFG for 'SpecularDirection' function" {
	label="CFG for 'SpecularDirection' function";

	Node0x605d690 [shape=record,label="{entry:\l  %R.addr = alloca double*, align 8\l  %N.addr = alloca double*, align 8\l  %I.addr = alloca double*, align 8\l  %I_dot_N = alloca double, align 8\l  %N2 = alloca [4 x double], align 16\l  %vprime = alloca [4 x double], align 16\l  store double* %R, double** %R.addr, align 8\l  store double* %N, double** %N.addr, align 8\l  store double* %I, double** %I.addr, align 8\l  %0 = load double** %I.addr, align 8\l  %arrayidx = getelementptr inbounds double* %0, i64 0\l  %1 = load double* %arrayidx, align 8\l  %2 = load double** %N.addr, align 8\l  %arrayidx1 = getelementptr inbounds double* %2, i64 0\l  %3 = load double* %arrayidx1, align 8\l  %mul = fmul double %1, %3\l  %4 = load double** %I.addr, align 8\l  %arrayidx2 = getelementptr inbounds double* %4, i64 1\l  %5 = load double* %arrayidx2, align 8\l  %6 = load double** %N.addr, align 8\l  %arrayidx3 = getelementptr inbounds double* %6, i64 1\l  %7 = load double* %arrayidx3, align 8\l  %mul4 = fmul double %5, %7\l  %add = fadd double %mul, %mul4\l  %8 = load double** %I.addr, align 8\l  %arrayidx5 = getelementptr inbounds double* %8, i64 2\l  %9 = load double* %arrayidx5, align 8\l  %10 = load double** %N.addr, align 8\l  %arrayidx6 = getelementptr inbounds double* %10, i64 2\l  %11 = load double* %arrayidx6, align 8\l  %mul7 = fmul double %9, %11\l  %add8 = fadd double %add, %mul7\l  store double %add8, double* %I_dot_N, align 8\l  %12 = load double* %I_dot_N, align 8\l  %cmp = fcmp ogt double %12, 0.000000e+00\l  br i1 %cmp, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x605d690:s0 -> Node0x605d6e0;
	Node0x605d690:s1 -> Node0x605d730;
	Node0x605d6e0 [shape=record,label="{cond.true:                                        \l  %13 = load double* %I_dot_N, align 8\l  br label %cond.end\l}"];
	Node0x605d6e0 -> Node0x605d780;
	Node0x605d730 [shape=record,label="{cond.false:                                       \l  %14 = load double* %I_dot_N, align 8\l  %sub = fsub double -0.000000e+00, %14\l  br label %cond.end\l}"];
	Node0x605d730 -> Node0x605d780;
	Node0x605d780 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %13, %cond.true ], [ %sub, %cond.false ]\l  store double %cond, double* %I_dot_N, align 8\l  %15 = load double* %I_dot_N, align 8\l  %div = fdiv double 1.000000e+00, %15\l  store double %div, double* %I_dot_N, align 8\l  %16 = load double* %I_dot_N, align 8\l  %17 = load double** %I.addr, align 8\l  %arrayidx9 = getelementptr inbounds double* %17, i64 0\l  %18 = load double* %arrayidx9, align 8\l  %mul10 = fmul double %16, %18\l  %arrayidx11 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  store double %mul10, double* %arrayidx11, align 8\l  %19 = load double* %I_dot_N, align 8\l  %20 = load double** %I.addr, align 8\l  %arrayidx12 = getelementptr inbounds double* %20, i64 1\l  %21 = load double* %arrayidx12, align 8\l  %mul13 = fmul double %19, %21\l  %arrayidx14 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  store double %mul13, double* %arrayidx14, align 8\l  %22 = load double* %I_dot_N, align 8\l  %23 = load double** %I.addr, align 8\l  %arrayidx15 = getelementptr inbounds double* %23, i64 2\l  %24 = load double* %arrayidx15, align 8\l  %mul16 = fmul double %22, %24\l  %arrayidx17 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  store double %mul16, double* %arrayidx17, align 8\l  %25 = load double** %N.addr, align 8\l  %arrayidx18 = getelementptr inbounds double* %25, i64 0\l  %26 = load double* %arrayidx18, align 8\l  %mul19 = fmul double 2.000000e+00, %26\l  %arrayidx20 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 0\l  store double %mul19, double* %arrayidx20, align 8\l  %27 = load double** %N.addr, align 8\l  %arrayidx21 = getelementptr inbounds double* %27, i64 1\l  %28 = load double* %arrayidx21, align 8\l  %mul22 = fmul double 2.000000e+00, %28\l  %arrayidx23 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 1\l  store double %mul22, double* %arrayidx23, align 8\l  %29 = load double** %N.addr, align 8\l  %arrayidx24 = getelementptr inbounds double* %29, i64 2\l  %30 = load double* %arrayidx24, align 8\l  %mul25 = fmul double 2.000000e+00, %30\l  %arrayidx26 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 2\l  store double %mul25, double* %arrayidx26, align 8\l  %arrayidx27 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 0\l  %31 = load double* %arrayidx27, align 8\l  %arrayidx28 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 0\l  %32 = load double* %arrayidx28, align 8\l  %add29 = fadd double %31, %32\l  %33 = load double** %R.addr, align 8\l  %arrayidx30 = getelementptr inbounds double* %33, i64 0\l  store double %add29, double* %arrayidx30, align 8\l  %arrayidx31 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 1\l  %34 = load double* %arrayidx31, align 8\l  %arrayidx32 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 1\l  %35 = load double* %arrayidx32, align 8\l  %add33 = fadd double %34, %35\l  %36 = load double** %R.addr, align 8\l  %arrayidx34 = getelementptr inbounds double* %36, i64 1\l  store double %add33, double* %arrayidx34, align 8\l  %arrayidx35 = getelementptr inbounds [4 x double]* %vprime, i32 0, i64 2\l  %37 = load double* %arrayidx35, align 8\l  %arrayidx36 = getelementptr inbounds [4 x double]* %N2, i32 0, i64 2\l  %38 = load double* %arrayidx36, align 8\l  %add37 = fadd double %37, %38\l  %39 = load double** %R.addr, align 8\l  %arrayidx38 = getelementptr inbounds double* %39, i64 2\l  store double %add37, double* %arrayidx38, align 8\l  %40 = load double** %R.addr, align 8\l  call void @VecNorm(double* %40)\l  ret void\l}"];
}
