digraph "CFG for 'next_voxel' function" {
	label="CFG for 'next_voxel' function";

	Node0x5f1c7f0 [shape=record,label="{entry:\l  %retval = alloca i64, align 8\l  %r.addr = alloca %struct.ray*, align 8\l  %indx = alloca i64, align 8\l  %gr = alloca %struct.grid*, align 8\l  %v = alloca %struct.voxel*, align 8\l  %rinfo = alloca %struct.rayinfo*, align 8\l  store %struct.ray* %r, %struct.ray** %r.addr, align 8\l  br label %while.cond\l}"];
	Node0x5f1c7f0 -> Node0x5f1c840;
	Node0x5f1c840 [shape=record,label="{while.cond:                                       \l  %0 = load %struct.ray** %r.addr, align 8\l  %call = call i64 @step_grid(%struct.ray* %0)\l  store i64 %call, i64* %indx, align 8\l  %cmp = icmp eq i64 %call, -1\l  br i1 %cmp, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x5f1c840:s0 -> Node0x5f1c890;
	Node0x5f1c840:s1 -> Node0x5f1c9d0;
	Node0x5f1c890 [shape=record,label="{while.body:                                       \l  %1 = load %struct.ray** %r.addr, align 8\l  %ri = getelementptr inbounds %struct.ray* %1, i32 0, i32 8\l  %2 = load %struct.rayinfo** %ri, align 8\l  store %struct.rayinfo* %2, %struct.rayinfo** %rinfo, align 8\l  %3 = load %struct.rayinfo** %rinfo, align 8\l  %grid = getelementptr inbounds %struct.rayinfo* %3, i32 0, i32 0\l  %4 = load %struct.grid** %grid, align 8\l  store %struct.grid* %4, %struct.grid** %gr, align 8\l  %5 = load %struct.grid** %gr, align 8\l  %subdiv_level = getelementptr inbounds %struct.grid* %5, i32 0, i32 9\l  %6 = load i64* %subdiv_level, align 8\l  %cmp1 = icmp ne i64 %6, 0\l  br i1 %cmp1, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5f1c890:s0 -> Node0x5f1c8e0;
	Node0x5f1c890:s1 -> Node0x5f1c930;
	Node0x5f1c8e0 [shape=record,label="{if.then:                                          \l  %7 = load %struct.ray** %r.addr, align 8\l  call void @pop_up_a_grid(%struct.ray* %7)\l  br label %if.end\l}"];
	Node0x5f1c8e0 -> Node0x5f1c980;
	Node0x5f1c930 [shape=record,label="{if.else:                                          \l  store i64 -1, i64* %retval\l  br label %return\l}"];
	Node0x5f1c930 -> Node0x5f1ca20;
	Node0x5f1c980 [shape=record,label="{if.end:                                           \l  br label %while.cond\l}"];
	Node0x5f1c980 -> Node0x5f1c840;
	Node0x5f1c9d0 [shape=record,label="{while.end:                                        \l  %8 = load i64* %indx, align 8\l  store i64 %8, i64* %retval\l  br label %return\l}"];
	Node0x5f1c9d0 -> Node0x5f1ca20;
	Node0x5f1ca20 [shape=record,label="{return:                                           \l  %9 = load i64* %retval\l  ret i64 %9\l}"];
}
