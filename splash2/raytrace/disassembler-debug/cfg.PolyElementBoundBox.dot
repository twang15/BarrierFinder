digraph "CFG for 'PolyElementBoundBox' function" {
	label="CFG for 'PolyElementBoundBox' function";

	Node0x6010b30 [shape=record,label="{entry:\l  %pe.addr = alloca %struct.element*, align 8\l  %pp.addr = alloca %struct.poly*, align 8\l  %i = alloca i64, align 8\l  %vindex = alloca i64*, align 8\l  %pbb = alloca %struct.bbox*, align 8\l  %vlist = alloca [3 x double]*, align 8\l  %vptr = alloca [3 x double]*, align 8\l  %minx = alloca double, align 8\l  %maxx = alloca double, align 8\l  %miny = alloca double, align 8\l  %maxy = alloca double, align 8\l  %minz = alloca double, align 8\l  %maxz = alloca double, align 8\l  store %struct.element* %pe, %struct.element** %pe.addr, align 8\l  store %struct.poly* %pp, %struct.poly** %pp.addr, align 8\l  %0 = load %struct.element** %pe.addr, align 8\l  %bv = getelementptr inbounds %struct.element* %0, i32 0, i32 1\l  store %struct.bbox* %bv, %struct.bbox** %pbb, align 8\l  store double 1.000000e+32, double* %minz, align 8\l  store double 1.000000e+32, double* %miny, align 8\l  store double 1.000000e+32, double* %minx, align 8\l  store double -1.000000e+32, double* %maxz, align 8\l  store double -1.000000e+32, double* %maxy, align 8\l  store double -1.000000e+32, double* %maxx, align 8\l  %1 = load %struct.poly** %pp.addr, align 8\l  %vptr1 = getelementptr inbounds %struct.poly* %1, i32 0, i32 3\l  %2 = load [3 x double]** %vptr1, align 8\l  store [3 x double]* %2, [3 x double]** %vlist, align 8\l  %3 = load %struct.poly** %pp.addr, align 8\l  %vindex2 = getelementptr inbounds %struct.poly* %3, i32 0, i32 4\l  %4 = load i64** %vindex2, align 8\l  store i64* %4, i64** %vindex, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x6010b30 -> Node0x6019cf0;
	Node0x6019cf0 [shape=record,label="{for.cond:                                         \l  %5 = load i64* %i, align 8\l  %6 = load %struct.poly** %pp.addr, align 8\l  %nverts = getelementptr inbounds %struct.poly* %6, i32 0, i32 0\l  %7 = load i64* %nverts, align 8\l  %cmp = icmp slt i64 %5, %7\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x6019cf0:s0 -> Node0x6019d40;
	Node0x6019cf0:s1 -> Node0x601a380;
	Node0x6019d40 [shape=record,label="{for.body:                                         \l  %8 = load [3 x double]** %vlist, align 8\l  %9 = load i64** %vindex, align 8\l  %10 = load i64* %9, align 8\l  %add.ptr = getelementptr inbounds [3 x double]* %8, i64 %10\l  store [3 x double]* %add.ptr, [3 x double]** %vptr, align 8\l  %11 = load double* %minx, align 8\l  %12 = load [3 x double]** %vptr, align 8\l  %arrayidx = getelementptr inbounds [3 x double]* %12, i32 0, i64 0\l  %13 = load double* %arrayidx, align 8\l  %cmp3 = fcmp olt double %11, %13\l  br i1 %cmp3, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x6019d40:s0 -> Node0x6019d90;
	Node0x6019d40:s1 -> Node0x6019de0;
	Node0x6019d90 [shape=record,label="{cond.true:                                        \l  %14 = load double* %minx, align 8\l  br label %cond.end\l}"];
	Node0x6019d90 -> Node0x6019e30;
	Node0x6019de0 [shape=record,label="{cond.false:                                       \l  %15 = load [3 x double]** %vptr, align 8\l  %arrayidx4 = getelementptr inbounds [3 x double]* %15, i32 0, i64 0\l  %16 = load double* %arrayidx4, align 8\l  br label %cond.end\l}"];
	Node0x6019de0 -> Node0x6019e30;
	Node0x6019e30 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %14, %cond.true ], [ %16, %cond.false ]\l  store double %cond, double* %minx, align 8\l  %17 = load double* %miny, align 8\l  %18 = load [3 x double]** %vptr, align 8\l  %arrayidx5 = getelementptr inbounds [3 x double]* %18, i32 0, i64 1\l  %19 = load double* %arrayidx5, align 8\l  %cmp6 = fcmp olt double %17, %19\l  br i1 %cmp6, label %cond.true.7, label %cond.false.8\l|{<s0>T|<s1>F}}"];
	Node0x6019e30:s0 -> Node0x6019e80;
	Node0x6019e30:s1 -> Node0x6019ed0;
	Node0x6019e80 [shape=record,label="{cond.true.7:                                      \l  %20 = load double* %miny, align 8\l  br label %cond.end.10\l}"];
	Node0x6019e80 -> Node0x6019f20;
	Node0x6019ed0 [shape=record,label="{cond.false.8:                                     \l  %21 = load [3 x double]** %vptr, align 8\l  %arrayidx9 = getelementptr inbounds [3 x double]* %21, i32 0, i64 1\l  %22 = load double* %arrayidx9, align 8\l  br label %cond.end.10\l}"];
	Node0x6019ed0 -> Node0x6019f20;
	Node0x6019f20 [shape=record,label="{cond.end.10:                                      \l  %cond11 = phi double [ %20, %cond.true.7 ], [ %22, %cond.false.8 ]\l  store double %cond11, double* %miny, align 8\l  %23 = load double* %minz, align 8\l  %24 = load [3 x double]** %vptr, align 8\l  %arrayidx12 = getelementptr inbounds [3 x double]* %24, i32 0, i64 2\l  %25 = load double* %arrayidx12, align 8\l  %cmp13 = fcmp olt double %23, %25\l  br i1 %cmp13, label %cond.true.14, label %cond.false.15\l|{<s0>T|<s1>F}}"];
	Node0x6019f20:s0 -> Node0x6019f70;
	Node0x6019f20:s1 -> Node0x6019fc0;
	Node0x6019f70 [shape=record,label="{cond.true.14:                                     \l  %26 = load double* %minz, align 8\l  br label %cond.end.17\l}"];
	Node0x6019f70 -> Node0x601a010;
	Node0x6019fc0 [shape=record,label="{cond.false.15:                                    \l  %27 = load [3 x double]** %vptr, align 8\l  %arrayidx16 = getelementptr inbounds [3 x double]* %27, i32 0, i64 2\l  %28 = load double* %arrayidx16, align 8\l  br label %cond.end.17\l}"];
	Node0x6019fc0 -> Node0x601a010;
	Node0x601a010 [shape=record,label="{cond.end.17:                                      \l  %cond18 = phi double [ %26, %cond.true.14 ], [ %28, %cond.false.15 ]\l  store double %cond18, double* %minz, align 8\l  %29 = load double* %maxx, align 8\l  %30 = load [3 x double]** %vptr, align 8\l  %arrayidx19 = getelementptr inbounds [3 x double]* %30, i32 0, i64 0\l  %31 = load double* %arrayidx19, align 8\l  %cmp20 = fcmp ogt double %29, %31\l  br i1 %cmp20, label %cond.true.21, label %cond.false.22\l|{<s0>T|<s1>F}}"];
	Node0x601a010:s0 -> Node0x601a060;
	Node0x601a010:s1 -> Node0x601a0b0;
	Node0x601a060 [shape=record,label="{cond.true.21:                                     \l  %32 = load double* %maxx, align 8\l  br label %cond.end.24\l}"];
	Node0x601a060 -> Node0x601a100;
	Node0x601a0b0 [shape=record,label="{cond.false.22:                                    \l  %33 = load [3 x double]** %vptr, align 8\l  %arrayidx23 = getelementptr inbounds [3 x double]* %33, i32 0, i64 0\l  %34 = load double* %arrayidx23, align 8\l  br label %cond.end.24\l}"];
	Node0x601a0b0 -> Node0x601a100;
	Node0x601a100 [shape=record,label="{cond.end.24:                                      \l  %cond25 = phi double [ %32, %cond.true.21 ], [ %34, %cond.false.22 ]\l  store double %cond25, double* %maxx, align 8\l  %35 = load double* %maxy, align 8\l  %36 = load [3 x double]** %vptr, align 8\l  %arrayidx26 = getelementptr inbounds [3 x double]* %36, i32 0, i64 1\l  %37 = load double* %arrayidx26, align 8\l  %cmp27 = fcmp ogt double %35, %37\l  br i1 %cmp27, label %cond.true.28, label %cond.false.29\l|{<s0>T|<s1>F}}"];
	Node0x601a100:s0 -> Node0x601a150;
	Node0x601a100:s1 -> Node0x601a1a0;
	Node0x601a150 [shape=record,label="{cond.true.28:                                     \l  %38 = load double* %maxy, align 8\l  br label %cond.end.31\l}"];
	Node0x601a150 -> Node0x601a1f0;
	Node0x601a1a0 [shape=record,label="{cond.false.29:                                    \l  %39 = load [3 x double]** %vptr, align 8\l  %arrayidx30 = getelementptr inbounds [3 x double]* %39, i32 0, i64 1\l  %40 = load double* %arrayidx30, align 8\l  br label %cond.end.31\l}"];
	Node0x601a1a0 -> Node0x601a1f0;
	Node0x601a1f0 [shape=record,label="{cond.end.31:                                      \l  %cond32 = phi double [ %38, %cond.true.28 ], [ %40, %cond.false.29 ]\l  store double %cond32, double* %maxy, align 8\l  %41 = load double* %maxz, align 8\l  %42 = load [3 x double]** %vptr, align 8\l  %arrayidx33 = getelementptr inbounds [3 x double]* %42, i32 0, i64 2\l  %43 = load double* %arrayidx33, align 8\l  %cmp34 = fcmp ogt double %41, %43\l  br i1 %cmp34, label %cond.true.35, label %cond.false.36\l|{<s0>T|<s1>F}}"];
	Node0x601a1f0:s0 -> Node0x601a240;
	Node0x601a1f0:s1 -> Node0x601a290;
	Node0x601a240 [shape=record,label="{cond.true.35:                                     \l  %44 = load double* %maxz, align 8\l  br label %cond.end.38\l}"];
	Node0x601a240 -> Node0x601a2e0;
	Node0x601a290 [shape=record,label="{cond.false.36:                                    \l  %45 = load [3 x double]** %vptr, align 8\l  %arrayidx37 = getelementptr inbounds [3 x double]* %45, i32 0, i64 2\l  %46 = load double* %arrayidx37, align 8\l  br label %cond.end.38\l}"];
	Node0x601a290 -> Node0x601a2e0;
	Node0x601a2e0 [shape=record,label="{cond.end.38:                                      \l  %cond39 = phi double [ %44, %cond.true.35 ], [ %46, %cond.false.36 ]\l  store double %cond39, double* %maxz, align 8\l  %47 = load i64** %vindex, align 8\l  %incdec.ptr = getelementptr inbounds i64* %47, i32 1\l  store i64* %incdec.ptr, i64** %vindex, align 8\l  br label %for.inc\l}"];
	Node0x601a2e0 -> Node0x601a330;
	Node0x601a330 [shape=record,label="{for.inc:                                          \l  %48 = load i64* %i, align 8\l  %inc = add nsw i64 %48, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x601a330 -> Node0x6019cf0;
	Node0x601a380 [shape=record,label="{for.end:                                          \l  %49 = load double* %minx, align 8\l  %50 = load %struct.bbox** %pbb, align 8\l  %dnear = getelementptr inbounds %struct.bbox* %50, i32 0, i32 0\l  %arrayidx40 = getelementptr inbounds [3 x double]* %dnear, i32 0, i64 0\l  store double %49, double* %arrayidx40, align 8\l  %51 = load double* %miny, align 8\l  %52 = load %struct.bbox** %pbb, align 8\l  %dnear41 = getelementptr inbounds %struct.bbox* %52, i32 0, i32 0\l  %arrayidx42 = getelementptr inbounds [3 x double]* %dnear41, i32 0, i64 1\l  store double %51, double* %arrayidx42, align 8\l  %53 = load double* %minz, align 8\l  %54 = load %struct.bbox** %pbb, align 8\l  %dnear43 = getelementptr inbounds %struct.bbox* %54, i32 0, i32 0\l  %arrayidx44 = getelementptr inbounds [3 x double]* %dnear43, i32 0, i64 2\l  store double %53, double* %arrayidx44, align 8\l  %55 = load double* %maxx, align 8\l  %56 = load %struct.bbox** %pbb, align 8\l  %dfar = getelementptr inbounds %struct.bbox* %56, i32 0, i32 1\l  %arrayidx45 = getelementptr inbounds [3 x double]* %dfar, i32 0, i64 0\l  store double %55, double* %arrayidx45, align 8\l  %57 = load double* %maxy, align 8\l  %58 = load %struct.bbox** %pbb, align 8\l  %dfar46 = getelementptr inbounds %struct.bbox* %58, i32 0, i32 1\l  %arrayidx47 = getelementptr inbounds [3 x double]* %dfar46, i32 0, i64 1\l  store double %57, double* %arrayidx47, align 8\l  %59 = load double* %maxz, align 8\l  %60 = load %struct.bbox** %pbb, align 8\l  %dfar48 = getelementptr inbounds %struct.bbox* %60, i32 0, i32 1\l  %arrayidx49 = getelementptr inbounds [3 x double]* %dfar48, i32 0, i64 2\l  store double %59, double* %arrayidx49, align 8\l  ret void\l}"];
}
