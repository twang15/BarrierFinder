digraph "CFG for 'create_grid' function" {
	label="CFG for 'create_grid' function";

	Node0x5eff360 [shape=record,label="{entry:\l  %v.addr = alloca %struct.voxel*, align 8\l  %g.addr = alloca %struct.grid*, align 8\l  %num_prims.addr = alloca i64, align 8\l  %n = alloca i64, align 8\l  %i = alloca i64, align 8\l  %j = alloca i64, align 8\l  %k = alloca i64, align 8\l  %r = alloca i64, align 8\l  %nprims = alloca i64, align 8\l  %index1D = alloca i64, align 8\l  %ec = alloca i64*, align 8\l  %pc = alloca i64*, align 8\l  %nec = alloca double, align 8\l  %unsgn = alloca double, align 8\l  %ncells = alloca double, align 8\l  %ng = alloca %struct.grid*, align 8\l  %nng = alloca %struct.grid*, align 8\l  %b = alloca %struct.bbox, align 8\l  %nv = alloca %struct.voxel*, align 8\l  %ht = alloca %struct.voxel**, align 8\l  %bintree = alloca %struct.btnode*, align 8\l  %pepa = alloca %struct.element**, align 8\l  store %struct.voxel* %v, %struct.voxel** %v.addr, align 8\l  store %struct.grid* %g, %struct.grid** %g.addr, align 8\l  store i64 %num_prims, i64* %num_prims.addr, align 8\l  %call = call i8* @ObjectMalloc(i64 0, i64 1)\l  %0 = bitcast i8* %call to %struct.grid*\l  store %struct.grid* %0, %struct.grid** %ng, align 8\l  %1 = load i64* @grids, align 8\l  %inc = add nsw i64 %1, 1\l  store i64 %inc, i64* @grids, align 8\l  %2 = load %struct.grid** %ng, align 8\l  %id = getelementptr inbounds %struct.grid* %2, i32 0, i32 0\l  store i64 %1, i64* %id, align 8\l  %3 = load i64* @hu_numbuckets, align 8\l  %call1 = call i8* @ObjectMalloc(i64 2, i64 %3)\l  %4 = bitcast i8* %call1 to %struct.voxel**\l  store %struct.voxel** %4, %struct.voxel*** %ht, align 8\l  %5 = load %struct.voxel*** %ht, align 8\l  %6 = load %struct.grid** %ng, align 8\l  %hashtable = getelementptr inbounds %struct.grid* %6, i32 0, i32 1\l  store %struct.voxel** %5, %struct.voxel*** %hashtable, align 8\l  %7 = load i64* @hu_gridsize, align 8\l  %8 = load i64* @hu_gridsize, align 8\l  %mul = mul nsw i64 %7, %8\l  %9 = load i64* @hu_gridsize, align 8\l  %mul2 = mul nsw i64 %mul, %9\l  %conv = sitofp i64 %mul2 to double\l  store double %conv, double* %ncells, align 8\l  %10 = load double* %ncells, align 8\l  %conv5 = fptosi double %10 to i64\l  %call6 = call i8* @ObjectMalloc(i64 3, i64 %conv5)\l  %11 = bitcast i8* %call6 to i64*\l  store i64* %11, i64** %ec, align 8\l  %12 = load i64** %ec, align 8\l  %13 = load %struct.grid** %ng, align 8\l  %emptycells = getelementptr inbounds %struct.grid* %13, i32 0, i32 2\l  store i64* %12, i64** %emptycells, align 8\l  %14 = load i64* %num_prims.addr, align 8\l  %15 = load %struct.grid** %ng, align 8\l  %num_prims7 = getelementptr inbounds %struct.grid* %15, i32 0, i32 4\l  store i64 %14, i64* %num_prims7, align 8\l  %16 = load %struct.voxel** %v.addr, align 8\l  %cell = getelementptr inbounds %struct.voxel* %16, i32 0, i32 1\l  %17 = load i8** %cell, align 8\l  %18 = bitcast i8* %17 to %struct.element**\l  %19 = load %struct.grid** %ng, align 8\l  %pepa8 = getelementptr inbounds %struct.grid* %19, i32 0, i32 3\l  store %struct.element** %18, %struct.element*** %pepa8, align 8\l  %20 = load %struct.grid** %ng, align 8\l  %indx_inc = getelementptr inbounds %struct.grid* %20, i32 0, i32 5\l  %arrayidx = getelementptr inbounds [3 x i64]* %indx_inc, i32 0, i64 0\l  store i64 1, i64* %arrayidx, align 8\l  %21 = load i64* @hu_gridsize, align 8\l  %22 = load %struct.grid** %ng, align 8\l  %indx_inc9 = getelementptr inbounds %struct.grid* %22, i32 0, i32 5\l  %arrayidx10 = getelementptr inbounds [3 x i64]* %indx_inc9, i32 0, i64 1\l  store i64 %21, i64* %arrayidx10, align 8\l  %23 = load i64* @hu_gridsize, align 8\l  %24 = load i64* @hu_gridsize, align 8\l  %mul11 = mul nsw i64 %23, %24\l  %25 = load %struct.grid** %ng, align 8\l  %indx_inc12 = getelementptr inbounds %struct.grid* %25, i32 0, i32 5\l  %arrayidx13 = getelementptr inbounds [3 x i64]* %indx_inc12, i32 0, i64 2\l  store i64 %mul11, i64* %arrayidx13, align 8\l  %26 = load i64* @hu_numbuckets, align 8\l  %27 = load %struct.grid** %ng, align 8\l  %num_buckets = getelementptr inbounds %struct.grid* %27, i32 0, i32 6\l  store i64 %26, i64* %num_buckets, align 8\l  %28 = load %struct.voxel** %v.addr, align 8\l  %id14 = getelementptr inbounds %struct.voxel* %28, i32 0, i32 0\l  %29 = load i64* %id14, align 8\l  %30 = load %struct.grid** %g.addr, align 8\l  %indx_inc15 = getelementptr inbounds %struct.grid* %30, i32 0, i32 5\l  %arrayidx16 = getelementptr inbounds [3 x i64]* %indx_inc15, i32 0, i64 2\l  %31 = load i64* %arrayidx16, align 8\l  %div = sdiv i64 %29, %31\l  store i64 %div, i64* %k, align 8\l  %32 = load %struct.voxel** %v.addr, align 8\l  %id17 = getelementptr inbounds %struct.voxel* %32, i32 0, i32 0\l  %33 = load i64* %id17, align 8\l  %34 = load i64* %k, align 8\l  %35 = load %struct.grid** %g.addr, align 8\l  %indx_inc18 = getelementptr inbounds %struct.grid* %35, i32 0, i32 5\l  %arrayidx19 = getelementptr inbounds [3 x i64]* %indx_inc18, i32 0, i64 2\l  %36 = load i64* %arrayidx19, align 8\l  %mul20 = mul nsw i64 %34, %36\l  %sub = sub nsw i64 %33, %mul20\l  store i64 %sub, i64* %r, align 8\l  %37 = load i64* %r, align 8\l  %38 = load %struct.grid** %g.addr, align 8\l  %indx_inc21 = getelementptr inbounds %struct.grid* %38, i32 0, i32 5\l  %arrayidx22 = getelementptr inbounds [3 x i64]* %indx_inc21, i32 0, i64 1\l  %39 = load i64* %arrayidx22, align 8\l  %div23 = sdiv i64 %37, %39\l  store i64 %div23, i64* %j, align 8\l  %40 = load i64* %r, align 8\l  %41 = load i64* %j, align 8\l  %42 = load %struct.grid** %g.addr, align 8\l  %indx_inc24 = getelementptr inbounds %struct.grid* %42, i32 0, i32 5\l  %arrayidx25 = getelementptr inbounds [3 x i64]* %indx_inc24, i32 0, i64 1\l  %43 = load i64* %arrayidx25, align 8\l  %mul26 = mul nsw i64 %41, %43\l  %sub27 = sub nsw i64 %40, %mul26\l  store i64 %sub27, i64* %i, align 8\l  %44 = load %struct.grid** %g.addr, align 8\l  %min = getelementptr inbounds %struct.grid* %44, i32 0, i32 7\l  %arrayidx28 = getelementptr inbounds [3 x double]* %min, i32 0, i64 0\l  %45 = load double* %arrayidx28, align 8\l  %46 = load i64* %i, align 8\l  %conv29 = sitofp i64 %46 to double\l  %47 = load %struct.grid** %g.addr, align 8\l  %cellsize = getelementptr inbounds %struct.grid* %47, i32 0, i32 8\l  %arrayidx30 = getelementptr inbounds [3 x double]* %cellsize, i32 0, i64 0\l  %48 = load double* %arrayidx30, align 8\l  %mul31 = fmul double %conv29, %48\l  %add32 = fadd double %45, %mul31\l  %49 = load %struct.grid** %ng, align 8\l  %min33 = getelementptr inbounds %struct.grid* %49, i32 0, i32 7\l  %arrayidx34 = getelementptr inbounds [3 x double]* %min33, i32 0, i64 0\l  store double %add32, double* %arrayidx34, align 8\l  %50 = load %struct.grid** %g.addr, align 8\l  %min35 = getelementptr inbounds %struct.grid* %50, i32 0, i32 7\l  %arrayidx36 = getelementptr inbounds [3 x double]* %min35, i32 0, i64 1\l  %51 = load double* %arrayidx36, align 8\l  %52 = load i64* %j, align 8\l  %conv37 = sitofp i64 %52 to double\l  %53 = load %struct.grid** %g.addr, align 8\l  %cellsize38 = getelementptr inbounds %struct.grid* %53, i32 0, i32 8\l  %arrayidx39 = getelementptr inbounds [3 x double]* %cellsize38, i32 0, i64 1\l  %54 = load double* %arrayidx39, align 8\l  %mul40 = fmul double %conv37, %54\l  %add41 = fadd double %51, %mul40\l  %55 = load %struct.grid** %ng, align 8\l  %min42 = getelementptr inbounds %struct.grid* %55, i32 0, i32 7\l  %arrayidx43 = getelementptr inbounds [3 x double]* %min42, i32 0, i64 1\l  store double %add41, double* %arrayidx43, align 8\l  %56 = load %struct.grid** %g.addr, align 8\l  %min44 = getelementptr inbounds %struct.grid* %56, i32 0, i32 7\l  %arrayidx45 = getelementptr inbounds [3 x double]* %min44, i32 0, i64 2\l  %57 = load double* %arrayidx45, align 8\l  %58 = load i64* %k, align 8\l  %conv46 = sitofp i64 %58 to double\l  %59 = load %struct.grid** %g.addr, align 8\l  %cellsize47 = getelementptr inbounds %struct.grid* %59, i32 0, i32 8\l  %arrayidx48 = getelementptr inbounds [3 x double]* %cellsize47, i32 0, i64 2\l  %60 = load double* %arrayidx48, align 8\l  %mul49 = fmul double %conv46, %60\l  %add50 = fadd double %57, %mul49\l  %61 = load %struct.grid** %ng, align 8\l  %min51 = getelementptr inbounds %struct.grid* %61, i32 0, i32 7\l  %arrayidx52 = getelementptr inbounds [3 x double]* %min51, i32 0, i64 2\l  store double %add50, double* %arrayidx52, align 8\l  %62 = load %struct.grid** %g.addr, align 8\l  %cellsize53 = getelementptr inbounds %struct.grid* %62, i32 0, i32 8\l  %arrayidx54 = getelementptr inbounds [3 x double]* %cellsize53, i32 0, i64 0\l  %63 = load double* %arrayidx54, align 8\l  %64 = load %struct.grid** %ng, align 8\l  %indx_inc55 = getelementptr inbounds %struct.grid* %64, i32 0, i32 5\l  %arrayidx56 = getelementptr inbounds [3 x i64]* %indx_inc55, i32 0, i64 1\l  %65 = load i64* %arrayidx56, align 8\l  %conv57 = sitofp i64 %65 to double\l  %div58 = fdiv double %63, %conv57\l  %66 = load %struct.grid** %ng, align 8\l  %cellsize59 = getelementptr inbounds %struct.grid* %66, i32 0, i32 8\l  %arrayidx60 = getelementptr inbounds [3 x double]* %cellsize59, i32 0, i64 0\l  store double %div58, double* %arrayidx60, align 8\l  %67 = load %struct.grid** %g.addr, align 8\l  %cellsize61 = getelementptr inbounds %struct.grid* %67, i32 0, i32 8\l  %arrayidx62 = getelementptr inbounds [3 x double]* %cellsize61, i32 0, i64 1\l  %68 = load double* %arrayidx62, align 8\l  %69 = load %struct.grid** %ng, align 8\l  %indx_inc63 = getelementptr inbounds %struct.grid* %69, i32 0, i32 5\l  %arrayidx64 = getelementptr inbounds [3 x i64]* %indx_inc63, i32 0, i64 1\l  %70 = load i64* %arrayidx64, align 8\l  %conv65 = sitofp i64 %70 to double\l  %div66 = fdiv double %68, %conv65\l  %71 = load %struct.grid** %ng, align 8\l  %cellsize67 = getelementptr inbounds %struct.grid* %71, i32 0, i32 8\l  %arrayidx68 = getelementptr inbounds [3 x double]* %cellsize67, i32 0, i64 1\l  store double %div66, double* %arrayidx68, align 8\l  %72 = load %struct.grid** %g.addr, align 8\l  %cellsize69 = getelementptr inbounds %struct.grid* %72, i32 0, i32 8\l  %arrayidx70 = getelementptr inbounds [3 x double]* %cellsize69, i32 0, i64 2\l  %73 = load double* %arrayidx70, align 8\l  %74 = load %struct.grid** %ng, align 8\l  %indx_inc71 = getelementptr inbounds %struct.grid* %74, i32 0, i32 5\l  %arrayidx72 = getelementptr inbounds [3 x i64]* %indx_inc71, i32 0, i64 1\l  %75 = load i64* %arrayidx72, align 8\l  %conv73 = sitofp i64 %75 to double\l  %div74 = fdiv double %73, %conv73\l  %76 = load %struct.grid** %ng, align 8\l  %cellsize75 = getelementptr inbounds %struct.grid* %76, i32 0, i32 8\l  %arrayidx76 = getelementptr inbounds [3 x double]* %cellsize75, i32 0, i64 2\l  store double %div74, double* %arrayidx76, align 8\l  %77 = load %struct.grid** %g.addr, align 8\l  %subdiv_level = getelementptr inbounds %struct.grid* %77, i32 0, i32 9\l  %78 = load i64* %subdiv_level, align 8\l  %add77 = add nsw i64 %78, 1\l  %79 = load %struct.grid** %ng, align 8\l  %subdiv_level78 = getelementptr inbounds %struct.grid* %79, i32 0, i32 9\l  store i64 %add77, i64* %subdiv_level78, align 8\l  %80 = load %struct.grid** @gridlist, align 8\l  %81 = load %struct.grid** %ng, align 8\l  %next = getelementptr inbounds %struct.grid* %81, i32 0, i32 11\l  store %struct.grid* %80, %struct.grid** %next, align 8\l  %82 = load %struct.grid** %ng, align 8\l  store %struct.grid* %82, %struct.grid** @gridlist, align 8\l  %83 = load %struct.grid** %ng, align 8\l  %call79 = call %struct.btnode* @init_bintree(%struct.grid* %83)\l  store %struct.btnode* %call79, %struct.btnode** %bintree, align 8\l  %84 = load %struct.btnode** %bintree, align 8\l  %85 = load %struct.grid** %ng, align 8\l  call void @create_bintree(%struct.btnode* %84, %struct.grid* %85)\l  store i64 0, i64* %index1D, align 8\l  %86 = load i64* @hu_gridsize, align 8\l  store i64 %86, i64* %n, align 8\l  store i64 0, i64* %k, align 8\l  br label %for.cond\l}"];
	Node0x5eff360 -> Node0x5eff3b0;
	Node0x5eff3b0 [shape=record,label="{for.cond:                                         \l  %87 = load i64* %k, align 8\l  %88 = load i64* %n, align 8\l  %cmp = icmp slt i64 %87, %88\l  br i1 %cmp, label %for.body, label %for.end.115\l|{<s0>T|<s1>F}}"];
	Node0x5eff3b0:s0 -> Node0x5eff400;
	Node0x5eff3b0:s1 -> Node0x5eff950;
	Node0x5eff400 [shape=record,label="{for.body:                                         \l  store i64 0, i64* %j, align 8\l  br label %for.cond.81\l}"];
	Node0x5eff400 -> Node0x5eff450;
	Node0x5eff450 [shape=record,label="{for.cond.81:                                      \l  %89 = load i64* %j, align 8\l  %90 = load i64* %n, align 8\l  %cmp82 = icmp slt i64 %89, %90\l  br i1 %cmp82, label %for.body.84, label %for.end.112\l|{<s0>T|<s1>F}}"];
	Node0x5eff450:s0 -> Node0x5eff4a0;
	Node0x5eff450:s1 -> Node0x5eff8b0;
	Node0x5eff4a0 [shape=record,label="{for.body.84:                                      \l  store i64 0, i64* %i, align 8\l  br label %for.cond.85\l}"];
	Node0x5eff4a0 -> Node0x5eff4f0;
	Node0x5eff4f0 [shape=record,label="{for.cond.85:                                      \l  %91 = load i64* %i, align 8\l  %92 = load i64* %n, align 8\l  %cmp86 = icmp slt i64 %91, %92\l  br i1 %cmp86, label %for.body.88, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5eff4f0:s0 -> Node0x5eff540;
	Node0x5eff4f0:s1 -> Node0x5eff810;
	Node0x5eff540 [shape=record,label="{for.body.88:                                      \l  %93 = load %struct.btnode** %bintree, align 8\l  %94 = load i64* %i, align 8\l  %call89 = call %struct.element** @bintree_lookup(%struct.btnode* %93, i64\l... %94, i64 undef, i64 undef, %struct.grid* undef, i64* %nprims)\l  store %struct.element** %call89, %struct.element*** %pepa, align 8\l  %95 = load %struct.element*** %pepa, align 8\l  %cmp90 = icmp ne %struct.element** %95, null\l  br i1 %cmp90, label %if.then, label %if.else.105\l|{<s0>T|<s1>F}}"];
	Node0x5eff540:s0 -> Node0x5eff590;
	Node0x5eff540:s1 -> Node0x5eff720;
	Node0x5eff590 [shape=record,label="{if.then:                                          \l  %96 = load i64* %index1D, align 8\l  %97 = load %struct.grid** %ng, align 8\l  call void @mark_nonempty(i64 %96, %struct.grid* %97)\l  %call93 = call i8* @ObjectMalloc(i64 1, i64 1)\l  %98 = bitcast i8* %call93 to %struct.voxel*\l  store %struct.voxel* %98, %struct.voxel** %nv, align 8\l  %99 = load i64* %index1D, align 8\l  %100 = load %struct.voxel** %nv, align 8\l  %id94 = getelementptr inbounds %struct.voxel* %100, i32 0, i32 0\l  store i64 %99, i64* %id94, align 8\l  %101 = load %struct.voxel** %nv, align 8\l  %celltype = getelementptr inbounds %struct.voxel* %101, i32 0, i32 2\l  store i8 2, i8* %celltype, align 1\l  %102 = load %struct.element*** %pepa, align 8\l  %103 = bitcast %struct.element** %102 to i8*\l  %104 = load %struct.voxel** %nv, align 8\l  %cell95 = getelementptr inbounds %struct.voxel* %104, i32 0, i32 1\l  store i8* %103, i8** %cell95, align 8\l  %105 = load i64* %nprims, align 8\l  %106 = load %struct.voxel** %nv, align 8\l  %numelements = getelementptr inbounds %struct.voxel* %106, i32 0, i32 3\l  store i64 %105, i64* %numelements, align 8\l  %107 = load i64* %nprims, align 8\l  %108 = load i64* @hu_max_prims_cell, align 8\l  %cmp96 = icmp sgt i64 %107, %108\l  br i1 %cmp96, label %land.lhs.true, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5eff590:s0 -> Node0x5eff5e0;
	Node0x5eff590:s1 -> Node0x5eff680;
	Node0x5eff5e0 [shape=record,label="{land.lhs.true:                                    \l  %109 = load %struct.grid** %ng, align 8\l  %subdiv_level98 = getelementptr inbounds %struct.grid* %109, i32 0, i32 9\l  %110 = load i64* %subdiv_level98, align 8\l  %111 = load i64* @hu_max_subdiv_level, align 8\l  %cmp99 = icmp slt i64 %110, %111\l  br i1 %cmp99, label %if.then.101, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5eff5e0:s0 -> Node0x5eff630;
	Node0x5eff5e0:s1 -> Node0x5eff680;
	Node0x5eff630 [shape=record,label="{if.then.101:                                      \l  %112 = load %struct.voxel** %nv, align 8\l  %113 = load %struct.grid** %ng, align 8\l  %114 = load i64* %nprims, align 8\l  %call102 = call %struct.grid* @create_grid(%struct.voxel* %112,\l... %struct.grid* %113, i64 %114)\l  br label %if.end\l}"];
	Node0x5eff630 -> Node0x5eff6d0;
	Node0x5eff680 [shape=record,label="{if.else:                                          \l  br label %if.end\l}"];
	Node0x5eff680 -> Node0x5eff6d0;
	Node0x5eff6d0 [shape=record,label="{if.end:                                           \l  %115 = load %struct.voxel** %nv, align 8\l  %116 = load %struct.grid** %ng, align 8\l  call void @insert_in_hashtable(%struct.voxel* %115, %struct.grid* %116)\l  br label %if.end.107\l}"];
	Node0x5eff6d0 -> Node0x5eff770;
	Node0x5eff720 [shape=record,label="{if.else.105:                                      \l  %117 = load i64* %index1D, align 8\l  %118 = load %struct.grid** %ng, align 8\l  call void @mark_empty(i64 %117, %struct.grid* %118)\l  br label %if.end.107\l}"];
	Node0x5eff720 -> Node0x5eff770;
	Node0x5eff770 [shape=record,label="{if.end.107:                                       \l  %119 = load i64* %index1D, align 8\l  %inc108 = add nsw i64 %119, 1\l  store i64 %inc108, i64* %index1D, align 8\l  br label %for.inc\l}"];
	Node0x5eff770 -> Node0x5eff7c0;
	Node0x5eff7c0 [shape=record,label="{for.inc:                                          \l  %120 = load i64* %i, align 8\l  %inc109 = add nsw i64 %120, 1\l  store i64 %inc109, i64* %i, align 8\l  br label %for.cond.85\l}"];
	Node0x5eff7c0 -> Node0x5eff4f0;
	Node0x5eff810 [shape=record,label="{for.end:                                          \l  br label %for.inc.110\l}"];
	Node0x5eff810 -> Node0x5eff860;
	Node0x5eff860 [shape=record,label="{for.inc.110:                                      \l  %121 = load i64* %j, align 8\l  %inc111 = add nsw i64 %121, 1\l  store i64 %inc111, i64* %j, align 8\l  br label %for.cond.81\l}"];
	Node0x5eff860 -> Node0x5eff450;
	Node0x5eff8b0 [shape=record,label="{for.end.112:                                      \l  br label %for.inc.113\l}"];
	Node0x5eff8b0 -> Node0x5eff900;
	Node0x5eff900 [shape=record,label="{for.inc.113:                                      \l  %122 = load i64* %k, align 8\l  %inc114 = add nsw i64 %122, 1\l  store i64 %inc114, i64* %k, align 8\l  br label %for.cond\l}"];
	Node0x5eff900 -> Node0x5eff3b0;
	Node0x5eff950 [shape=record,label="{for.end.115:                                      \l  %123 = load %struct.grid** %ng, align 8\l  %124 = bitcast %struct.grid* %123 to i8*\l  %125 = load %struct.voxel** %v.addr, align 8\l  %cell116 = getelementptr inbounds %struct.voxel* %125, i32 0, i32 1\l  store i8* %124, i8** %cell116, align 8\l  %126 = load %struct.voxel** %v.addr, align 8\l  %numelements117 = getelementptr inbounds %struct.voxel* %126, i32 0, i32 3\l  store i64 -1, i64* %numelements117, align 8\l  %127 = load %struct.voxel** %v.addr, align 8\l  %celltype118 = getelementptr inbounds %struct.voxel* %127, i32 0, i32 2\l  store i8 3, i8* %celltype118, align 1\l  ret %struct.grid* undef\l}"];
}
