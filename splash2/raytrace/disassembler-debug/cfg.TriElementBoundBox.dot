digraph "CFG for 'TriElementBoundBox' function" {
	label="CFG for 'TriElementBoundBox' function";

	Node0x608b3c0 [shape=record,label="{entry:\l  %pe.addr = alloca %struct.element*, align 8\l  %pt.addr = alloca %struct.tri*, align 8\l  %i = alloca i64, align 8\l  %vindex = alloca i64*, align 8\l  %pbb = alloca %struct.bbox*, align 8\l  %vlist = alloca [3 x double]*, align 8\l  %vptr = alloca [3 x double]*, align 8\l  %minx = alloca double, align 8\l  %maxx = alloca double, align 8\l  %miny = alloca double, align 8\l  %maxy = alloca double, align 8\l  %minz = alloca double, align 8\l  %maxz = alloca double, align 8\l  store %struct.element* %pe, %struct.element** %pe.addr, align 8\l  store %struct.tri* %pt, %struct.tri** %pt.addr, align 8\l  %0 = load %struct.element** %pe.addr, align 8\l  %bv = getelementptr inbounds %struct.element* %0, i32 0, i32 1\l  store %struct.bbox* %bv, %struct.bbox** %pbb, align 8\l  store double 1.000000e+32, double* %minz, align 8\l  store double 1.000000e+32, double* %miny, align 8\l  store double 1.000000e+32, double* %minx, align 8\l  store double -1.000000e+32, double* %maxz, align 8\l  store double -1.000000e+32, double* %maxy, align 8\l  store double -1.000000e+32, double* %maxx, align 8\l  %1 = load %struct.tri** %pt.addr, align 8\l  %vptr1 = getelementptr inbounds %struct.tri* %1, i32 0, i32 2\l  %2 = load [3 x double]** %vptr1, align 8\l  store [3 x double]* %2, [3 x double]** %vlist, align 8\l  %3 = load %struct.tri** %pt.addr, align 8\l  %vindex2 = getelementptr inbounds %struct.tri* %3, i32 0, i32 4\l  %arraydecay = getelementptr inbounds [3 x i64]* %vindex2, i32 0, i32 0\l  store i64* %arraydecay, i64** %vindex, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x608b3c0 -> Node0x60a7d10;
	Node0x60a7d10 [shape=record,label="{for.cond:                                         \l  %4 = load i64* %i, align 8\l  %cmp = icmp slt i64 %4, 3\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x60a7d10:s0 -> Node0x60a7d60;
	Node0x60a7d10:s1 -> Node0x60a83a0;
	Node0x60a7d60 [shape=record,label="{for.body:                                         \l  %5 = load [3 x double]** %vlist, align 8\l  %6 = load i64** %vindex, align 8\l  %7 = load i64* %6, align 8\l  %add.ptr = getelementptr inbounds [3 x double]* %5, i64 %7\l  store [3 x double]* %add.ptr, [3 x double]** %vptr, align 8\l  %8 = load double* %minx, align 8\l  %9 = load [3 x double]** %vptr, align 8\l  %arrayidx = getelementptr inbounds [3 x double]* %9, i32 0, i64 0\l  %10 = load double* %arrayidx, align 8\l  %cmp3 = fcmp olt double %8, %10\l  br i1 %cmp3, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x60a7d60:s0 -> Node0x60a7db0;
	Node0x60a7d60:s1 -> Node0x60a7e00;
	Node0x60a7db0 [shape=record,label="{cond.true:                                        \l  %11 = load double* %minx, align 8\l  br label %cond.end\l}"];
	Node0x60a7db0 -> Node0x60a7e50;
	Node0x60a7e00 [shape=record,label="{cond.false:                                       \l  %12 = load [3 x double]** %vptr, align 8\l  %arrayidx4 = getelementptr inbounds [3 x double]* %12, i32 0, i64 0\l  %13 = load double* %arrayidx4, align 8\l  br label %cond.end\l}"];
	Node0x60a7e00 -> Node0x60a7e50;
	Node0x60a7e50 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %11, %cond.true ], [ %13, %cond.false ]\l  store double %cond, double* %minx, align 8\l  %14 = load double* %miny, align 8\l  %15 = load [3 x double]** %vptr, align 8\l  %arrayidx5 = getelementptr inbounds [3 x double]* %15, i32 0, i64 1\l  %16 = load double* %arrayidx5, align 8\l  %cmp6 = fcmp olt double %14, %16\l  br i1 %cmp6, label %cond.true.7, label %cond.false.8\l|{<s0>T|<s1>F}}"];
	Node0x60a7e50:s0 -> Node0x60a7ea0;
	Node0x60a7e50:s1 -> Node0x60a7ef0;
	Node0x60a7ea0 [shape=record,label="{cond.true.7:                                      \l  %17 = load double* %miny, align 8\l  br label %cond.end.10\l}"];
	Node0x60a7ea0 -> Node0x60a7f40;
	Node0x60a7ef0 [shape=record,label="{cond.false.8:                                     \l  %18 = load [3 x double]** %vptr, align 8\l  %arrayidx9 = getelementptr inbounds [3 x double]* %18, i32 0, i64 1\l  %19 = load double* %arrayidx9, align 8\l  br label %cond.end.10\l}"];
	Node0x60a7ef0 -> Node0x60a7f40;
	Node0x60a7f40 [shape=record,label="{cond.end.10:                                      \l  %cond11 = phi double [ %17, %cond.true.7 ], [ %19, %cond.false.8 ]\l  store double %cond11, double* %miny, align 8\l  %20 = load double* %minz, align 8\l  %21 = load [3 x double]** %vptr, align 8\l  %arrayidx12 = getelementptr inbounds [3 x double]* %21, i32 0, i64 2\l  %22 = load double* %arrayidx12, align 8\l  %cmp13 = fcmp olt double %20, %22\l  br i1 %cmp13, label %cond.true.14, label %cond.false.15\l|{<s0>T|<s1>F}}"];
	Node0x60a7f40:s0 -> Node0x60a7f90;
	Node0x60a7f40:s1 -> Node0x60a7fe0;
	Node0x60a7f90 [shape=record,label="{cond.true.14:                                     \l  %23 = load double* %minz, align 8\l  br label %cond.end.17\l}"];
	Node0x60a7f90 -> Node0x60a8030;
	Node0x60a7fe0 [shape=record,label="{cond.false.15:                                    \l  %24 = load [3 x double]** %vptr, align 8\l  %arrayidx16 = getelementptr inbounds [3 x double]* %24, i32 0, i64 2\l  %25 = load double* %arrayidx16, align 8\l  br label %cond.end.17\l}"];
	Node0x60a7fe0 -> Node0x60a8030;
	Node0x60a8030 [shape=record,label="{cond.end.17:                                      \l  %cond18 = phi double [ %23, %cond.true.14 ], [ %25, %cond.false.15 ]\l  store double %cond18, double* %minz, align 8\l  %26 = load double* %maxx, align 8\l  %27 = load [3 x double]** %vptr, align 8\l  %arrayidx19 = getelementptr inbounds [3 x double]* %27, i32 0, i64 0\l  %28 = load double* %arrayidx19, align 8\l  %cmp20 = fcmp ogt double %26, %28\l  br i1 %cmp20, label %cond.true.21, label %cond.false.22\l|{<s0>T|<s1>F}}"];
	Node0x60a8030:s0 -> Node0x60a8080;
	Node0x60a8030:s1 -> Node0x60a80d0;
	Node0x60a8080 [shape=record,label="{cond.true.21:                                     \l  %29 = load double* %maxx, align 8\l  br label %cond.end.24\l}"];
	Node0x60a8080 -> Node0x60a8120;
	Node0x60a80d0 [shape=record,label="{cond.false.22:                                    \l  %30 = load [3 x double]** %vptr, align 8\l  %arrayidx23 = getelementptr inbounds [3 x double]* %30, i32 0, i64 0\l  %31 = load double* %arrayidx23, align 8\l  br label %cond.end.24\l}"];
	Node0x60a80d0 -> Node0x60a8120;
	Node0x60a8120 [shape=record,label="{cond.end.24:                                      \l  %cond25 = phi double [ %29, %cond.true.21 ], [ %31, %cond.false.22 ]\l  store double %cond25, double* %maxx, align 8\l  %32 = load double* %maxy, align 8\l  %33 = load [3 x double]** %vptr, align 8\l  %arrayidx26 = getelementptr inbounds [3 x double]* %33, i32 0, i64 1\l  %34 = load double* %arrayidx26, align 8\l  %cmp27 = fcmp ogt double %32, %34\l  br i1 %cmp27, label %cond.true.28, label %cond.false.29\l|{<s0>T|<s1>F}}"];
	Node0x60a8120:s0 -> Node0x60a8170;
	Node0x60a8120:s1 -> Node0x60a81c0;
	Node0x60a8170 [shape=record,label="{cond.true.28:                                     \l  %35 = load double* %maxy, align 8\l  br label %cond.end.31\l}"];
	Node0x60a8170 -> Node0x60a8210;
	Node0x60a81c0 [shape=record,label="{cond.false.29:                                    \l  %36 = load [3 x double]** %vptr, align 8\l  %arrayidx30 = getelementptr inbounds [3 x double]* %36, i32 0, i64 1\l  %37 = load double* %arrayidx30, align 8\l  br label %cond.end.31\l}"];
	Node0x60a81c0 -> Node0x60a8210;
	Node0x60a8210 [shape=record,label="{cond.end.31:                                      \l  %cond32 = phi double [ %35, %cond.true.28 ], [ %37, %cond.false.29 ]\l  store double %cond32, double* %maxy, align 8\l  %38 = load double* %maxz, align 8\l  %39 = load [3 x double]** %vptr, align 8\l  %arrayidx33 = getelementptr inbounds [3 x double]* %39, i32 0, i64 2\l  %40 = load double* %arrayidx33, align 8\l  %cmp34 = fcmp ogt double %38, %40\l  br i1 %cmp34, label %cond.true.35, label %cond.false.36\l|{<s0>T|<s1>F}}"];
	Node0x60a8210:s0 -> Node0x60a8260;
	Node0x60a8210:s1 -> Node0x60a82b0;
	Node0x60a8260 [shape=record,label="{cond.true.35:                                     \l  %41 = load double* %maxz, align 8\l  br label %cond.end.38\l}"];
	Node0x60a8260 -> Node0x60a8300;
	Node0x60a82b0 [shape=record,label="{cond.false.36:                                    \l  %42 = load [3 x double]** %vptr, align 8\l  %arrayidx37 = getelementptr inbounds [3 x double]* %42, i32 0, i64 2\l  %43 = load double* %arrayidx37, align 8\l  br label %cond.end.38\l}"];
	Node0x60a82b0 -> Node0x60a8300;
	Node0x60a8300 [shape=record,label="{cond.end.38:                                      \l  %cond39 = phi double [ %41, %cond.true.35 ], [ %43, %cond.false.36 ]\l  store double %cond39, double* %maxz, align 8\l  %44 = load i64** %vindex, align 8\l  %incdec.ptr = getelementptr inbounds i64* %44, i32 1\l  store i64* %incdec.ptr, i64** %vindex, align 8\l  br label %for.inc\l}"];
	Node0x60a8300 -> Node0x60a8350;
	Node0x60a8350 [shape=record,label="{for.inc:                                          \l  %45 = load i64* %i, align 8\l  %inc = add nsw i64 %45, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x60a8350 -> Node0x60a7d10;
	Node0x60a83a0 [shape=record,label="{for.end:                                          \l  %46 = load double* %minx, align 8\l  %47 = load %struct.bbox** %pbb, align 8\l  %dnear = getelementptr inbounds %struct.bbox* %47, i32 0, i32 0\l  %arrayidx40 = getelementptr inbounds [3 x double]* %dnear, i32 0, i64 0\l  store double %46, double* %arrayidx40, align 8\l  %48 = load double* %miny, align 8\l  %49 = load %struct.bbox** %pbb, align 8\l  %dnear41 = getelementptr inbounds %struct.bbox* %49, i32 0, i32 0\l  %arrayidx42 = getelementptr inbounds [3 x double]* %dnear41, i32 0, i64 1\l  store double %48, double* %arrayidx42, align 8\l  %50 = load double* %minz, align 8\l  %51 = load %struct.bbox** %pbb, align 8\l  %dnear43 = getelementptr inbounds %struct.bbox* %51, i32 0, i32 0\l  %arrayidx44 = getelementptr inbounds [3 x double]* %dnear43, i32 0, i64 2\l  store double %50, double* %arrayidx44, align 8\l  %52 = load double* %maxx, align 8\l  %53 = load %struct.bbox** %pbb, align 8\l  %dfar = getelementptr inbounds %struct.bbox* %53, i32 0, i32 1\l  %arrayidx45 = getelementptr inbounds [3 x double]* %dfar, i32 0, i64 0\l  store double %52, double* %arrayidx45, align 8\l  %54 = load double* %maxy, align 8\l  %55 = load %struct.bbox** %pbb, align 8\l  %dfar46 = getelementptr inbounds %struct.bbox* %55, i32 0, i32 1\l  %arrayidx47 = getelementptr inbounds [3 x double]* %dfar46, i32 0, i64 1\l  store double %54, double* %arrayidx47, align 8\l  %56 = load double* %maxz, align 8\l  %57 = load %struct.bbox** %pbb, align 8\l  %dfar48 = getelementptr inbounds %struct.bbox* %57, i32 0, i32 1\l  %arrayidx49 = getelementptr inbounds [3 x double]* %dfar48, i32 0, i64 2\l  store double %56, double* %arrayidx49, align 8\l  ret void\l}"];
}
