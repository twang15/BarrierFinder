digraph "CFG for 'ViewRotate' function" {
	label="CFG for 'ViewRotate' function";

	Node0x5ecb080 [shape=record,label="{entry:\l  %M.addr = alloca [4 x double]*, align 8\l  %x.addr = alloca double, align 8\l  %y.addr = alloca double, align 8\l  %z.addr = alloca double, align 8\l  %r = alloca double, align 8\l  %rx = alloca double, align 8\l  store [4 x double]* %M, [4 x double]** %M.addr, align 8\l  store double %x, double* %x.addr, align 8\l  store double %y, double* %y.addr, align 8\l  store double %z, double* %z.addr, align 8\l  %0 = load double* %x.addr, align 8\l  %1 = load double* %x.addr, align 8\l  %mul = fmul double %0, %1\l  %2 = load double* %z.addr, align 8\l  %3 = load double* %z.addr, align 8\l  %mul1 = fmul double %2, %3\l  %add = fadd double %mul, %mul1\l  %call = call double @sqrt(double %add)\l  store double %call, double* %rx, align 8\l  %4 = load double* %rx, align 8\l  %cmp = fcmp ogt double %4, 0.000000e+00\l  br i1 %cmp, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x5ecb080:s0 -> Node0x5ecb0d0;
	Node0x5ecb080:s1 -> Node0x5ecb120;
	Node0x5ecb0d0 [shape=record,label="{cond.true:                                        \l  %5 = load double* %rx, align 8\l  br label %cond.end\l}"];
	Node0x5ecb0d0 -> Node0x5ecb170;
	Node0x5ecb120 [shape=record,label="{cond.false:                                       \l  %6 = load double* %rx, align 8\l  %sub = fsub double -0.000000e+00, %6\l  br label %cond.end\l}"];
	Node0x5ecb120 -> Node0x5ecb170;
	Node0x5ecb170 [shape=record,label="{cond.end:                                         \l  %cond = phi double [ %5, %cond.true ], [ %sub, %cond.false ]\l  %cmp2 = fcmp olt double %cond, 1.000000e-07\l  br i1 %cmp2, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5ecb170:s0 -> Node0x5ecb1c0;
	Node0x5ecb170:s1 -> Node0x5ecb210;
	Node0x5ecb1c0 [shape=record,label="{if.then:                                          \l  %7 = load [4 x double]** %M.addr, align 8\l  call void @MatrixIdentity([4 x double]* %7)\l  %8 = load [4 x double]** %M.addr, align 8\l  call void @Rotate(i64 1, [4 x double]* %8, double undef)\l  br label %return\l}"];
	Node0x5ecb1c0 -> Node0x5ecb260;
	Node0x5ecb210 [shape=record,label="{if.end:                                           \l  %9 = load double* %x.addr, align 8\l  %10 = load double* %x.addr, align 8\l  %mul6 = fmul double %9, %10\l  %11 = load double* %y.addr, align 8\l  %12 = load double* %y.addr, align 8\l  %mul7 = fmul double %11, %12\l  %add8 = fadd double %mul6, %mul7\l  %13 = load double* %z.addr, align 8\l  %14 = load double* %z.addr, align 8\l  %mul9 = fmul double %13, %14\l  %add10 = fadd double %add8, %mul9\l  %call11 = call double @sqrt(double %add10)\l  store double %call11, double* %r, align 8\l  %15 = load double* %z.addr, align 8\l  %16 = load double* %rx, align 8\l  %div = fdiv double %15, %16\l  %17 = load [4 x double]** %M.addr, align 8\l  %arrayidx = getelementptr inbounds [4 x double]* %17, i64 0\l  %arrayidx12 = getelementptr inbounds [4 x double]* %arrayidx, i32 0, i64 0\l  store double %div, double* %arrayidx12, align 8\l  %18 = load double* %x.addr, align 8\l  %sub13 = fsub double -0.000000e+00, %18\l  %19 = load double* %y.addr, align 8\l  %mul14 = fmul double %sub13, %19\l  %20 = load double* %r, align 8\l  %21 = load double* %rx, align 8\l  %mul15 = fmul double %20, %21\l  %div16 = fdiv double %mul14, %mul15\l  %22 = load [4 x double]** %M.addr, align 8\l  %arrayidx17 = getelementptr inbounds [4 x double]* %22, i64 0\l  %arrayidx18 = getelementptr inbounds [4 x double]* %arrayidx17, i32 0, i64 1\l  store double %div16, double* %arrayidx18, align 8\l  %23 = load double* %x.addr, align 8\l  %24 = load double* %r, align 8\l  %div19 = fdiv double %23, %24\l  %25 = load [4 x double]** %M.addr, align 8\l  %arrayidx20 = getelementptr inbounds [4 x double]* %25, i64 0\l  %arrayidx21 = getelementptr inbounds [4 x double]* %arrayidx20, i32 0, i64 2\l  store double %div19, double* %arrayidx21, align 8\l  %26 = load [4 x double]** %M.addr, align 8\l  %arrayidx22 = getelementptr inbounds [4 x double]* %26, i64 0\l  %arrayidx23 = getelementptr inbounds [4 x double]* %arrayidx22, i32 0, i64 3\l  store double 0.000000e+00, double* %arrayidx23, align 8\l  %27 = load [4 x double]** %M.addr, align 8\l  %arrayidx24 = getelementptr inbounds [4 x double]* %27, i64 1\l  %arrayidx25 = getelementptr inbounds [4 x double]* %arrayidx24, i32 0, i64 0\l  store double 0.000000e+00, double* %arrayidx25, align 8\l  %28 = load double* %rx, align 8\l  %29 = load double* %r, align 8\l  %div26 = fdiv double %28, %29\l  %30 = load [4 x double]** %M.addr, align 8\l  %arrayidx27 = getelementptr inbounds [4 x double]* %30, i64 1\l  %arrayidx28 = getelementptr inbounds [4 x double]* %arrayidx27, i32 0, i64 1\l  store double %div26, double* %arrayidx28, align 8\l  %31 = load double* %y.addr, align 8\l  %32 = load double* %r, align 8\l  %div29 = fdiv double %31, %32\l  %33 = load [4 x double]** %M.addr, align 8\l  %arrayidx30 = getelementptr inbounds [4 x double]* %33, i64 1\l  %arrayidx31 = getelementptr inbounds [4 x double]* %arrayidx30, i32 0, i64 2\l  store double %div29, double* %arrayidx31, align 8\l  %34 = load [4 x double]** %M.addr, align 8\l  %arrayidx32 = getelementptr inbounds [4 x double]* %34, i64 1\l  %arrayidx33 = getelementptr inbounds [4 x double]* %arrayidx32, i32 0, i64 3\l  store double 0.000000e+00, double* %arrayidx33, align 8\l  %35 = load double* %y.addr, align 8\l  %sub38 = fsub double -0.000000e+00, %35\l  %36 = load double* %z.addr, align 8\l  %mul39 = fmul double %sub38, %36\l  %37 = load double* %r, align 8\l  %38 = load double* %rx, align 8\l  %mul40 = fmul double %37, %38\l  %div41 = fdiv double %mul39, %mul40\l  %39 = load [4 x double]** %M.addr, align 8\l  %arrayidx42 = getelementptr inbounds [4 x double]* %39, i64 2\l  %arrayidx43 = getelementptr inbounds [4 x double]* %arrayidx42, i32 0, i64 1\l  store double %div41, double* %arrayidx43, align 8\l  %40 = load [4 x double]** %M.addr, align 8\l  %arrayidx55 = getelementptr inbounds [4 x double]* %40, i64 3\l  %arrayidx56 = getelementptr inbounds [4 x double]* %arrayidx55, i32 0, i64 3\l  store double 1.000000e+00, double* %arrayidx56, align 8\l  br label %return\l}"];
	Node0x5ecb210 -> Node0x5ecb260;
	Node0x5ecb260 [shape=record,label="{return:                                           \l  ret void\l}"];
}
