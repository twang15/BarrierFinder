digraph "CFG for 'log_2' function" {
	label="CFG for 'log_2' function";

	Node0x6019330 [shape=record,label="{entry:\l  %retval = alloca i32, align 4\l  %number.addr = alloca i32, align 4\l  %cumulative = alloca i32, align 4\l  %out = alloca i32, align 4\l  %done = alloca i32, align 4\l  store i32 %number, i32* %number.addr, align 4\l  store i32 1, i32* %cumulative, align 4\l  store i32 0, i32* %out, align 4\l  store i32 0, i32* %done, align 4\l  br label %while.cond\l}"];
	Node0x6019330 -> Node0x6019380;
	Node0x6019380 [shape=record,label="{while.cond:                                       \l  %0 = load i32* %cumulative, align 4\l  %1 = load i32* %number.addr, align 4\l  %cmp = icmp slt i32 %0, %1\l  br i1 %cmp, label %land.lhs.true, label %land.end\l|{<s0>T|<s1>F}}"];
	Node0x6019380:s0 -> Node0x60193d0;
	Node0x6019380:s1 -> Node0x6019470;
	Node0x60193d0 [shape=record,label="{land.lhs.true:                                    \l  %2 = load i32* %done, align 4\l  %tobool = icmp ne i32 %2, 0\l  br i1 %tobool, label %land.end, label %land.rhs\l|{<s0>T|<s1>F}}"];
	Node0x60193d0:s0 -> Node0x6019470;
	Node0x60193d0:s1 -> Node0x6019420;
	Node0x6019420 [shape=record,label="{land.rhs:                                         \l  %3 = load i32* %out, align 4\l  %cmp1 = icmp slt i32 %3, 50\l  br label %land.end\l}"];
	Node0x6019420 -> Node0x6019470;
	Node0x6019470 [shape=record,label="{land.end:                                         \l  %4 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp1,\l... %land.rhs ]\l  br i1 %4, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x6019470:s0 -> Node0x60194c0;
	Node0x6019470:s1 -> Node0x6019600;
	Node0x60194c0 [shape=record,label="{while.body:                                       \l  %5 = load i32* %cumulative, align 4\l  %6 = load i32* %number.addr, align 4\l  %cmp2 = icmp eq i32 %5, %6\l  br i1 %cmp2, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x60194c0:s0 -> Node0x6019510;
	Node0x60194c0:s1 -> Node0x6019560;
	Node0x6019510 [shape=record,label="{if.then:                                          \l  store i32 1, i32* %done, align 4\l  br label %if.end\l}"];
	Node0x6019510 -> Node0x60195b0;
	Node0x6019560 [shape=record,label="{if.else:                                          \l  %7 = load i32* %cumulative, align 4\l  %mul = mul nsw i32 %7, 2\l  store i32 %mul, i32* %cumulative, align 4\l  %8 = load i32* %out, align 4\l  %inc = add nsw i32 %8, 1\l  store i32 %inc, i32* %out, align 4\l  br label %if.end\l}"];
	Node0x6019560 -> Node0x60195b0;
	Node0x60195b0 [shape=record,label="{if.end:                                           \l  br label %while.cond\l}"];
	Node0x60195b0 -> Node0x6019380;
	Node0x6019600 [shape=record,label="{while.end:                                        \l  %9 = load i32* %cumulative, align 4\l  %10 = load i32* %number.addr, align 4\l  %cmp3 = icmp eq i32 %9, %10\l  br i1 %cmp3, label %if.then.4, label %if.else.5\l|{<s0>T|<s1>F}}"];
	Node0x6019600:s0 -> Node0x6019650;
	Node0x6019600:s1 -> Node0x60196a0;
	Node0x6019650 [shape=record,label="{if.then.4:                                        \l  %11 = load i32* %out, align 4\l  store i32 %11, i32* %retval\l  br label %return\l}"];
	Node0x6019650 -> Node0x60196f0;
	Node0x60196a0 [shape=record,label="{if.else.5:                                        \l  store i32 -1, i32* %retval\l  br label %return\l}"];
	Node0x60196a0 -> Node0x60196f0;
	Node0x60196f0 [shape=record,label="{return:                                           \l  %12 = load i32* %retval\l  ret i32 %12\l}"];
}
