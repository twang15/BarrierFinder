digraph "CFG for 'IncrementCounter' function" {
	label="CFG for 'IncrementCounter' function";

	Node0x43ed5f0 [shape=record,label="{entry:\l  %idx = alloca i32, align 4\l  %i = alloca i32, align 4\l  %call = call i32 (...) *bitcast (i64 ()* @pthread_self to i32 (...)*)()\l  store i32 %call, i32* %idx, align 4\l  %0 = load i32* %idx, align 4\l  %idxprom = zext i32 %0 to i64\l  %arrayidx = getelementptr inbounds [3 x i32]* @syncID, i32 0, i64 %idxprom\l  %1 = load i32* %arrayidx, align 4\l  %cmp = icmp eq i32 %1, 0\l  br i1 %cmp, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x43ed5f0:s0 -> Node0x43ed640;
	Node0x43ed5f0:s1 -> Node0x43ed910;
	Node0x43ed640 [shape=record,label="{if.then:                                          \l  %2 = load i32* @counter0, align 4\l  %inc = add nsw i32 %2, 1\l  store i32 %inc, i32* @counter0, align 4\l  %3 = load i32* @counter0, align 4\l  %cmp1 = icmp eq i32 %3, 1\l  br i1 %cmp1, label %if.then.2, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x43ed640:s0 -> Node0x43ed690;
	Node0x43ed640:s1 -> Node0x43ed6e0;
	Node0x43ed690 [shape=record,label="{if.then.2:                                        \l  call void @CheckInvariant()\l  br label %if.end\l}"];
	Node0x43ed690 -> Node0x43ed6e0;
	Node0x43ed6e0 [shape=record,label="{if.end:                                           \l  %4 = load i8* @firstSync, align 1\l  %tobool = trunc i8 %4 to i1\l  br i1 %tobool, label %if.then.3, label %if.end.8\l|{<s0>T|<s1>F}}"];
	Node0x43ed6e0:s0 -> Node0x43ed730;
	Node0x43ed6e0:s1 -> Node0x43ed8c0;
	Node0x43ed730 [shape=record,label="{if.then.3:                                        \l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x43ed730 -> Node0x43ed780;
	Node0x43ed780 [shape=record,label="{for.cond:                                         \l  %5 = load i32* %i, align 4\l  %cmp4 = icmp slt i32 %5, 3\l  br i1 %cmp4, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x43ed780:s0 -> Node0x43ed7d0;
	Node0x43ed780:s1 -> Node0x43ed870;
	Node0x43ed7d0 [shape=record,label="{for.body:                                         \l  %6 = load i32* %i, align 4\l  %idxprom5 = sext i32 %6 to i64\l  %arrayidx6 = getelementptr inbounds [3 x i8]* @switches, i32 0, i64 %idxprom5\l  store i8 1, i8* %arrayidx6, align 1\l  br label %for.inc\l}"];
	Node0x43ed7d0 -> Node0x43ed820;
	Node0x43ed820 [shape=record,label="{for.inc:                                          \l  %7 = load i32* %i, align 4\l  %inc7 = add nsw i32 %7, 1\l  store i32 %inc7, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x43ed820 -> Node0x43ed780;
	Node0x43ed870 [shape=record,label="{for.end:                                          \l  store i8 0, i8* @firstSync, align 1\l  br label %if.end.8\l}"];
	Node0x43ed870 -> Node0x43ed8c0;
	Node0x43ed8c0 [shape=record,label="{if.end.8:                                         \l  br label %if.end.13\l}"];
	Node0x43ed8c0 -> Node0x43eda00;
	Node0x43ed910 [shape=record,label="{if.else:                                          \l  %8 = load i32* @counter1, align 4\l  %inc9 = add nsw i32 %8, 1\l  store i32 %inc9, i32* @counter1, align 4\l  %9 = load i32* @counter1, align 4\l  %cmp10 = icmp eq i32 %9, 1\l  br i1 %cmp10, label %if.then.11, label %if.end.12\l|{<s0>T|<s1>F}}"];
	Node0x43ed910:s0 -> Node0x43ed960;
	Node0x43ed910:s1 -> Node0x43ed9b0;
	Node0x43ed960 [shape=record,label="{if.then.11:                                       \l  call void @CheckInvariant()\l  br label %if.end.12\l}"];
	Node0x43ed960 -> Node0x43ed9b0;
	Node0x43ed9b0 [shape=record,label="{if.end.12:                                        \l  br label %if.end.13\l}"];
	Node0x43ed9b0 -> Node0x43eda00;
	Node0x43eda00 [shape=record,label="{if.end.13:                                        \l  ret void\l}"];
}
