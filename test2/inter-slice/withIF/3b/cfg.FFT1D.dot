digraph "CFG for 'FFT1D' function" {
	label="CFG for 'FFT1D' function";

	Node0x4a2eb50 [shape=record,label="{entry:\l  %direction.addr = alloca i32, align 4\l  %M.addr = alloca i32, align 4\l  %N.addr = alloca i32, align 4\l  %x.addr = alloca double*, align 8\l  %scratch.addr = alloca double*, align 8\l  %upriv.addr = alloca double*, align 8\l  %umain2.addr = alloca double*, align 8\l  %MyNum.addr = alloca i32, align 4\l  %l_transtime.addr = alloca i32*, align 8\l  %MyFirst.addr = alloca i32, align 4\l  %MyLast.addr = alloca i32, align 4\l  %pad_length.addr = alloca i32, align 4\l  %P.addr = alloca i32, align 4\l  %test_result.addr = alloca i32, align 4\l  %doprint.addr = alloca i32, align 4\l  %dostats.addr = alloca i32, align 4\l  %Global.addr = alloca %struct.GlobalMemory*, align 8\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %m1 = alloca i32, align 4\l  %n1 = alloca i32, align 4\l  %flag = alloca i32, align 4\l  %clocktime1 = alloca i32, align 4\l  %clocktime2 = alloca i32, align 4\l  %lsense = alloca i32, align 4\l  %oldcount = alloca i32, align 4\l  %newcount = alloca i32, align 4\l  %updatedcount = alloca i32, align 4\l  store i32 %P, i32* %P.addr, align 4\l  store %struct.GlobalMemory* %Global, %struct.GlobalMemory** %Global.addr,\l... align 8\l  call void @printChar(i8 signext 51)\l  call void @printChar(i8 signext 90)\l  call void @InitializeSwitchesAndCounter()\l  call void @IncrementCounter()\l  %0 = load %struct.GlobalMemory** %Global.addr, align 8\l  %start = getelementptr inbounds %struct.GlobalMemory* %0, i32 0, i32 2\l  %gsense = getelementptr inbounds %struct.barrier_t* %start, i32 0, i32 0\l  %1 = load volatile i32* %gsense, align 4\l  %call1 = call i32 @sleep(i32 1)\l  store i32 %1, i32* %lsense, align 4\l  br label %while.body\l}"];
	Node0x4a2eb50 -> Node0x4a2eba0;
	Node0x4a2eba0 [shape=record,label="{while.body:                                       \l  %2 = load %struct.GlobalMemory** %Global.addr, align 8\l  %start1 = getelementptr inbounds %struct.GlobalMemory* %2, i32 0, i32 2\l  %count = getelementptr inbounds %struct.barrier_t* %start1, i32 0, i32 1\l  %3 = load volatile i64* %count, align 8\l  %call2 = call i32 @sleep(i32 1)\l  %conv = trunc i64 %3 to i32\l  store i32 %conv, i32* %oldcount, align 4\l  %4 = load i32* %oldcount, align 4\l  %5 = load i32* %lsense, align 4\l  %add = add nsw i32 %4, %5\l  store i32 %add, i32* %newcount, align 4\l  %6 = load i32* %oldcount, align 4\l  %7 = load i32* %newcount, align 4\l  %call = call i32 @atomic_cmpxchg(i32 %6, i32 %7)\l  %call6 = call i32 @sleep(i32 1)\l  store i32 %call, i32* %updatedcount, align 4\l  %8 = load i32* %updatedcount, align 4\l  %9 = load i32* %oldcount, align 4\l  %cmp = icmp eq i32 %8, %9\l  br i1 %cmp, label %if.then, label %if.end.15\l|{<s0>T|<s1>F}}"];
	Node0x4a2eba0:s0 -> Node0x4a2ebf0;
	Node0x4a2eba0:s1 -> Node0x4a2edd0;
	Node0x4a2ebf0 [shape=record,label="{if.then:                                          \l  %10 = load i32* %newcount, align 4\l  %11 = load i32* %P.addr, align 4\l  %cmp3 = icmp eq i32 %10, %11\l  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false\l|{<s0>T|<s1>F}}"];
	Node0x4a2ebf0:s0 -> Node0x4a2ec40;
	Node0x4a2ebf0:s1 -> Node0x4a2ec90;
	Node0x4a2ec40 [shape=record,label="{land.lhs.true:                                    \l  %12 = load i32* %lsense, align 4\l  %cmp5 = icmp eq i32 %12, 1\l  br i1 %cmp5, label %if.then.12, label %lor.lhs.false\l|{<s0>T|<s1>F}}"];
	Node0x4a2ec40:s0 -> Node0x4a2ed30;
	Node0x4a2ec40:s1 -> Node0x4a2ec90;
	Node0x4a2ec90 [shape=record,label="{lor.lhs.false:                                    \l  %13 = load i32* %newcount, align 4\l  %cmp7 = icmp eq i32 %13, 0\l  br i1 %cmp7, label %land.lhs.true.9, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x4a2ec90:s0 -> Node0x4a2ece0;
	Node0x4a2ec90:s1 -> Node0x4a2ed80;
	Node0x4a2ece0 [shape=record,label="{land.lhs.true.9:                                  \l  %14 = load i32* %lsense, align 4\l  %cmp10 = icmp eq i32 %14, -1\l  br i1 %cmp10, label %if.then.12, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x4a2ece0:s0 -> Node0x4a2ed30;
	Node0x4a2ece0:s1 -> Node0x4a2ed80;
	Node0x4a2ed30 [shape=record,label="{if.then.12:                                       \l  %15 = load i32* %lsense, align 4\l  %sub = sub nsw i32 0, %15\l  %16 = load %struct.GlobalMemory** %Global.addr, align 8\l  %start13 = getelementptr inbounds %struct.GlobalMemory* %16, i32 0, i32 2\l  %gsense14 = getelementptr inbounds %struct.barrier_t* %start13, i32 0, i32 0\l  call void @printX()\l  store volatile i32 %sub, i32* %gsense14, align 4\l  call void @snapshot(i32 %sub, i32 1)\l  %call3 = call i32 @sleep(i32 3)\l  br label %if.end\l}"];
	Node0x4a2ed30 -> Node0x4a2ed80;
	Node0x4a2ed80 [shape=record,label="{if.end:                                           \l  br label %while.end\l}"];
	Node0x4a2ed80 -> Node0x4a2ee20;
	Node0x4a2edd0 [shape=record,label="{if.end.15:                                        \l  br label %while.body\l}"];
	Node0x4a2edd0 -> Node0x4a2eba0;
	Node0x4a2ee20 [shape=record,label="{while.end:                                        \l  br label %while.cond\l}"];
	Node0x4a2ee20 -> Node0x4a2ee70;
	Node0x4a2ee70 [shape=record,label="{while.cond:                                       \l  %17 = load %struct.GlobalMemory** %Global.addr, align 8\l  %start16 = getelementptr inbounds %struct.GlobalMemory* %17, i32 0, i32 2\l  %gsense17 = getelementptr inbounds %struct.barrier_t* %start16, i32 0, i32 0\l  %18 = load volatile i32* %gsense17, align 4\l  %19 = load i32* %lsense, align 4\l  %cmp18 = icmp eq i32 %18, %19\l  br i1 %cmp18, label %while.body.20, label %while.end.21\l|{<s0>T|<s1>F}}"];
	Node0x4a2ee70:s0 -> Node0x4a2eec0;
	Node0x4a2ee70:s1 -> Node0x4a2ef10;
	Node0x4a2eec0 [shape=record,label="{while.body.20:                                    \l  %call4 = call i32 @sleep(i32 2)\l  br label %while.cond\l}"];
	Node0x4a2eec0 -> Node0x4a2ee70;
	Node0x4a2ef10 [shape=record,label="{while.end.21:                                     \l  call void @printY()\l  %call5 = call i32 @sleep(i32 1)\l  ret void\l}"];
}
