digraph "CFG for 'log_2' function" {
	label="CFG for 'log_2' function";

	Node0x4a3c580 [shape=record,label="{entry:\l  %retval = alloca i32, align 4\l  %number.addr = alloca i32, align 4\l  %cumulative = alloca i32, align 4\l  %out = alloca i32, align 4\l  %done = alloca i32, align 4\l  store i32 %number, i32* %number.addr, align 4\l  store i32 1, i32* %cumulative, align 4\l  store i32 0, i32* %out, align 4\l  store i32 0, i32* %done, align 4\l  br label %while.cond\l}"];
	Node0x4a3c580 -> Node0x4a3c6a0;
	Node0x4a3c6a0 [shape=record,label="{while.cond:                                       \l  %0 = load i32* %cumulative, align 4\l  %1 = load i32* %number.addr, align 4\l  %cmp = icmp sge i32 %0, %1\l  %2 = load i32* %done, align 4\l  %tobool = icmp ne i32 %2, 0\l  %or.cond = or i1 %cmp, %tobool\l  br i1 %or.cond, label %land.end, label %land.rhs\l|{<s0>T|<s1>F}}"];
	Node0x4a3c6a0:s0 -> Node0x4a3c740;
	Node0x4a3c6a0:s1 -> Node0x4a3c6f0;
	Node0x4a3c6f0 [shape=record,label="{land.rhs:                                         \l  %3 = load i32* %out, align 4\l  %cmp1 = icmp slt i32 %3, 50\l  br label %land.end\l}"];
	Node0x4a3c6f0 -> Node0x4a3c740;
	Node0x4a3c740 [shape=record,label="{land.end:                                         \l  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]\l  %5 = load i32* %cumulative, align 4\l  %6 = load i32* %number.addr, align 4\l  %cmp2 = icmp eq i32 %5, %6\l  br i1 %4, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x4a3c740:s0 -> Node0x4a3c790;
	Node0x4a3c740:s1 -> Node0x4a3c880;
	Node0x4a3c790 [shape=record,label="{while.body:                                       \l  br i1 %cmp2, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x4a3c790:s0 -> Node0x4a3c7e0;
	Node0x4a3c790:s1 -> Node0x4a3c830;
	Node0x4a3c7e0 [shape=record,label="{if.then:                                          \l  store i32 1, i32* %done, align 4\l  br label %while.cond\l}"];
	Node0x4a3c7e0 -> Node0x4a3c6a0;
	Node0x4a3c830 [shape=record,label="{if.else:                                          \l  %7 = load i32* %cumulative, align 4\l  %mul = mul nsw i32 %7, 2\l  store i32 %mul, i32* %cumulative, align 4\l  %8 = load i32* %out, align 4\l  %inc = add nsw i32 %8, 1\l  store i32 %inc, i32* %out, align 4\l  br label %while.cond\l}"];
	Node0x4a3c830 -> Node0x4a3c6a0;
	Node0x4a3c880 [shape=record,label="{while.end:                                        \l  br i1 %cmp2, label %if.then.4, label %if.else.5\l|{<s0>T|<s1>F}}"];
	Node0x4a3c880:s0 -> Node0x4a3c8d0;
	Node0x4a3c880:s1 -> Node0x4a3c920;
	Node0x4a3c8d0 [shape=record,label="{if.then.4:                                        \l  %9 = load i32* %out, align 4\l  store i32 %9, i32* %retval\l  br label %return\l}"];
	Node0x4a3c8d0 -> Node0x4a3c970;
	Node0x4a3c920 [shape=record,label="{if.else.5:                                        \l  store i32 -1, i32* %retval\l  br label %return\l}"];
	Node0x4a3c920 -> Node0x4a3c970;
	Node0x4a3c970 [shape=record,label="{return:                                           \l  %10 = load i32* %retval\l  ret i32 %10\l}"];
}
