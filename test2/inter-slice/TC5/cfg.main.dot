digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x4a3bc80 [shape=record,label="{entry:\l  %argc.addr = alloca i32, align 4\l  %argv.addr = alloca i8**, align 8\l  %i = alloca i32, align 4\l  %c = alloca i32, align 4\l  %m1 = alloca i32, align 4\l  %pages = alloca i32, align 4\l  %t = alloca i64, align 8\l  store i32 %argc, i32* %argc.addr, align 4\l  store i8** %argv, i8*** %argv.addr, align 8\l  br label %while.cond\l}"];
	Node0x4a3bc80 -> Node0x4a3bcd0;
	Node0x4a3bcd0 [shape=record,label="{while.cond:                                       \l  %0 = load i32* %argc.addr, align 4\l  %1 = load i8*** %argv.addr, align 8\l  %call1 = call i32 (i32, i8**, i8*, ...) *bitcast (i32 (...)* @getopt to i32\l... (i32, i8**, i8*, ...)*)(i32 %0, i8** %1, i8* getelementptr inbounds ([13 x\l... i8]* @.str, i32 0, i32 0))\l  store i32 %call1, i32* %c, align 4\l  %cmp = icmp ne i32 %call1, -1\l  br i1 %cmp, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x4a3bcd0:s0 -> Node0x4a3bd20;
	Node0x4a3bcd0:s1 -> Node0x4a3bf50;
	Node0x4a3bd20 [shape=record,label="{while.body:                                       \l  %2 = load i32* %c, align 4\l  switch i32 %2, label %while.cond [\l    i32 112, label %sw.bb\l    i32 109, label %sw.bb.11\l    i32 110, label %sw.bb.17\l    i32 108, label %sw.bb.23\l    i32 111, label %sw.bb.34\l    i32 116, label %sw.bb.30\l  ]\l|{<s0>def|<s1>112|<s2>109|<s3>110|<s4>108|<s5>111|<s6>116}}"];
	Node0x4a3bd20:s0 -> Node0x4a3bcd0;
	Node0x4a3bd20:s1 -> Node0x4a3bd70;
	Node0x4a3bd20:s2 -> Node0x4a3bdc0;
	Node0x4a3bd20:s3 -> Node0x4a3be10;
	Node0x4a3bd20:s4 -> Node0x4a3be60;
	Node0x4a3bd20:s5 -> Node0x4a3bf00;
	Node0x4a3bd20:s6 -> Node0x4a3beb0;
	Node0x4a3bd70 [shape=record,label="{sw.bb:                                            \l  %3 = load i8** @optarg, align 8\l  %call3 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*,\l... ...)*)(i8* %3)\l  store i32 %call3, i32* @P, align 4\l  %4 = load i32* @P, align 4\l  %call6 = call i32 @log_2(i32 %4)\l  br label %while.cond\l}"];
	Node0x4a3bd70 -> Node0x4a3bcd0;
	Node0x4a3bdc0 [shape=record,label="{sw.bb.11:                                         \l  %5 = load i8** @optarg, align 8\l  %call12 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*,\l... ...)*)(i8* %5)\l  store i32 %call12, i32* @M, align 4\l  %6 = load i32* @M, align 4\l  %div = sdiv i32 %6, 2\l  store i32 %div, i32* %m1, align 4\l  br label %while.cond\l}"];
	Node0x4a3bdc0 -> Node0x4a3bcd0;
	Node0x4a3be10 [shape=record,label="{sw.bb.17:                                         \l  %7 = load i8** @optarg, align 8\l  %call18 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*,\l... ...)*)(i8* %7)\l  store i32 %call18, i32* @num_cache_lines, align 4\l  br label %while.cond\l}"];
	Node0x4a3be10 -> Node0x4a3bcd0;
	Node0x4a3be60 [shape=record,label="{sw.bb.23:                                         \l  %8 = load i8** @optarg, align 8\l  %call24 = call i32 (i8*, ...) *bitcast (i32 (...)* @atoi to i32 (i8*,\l... ...)*)(i8* %8)\l  store i32 %call24, i32* @log2_line_size, align 4\l  br label %while.cond\l}"];
	Node0x4a3be60 -> Node0x4a3bcd0;
	Node0x4a3beb0 [shape=record,label="{sw.bb.30:                                         \l  %9 = load i32* @test_result, align 4\l  %tobool31 = icmp ne i32 %9, 0\l  %lnot32 = xor i1 %tobool31, true\l  %lnot.ext33 = zext i1 %lnot32 to i32\l  store i32 %lnot.ext33, i32* @test_result, align 4\l  br label %while.cond\l}"];
	Node0x4a3beb0 -> Node0x4a3bcd0;
	Node0x4a3bf00 [shape=record,label="{sw.bb.34:                                         \l  %10 = load i32* @doprint, align 4\l  %tobool35 = icmp ne i32 %10, 0\l  %lnot36 = xor i1 %tobool35, true\l  %lnot.ext37 = zext i1 %lnot36 to i32\l  store i32 %lnot.ext37, i32* @doprint, align 4\l  br label %while.cond\l}"];
	Node0x4a3bf00 -> Node0x4a3bcd0;
	Node0x4a3bf50 [shape=record,label="{while.end:                                        \l  %11 = load i32* @M, align 4\l  %shl = shl i32 1, %11\l  store i32 %shl, i32* @N, align 4\l  %12 = load i32* @M, align 4\l  %div52 = sdiv i32 %12, 2\l  %shl53 = shl i32 1, %div52\l  store i32 %shl53, i32* @rootN, align 4\l  %13 = load i32* @rootN, align 4\l  %14 = load i32* @P, align 4\l  %div54 = sdiv i32 %13, %14\l  store i32 %div54, i32* @rowsperproc, align 4\l  %15 = load i32* @log2_line_size, align 4\l  %shl59 = shl i32 1, %15\l  store i32 %shl59, i32* @line_size, align 4\l  %16 = load i32* @line_size, align 4\l  %conv72 = sext i32 %16 to i64\l  %cmp73 = icmp ule i64 %conv72, 16\l  br i1 %cmp73, label %if.then.75, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x4a3bf50:s0 -> Node0x4a3bfa0;
	Node0x4a3bf50:s1 -> Node0x4a3dc20;
	Node0x4a3bfa0 [shape=record,label="{if.then.75:                                       \l  store i32 1, i32* @pad_length, align 4\l  br label %if.end.79\l}"];
	Node0x4a3bfa0 -> Node0x4a3dc70;
	Node0x4a3dc20 [shape=record,label="{if.else:                                          \l  %17 = load i32* @line_size, align 4\l  %conv76 = sext i32 %17 to i64\l  %div77 = udiv i64 %conv76, 16\l  %conv78 = trunc i64 %div77 to i32\l  store i32 %conv78, i32* @pad_length, align 4\l  br label %if.end.79\l}"];
	Node0x4a3dc20 -> Node0x4a3dc70;
	Node0x4a3dc70 [shape=record,label="{if.end.79:                                        \l  %18 = load i32* @rowsperproc, align 4\l  %19 = load i32* @rootN, align 4\l  %mul80 = mul nsw i32 %18, %19\l  %mul81 = mul nsw i32 %mul80, 2\l  %conv82 = sext i32 %mul81 to i64\l  %mul83 = mul i64 %conv82, 8\l  %cmp84 = icmp uge i64 %mul83, 4096\l  br i1 %cmp84, label %if.then.86, label %if.else.111\l|{<s0>T|<s1>F}}"];
	Node0x4a3dc70:s0 -> Node0x4a3dcc0;
	Node0x4a3dc70:s1 -> Node0x4a3ddb0;
	Node0x4a3dcc0 [shape=record,label="{if.then.86:                                       \l  %20 = load i32* @pad_length, align 4\l  %mul87 = mul nsw i32 2, %20\l  %conv88 = sext i32 %mul87 to i64\l  %mul89 = mul i64 %conv88, 8\l  %21 = load i32* @rowsperproc, align 4\l  %conv90 = sext i32 %21 to i64\l  %mul91 = mul i64 %mul89, %conv90\l  %div92 = udiv i64 %mul91, 4096\l  %conv93 = trunc i64 %div92 to i32\l  store i32 %conv93, i32* %pages, align 4\l  %22 = load i32* %pages, align 4\l  %mul94 = mul nsw i32 %22, 4096\l  %conv95 = sext i32 %mul94 to i64\l  %23 = load i32* @pad_length, align 4\l  %mul96 = mul nsw i32 2, %23\l  %conv97 = sext i32 %mul96 to i64\l  %mul98 = mul i64 %conv97, 8\l  %24 = load i32* @rowsperproc, align 4\l  %conv99 = sext i32 %24 to i64\l  %mul100 = mul i64 %mul98, %conv99\l  %cmp101 = icmp ne i64 %conv95, %mul100\l  br i1 %cmp101, label %if.then.103, label %if.end.104\l|{<s0>T|<s1>F}}"];
	Node0x4a3dcc0:s0 -> Node0x4a3dd10;
	Node0x4a3dcc0:s1 -> Node0x4a3dd60;
	Node0x4a3dd10 [shape=record,label="{if.then.103:                                      \l  %25 = load i32* %pages, align 4\l  %inc = add nsw i32 %25, 1\l  store i32 %inc, i32* %pages, align 4\l  br label %if.end.104\l}"];
	Node0x4a3dd10 -> Node0x4a3dd60;
	Node0x4a3dd60 [shape=record,label="{if.end.104:                                       \l  %26 = load i32* %pages, align 4\l  %mul105 = mul nsw i32 %26, 4096\l  %conv106 = sext i32 %mul105 to i64\l  %27 = load i32* @rowsperproc, align 4\l  %conv107 = sext i32 %27 to i64\l  %mul108 = mul i64 16, %conv107\l  %div109 = udiv i64 %conv106, %mul108\l  %conv110 = trunc i64 %div109 to i32\l  store i32 %conv110, i32* @pad_length, align 4\l  br label %if.end.133\l}"];
	Node0x4a3dd60 -> Node0x4a3de00;
	Node0x4a3ddb0 [shape=record,label="{if.else.111:                                      \l  %28 = load i32* @rowsperproc, align 4\l  %29 = load i32* @rootN, align 4\l  %mul112 = mul nsw i32 %28, %29\l  %mul113 = mul nsw i32 %mul112, 2\l  %conv114 = sext i32 %mul113 to i64\l  %mul115 = mul i64 %conv114, 8\l  %sub = sub i64 4096, %mul115\l  %30 = load i32* @rowsperproc, align 4\l  %conv116 = sext i32 %30 to i64\l  %mul117 = mul i64 16, %conv116\l  %div118 = udiv i64 %sub, %mul117\l  %conv119 = trunc i64 %div118 to i32\l  store i32 %conv119, i32* @pad_length, align 4\l  br label %if.end.133\l}"];
	Node0x4a3ddb0 -> Node0x4a3de00;
	Node0x4a3de00 [shape=record,label="{if.end.133:                                       \l  %call134 = call i8* @malloc(i64 96)\l  %31 = bitcast i8* %call134 to %struct.GlobalMemory*\l  store %struct.GlobalMemory* %31, %struct.GlobalMemory** @Global, align 8\l  %32 = load i32* @N, align 4\l  %33 = load i32* @rootN, align 4\l  %34 = load i32* @pad_length, align 4\l  %mul135 = mul nsw i32 %33, %34\l  %add = add nsw i32 %32, %mul135\l  %mul136 = mul nsw i32 2, %add\l  %conv137 = sext i32 %mul136 to i64\l  %mul138 = mul i64 %conv137, 8\l  %add139 = add i64 %mul138, 4096\l  %call140 = call i8* @malloc(i64 %add139)\l  %35 = bitcast i8* %call140 to double*\l  store double* %35, double** @x, align 8\l  %36 = load i32* @N, align 4\l  %37 = load i32* @rootN, align 4\l  %38 = load i32* @pad_length, align 4\l  %mul141 = mul nsw i32 %37, %38\l  %add142 = add nsw i32 %36, %mul141\l  %mul143 = mul nsw i32 2, %add142\l  %conv144 = sext i32 %mul143 to i64\l  %mul145 = mul i64 %conv144, 8\l  %add146 = add i64 %mul145, 4096\l  %call147 = call i8* @malloc(i64 %add146)\l  %39 = bitcast i8* %call147 to double*\l  store double* %39, double** @trans, align 8\l  %40 = load i32* @rootN, align 4\l  %mul148 = mul nsw i32 2, %40\l  %conv149 = sext i32 %mul148 to i64\l  %mul150 = mul i64 %conv149, 8\l  %call151 = call i8* @malloc(i64 %mul150)\l  %41 = bitcast i8* %call151 to double*\l  store double* %41, double** @umain, align 8\l  %42 = load i32* @N, align 4\l  %43 = load i32* @rootN, align 4\l  %44 = load i32* @pad_length, align 4\l  %mul152 = mul nsw i32 %43, %44\l  %add153 = add nsw i32 %42, %mul152\l  %mul154 = mul nsw i32 2, %add153\l  %conv155 = sext i32 %mul154 to i64\l  %mul156 = mul i64 %conv155, 8\l  %add157 = add i64 %mul156, 4096\l  %call158 = call i8* @malloc(i64 %add157)\l  %45 = bitcast i8* %call158 to double*\l  store double* %45, double** @umain2, align 8\l  %46 = load %struct.GlobalMemory** @Global, align 8\l  %start216 = getelementptr inbounds %struct.GlobalMemory* %46, i32 0, i32 2\l  %gsense = getelementptr inbounds %struct.barrier_t* %start216, i32 0, i32 0\l  store volatile i32 1, i32* %gsense, align 4\l  %47 = load %struct.GlobalMemory** @Global, align 8\l  %start217 = getelementptr inbounds %struct.GlobalMemory* %47, i32 0, i32 2\l  %count = getelementptr inbounds %struct.barrier_t* %start217, i32 0, i32 1\l  store volatile i64 0, i64* %count, align 8\l  store i32 1, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x4a3de00 -> Node0x4a3de50;
	Node0x4a3de50 [shape=record,label="{for.cond:                                         \l  %48 = load i32* %i, align 4\l  %49 = load i32* @P, align 4\l  %cmp233 = icmp slt i32 %48, %49\l  br i1 %cmp233, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x4a3de50:s0 -> Node0x4a3dea0;
	Node0x4a3de50:s1 -> Node0x4a3def0;
	Node0x4a3dea0 [shape=record,label="{for.body:                                         \l  %call235 = call i32 @pthread_create(i64* %t, %union.pthread_attr_t* null,\l... i8* (i8*)* bitcast (void ()* @SlaveStart to i8* (i8*)*), i8* null)\l  %50 = load i32* %i, align 4\l  %inc236 = add nsw i32 %50, 1\l  store i32 %inc236, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x4a3dea0 -> Node0x4a3de50;
	Node0x4a3def0 [shape=record,label="{for.end:                                          \l  call void @SlaveStart()\l  unreachable\l}"];
}
