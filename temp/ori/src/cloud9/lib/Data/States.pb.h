// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: States.proto

#ifndef PROTOBUF_States_2eproto__INCLUDED
#define PROTOBUF_States_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_States_2eproto();
void protobuf_AssignDesc_States_2eproto();
void protobuf_ShutdownFile_States_2eproto();

class ExecutionState;
class ExecutionStateSet;

// ===================================================================

class ExecutionState : public ::google::protobuf::Message {
 public:
  ExecutionState();
  virtual ~ExecutionState();

  ExecutionState(const ExecutionState& from);

  inline ExecutionState& operator=(const ExecutionState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionState& default_instance();

  void Swap(ExecutionState* other);

  // implements Message ----------------------------------------------

  ExecutionState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionState& from);
  void MergeFrom(const ExecutionState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 time_stamp = 8;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 8;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // required bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required bool terminated = 1;
  inline bool has_terminated() const;
  inline void clear_terminated();
  static const int kTerminatedFieldNumber = 1;
  inline bool terminated() const;
  inline void set_terminated(bool value);

  // optional bytes parent_id = 5;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 5;
  inline const ::std::string& parent_id() const;
  inline void set_parent_id(const ::std::string& value);
  inline void set_parent_id(const char* value);
  inline void set_parent_id(const void* value, size_t size);
  inline ::std::string* mutable_parent_id();
  inline ::std::string* release_parent_id();
  inline void set_allocated_parent_id(::std::string* parent_id);

  // optional uint64 instructions = 3;
  inline bool has_instructions() const;
  inline void clear_instructions();
  static const int kInstructionsFieldNumber = 3;
  inline ::google::protobuf::uint64 instructions() const;
  inline void set_instructions(::google::protobuf::uint64 value);

  // optional uint64 branches = 4;
  inline bool has_branches() const;
  inline void clear_branches();
  static const int kBranchesFieldNumber = 4;
  inline ::google::protobuf::uint64 branches() const;
  inline void set_branches(::google::protobuf::uint64 value);

  // optional uint64 forks = 9;
  inline bool has_forks() const;
  inline void clear_forks();
  static const int kForksFieldNumber = 9;
  inline ::google::protobuf::uint64 forks() const;
  inline void set_forks(::google::protobuf::uint64 value);

  // optional uint64 queries = 6;
  inline bool has_queries() const;
  inline void clear_queries();
  static const int kQueriesFieldNumber = 6;
  inline ::google::protobuf::uint64 queries() const;
  inline void set_queries(::google::protobuf::uint64 value);

  // optional uint64 total_time = 7;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 total_time() const;
  inline void set_total_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:klee.data.ExecutionState)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_terminated();
  inline void clear_has_terminated();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_instructions();
  inline void clear_has_instructions();
  inline void set_has_branches();
  inline void clear_has_branches();
  inline void set_has_forks();
  inline void clear_has_forks();
  inline void set_has_queries();
  inline void clear_has_queries();
  inline void set_has_total_time();
  inline void clear_has_total_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_stamp_;
  ::std::string* id_;
  ::std::string* parent_id_;
  ::google::protobuf::uint64 instructions_;
  ::google::protobuf::uint64 branches_;
  ::google::protobuf::uint64 forks_;
  ::google::protobuf::uint64 queries_;
  ::google::protobuf::uint64 total_time_;
  bool terminated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_States_2eproto();
  friend void protobuf_AssignDesc_States_2eproto();
  friend void protobuf_ShutdownFile_States_2eproto();

  void InitAsDefaultInstance();
  static ExecutionState* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionStateSet : public ::google::protobuf::Message {
 public:
  ExecutionStateSet();
  virtual ~ExecutionStateSet();

  ExecutionStateSet(const ExecutionStateSet& from);

  inline ExecutionStateSet& operator=(const ExecutionStateSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionStateSet& default_instance();

  void Swap(ExecutionStateSet* other);

  // implements Message ----------------------------------------------

  ExecutionStateSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionStateSet& from);
  void MergeFrom(const ExecutionStateSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .klee.data.ExecutionState execution_state = 1;
  inline int execution_state_size() const;
  inline void clear_execution_state();
  static const int kExecutionStateFieldNumber = 1;
  inline const ::klee::data::ExecutionState& execution_state(int index) const;
  inline ::klee::data::ExecutionState* mutable_execution_state(int index);
  inline ::klee::data::ExecutionState* add_execution_state();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::ExecutionState >&
      execution_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::ExecutionState >*
      mutable_execution_state();

  // @@protoc_insertion_point(class_scope:klee.data.ExecutionStateSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::klee::data::ExecutionState > execution_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_States_2eproto();
  friend void protobuf_AssignDesc_States_2eproto();
  friend void protobuf_ShutdownFile_States_2eproto();

  void InitAsDefaultInstance();
  static ExecutionStateSet* default_instance_;
};
// ===================================================================


// ===================================================================

// ExecutionState

// optional uint64 time_stamp = 8;
inline bool ExecutionState::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionState::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionState::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionState::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 ExecutionState::time_stamp() const {
  return time_stamp_;
}
inline void ExecutionState::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// required bytes id = 2;
inline bool ExecutionState::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionState::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionState::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionState::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ExecutionState::id() const {
  return *id_;
}
inline void ExecutionState::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ExecutionState::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ExecutionState::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecutionState::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ExecutionState::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecutionState::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool terminated = 1;
inline bool ExecutionState::has_terminated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionState::set_has_terminated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionState::clear_has_terminated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionState::clear_terminated() {
  terminated_ = false;
  clear_has_terminated();
}
inline bool ExecutionState::terminated() const {
  return terminated_;
}
inline void ExecutionState::set_terminated(bool value) {
  set_has_terminated();
  terminated_ = value;
}

// optional bytes parent_id = 5;
inline bool ExecutionState::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionState::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionState::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionState::clear_parent_id() {
  if (parent_id_ != &::google::protobuf::internal::kEmptyString) {
    parent_id_->clear();
  }
  clear_has_parent_id();
}
inline const ::std::string& ExecutionState::parent_id() const {
  return *parent_id_;
}
inline void ExecutionState::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  if (parent_id_ == &::google::protobuf::internal::kEmptyString) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(value);
}
inline void ExecutionState::set_parent_id(const char* value) {
  set_has_parent_id();
  if (parent_id_ == &::google::protobuf::internal::kEmptyString) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(value);
}
inline void ExecutionState::set_parent_id(const void* value, size_t size) {
  set_has_parent_id();
  if (parent_id_ == &::google::protobuf::internal::kEmptyString) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecutionState::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == &::google::protobuf::internal::kEmptyString) {
    parent_id_ = new ::std::string;
  }
  return parent_id_;
}
inline ::std::string* ExecutionState::release_parent_id() {
  clear_has_parent_id();
  if (parent_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parent_id_;
    parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecutionState::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_id_;
  }
  if (parent_id) {
    set_has_parent_id();
    parent_id_ = parent_id;
  } else {
    clear_has_parent_id();
    parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 instructions = 3;
inline bool ExecutionState::has_instructions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionState::set_has_instructions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionState::clear_has_instructions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionState::clear_instructions() {
  instructions_ = GOOGLE_ULONGLONG(0);
  clear_has_instructions();
}
inline ::google::protobuf::uint64 ExecutionState::instructions() const {
  return instructions_;
}
inline void ExecutionState::set_instructions(::google::protobuf::uint64 value) {
  set_has_instructions();
  instructions_ = value;
}

// optional uint64 branches = 4;
inline bool ExecutionState::has_branches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionState::set_has_branches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionState::clear_has_branches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionState::clear_branches() {
  branches_ = GOOGLE_ULONGLONG(0);
  clear_has_branches();
}
inline ::google::protobuf::uint64 ExecutionState::branches() const {
  return branches_;
}
inline void ExecutionState::set_branches(::google::protobuf::uint64 value) {
  set_has_branches();
  branches_ = value;
}

// optional uint64 forks = 9;
inline bool ExecutionState::has_forks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionState::set_has_forks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionState::clear_has_forks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionState::clear_forks() {
  forks_ = GOOGLE_ULONGLONG(0);
  clear_has_forks();
}
inline ::google::protobuf::uint64 ExecutionState::forks() const {
  return forks_;
}
inline void ExecutionState::set_forks(::google::protobuf::uint64 value) {
  set_has_forks();
  forks_ = value;
}

// optional uint64 queries = 6;
inline bool ExecutionState::has_queries() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecutionState::set_has_queries() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecutionState::clear_has_queries() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecutionState::clear_queries() {
  queries_ = GOOGLE_ULONGLONG(0);
  clear_has_queries();
}
inline ::google::protobuf::uint64 ExecutionState::queries() const {
  return queries_;
}
inline void ExecutionState::set_queries(::google::protobuf::uint64 value) {
  set_has_queries();
  queries_ = value;
}

// optional uint64 total_time = 7;
inline bool ExecutionState::has_total_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExecutionState::set_has_total_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExecutionState::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExecutionState::clear_total_time() {
  total_time_ = GOOGLE_ULONGLONG(0);
  clear_has_total_time();
}
inline ::google::protobuf::uint64 ExecutionState::total_time() const {
  return total_time_;
}
inline void ExecutionState::set_total_time(::google::protobuf::uint64 value) {
  set_has_total_time();
  total_time_ = value;
}

// -------------------------------------------------------------------

// ExecutionStateSet

// repeated .klee.data.ExecutionState execution_state = 1;
inline int ExecutionStateSet::execution_state_size() const {
  return execution_state_.size();
}
inline void ExecutionStateSet::clear_execution_state() {
  execution_state_.Clear();
}
inline const ::klee::data::ExecutionState& ExecutionStateSet::execution_state(int index) const {
  return execution_state_.Get(index);
}
inline ::klee::data::ExecutionState* ExecutionStateSet::mutable_execution_state(int index) {
  return execution_state_.Mutable(index);
}
inline ::klee::data::ExecutionState* ExecutionStateSet::add_execution_state() {
  return execution_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::ExecutionState >&
ExecutionStateSet::execution_state() const {
  return execution_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::ExecutionState >*
ExecutionStateSet::mutable_execution_state() {
  return &execution_state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_States_2eproto__INCLUDED
