// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Statistics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Statistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* Statistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Statistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Statistics_2eproto() {
  protobuf_AddDesc_Statistics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Statistics.proto");
  GOOGLE_CHECK(file != NULL);
  Statistic_descriptor_ = file->message_type(0);
  static const int Statistic_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, full_branches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, partial_branches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, user_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, num_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, num_queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, num_query_constructs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, covered_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, uncovered_instructions_),
  };
  Statistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Statistic_descriptor_,
      Statistic::default_instance_,
      Statistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Statistic));
  StatisticSet_descriptor_ = file->message_type(1);
  static const int StatisticSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticSet, statistic_),
  };
  StatisticSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticSet_descriptor_,
      StatisticSet::default_instance_,
      StatisticSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Statistics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Statistic_descriptor_, &Statistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticSet_descriptor_, &StatisticSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Statistics_2eproto() {
  delete Statistic::default_instance_;
  delete Statistic_reflection_;
  delete StatisticSet::default_instance_;
  delete StatisticSet_reflection_;
}

void protobuf_AddDesc_Statistics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Statistics.proto\022\tklee.data\"\221\002\n\tStatis"
    "tic\022\022\n\ntime_stamp\030\001 \002(\004\022\024\n\014instructions\030"
    "\002 \001(\003\022\025\n\rfull_branches\030\003 \001(\003\022\030\n\020partial_"
    "branches\030\004 \001(\003\022\021\n\tuser_time\030\005 \001(\001\022\022\n\nnum"
    "_states\030\006 \001(\005\022\023\n\013num_queries\030\007 \001(\003\022\034\n\024nu"
    "m_query_constructs\030\010 \001(\003\022\021\n\twall_time\030\t "
    "\001(\001\022\034\n\024covered_instructions\030\n \001(\003\022\036\n\026unc"
    "overed_instructions\030\013 \001(\003\"7\n\014StatisticSe"
    "t\022\'\n\tstatistic\030\001 \003(\0132\024.klee.data.Statist"
    "ic", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Statistics.proto", &protobuf_RegisterTypes);
  Statistic::default_instance_ = new Statistic();
  StatisticSet::default_instance_ = new StatisticSet();
  Statistic::default_instance_->InitAsDefaultInstance();
  StatisticSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Statistics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Statistics_2eproto {
  StaticDescriptorInitializer_Statistics_2eproto() {
    protobuf_AddDesc_Statistics_2eproto();
  }
} static_descriptor_initializer_Statistics_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Statistic::kTimeStampFieldNumber;
const int Statistic::kInstructionsFieldNumber;
const int Statistic::kFullBranchesFieldNumber;
const int Statistic::kPartialBranchesFieldNumber;
const int Statistic::kUserTimeFieldNumber;
const int Statistic::kNumStatesFieldNumber;
const int Statistic::kNumQueriesFieldNumber;
const int Statistic::kNumQueryConstructsFieldNumber;
const int Statistic::kWallTimeFieldNumber;
const int Statistic::kCoveredInstructionsFieldNumber;
const int Statistic::kUncoveredInstructionsFieldNumber;
#endif  // !_MSC_VER

Statistic::Statistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Statistic::InitAsDefaultInstance() {
}

Statistic::Statistic(const Statistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Statistic::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  instructions_ = GOOGLE_LONGLONG(0);
  full_branches_ = GOOGLE_LONGLONG(0);
  partial_branches_ = GOOGLE_LONGLONG(0);
  user_time_ = 0;
  num_states_ = 0;
  num_queries_ = GOOGLE_LONGLONG(0);
  num_query_constructs_ = GOOGLE_LONGLONG(0);
  wall_time_ = 0;
  covered_instructions_ = GOOGLE_LONGLONG(0);
  uncovered_instructions_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Statistic::~Statistic() {
  SharedDtor();
}

void Statistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statistic_descriptor_;
}

const Statistic& Statistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Statistics_2eproto();
  return *default_instance_;
}

Statistic* Statistic::default_instance_ = NULL;

Statistic* Statistic::New() const {
  return new Statistic;
}

void Statistic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    instructions_ = GOOGLE_LONGLONG(0);
    full_branches_ = GOOGLE_LONGLONG(0);
    partial_branches_ = GOOGLE_LONGLONG(0);
    user_time_ = 0;
    num_states_ = 0;
    num_queries_ = GOOGLE_LONGLONG(0);
    num_query_constructs_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wall_time_ = 0;
    covered_instructions_ = GOOGLE_LONGLONG(0);
    uncovered_instructions_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instructions;
        break;
      }

      // optional int64 instructions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instructions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instructions_)));
          set_has_instructions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_full_branches;
        break;
      }

      // optional int64 full_branches = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_branches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_branches_)));
          set_has_full_branches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_partial_branches;
        break;
      }

      // optional int64 partial_branches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_branches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partial_branches_)));
          set_has_partial_branches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_user_time;
        break;
      }

      // optional double user_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &user_time_)));
          set_has_user_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_states;
        break;
      }

      // optional int32 num_states = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_states_)));
          set_has_num_states();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_queries;
        break;
      }

      // optional int64 num_queries = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_queries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_queries_)));
          set_has_num_queries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_query_constructs;
        break;
      }

      // optional int64 num_query_constructs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_query_constructs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_query_constructs_)));
          set_has_num_query_constructs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_wall_time;
        break;
      }

      // optional double wall_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wall_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wall_time_)));
          set_has_wall_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_covered_instructions;
        break;
      }

      // optional int64 covered_instructions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_instructions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &covered_instructions_)));
          set_has_covered_instructions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_uncovered_instructions;
        break;
      }

      // optional int64 uncovered_instructions = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncovered_instructions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uncovered_instructions_)));
          set_has_uncovered_instructions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_stamp(), output);
  }

  // optional int64 instructions = 2;
  if (has_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instructions(), output);
  }

  // optional int64 full_branches = 3;
  if (has_full_branches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->full_branches(), output);
  }

  // optional int64 partial_branches = 4;
  if (has_partial_branches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->partial_branches(), output);
  }

  // optional double user_time = 5;
  if (has_user_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->user_time(), output);
  }

  // optional int32 num_states = 6;
  if (has_num_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_states(), output);
  }

  // optional int64 num_queries = 7;
  if (has_num_queries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_queries(), output);
  }

  // optional int64 num_query_constructs = 8;
  if (has_num_query_constructs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_query_constructs(), output);
  }

  // optional double wall_time = 9;
  if (has_wall_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wall_time(), output);
  }

  // optional int64 covered_instructions = 10;
  if (has_covered_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->covered_instructions(), output);
  }

  // optional int64 uncovered_instructions = 11;
  if (has_uncovered_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->uncovered_instructions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Statistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_stamp(), target);
  }

  // optional int64 instructions = 2;
  if (has_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instructions(), target);
  }

  // optional int64 full_branches = 3;
  if (has_full_branches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->full_branches(), target);
  }

  // optional int64 partial_branches = 4;
  if (has_partial_branches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->partial_branches(), target);
  }

  // optional double user_time = 5;
  if (has_user_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->user_time(), target);
  }

  // optional int32 num_states = 6;
  if (has_num_states()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_states(), target);
  }

  // optional int64 num_queries = 7;
  if (has_num_queries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_queries(), target);
  }

  // optional int64 num_query_constructs = 8;
  if (has_num_query_constructs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->num_query_constructs(), target);
  }

  // optional double wall_time = 9;
  if (has_wall_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wall_time(), target);
  }

  // optional int64 covered_instructions = 10;
  if (has_covered_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->covered_instructions(), target);
  }

  // optional int64 uncovered_instructions = 11;
  if (has_uncovered_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->uncovered_instructions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Statistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional int64 instructions = 2;
    if (has_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instructions());
    }

    // optional int64 full_branches = 3;
    if (has_full_branches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->full_branches());
    }

    // optional int64 partial_branches = 4;
    if (has_partial_branches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partial_branches());
    }

    // optional double user_time = 5;
    if (has_user_time()) {
      total_size += 1 + 8;
    }

    // optional int32 num_states = 6;
    if (has_num_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_states());
    }

    // optional int64 num_queries = 7;
    if (has_num_queries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_queries());
    }

    // optional int64 num_query_constructs = 8;
    if (has_num_query_constructs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_query_constructs());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double wall_time = 9;
    if (has_wall_time()) {
      total_size += 1 + 8;
    }

    // optional int64 covered_instructions = 10;
    if (has_covered_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->covered_instructions());
    }

    // optional int64 uncovered_instructions = 11;
    if (has_uncovered_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uncovered_instructions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Statistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Statistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_instructions()) {
      set_instructions(from.instructions());
    }
    if (from.has_full_branches()) {
      set_full_branches(from.full_branches());
    }
    if (from.has_partial_branches()) {
      set_partial_branches(from.partial_branches());
    }
    if (from.has_user_time()) {
      set_user_time(from.user_time());
    }
    if (from.has_num_states()) {
      set_num_states(from.num_states());
    }
    if (from.has_num_queries()) {
      set_num_queries(from.num_queries());
    }
    if (from.has_num_query_constructs()) {
      set_num_query_constructs(from.num_query_constructs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wall_time()) {
      set_wall_time(from.wall_time());
    }
    if (from.has_covered_instructions()) {
      set_covered_instructions(from.covered_instructions());
    }
    if (from.has_uncovered_instructions()) {
      set_uncovered_instructions(from.uncovered_instructions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Statistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Statistic::Swap(Statistic* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(instructions_, other->instructions_);
    std::swap(full_branches_, other->full_branches_);
    std::swap(partial_branches_, other->partial_branches_);
    std::swap(user_time_, other->user_time_);
    std::swap(num_states_, other->num_states_);
    std::swap(num_queries_, other->num_queries_);
    std::swap(num_query_constructs_, other->num_query_constructs_);
    std::swap(wall_time_, other->wall_time_);
    std::swap(covered_instructions_, other->covered_instructions_);
    std::swap(uncovered_instructions_, other->uncovered_instructions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Statistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Statistic_descriptor_;
  metadata.reflection = Statistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticSet::kStatisticFieldNumber;
#endif  // !_MSC_VER

StatisticSet::StatisticSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticSet::InitAsDefaultInstance() {
}

StatisticSet::StatisticSet(const StatisticSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticSet::~StatisticSet() {
  SharedDtor();
}

void StatisticSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticSet_descriptor_;
}

const StatisticSet& StatisticSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Statistics_2eproto();
  return *default_instance_;
}

StatisticSet* StatisticSet::default_instance_ = NULL;

StatisticSet* StatisticSet::New() const {
  return new StatisticSet;
}

void StatisticSet::Clear() {
  statistic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.Statistic statistic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_statistic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.Statistic statistic = 1;
  for (int i = 0; i < this->statistic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statistic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.Statistic statistic = 1;
  for (int i = 0; i < this->statistic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statistic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticSet::ByteSize() const {
  int total_size = 0;

  // repeated .klee.data.Statistic statistic = 1;
  total_size += 1 * this->statistic_size();
  for (int i = 0; i < this->statistic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticSet::MergeFrom(const StatisticSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  statistic_.MergeFrom(from.statistic_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticSet::CopyFrom(const StatisticSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticSet::IsInitialized() const {

  for (int i = 0; i < statistic_size(); i++) {
    if (!this->statistic(i).IsInitialized()) return false;
  }
  return true;
}

void StatisticSet::Swap(StatisticSet* other) {
  if (other != this) {
    statistic_.Swap(&other->statistic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticSet_descriptor_;
  metadata.reflection = StatisticSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
