// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Expr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* Array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExprNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExprNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExprKind_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Expr_2eproto() {
  protobuf_AddDesc_Expr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Expr.proto");
  GOOGLE_CHECK(file != NULL);
  Array_descriptor_ = file->message_type(0);
  static const int Array_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, contents_),
  };
  Array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array_descriptor_,
      Array::default_instance_,
      Array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array));
  UpdateList_descriptor_ = file->message_type(1);
  static const int UpdateList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, index_expr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, value_expr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, next_update_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, next_update_offset_),
  };
  UpdateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateList_descriptor_,
      UpdateList::default_instance_,
      UpdateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateList));
  ExprNode_descriptor_ = file->message_type(2);
  static const int ExprNode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, child_expr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, update_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, update_list_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, array_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, offset_),
  };
  ExprNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExprNode_descriptor_,
      ExprNode::default_instance_,
      ExprNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExprNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExprNode));
  ExpressionData_descriptor_ = file->message_type(3);
  static const int ExpressionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionData, array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionData, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionData, expr_),
  };
  ExpressionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionData_descriptor_,
      ExpressionData::default_instance_,
      ExpressionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionData));
  PathConstraint_descriptor_ = file->message_type(4);
  static const int PathConstraint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathConstraint, constraint_expr_id_),
  };
  PathConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathConstraint_descriptor_,
      PathConstraint::default_instance_,
      PathConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathConstraint));
  ExpressionSet_descriptor_ = file->message_type(5);
  static const int ExpressionSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionSet, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionSet, expr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionSet, flush_previous_data_),
  };
  ExpressionSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionSet_descriptor_,
      ExpressionSet::default_instance_,
      ExpressionSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionSet));
  ExprKind_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Expr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array_descriptor_, &Array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateList_descriptor_, &UpdateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExprNode_descriptor_, &ExprNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionData_descriptor_, &ExpressionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathConstraint_descriptor_, &PathConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionSet_descriptor_, &ExpressionSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Expr_2eproto() {
  delete Array::default_instance_;
  delete Array_reflection_;
  delete UpdateList::default_instance_;
  delete UpdateList_reflection_;
  delete ExprNode::default_instance_;
  delete ExprNode_reflection_;
  delete ExpressionData::default_instance_;
  delete ExpressionData_reflection_;
  delete PathConstraint::default_instance_;
  delete PathConstraint_reflection_;
  delete ExpressionSet::default_instance_;
  delete ExpressionSet_reflection_;
}

void protobuf_AddDesc_Expr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nExpr.proto\022\tklee.data\"A\n\005Array\022\n\n\002id\030\002"
    " \002(\004\022\014\n\004name\030\001 \002(\t\022\014\n\004size\030\003 \002(\004\022\020\n\010cont"
    "ents\030\004 \001(\014\"z\n\nUpdateList\022\n\n\002id\030\001 \002(\004\022\025\n\r"
    "index_expr_id\030\002 \003(\004\022\025\n\rvalue_expr_id\030\003 \003"
    "(\004\022\026\n\016next_update_id\030\004 \001(\004\022\032\n\022next_updat"
    "e_offset\030\005 \001(\r\"\304\001\n\010ExprNode\022\n\n\002id\030\003 \002(\004\022"
    "!\n\004kind\030\002 \002(\0162\023.klee.data.ExprKind\022\r\n\005va"
    "lue\030\004 \001(\004\022\025\n\rchild_expr_id\030\005 \003(\004\022\026\n\016upda"
    "te_list_id\030\t \001(\004\022\032\n\022update_list_offset\030\013"
    " \001(\r\022\020\n\010array_id\030\n \001(\004\022\r\n\005width\030\001 \001(\r\022\016\n"
    "\006offset\030\007 \001(\r\"{\n\016ExpressionData\022\037\n\005array"
    "\030\001 \003(\0132\020.klee.data.Array\022%\n\006update\030\002 \003(\013"
    "2\025.klee.data.UpdateList\022!\n\004expr\030\003 \003(\0132\023."
    "klee.data.ExprNode\",\n\016PathConstraint\022\032\n\022"
    "constraint_expr_id\030\001 \003(\004\"f\n\rExpressionSe"
    "t\022\'\n\004data\030\001 \001(\0132\031.klee.data.ExpressionDa"
    "ta\022\017\n\007expr_id\030\002 \003(\004\022\033\n\023flush_previous_da"
    "ta\030\003 \001(\010*\306\003\n\010ExprKind\022\014\n\010CONSTANT\020\000\022\021\n\rN"
    "OT_OPTIMIZED\020\001\022\010\n\004READ\020\003\022\n\n\006SELECT\020\004\022\n\n\006"
    "CONCAT\020\005\022\013\n\007EXTRACT\020\006\022\023\n\017CAST_KIND_FIRST"
    "\020\007\022\010\n\004ZEXT\020\007\022\010\n\004SEXT\020\010\022\022\n\016CAST_KIND_LAST"
    "\020\010\022\025\n\021BINARY_KIND_FIRST\020\t\022\007\n\003ADD\020\t\022\007\n\003SU"
    "B\020\n\022\007\n\003MUL\020\013\022\010\n\004UDIV\020\014\022\010\n\004SDIV\020\r\022\010\n\004UREM"
    "\020\016\022\010\n\004SREM\020\017\022\007\n\003NOT\020\020\022\007\n\003AND\020\021\022\006\n\002OR\020\022\022\007"
    "\n\003XOR\020\023\022\007\n\003SHL\020\024\022\010\n\004LSHR\020\025\022\010\n\004ASHR\020\026\022\022\n\016"
    "CMP_KIND_FIRST\020\027\022\006\n\002EQ\020\027\022\006\n\002NE\020\030\022\007\n\003ULT\020"
    "\031\022\007\n\003ULE\020\032\022\007\n\003UGT\020\033\022\007\n\003UGE\020\034\022\007\n\003SLT\020\035\022\007\n"
    "\003SLE\020\036\022\007\n\003SGT\020\037\022\007\n\003SGE\020 \022\021\n\rCMP_KIND_LAS"
    "T\020 \022\024\n\020BINARY_KIND_LAST\020 ", 1145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Expr.proto", &protobuf_RegisterTypes);
  Array::default_instance_ = new Array();
  UpdateList::default_instance_ = new UpdateList();
  ExprNode::default_instance_ = new ExprNode();
  ExpressionData::default_instance_ = new ExpressionData();
  PathConstraint::default_instance_ = new PathConstraint();
  ExpressionSet::default_instance_ = new ExpressionSet();
  Array::default_instance_->InitAsDefaultInstance();
  UpdateList::default_instance_->InitAsDefaultInstance();
  ExprNode::default_instance_->InitAsDefaultInstance();
  ExpressionData::default_instance_->InitAsDefaultInstance();
  PathConstraint::default_instance_->InitAsDefaultInstance();
  ExpressionSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Expr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Expr_2eproto {
  StaticDescriptorInitializer_Expr_2eproto() {
    protobuf_AddDesc_Expr_2eproto();
  }
} static_descriptor_initializer_Expr_2eproto_;
const ::google::protobuf::EnumDescriptor* ExprKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExprKind_descriptor_;
}
bool ExprKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Array::kIdFieldNumber;
const int Array::kNameFieldNumber;
const int Array::kSizeFieldNumber;
const int Array::kContentsFieldNumber;
#endif  // !_MSC_VER

Array::Array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Array::InitAsDefaultInstance() {
}

Array::Array(const Array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Array::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array::~Array() {
  SharedDtor();
}

void Array::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array_descriptor_;
}

const Array& Array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

Array* Array::default_instance_ = NULL;

Array* Array::New() const {
  return new Array;
}

void Array::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_contents;
        break;
      }

      // optional bytes contents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // optional bytes contents = 4;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // optional bytes contents = 4;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Array::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional bytes contents = 4;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Array::Swap(Array* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array_descriptor_;
  metadata.reflection = Array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateList::kIdFieldNumber;
const int UpdateList::kIndexExprIdFieldNumber;
const int UpdateList::kValueExprIdFieldNumber;
const int UpdateList::kNextUpdateIdFieldNumber;
const int UpdateList::kNextUpdateOffsetFieldNumber;
#endif  // !_MSC_VER

UpdateList::UpdateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateList::InitAsDefaultInstance() {
}

UpdateList::UpdateList(const UpdateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateList::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  next_update_id_ = GOOGLE_ULONGLONG(0);
  next_update_offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateList::~UpdateList() {
  SharedDtor();
}

void UpdateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateList_descriptor_;
}

const UpdateList& UpdateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

UpdateList* UpdateList::default_instance_ = NULL;

UpdateList* UpdateList::New() const {
  return new UpdateList;
}

void UpdateList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    next_update_id_ = GOOGLE_ULONGLONG(0);
    next_update_offset_ = 0u;
  }
  index_expr_id_.Clear();
  value_expr_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_expr_id;
        break;
      }

      // repeated uint64 index_expr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_expr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_index_expr_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_index_expr_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_expr_id;
        if (input->ExpectTag(24)) goto parse_value_expr_id;
        break;
      }

      // repeated uint64 value_expr_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_expr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_value_expr_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_value_expr_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value_expr_id;
        if (input->ExpectTag(32)) goto parse_next_update_id;
        break;
      }

      // optional uint64 next_update_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_update_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_update_id_)));
          set_has_next_update_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_update_offset;
        break;
      }

      // optional uint32 next_update_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_update_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_update_offset_)));
          set_has_next_update_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint64 index_expr_id = 2;
  for (int i = 0; i < this->index_expr_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->index_expr_id(i), output);
  }

  // repeated uint64 value_expr_id = 3;
  for (int i = 0; i < this->value_expr_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->value_expr_id(i), output);
  }

  // optional uint64 next_update_id = 4;
  if (has_next_update_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->next_update_id(), output);
  }

  // optional uint32 next_update_offset = 5;
  if (has_next_update_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_update_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint64 index_expr_id = 2;
  for (int i = 0; i < this->index_expr_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->index_expr_id(i), target);
  }

  // repeated uint64 value_expr_id = 3;
  for (int i = 0; i < this->value_expr_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->value_expr_id(i), target);
  }

  // optional uint64 next_update_id = 4;
  if (has_next_update_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->next_update_id(), target);
  }

  // optional uint32 next_update_offset = 5;
  if (has_next_update_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->next_update_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 next_update_id = 4;
    if (has_next_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_update_id());
    }

    // optional uint32 next_update_offset = 5;
    if (has_next_update_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_update_offset());
    }

  }
  // repeated uint64 index_expr_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_expr_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->index_expr_id(i));
    }
    total_size += 1 * this->index_expr_id_size() + data_size;
  }

  // repeated uint64 value_expr_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_expr_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->value_expr_id(i));
    }
    total_size += 1 * this->value_expr_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateList::MergeFrom(const UpdateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_expr_id_.MergeFrom(from.index_expr_id_);
  value_expr_id_.MergeFrom(from.value_expr_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_next_update_id()) {
      set_next_update_id(from.next_update_id());
    }
    if (from.has_next_update_offset()) {
      set_next_update_offset(from.next_update_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateList::CopyFrom(const UpdateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateList::Swap(UpdateList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    index_expr_id_.Swap(&other->index_expr_id_);
    value_expr_id_.Swap(&other->value_expr_id_);
    std::swap(next_update_id_, other->next_update_id_);
    std::swap(next_update_offset_, other->next_update_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateList_descriptor_;
  metadata.reflection = UpdateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExprNode::kIdFieldNumber;
const int ExprNode::kKindFieldNumber;
const int ExprNode::kValueFieldNumber;
const int ExprNode::kChildExprIdFieldNumber;
const int ExprNode::kUpdateListIdFieldNumber;
const int ExprNode::kUpdateListOffsetFieldNumber;
const int ExprNode::kArrayIdFieldNumber;
const int ExprNode::kWidthFieldNumber;
const int ExprNode::kOffsetFieldNumber;
#endif  // !_MSC_VER

ExprNode::ExprNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExprNode::InitAsDefaultInstance() {
}

ExprNode::ExprNode(const ExprNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExprNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  kind_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  update_list_id_ = GOOGLE_ULONGLONG(0);
  update_list_offset_ = 0u;
  array_id_ = GOOGLE_ULONGLONG(0);
  width_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExprNode::~ExprNode() {
  SharedDtor();
}

void ExprNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExprNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExprNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExprNode_descriptor_;
}

const ExprNode& ExprNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

ExprNode* ExprNode::default_instance_ = NULL;

ExprNode* ExprNode::New() const {
  return new ExprNode;
}

void ExprNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    kind_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    update_list_id_ = GOOGLE_ULONGLONG(0);
    update_list_offset_ = 0u;
    array_id_ = GOOGLE_ULONGLONG(0);
    width_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    offset_ = 0u;
  }
  child_expr_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExprNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required .klee.data.ExprKind kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::klee::data::ExprKind_IsValid(value)) {
            set_kind(static_cast< ::klee::data::ExprKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_child_expr_id;
        break;
      }

      // repeated uint64 child_expr_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_expr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_child_expr_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_child_expr_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_child_expr_id;
        if (input->ExpectTag(56)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_update_list_id;
        break;
      }

      // optional uint64 update_list_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_list_id_)));
          set_has_update_list_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_array_id;
        break;
      }

      // optional uint64 array_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_array_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &array_id_)));
          set_has_array_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_update_list_offset;
        break;
      }

      // optional uint32 update_list_offset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_list_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_list_offset_)));
          set_has_update_list_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExprNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required .klee.data.ExprKind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // required uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  // repeated uint64 child_expr_id = 5;
  for (int i = 0; i < this->child_expr_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->child_expr_id(i), output);
  }

  // optional uint32 offset = 7;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->offset(), output);
  }

  // optional uint64 update_list_id = 9;
  if (has_update_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->update_list_id(), output);
  }

  // optional uint64 array_id = 10;
  if (has_array_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->array_id(), output);
  }

  // optional uint32 update_list_offset = 11;
  if (has_update_list_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->update_list_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExprNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required .klee.data.ExprKind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // required uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  // repeated uint64 child_expr_id = 5;
  for (int i = 0; i < this->child_expr_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->child_expr_id(i), target);
  }

  // optional uint32 offset = 7;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->offset(), target);
  }

  // optional uint64 update_list_id = 9;
  if (has_update_list_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->update_list_id(), target);
  }

  // optional uint64 array_id = 10;
  if (has_array_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->array_id(), target);
  }

  // optional uint32 update_list_offset = 11;
  if (has_update_list_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->update_list_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExprNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .klee.data.ExprKind kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint64 update_list_id = 9;
    if (has_update_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_list_id());
    }

    // optional uint32 update_list_offset = 11;
    if (has_update_list_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_list_offset());
    }

    // optional uint64 array_id = 10;
    if (has_array_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->array_id());
    }

    // optional uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 offset = 7;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  // repeated uint64 child_expr_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->child_expr_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->child_expr_id(i));
    }
    total_size += 1 * this->child_expr_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExprNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExprNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExprNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExprNode::MergeFrom(const ExprNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_expr_id_.MergeFrom(from.child_expr_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_update_list_id()) {
      set_update_list_id(from.update_list_id());
    }
    if (from.has_update_list_offset()) {
      set_update_list_offset(from.update_list_offset());
    }
    if (from.has_array_id()) {
      set_array_id(from.array_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExprNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExprNode::CopyFrom(const ExprNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExprNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExprNode::Swap(ExprNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kind_, other->kind_);
    std::swap(value_, other->value_);
    child_expr_id_.Swap(&other->child_expr_id_);
    std::swap(update_list_id_, other->update_list_id_);
    std::swap(update_list_offset_, other->update_list_offset_);
    std::swap(array_id_, other->array_id_);
    std::swap(width_, other->width_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExprNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExprNode_descriptor_;
  metadata.reflection = ExprNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionData::kArrayFieldNumber;
const int ExpressionData::kUpdateFieldNumber;
const int ExpressionData::kExprFieldNumber;
#endif  // !_MSC_VER

ExpressionData::ExpressionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionData::InitAsDefaultInstance() {
}

ExpressionData::ExpressionData(const ExpressionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionData::~ExpressionData() {
  SharedDtor();
}

void ExpressionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionData_descriptor_;
}

const ExpressionData& ExpressionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

ExpressionData* ExpressionData::default_instance_ = NULL;

ExpressionData* ExpressionData::New() const {
  return new ExpressionData;
}

void ExpressionData::Clear() {
  array_.Clear();
  update_.Clear();
  expr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.Array array = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_array;
        if (input->ExpectTag(18)) goto parse_update;
        break;
      }

      // repeated .klee.data.UpdateList update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update;
        if (input->ExpectTag(26)) goto parse_expr;
        break;
      }

      // repeated .klee.data.ExprNode expr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_expr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.Array array = 1;
  for (int i = 0; i < this->array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->array(i), output);
  }

  // repeated .klee.data.UpdateList update = 2;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(i), output);
  }

  // repeated .klee.data.ExprNode expr = 3;
  for (int i = 0; i < this->expr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->expr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.Array array = 1;
  for (int i = 0; i < this->array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->array(i), target);
  }

  // repeated .klee.data.UpdateList update = 2;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(i), target);
  }

  // repeated .klee.data.ExprNode expr = 3;
  for (int i = 0; i < this->expr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->expr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionData::ByteSize() const {
  int total_size = 0;

  // repeated .klee.data.Array array = 1;
  total_size += 1 * this->array_size();
  for (int i = 0; i < this->array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->array(i));
  }

  // repeated .klee.data.UpdateList update = 2;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  // repeated .klee.data.ExprNode expr = 3;
  total_size += 1 * this->expr_size();
  for (int i = 0; i < this->expr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionData::MergeFrom(const ExpressionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  array_.MergeFrom(from.array_);
  update_.MergeFrom(from.update_);
  expr_.MergeFrom(from.expr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionData::CopyFrom(const ExpressionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionData::IsInitialized() const {

  for (int i = 0; i < array_size(); i++) {
    if (!this->array(i).IsInitialized()) return false;
  }
  for (int i = 0; i < update_size(); i++) {
    if (!this->update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < expr_size(); i++) {
    if (!this->expr(i).IsInitialized()) return false;
  }
  return true;
}

void ExpressionData::Swap(ExpressionData* other) {
  if (other != this) {
    array_.Swap(&other->array_);
    update_.Swap(&other->update_);
    expr_.Swap(&other->expr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionData_descriptor_;
  metadata.reflection = ExpressionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathConstraint::kConstraintExprIdFieldNumber;
#endif  // !_MSC_VER

PathConstraint::PathConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathConstraint::InitAsDefaultInstance() {
}

PathConstraint::PathConstraint(const PathConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathConstraint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathConstraint::~PathConstraint() {
  SharedDtor();
}

void PathConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathConstraint_descriptor_;
}

const PathConstraint& PathConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

PathConstraint* PathConstraint::default_instance_ = NULL;

PathConstraint* PathConstraint::New() const {
  return new PathConstraint;
}

void PathConstraint::Clear() {
  constraint_expr_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 constraint_expr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constraint_expr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_constraint_expr_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_constraint_expr_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_constraint_expr_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 constraint_expr_id = 1;
  for (int i = 0; i < this->constraint_expr_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->constraint_expr_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 constraint_expr_id = 1;
  for (int i = 0; i < this->constraint_expr_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->constraint_expr_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathConstraint::ByteSize() const {
  int total_size = 0;

  // repeated uint64 constraint_expr_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->constraint_expr_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->constraint_expr_id(i));
    }
    total_size += 1 * this->constraint_expr_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathConstraint::MergeFrom(const PathConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  constraint_expr_id_.MergeFrom(from.constraint_expr_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathConstraint::CopyFrom(const PathConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathConstraint::IsInitialized() const {

  return true;
}

void PathConstraint::Swap(PathConstraint* other) {
  if (other != this) {
    constraint_expr_id_.Swap(&other->constraint_expr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathConstraint_descriptor_;
  metadata.reflection = PathConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionSet::kDataFieldNumber;
const int ExpressionSet::kExprIdFieldNumber;
const int ExpressionSet::kFlushPreviousDataFieldNumber;
#endif  // !_MSC_VER

ExpressionSet::ExpressionSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionSet::InitAsDefaultInstance() {
  data_ = const_cast< ::klee::data::ExpressionData*>(&::klee::data::ExpressionData::default_instance());
}

ExpressionSet::ExpressionSet(const ExpressionSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionSet::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  flush_previous_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionSet::~ExpressionSet() {
  SharedDtor();
}

void ExpressionSet::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ExpressionSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionSet_descriptor_;
}

const ExpressionSet& ExpressionSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expr_2eproto();
  return *default_instance_;
}

ExpressionSet* ExpressionSet::default_instance_ = NULL;

ExpressionSet* ExpressionSet::New() const {
  return new ExpressionSet;
}

void ExpressionSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::klee::data::ExpressionData::Clear();
    }
    flush_previous_data_ = false;
  }
  expr_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .klee.data.ExpressionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expr_id;
        break;
      }

      // repeated uint64 expr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_expr_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_expr_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expr_id;
        if (input->ExpectTag(24)) goto parse_flush_previous_data;
        break;
      }

      // optional bool flush_previous_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_previous_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flush_previous_data_)));
          set_has_flush_previous_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .klee.data.ExpressionData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // repeated uint64 expr_id = 2;
  for (int i = 0; i < this->expr_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->expr_id(i), output);
  }

  // optional bool flush_previous_data = 3;
  if (has_flush_previous_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flush_previous_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .klee.data.ExpressionData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // repeated uint64 expr_id = 2;
  for (int i = 0; i < this->expr_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->expr_id(i), target);
  }

  // optional bool flush_previous_data = 3;
  if (has_flush_previous_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flush_previous_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .klee.data.ExpressionData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool flush_previous_data = 3;
    if (has_flush_previous_data()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 expr_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->expr_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->expr_id(i));
    }
    total_size += 1 * this->expr_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionSet::MergeFrom(const ExpressionSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  expr_id_.MergeFrom(from.expr_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::klee::data::ExpressionData::MergeFrom(from.data());
    }
    if (from.has_flush_previous_data()) {
      set_flush_previous_data(from.flush_previous_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionSet::CopyFrom(const ExpressionSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionSet::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void ExpressionSet::Swap(ExpressionSet* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    expr_id_.Swap(&other->expr_id_);
    std::swap(flush_previous_data_, other->flush_previous_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionSet_descriptor_;
  metadata.reflection = ExpressionSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
