// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoverageLogs.proto

#ifndef PROTOBUF_CoverageLogs_2eproto__INCLUDED
#define PROTOBUF_CoverageLogs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CoverageLogs_2eproto();
void protobuf_AssignDesc_CoverageLogs_2eproto();
void protobuf_ShutdownFile_CoverageLogs_2eproto();

class SourceFileCoverageInfo;
class FunctionCoverageInfo;
class CoverageInfo;

// ===================================================================

class SourceFileCoverageInfo : public ::google::protobuf::Message {
 public:
  SourceFileCoverageInfo();
  virtual ~SourceFileCoverageInfo();

  SourceFileCoverageInfo(const SourceFileCoverageInfo& from);

  inline SourceFileCoverageInfo& operator=(const SourceFileCoverageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceFileCoverageInfo& default_instance();

  void Swap(SourceFileCoverageInfo* other);

  // implements Message ----------------------------------------------

  SourceFileCoverageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SourceFileCoverageInfo& from);
  void MergeFrom(const SourceFileCoverageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 file_id = 1;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  inline ::google::protobuf::int32 file_id() const;
  inline void set_file_id(::google::protobuf::int32 value);

  // repeated int32 covered_line = 2;
  inline int covered_line_size() const;
  inline void clear_covered_line();
  static const int kCoveredLineFieldNumber = 2;
  inline ::google::protobuf::int32 covered_line(int index) const;
  inline void set_covered_line(int index, ::google::protobuf::int32 value);
  inline void add_covered_line(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      covered_line() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_covered_line();

  // @@protoc_insertion_point(class_scope:klee.data.SourceFileCoverageInfo)
 private:
  inline void set_has_file_id();
  inline void clear_has_file_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > covered_line_;
  ::google::protobuf::int32 file_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CoverageLogs_2eproto();
  friend void protobuf_AssignDesc_CoverageLogs_2eproto();
  friend void protobuf_ShutdownFile_CoverageLogs_2eproto();

  void InitAsDefaultInstance();
  static SourceFileCoverageInfo* default_instance_;
};
// -------------------------------------------------------------------

class FunctionCoverageInfo : public ::google::protobuf::Message {
 public:
  FunctionCoverageInfo();
  virtual ~FunctionCoverageInfo();

  FunctionCoverageInfo(const FunctionCoverageInfo& from);

  inline FunctionCoverageInfo& operator=(const FunctionCoverageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionCoverageInfo& default_instance();

  void Swap(FunctionCoverageInfo* other);

  // implements Message ----------------------------------------------

  FunctionCoverageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionCoverageInfo& from);
  void MergeFrom(const FunctionCoverageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 function_id = 1;
  inline bool has_function_id() const;
  inline void clear_function_id();
  static const int kFunctionIdFieldNumber = 1;
  inline ::google::protobuf::int32 function_id() const;
  inline void set_function_id(::google::protobuf::int32 value);

  // repeated int32 covered_asm_line = 2;
  inline int covered_asm_line_size() const;
  inline void clear_covered_asm_line();
  static const int kCoveredAsmLineFieldNumber = 2;
  inline ::google::protobuf::int32 covered_asm_line(int index) const;
  inline void set_covered_asm_line(int index, ::google::protobuf::int32 value);
  inline void add_covered_asm_line(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      covered_asm_line() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_covered_asm_line();

  // repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
  inline int source_coverage_size() const;
  inline void clear_source_coverage();
  static const int kSourceCoverageFieldNumber = 3;
  inline const ::klee::data::SourceFileCoverageInfo& source_coverage(int index) const;
  inline ::klee::data::SourceFileCoverageInfo* mutable_source_coverage(int index);
  inline ::klee::data::SourceFileCoverageInfo* add_source_coverage();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::SourceFileCoverageInfo >&
      source_coverage() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::SourceFileCoverageInfo >*
      mutable_source_coverage();

  // @@protoc_insertion_point(class_scope:klee.data.FunctionCoverageInfo)
 private:
  inline void set_has_function_id();
  inline void clear_has_function_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > covered_asm_line_;
  ::google::protobuf::RepeatedPtrField< ::klee::data::SourceFileCoverageInfo > source_coverage_;
  ::google::protobuf::int32 function_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CoverageLogs_2eproto();
  friend void protobuf_AssignDesc_CoverageLogs_2eproto();
  friend void protobuf_ShutdownFile_CoverageLogs_2eproto();

  void InitAsDefaultInstance();
  static FunctionCoverageInfo* default_instance_;
};
// -------------------------------------------------------------------

class CoverageInfo : public ::google::protobuf::Message {
 public:
  CoverageInfo();
  virtual ~CoverageInfo();

  CoverageInfo(const CoverageInfo& from);

  inline CoverageInfo& operator=(const CoverageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoverageInfo& default_instance();

  void Swap(CoverageInfo* other);

  // implements Message ----------------------------------------------

  CoverageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoverageInfo& from);
  void MergeFrom(const CoverageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
  inline int function_coverage_size() const;
  inline void clear_function_coverage();
  static const int kFunctionCoverageFieldNumber = 1;
  inline const ::klee::data::FunctionCoverageInfo& function_coverage(int index) const;
  inline ::klee::data::FunctionCoverageInfo* mutable_function_coverage(int index);
  inline ::klee::data::FunctionCoverageInfo* add_function_coverage();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::FunctionCoverageInfo >&
      function_coverage() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::FunctionCoverageInfo >*
      mutable_function_coverage();

  // optional uint64 total_source_lines = 3;
  inline bool has_total_source_lines() const;
  inline void clear_total_source_lines();
  static const int kTotalSourceLinesFieldNumber = 3;
  inline ::google::protobuf::uint64 total_source_lines() const;
  inline void set_total_source_lines(::google::protobuf::uint64 value);

  // optional uint64 total_asm_lines = 4;
  inline bool has_total_asm_lines() const;
  inline void clear_total_asm_lines();
  static const int kTotalAsmLinesFieldNumber = 4;
  inline ::google::protobuf::uint64 total_asm_lines() const;
  inline void set_total_asm_lines(::google::protobuf::uint64 value);

  // optional uint64 covered_source_lines = 5;
  inline bool has_covered_source_lines() const;
  inline void clear_covered_source_lines();
  static const int kCoveredSourceLinesFieldNumber = 5;
  inline ::google::protobuf::uint64 covered_source_lines() const;
  inline void set_covered_source_lines(::google::protobuf::uint64 value);

  // optional uint64 covered_asm_lines = 6;
  inline bool has_covered_asm_lines() const;
  inline void clear_covered_asm_lines();
  static const int kCoveredAsmLinesFieldNumber = 6;
  inline ::google::protobuf::uint64 covered_asm_lines() const;
  inline void set_covered_asm_lines(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:klee.data.CoverageInfo)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_total_source_lines();
  inline void clear_has_total_source_lines();
  inline void set_has_total_asm_lines();
  inline void clear_has_total_asm_lines();
  inline void set_has_covered_source_lines();
  inline void clear_has_covered_source_lines();
  inline void set_has_covered_asm_lines();
  inline void clear_has_covered_asm_lines();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::RepeatedPtrField< ::klee::data::FunctionCoverageInfo > function_coverage_;
  ::google::protobuf::uint64 total_source_lines_;
  ::google::protobuf::uint64 total_asm_lines_;
  ::google::protobuf::uint64 covered_source_lines_;
  ::google::protobuf::uint64 covered_asm_lines_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CoverageLogs_2eproto();
  friend void protobuf_AssignDesc_CoverageLogs_2eproto();
  friend void protobuf_ShutdownFile_CoverageLogs_2eproto();

  void InitAsDefaultInstance();
  static CoverageInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SourceFileCoverageInfo

// required int32 file_id = 1;
inline bool SourceFileCoverageInfo::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceFileCoverageInfo::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceFileCoverageInfo::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceFileCoverageInfo::clear_file_id() {
  file_id_ = 0;
  clear_has_file_id();
}
inline ::google::protobuf::int32 SourceFileCoverageInfo::file_id() const {
  return file_id_;
}
inline void SourceFileCoverageInfo::set_file_id(::google::protobuf::int32 value) {
  set_has_file_id();
  file_id_ = value;
}

// repeated int32 covered_line = 2;
inline int SourceFileCoverageInfo::covered_line_size() const {
  return covered_line_.size();
}
inline void SourceFileCoverageInfo::clear_covered_line() {
  covered_line_.Clear();
}
inline ::google::protobuf::int32 SourceFileCoverageInfo::covered_line(int index) const {
  return covered_line_.Get(index);
}
inline void SourceFileCoverageInfo::set_covered_line(int index, ::google::protobuf::int32 value) {
  covered_line_.Set(index, value);
}
inline void SourceFileCoverageInfo::add_covered_line(::google::protobuf::int32 value) {
  covered_line_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SourceFileCoverageInfo::covered_line() const {
  return covered_line_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SourceFileCoverageInfo::mutable_covered_line() {
  return &covered_line_;
}

// -------------------------------------------------------------------

// FunctionCoverageInfo

// required int32 function_id = 1;
inline bool FunctionCoverageInfo::has_function_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionCoverageInfo::set_has_function_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionCoverageInfo::clear_has_function_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionCoverageInfo::clear_function_id() {
  function_id_ = 0;
  clear_has_function_id();
}
inline ::google::protobuf::int32 FunctionCoverageInfo::function_id() const {
  return function_id_;
}
inline void FunctionCoverageInfo::set_function_id(::google::protobuf::int32 value) {
  set_has_function_id();
  function_id_ = value;
}

// repeated int32 covered_asm_line = 2;
inline int FunctionCoverageInfo::covered_asm_line_size() const {
  return covered_asm_line_.size();
}
inline void FunctionCoverageInfo::clear_covered_asm_line() {
  covered_asm_line_.Clear();
}
inline ::google::protobuf::int32 FunctionCoverageInfo::covered_asm_line(int index) const {
  return covered_asm_line_.Get(index);
}
inline void FunctionCoverageInfo::set_covered_asm_line(int index, ::google::protobuf::int32 value) {
  covered_asm_line_.Set(index, value);
}
inline void FunctionCoverageInfo::add_covered_asm_line(::google::protobuf::int32 value) {
  covered_asm_line_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FunctionCoverageInfo::covered_asm_line() const {
  return covered_asm_line_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FunctionCoverageInfo::mutable_covered_asm_line() {
  return &covered_asm_line_;
}

// repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
inline int FunctionCoverageInfo::source_coverage_size() const {
  return source_coverage_.size();
}
inline void FunctionCoverageInfo::clear_source_coverage() {
  source_coverage_.Clear();
}
inline const ::klee::data::SourceFileCoverageInfo& FunctionCoverageInfo::source_coverage(int index) const {
  return source_coverage_.Get(index);
}
inline ::klee::data::SourceFileCoverageInfo* FunctionCoverageInfo::mutable_source_coverage(int index) {
  return source_coverage_.Mutable(index);
}
inline ::klee::data::SourceFileCoverageInfo* FunctionCoverageInfo::add_source_coverage() {
  return source_coverage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::SourceFileCoverageInfo >&
FunctionCoverageInfo::source_coverage() const {
  return source_coverage_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::SourceFileCoverageInfo >*
FunctionCoverageInfo::mutable_source_coverage() {
  return &source_coverage_;
}

// -------------------------------------------------------------------

// CoverageInfo

// required uint64 time_stamp = 2;
inline bool CoverageInfo::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoverageInfo::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoverageInfo::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoverageInfo::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 CoverageInfo::time_stamp() const {
  return time_stamp_;
}
inline void CoverageInfo::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
inline int CoverageInfo::function_coverage_size() const {
  return function_coverage_.size();
}
inline void CoverageInfo::clear_function_coverage() {
  function_coverage_.Clear();
}
inline const ::klee::data::FunctionCoverageInfo& CoverageInfo::function_coverage(int index) const {
  return function_coverage_.Get(index);
}
inline ::klee::data::FunctionCoverageInfo* CoverageInfo::mutable_function_coverage(int index) {
  return function_coverage_.Mutable(index);
}
inline ::klee::data::FunctionCoverageInfo* CoverageInfo::add_function_coverage() {
  return function_coverage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::FunctionCoverageInfo >&
CoverageInfo::function_coverage() const {
  return function_coverage_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::FunctionCoverageInfo >*
CoverageInfo::mutable_function_coverage() {
  return &function_coverage_;
}

// optional uint64 total_source_lines = 3;
inline bool CoverageInfo::has_total_source_lines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CoverageInfo::set_has_total_source_lines() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CoverageInfo::clear_has_total_source_lines() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CoverageInfo::clear_total_source_lines() {
  total_source_lines_ = GOOGLE_ULONGLONG(0);
  clear_has_total_source_lines();
}
inline ::google::protobuf::uint64 CoverageInfo::total_source_lines() const {
  return total_source_lines_;
}
inline void CoverageInfo::set_total_source_lines(::google::protobuf::uint64 value) {
  set_has_total_source_lines();
  total_source_lines_ = value;
}

// optional uint64 total_asm_lines = 4;
inline bool CoverageInfo::has_total_asm_lines() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CoverageInfo::set_has_total_asm_lines() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CoverageInfo::clear_has_total_asm_lines() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CoverageInfo::clear_total_asm_lines() {
  total_asm_lines_ = GOOGLE_ULONGLONG(0);
  clear_has_total_asm_lines();
}
inline ::google::protobuf::uint64 CoverageInfo::total_asm_lines() const {
  return total_asm_lines_;
}
inline void CoverageInfo::set_total_asm_lines(::google::protobuf::uint64 value) {
  set_has_total_asm_lines();
  total_asm_lines_ = value;
}

// optional uint64 covered_source_lines = 5;
inline bool CoverageInfo::has_covered_source_lines() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CoverageInfo::set_has_covered_source_lines() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CoverageInfo::clear_has_covered_source_lines() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CoverageInfo::clear_covered_source_lines() {
  covered_source_lines_ = GOOGLE_ULONGLONG(0);
  clear_has_covered_source_lines();
}
inline ::google::protobuf::uint64 CoverageInfo::covered_source_lines() const {
  return covered_source_lines_;
}
inline void CoverageInfo::set_covered_source_lines(::google::protobuf::uint64 value) {
  set_has_covered_source_lines();
  covered_source_lines_ = value;
}

// optional uint64 covered_asm_lines = 6;
inline bool CoverageInfo::has_covered_asm_lines() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CoverageInfo::set_has_covered_asm_lines() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CoverageInfo::clear_has_covered_asm_lines() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CoverageInfo::clear_covered_asm_lines() {
  covered_asm_lines_ = GOOGLE_ULONGLONG(0);
  clear_has_covered_asm_lines();
}
inline ::google::protobuf::uint64 CoverageInfo::covered_asm_lines() const {
  return covered_asm_lines_;
}
inline void CoverageInfo::set_covered_asm_lines(::google::protobuf::uint64 value) {
  set_has_covered_asm_lines();
  covered_asm_lines_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CoverageLogs_2eproto__INCLUDED
