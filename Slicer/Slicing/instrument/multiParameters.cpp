// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("multiParameters.bc", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_2 = PointerType::get(FuncTy_0, 0);
 
 
 // Function Declarations
 
 Function* func_add = mod->getFunction("add");
 if (!func_add) {
 func_add = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"add", mod); 
 func_add->setCallingConv(CallingConv::C);
 }
 AttributeSet func_add_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_add_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_add->setAttributes(func_add_PAL);
 
 Function* func_foo = mod->getFunction("foo");
 if (!func_foo) {
 func_foo = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_3 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: add (func_add)
 {
  Function::arg_iterator args = func_add->arg_begin();
  Value* int32_a = args++;
  int32_a->setName("a");
  Value* int32_b = args++;
  int32_b->setName("b");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_add,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_a_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a.addr", label_entry);
  ptr_a_addr->setAlignment(4);
  AllocaInst* ptr_b_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b.addr", label_entry);
  ptr_b_addr->setAlignment(4);
  StoreInst* void_4 = new StoreInst(int32_a, ptr_a_addr, false, label_entry);
  void_4->setAlignment(4);
  StoreInst* void_5 = new StoreInst(int32_b, ptr_b_addr, false, label_entry);
  void_5->setAlignment(4);
  LoadInst* int32_6 = new LoadInst(ptr_a_addr, "", false, label_entry);
  int32_6->setAlignment(4);
  LoadInst* int32_7 = new LoadInst(ptr_b_addr, "", false, label_entry);
  int32_7->setAlignment(4);
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_6, int32_7, "add", label_entry);
  StoreInst* void_8 = new StoreInst(int32_add, ptr_a_addr, false, label_entry);
  void_8->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_entry);
  
 }
 
 // Function: foo (func_foo)
 {
  Function::arg_iterator args = func_foo->arg_begin();
  Value* int32_a_10 = args++;
  int32_a_10->setName("a");
  Value* int32_b_11 = args++;
  int32_b_11->setName("b");
  
  BasicBlock* label_entry_12 = BasicBlock::Create(mod->getContext(), "entry",func_foo,0);
  
  // Block entry (label_entry_12)
  AllocaInst* ptr_a_addr_13 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a.addr", label_entry_12);
  ptr_a_addr_13->setAlignment(4);
  AllocaInst* ptr_b_addr_14 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b.addr", label_entry_12);
  ptr_b_addr_14->setAlignment(4);
  StoreInst* void_15 = new StoreInst(int32_a_10, ptr_a_addr_13, false, label_entry_12);
  void_15->setAlignment(4);
  StoreInst* void_16 = new StoreInst(int32_b_11, ptr_b_addr_14, false, label_entry_12);
  void_16->setAlignment(4);
  LoadInst* int32_17 = new LoadInst(ptr_a_addr_13, "", false, label_entry_12);
  int32_17->setAlignment(4);
  std::vector<Value*> void_18_params;
  void_18_params.push_back(int32_17);
  void_18_params.push_back(const_int32_3);
  CallInst* void_18 = CallInst::Create(func_add, void_18_params, "", label_entry_12);
  void_18->setCallingConv(CallingConv::C);
  void_18->setTailCall(false);
  AttributeSet void_18_PAL;
  void_18->setAttributes(void_18_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry_12);
  
 }
 
 return mod;
}
