// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud9Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Cloud9Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloud9 {
namespace data {

namespace {

const ::google::protobuf::Descriptor* PathData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionPathSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionPathSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionPathSet_ExecutionPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionPathSet_ExecutionPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReportMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReportMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReportMessage_Registration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReportMessage_Registration_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReportMessage_NodeSetUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReportMessage_NodeSetUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReportMessage_NodeDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReportMessage_NodeDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReportMessage_TargetUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReportMessage_TargetUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LBResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LBResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LBResponseMessage_JobTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LBResponseMessage_JobTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LBResponseMessage_JobSeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LBResponseMessage_JobSeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerTransferMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerTransferMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Cloud9Data_2eproto() {
  protobuf_AddDesc_Cloud9Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Cloud9Data.proto");
  GOOGLE_CHECK(file != NULL);
  PathData_descriptor_ = file->message_type(0);
  static const int PathData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, path_),
  };
  PathData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathData_descriptor_,
      PathData::default_instance_,
      PathData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathData));
  ExecutionPathSet_descriptor_ = file->message_type(1);
  static const int ExecutionPathSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet, path_),
  };
  ExecutionPathSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionPathSet_descriptor_,
      ExecutionPathSet::default_instance_,
      ExecutionPathSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionPathSet));
  ExecutionPathSet_ExecutionPath_descriptor_ = ExecutionPathSet_descriptor_->nested_type(0);
  static const int ExecutionPathSet_ExecutionPath_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet_ExecutionPath, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet_ExecutionPath, parent_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet_ExecutionPath, data_),
  };
  ExecutionPathSet_ExecutionPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionPathSet_ExecutionPath_descriptor_,
      ExecutionPathSet_ExecutionPath::default_instance_,
      ExecutionPathSet_ExecutionPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet_ExecutionPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionPathSet_ExecutionPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionPathSet_ExecutionPath));
  StatisticData_descriptor_ = file->message_type(2);
  static const int StatisticData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticData, value_),
  };
  StatisticData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticData_descriptor_,
      StatisticData::default_instance_,
      StatisticData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticData));
  StatisticUpdate_descriptor_ = file->message_type(3);
  static const int StatisticUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticUpdate, data_),
  };
  StatisticUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticUpdate_descriptor_,
      StatisticUpdate::default_instance_,
      StatisticUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticUpdate));
  PartitionData_descriptor_ = file->message_type(4);
  static const int PartitionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionData, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionData, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionData, active_),
  };
  PartitionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartitionData_descriptor_,
      PartitionData::default_instance_,
      PartitionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartitionData));
  WorkerReportMessage_descriptor_ = file->message_type(5);
  static const int WorkerReportMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, nodesetupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, nodedataupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, registration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, localupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, targetupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, partitionupdates_),
  };
  WorkerReportMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReportMessage_descriptor_,
      WorkerReportMessage::default_instance_,
      WorkerReportMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReportMessage));
  WorkerReportMessage_Registration_descriptor_ = WorkerReportMessage_descriptor_->nested_type(0);
  static const int WorkerReportMessage_Registration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, wants_updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, has_partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, prog_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, prog_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, stat_id_count_),
  };
  WorkerReportMessage_Registration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReportMessage_Registration_descriptor_,
      WorkerReportMessage_Registration::default_instance_,
      WorkerReportMessage_Registration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_Registration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReportMessage_Registration));
  WorkerReportMessage_NodeSetUpdate_descriptor_ = WorkerReportMessage_descriptor_->nested_type(1);
  static const int WorkerReportMessage_NodeSetUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeSetUpdate, pathset_),
  };
  WorkerReportMessage_NodeSetUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReportMessage_NodeSetUpdate_descriptor_,
      WorkerReportMessage_NodeSetUpdate::default_instance_,
      WorkerReportMessage_NodeSetUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeSetUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeSetUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReportMessage_NodeSetUpdate));
  WorkerReportMessage_NodeDataUpdate_descriptor_ = WorkerReportMessage_descriptor_->nested_type(2);
  static const int WorkerReportMessage_NodeDataUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeDataUpdate, data_),
  };
  WorkerReportMessage_NodeDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReportMessage_NodeDataUpdate_descriptor_,
      WorkerReportMessage_NodeDataUpdate::default_instance_,
      WorkerReportMessage_NodeDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_NodeDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReportMessage_NodeDataUpdate));
  WorkerReportMessage_TargetUpdate_descriptor_ = WorkerReportMessage_descriptor_->nested_type(3);
  static const int WorkerReportMessage_TargetUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_TargetUpdate, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_TargetUpdate, value_),
  };
  WorkerReportMessage_TargetUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReportMessage_TargetUpdate_descriptor_,
      WorkerReportMessage_TargetUpdate::default_instance_,
      WorkerReportMessage_TargetUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_TargetUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReportMessage_TargetUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReportMessage_TargetUpdate));
  LBResponseMessage_descriptor_ = file->message_type(6);
  static const int LBResponseMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, jobtransfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, jobseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, more_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, terminate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, globalupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, targets_),
  };
  LBResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LBResponseMessage_descriptor_,
      LBResponseMessage::default_instance_,
      LBResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LBResponseMessage));
  LBResponseMessage_JobTransfer_descriptor_ = LBResponseMessage_descriptor_->nested_type(0);
  static const int LBResponseMessage_JobTransfer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, dest_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, dest_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, partitions_),
  };
  LBResponseMessage_JobTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LBResponseMessage_JobTransfer_descriptor_,
      LBResponseMessage_JobTransfer::default_instance_,
      LBResponseMessage_JobTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LBResponseMessage_JobTransfer));
  LBResponseMessage_JobSeed_descriptor_ = LBResponseMessage_descriptor_->nested_type(1);
  static const int LBResponseMessage_JobSeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobSeed, path_set_),
  };
  LBResponseMessage_JobSeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LBResponseMessage_JobSeed_descriptor_,
      LBResponseMessage_JobSeed::default_instance_,
      LBResponseMessage_JobSeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobSeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LBResponseMessage_JobSeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LBResponseMessage_JobSeed));
  PeerTransferMessage_descriptor_ = file->message_type(7);
  static const int PeerTransferMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTransferMessage, path_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTransferMessage, instr_since_fork_),
  };
  PeerTransferMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerTransferMessage_descriptor_,
      PeerTransferMessage::default_instance_,
      PeerTransferMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTransferMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTransferMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerTransferMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Cloud9Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathData_descriptor_, &PathData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionPathSet_descriptor_, &ExecutionPathSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionPathSet_ExecutionPath_descriptor_, &ExecutionPathSet_ExecutionPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticData_descriptor_, &StatisticData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticUpdate_descriptor_, &StatisticUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartitionData_descriptor_, &PartitionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReportMessage_descriptor_, &WorkerReportMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReportMessage_Registration_descriptor_, &WorkerReportMessage_Registration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReportMessage_NodeSetUpdate_descriptor_, &WorkerReportMessage_NodeSetUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReportMessage_NodeDataUpdate_descriptor_, &WorkerReportMessage_NodeDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReportMessage_TargetUpdate_descriptor_, &WorkerReportMessage_TargetUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LBResponseMessage_descriptor_, &LBResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LBResponseMessage_JobTransfer_descriptor_, &LBResponseMessage_JobTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LBResponseMessage_JobSeed_descriptor_, &LBResponseMessage_JobSeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerTransferMessage_descriptor_, &PeerTransferMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Cloud9Data_2eproto() {
  delete PathData::default_instance_;
  delete PathData_reflection_;
  delete ExecutionPathSet::default_instance_;
  delete ExecutionPathSet_reflection_;
  delete ExecutionPathSet_ExecutionPath::default_instance_;
  delete ExecutionPathSet_ExecutionPath_reflection_;
  delete StatisticData::default_instance_;
  delete StatisticData_reflection_;
  delete StatisticUpdate::default_instance_;
  delete StatisticUpdate_reflection_;
  delete PartitionData::default_instance_;
  delete PartitionData_reflection_;
  delete WorkerReportMessage::default_instance_;
  delete WorkerReportMessage_reflection_;
  delete WorkerReportMessage_Registration::default_instance_;
  delete WorkerReportMessage_Registration_reflection_;
  delete WorkerReportMessage_NodeSetUpdate::default_instance_;
  delete WorkerReportMessage_NodeSetUpdate_reflection_;
  delete WorkerReportMessage_NodeDataUpdate::default_instance_;
  delete WorkerReportMessage_NodeDataUpdate_reflection_;
  delete WorkerReportMessage_TargetUpdate::default_instance_;
  delete WorkerReportMessage_TargetUpdate_reflection_;
  delete LBResponseMessage::default_instance_;
  delete LBResponseMessage_reflection_;
  delete LBResponseMessage_JobTransfer::default_instance_;
  delete LBResponseMessage_JobTransfer_reflection_;
  delete LBResponseMessage_JobSeed::default_instance_;
  delete LBResponseMessage_JobSeed_reflection_;
  delete PeerTransferMessage::default_instance_;
  delete PeerTransferMessage_reflection_;
}

void protobuf_AddDesc_Cloud9Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Cloud9Data.proto\022\013cloud9.data\"(\n\010PathD"
    "ata\022\016\n\006length\030\001 \002(\r\022\014\n\004path\030\002 \002(\014\"\247\001\n\020Ex"
    "ecutionPathSet\0229\n\004path\030\001 \003(\0132+.cloud9.da"
    "ta.ExecutionPathSet.ExecutionPath\032X\n\rExe"
    "cutionPath\022\016\n\006parent\030\003 \001(\r\022\022\n\nparent_pos"
    "\030\004 \001(\r\022#\n\004data\030\002 \002(\0132\025.cloud9.data.PathD"
    "ata\"*\n\rStatisticData\022\n\n\002id\030\001 \002(\r\022\r\n\005valu"
    "e\030\002 \002(\004\"I\n\017StatisticUpdate\022\014\n\004name\030\001 \002(\t"
    "\022(\n\004data\030\002 \003(\0132\032.cloud9.data.StatisticDa"
    "ta\"A\n\rPartitionData\022\021\n\tpartition\030\001 \002(\r\022\r"
    "\n\005total\030\002 \002(\r\022\016\n\006active\030\003 \002(\r\"\325\005\n\023Worker"
    "ReportMessage\022\n\n\002id\030\001 \002(\r\022E\n\rnodeSetUpda"
    "te\030\002 \001(\0132..cloud9.data.WorkerReportMessa"
    "ge.NodeSetUpdate\022G\n\016nodeDataUpdate\030\003 \001(\013"
    "2/.cloud9.data.WorkerReportMessage.NodeD"
    "ataUpdate\022C\n\014registration\030\004 \001(\0132-.cloud9"
    ".data.WorkerReportMessage.Registration\0222"
    "\n\014localUpdates\030\005 \003(\0132\034.cloud9.data.Stati"
    "sticUpdate\022D\n\rtargetUpdates\030\006 \003(\0132-.clou"
    "d9.data.WorkerReportMessage.TargetUpdate"
    "\0224\n\020partitionUpdates\030\007 \003(\0132\032.cloud9.data"
    ".PartitionData\032\230\001\n\014Registration\022\017\n\007addre"
    "ss\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\022\025\n\rwants_updates\030"
    "\005 \002(\010\022\026\n\016has_partitions\030\007 \002(\010\022\021\n\tprog_na"
    "me\030\003 \002(\t\022\020\n\010prog_crc\030\006 \002(\r\022\025\n\rstat_id_co"
    "unt\030\004 \002(\r\032\?\n\rNodeSetUpdate\022.\n\007pathSet\030\001 "
    "\002(\0132\035.cloud9.data.ExecutionPathSet\032\036\n\016No"
    "deDataUpdate\022\014\n\004data\030\001 \003(\r\0321\n\014TargetUpda"
    "te\022\022\n\ntargetName\030\001 \002(\t\022\r\n\005value\030\002 \002(\r\"\273\003"
    "\n\021LBResponseMessage\022\n\n\002id\030\001 \002(\r\022\?\n\013jobTr"
    "ansfer\030\002 \003(\0132*.cloud9.data.LBResponseMes"
    "sage.JobTransfer\0227\n\007jobSeed\030\003 \001(\0132&.clou"
    "d9.data.LBResponseMessage.JobSeed\022\024\n\014mor"
    "e_details\030\004 \002(\010\022\021\n\tterminate\030\007 \002(\010\0223\n\rgl"
    "obalUpdates\030\005 \003(\0132\034.cloud9.data.Statisti"
    "cUpdate\022\017\n\007targets\030\006 \003(\t\032u\n\013JobTransfer\022"
    "\024\n\014dest_address\030\002 \002(\t\022\021\n\tdest_port\030\003 \002(\r"
    "\022\r\n\005count\030\005 \002(\r\022.\n\npartitions\030\006 \003(\0132\032.cl"
    "oud9.data.PartitionData\032:\n\007JobSeed\022/\n\010pa"
    "th_set\030\001 \002(\0132\035.cloud9.data.ExecutionPath"
    "Set\"`\n\023PeerTransferMessage\022/\n\010path_set\030\001"
    " \002(\0132\035.cloud9.data.ExecutionPathSet\022\030\n\020i"
    "nstr_since_fork\030\002 \003(\004", 1701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cloud9Data.proto", &protobuf_RegisterTypes);
  PathData::default_instance_ = new PathData();
  ExecutionPathSet::default_instance_ = new ExecutionPathSet();
  ExecutionPathSet_ExecutionPath::default_instance_ = new ExecutionPathSet_ExecutionPath();
  StatisticData::default_instance_ = new StatisticData();
  StatisticUpdate::default_instance_ = new StatisticUpdate();
  PartitionData::default_instance_ = new PartitionData();
  WorkerReportMessage::default_instance_ = new WorkerReportMessage();
  WorkerReportMessage_Registration::default_instance_ = new WorkerReportMessage_Registration();
  WorkerReportMessage_NodeSetUpdate::default_instance_ = new WorkerReportMessage_NodeSetUpdate();
  WorkerReportMessage_NodeDataUpdate::default_instance_ = new WorkerReportMessage_NodeDataUpdate();
  WorkerReportMessage_TargetUpdate::default_instance_ = new WorkerReportMessage_TargetUpdate();
  LBResponseMessage::default_instance_ = new LBResponseMessage();
  LBResponseMessage_JobTransfer::default_instance_ = new LBResponseMessage_JobTransfer();
  LBResponseMessage_JobSeed::default_instance_ = new LBResponseMessage_JobSeed();
  PeerTransferMessage::default_instance_ = new PeerTransferMessage();
  PathData::default_instance_->InitAsDefaultInstance();
  ExecutionPathSet::default_instance_->InitAsDefaultInstance();
  ExecutionPathSet_ExecutionPath::default_instance_->InitAsDefaultInstance();
  StatisticData::default_instance_->InitAsDefaultInstance();
  StatisticUpdate::default_instance_->InitAsDefaultInstance();
  PartitionData::default_instance_->InitAsDefaultInstance();
  WorkerReportMessage::default_instance_->InitAsDefaultInstance();
  WorkerReportMessage_Registration::default_instance_->InitAsDefaultInstance();
  WorkerReportMessage_NodeSetUpdate::default_instance_->InitAsDefaultInstance();
  WorkerReportMessage_NodeDataUpdate::default_instance_->InitAsDefaultInstance();
  WorkerReportMessage_TargetUpdate::default_instance_->InitAsDefaultInstance();
  LBResponseMessage::default_instance_->InitAsDefaultInstance();
  LBResponseMessage_JobTransfer::default_instance_->InitAsDefaultInstance();
  LBResponseMessage_JobSeed::default_instance_->InitAsDefaultInstance();
  PeerTransferMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Cloud9Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Cloud9Data_2eproto {
  StaticDescriptorInitializer_Cloud9Data_2eproto() {
    protobuf_AddDesc_Cloud9Data_2eproto();
  }
} static_descriptor_initializer_Cloud9Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PathData::kLengthFieldNumber;
const int PathData::kPathFieldNumber;
#endif  // !_MSC_VER

PathData::PathData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathData::InitAsDefaultInstance() {
}

PathData::PathData(const PathData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathData::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathData::~PathData() {
  SharedDtor();
}

void PathData::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void PathData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathData_descriptor_;
}

const PathData& PathData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

PathData* PathData::default_instance_ = NULL;

PathData* PathData::New() const {
  return new PathData;
}

void PathData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required bytes path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  // required bytes path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  // required bytes path = 2;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required bytes path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathData::MergeFrom(const PathData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathData::CopyFrom(const PathData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PathData::Swap(PathData* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathData_descriptor_;
  metadata.reflection = PathData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionPathSet_ExecutionPath::kParentFieldNumber;
const int ExecutionPathSet_ExecutionPath::kParentPosFieldNumber;
const int ExecutionPathSet_ExecutionPath::kDataFieldNumber;
#endif  // !_MSC_VER

ExecutionPathSet_ExecutionPath::ExecutionPathSet_ExecutionPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionPathSet_ExecutionPath::InitAsDefaultInstance() {
  data_ = const_cast< ::cloud9::data::PathData*>(&::cloud9::data::PathData::default_instance());
}

ExecutionPathSet_ExecutionPath::ExecutionPathSet_ExecutionPath(const ExecutionPathSet_ExecutionPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionPathSet_ExecutionPath::SharedCtor() {
  _cached_size_ = 0;
  parent_ = 0u;
  parent_pos_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionPathSet_ExecutionPath::~ExecutionPathSet_ExecutionPath() {
  SharedDtor();
}

void ExecutionPathSet_ExecutionPath::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ExecutionPathSet_ExecutionPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionPathSet_ExecutionPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionPathSet_ExecutionPath_descriptor_;
}

const ExecutionPathSet_ExecutionPath& ExecutionPathSet_ExecutionPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

ExecutionPathSet_ExecutionPath* ExecutionPathSet_ExecutionPath::default_instance_ = NULL;

ExecutionPathSet_ExecutionPath* ExecutionPathSet_ExecutionPath::New() const {
  return new ExecutionPathSet_ExecutionPath;
}

void ExecutionPathSet_ExecutionPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    parent_ = 0u;
    parent_pos_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::cloud9::data::PathData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionPathSet_ExecutionPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloud9.data.PathData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent;
        break;
      }

      // optional uint32 parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parent_pos;
        break;
      }

      // optional uint32 parent_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_pos_)));
          set_has_parent_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionPathSet_ExecutionPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloud9.data.PathData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional uint32 parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parent(), output);
  }

  // optional uint32 parent_pos = 4;
  if (has_parent_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionPathSet_ExecutionPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloud9.data.PathData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional uint32 parent = 3;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->parent(), target);
  }

  // optional uint32 parent_pos = 4;
  if (has_parent_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionPathSet_ExecutionPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }

    // optional uint32 parent_pos = 4;
    if (has_parent_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_pos());
    }

    // required .cloud9.data.PathData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionPathSet_ExecutionPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionPathSet_ExecutionPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionPathSet_ExecutionPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionPathSet_ExecutionPath::MergeFrom(const ExecutionPathSet_ExecutionPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_parent_pos()) {
      set_parent_pos(from.parent_pos());
    }
    if (from.has_data()) {
      mutable_data()->::cloud9::data::PathData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionPathSet_ExecutionPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionPathSet_ExecutionPath::CopyFrom(const ExecutionPathSet_ExecutionPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPathSet_ExecutionPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void ExecutionPathSet_ExecutionPath::Swap(ExecutionPathSet_ExecutionPath* other) {
  if (other != this) {
    std::swap(parent_, other->parent_);
    std::swap(parent_pos_, other->parent_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionPathSet_ExecutionPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionPathSet_ExecutionPath_descriptor_;
  metadata.reflection = ExecutionPathSet_ExecutionPath_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExecutionPathSet::kPathFieldNumber;
#endif  // !_MSC_VER

ExecutionPathSet::ExecutionPathSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionPathSet::InitAsDefaultInstance() {
}

ExecutionPathSet::ExecutionPathSet(const ExecutionPathSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionPathSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionPathSet::~ExecutionPathSet() {
  SharedDtor();
}

void ExecutionPathSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExecutionPathSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionPathSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionPathSet_descriptor_;
}

const ExecutionPathSet& ExecutionPathSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

ExecutionPathSet* ExecutionPathSet::default_instance_ = NULL;

ExecutionPathSet* ExecutionPathSet::New() const {
  return new ExecutionPathSet;
}

void ExecutionPathSet::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionPathSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloud9.data.ExecutionPathSet.ExecutionPath path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionPathSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cloud9.data.ExecutionPathSet.ExecutionPath path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionPathSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cloud9.data.ExecutionPathSet.ExecutionPath path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionPathSet::ByteSize() const {
  int total_size = 0;

  // repeated .cloud9.data.ExecutionPathSet.ExecutionPath path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionPathSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionPathSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionPathSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionPathSet::MergeFrom(const ExecutionPathSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionPathSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionPathSet::CopyFrom(const ExecutionPathSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPathSet::IsInitialized() const {

  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void ExecutionPathSet::Swap(ExecutionPathSet* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionPathSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionPathSet_descriptor_;
  metadata.reflection = ExecutionPathSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticData::kIdFieldNumber;
const int StatisticData::kValueFieldNumber;
#endif  // !_MSC_VER

StatisticData::StatisticData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticData::InitAsDefaultInstance() {
}

StatisticData::StatisticData(const StatisticData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticData::~StatisticData() {
  SharedDtor();
}

void StatisticData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticData_descriptor_;
}

const StatisticData& StatisticData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

StatisticData* StatisticData::default_instance_ = NULL;

StatisticData* StatisticData::New() const {
  return new StatisticData;
}

void StatisticData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticData::MergeFrom(const StatisticData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticData::CopyFrom(const StatisticData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatisticData::Swap(StatisticData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticData_descriptor_;
  metadata.reflection = StatisticData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticUpdate::kNameFieldNumber;
const int StatisticUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

StatisticUpdate::StatisticUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticUpdate::InitAsDefaultInstance() {
}

StatisticUpdate::StatisticUpdate(const StatisticUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticUpdate::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticUpdate::~StatisticUpdate() {
  SharedDtor();
}

void StatisticUpdate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StatisticUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticUpdate_descriptor_;
}

const StatisticUpdate& StatisticUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

StatisticUpdate* StatisticUpdate::default_instance_ = NULL;

StatisticUpdate* StatisticUpdate::New() const {
  return new StatisticUpdate;
}

void StatisticUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .cloud9.data.StatisticData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .cloud9.data.StatisticData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .cloud9.data.StatisticData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .cloud9.data.StatisticData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticUpdate::MergeFrom(const StatisticUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticUpdate::CopyFrom(const StatisticUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void StatisticUpdate::Swap(StatisticUpdate* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticUpdate_descriptor_;
  metadata.reflection = StatisticUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartitionData::kPartitionFieldNumber;
const int PartitionData::kTotalFieldNumber;
const int PartitionData::kActiveFieldNumber;
#endif  // !_MSC_VER

PartitionData::PartitionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartitionData::InitAsDefaultInstance() {
}

PartitionData::PartitionData(const PartitionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartitionData::SharedCtor() {
  _cached_size_ = 0;
  partition_ = 0u;
  total_ = 0u;
  active_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionData::~PartitionData() {
  SharedDtor();
}

void PartitionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartitionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionData_descriptor_;
}

const PartitionData& PartitionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

PartitionData* PartitionData::default_instance_ = NULL;

PartitionData* PartitionData::New() const {
  return new PartitionData;
}

void PartitionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partition_ = 0u;
    total_ = 0u;
    active_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartitionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 partition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // required uint32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // required uint32 active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartitionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partition(), output);
  }

  // required uint32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  // required uint32 active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartitionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partition(), target);
  }

  // required uint32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  // required uint32 active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartitionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partition());
    }

    // required uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // required uint32 active = 3;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartitionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartitionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartitionData::MergeFrom(const PartitionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartitionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionData::CopyFrom(const PartitionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PartitionData::Swap(PartitionData* other) {
  if (other != this) {
    std::swap(partition_, other->partition_);
    std::swap(total_, other->total_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartitionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionData_descriptor_;
  metadata.reflection = PartitionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerReportMessage_Registration::kAddressFieldNumber;
const int WorkerReportMessage_Registration::kPortFieldNumber;
const int WorkerReportMessage_Registration::kWantsUpdatesFieldNumber;
const int WorkerReportMessage_Registration::kHasPartitionsFieldNumber;
const int WorkerReportMessage_Registration::kProgNameFieldNumber;
const int WorkerReportMessage_Registration::kProgCrcFieldNumber;
const int WorkerReportMessage_Registration::kStatIdCountFieldNumber;
#endif  // !_MSC_VER

WorkerReportMessage_Registration::WorkerReportMessage_Registration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReportMessage_Registration::InitAsDefaultInstance() {
}

WorkerReportMessage_Registration::WorkerReportMessage_Registration(const WorkerReportMessage_Registration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReportMessage_Registration::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  wants_updates_ = false;
  has_partitions_ = false;
  prog_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prog_crc_ = 0u;
  stat_id_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReportMessage_Registration::~WorkerReportMessage_Registration() {
  SharedDtor();
}

void WorkerReportMessage_Registration::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (prog_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prog_name_;
  }
  if (this != default_instance_) {
  }
}

void WorkerReportMessage_Registration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReportMessage_Registration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReportMessage_Registration_descriptor_;
}

const WorkerReportMessage_Registration& WorkerReportMessage_Registration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

WorkerReportMessage_Registration* WorkerReportMessage_Registration::default_instance_ = NULL;

WorkerReportMessage_Registration* WorkerReportMessage_Registration::New() const {
  return new WorkerReportMessage_Registration;
}

void WorkerReportMessage_Registration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    port_ = 0u;
    wants_updates_ = false;
    has_partitions_ = false;
    if (has_prog_name()) {
      if (prog_name_ != &::google::protobuf::internal::kEmptyString) {
        prog_name_->clear();
      }
    }
    prog_crc_ = 0u;
    stat_id_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReportMessage_Registration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prog_name;
        break;
      }

      // required string prog_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prog_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prog_name().data(), this->prog_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stat_id_count;
        break;
      }

      // required uint32 stat_id_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_id_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_count_)));
          set_has_stat_id_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wants_updates;
        break;
      }

      // required bool wants_updates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wants_updates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_updates_)));
          set_has_wants_updates();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prog_crc;
        break;
      }

      // required uint32 prog_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prog_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prog_crc_)));
          set_has_prog_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_partitions;
        break;
      }

      // required bool has_partitions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_partitions_)));
          set_has_has_partitions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReportMessage_Registration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required string prog_name = 3;
  if (has_prog_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prog_name().data(), this->prog_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prog_name(), output);
  }

  // required uint32 stat_id_count = 4;
  if (has_stat_id_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stat_id_count(), output);
  }

  // required bool wants_updates = 5;
  if (has_wants_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->wants_updates(), output);
  }

  // required uint32 prog_crc = 6;
  if (has_prog_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prog_crc(), output);
  }

  // required bool has_partitions = 7;
  if (has_has_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_partitions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReportMessage_Registration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required string prog_name = 3;
  if (has_prog_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prog_name().data(), this->prog_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prog_name(), target);
  }

  // required uint32 stat_id_count = 4;
  if (has_stat_id_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stat_id_count(), target);
  }

  // required bool wants_updates = 5;
  if (has_wants_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->wants_updates(), target);
  }

  // required uint32 prog_crc = 6;
  if (has_prog_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prog_crc(), target);
  }

  // required bool has_partitions = 7;
  if (has_has_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_partitions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReportMessage_Registration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required bool wants_updates = 5;
    if (has_wants_updates()) {
      total_size += 1 + 1;
    }

    // required bool has_partitions = 7;
    if (has_has_partitions()) {
      total_size += 1 + 1;
    }

    // required string prog_name = 3;
    if (has_prog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prog_name());
    }

    // required uint32 prog_crc = 6;
    if (has_prog_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prog_crc());
    }

    // required uint32 stat_id_count = 4;
    if (has_stat_id_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReportMessage_Registration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReportMessage_Registration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReportMessage_Registration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReportMessage_Registration::MergeFrom(const WorkerReportMessage_Registration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_wants_updates()) {
      set_wants_updates(from.wants_updates());
    }
    if (from.has_has_partitions()) {
      set_has_partitions(from.has_partitions());
    }
    if (from.has_prog_name()) {
      set_prog_name(from.prog_name());
    }
    if (from.has_prog_crc()) {
      set_prog_crc(from.prog_crc());
    }
    if (from.has_stat_id_count()) {
      set_stat_id_count(from.stat_id_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReportMessage_Registration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReportMessage_Registration::CopyFrom(const WorkerReportMessage_Registration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReportMessage_Registration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void WorkerReportMessage_Registration::Swap(WorkerReportMessage_Registration* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(wants_updates_, other->wants_updates_);
    std::swap(has_partitions_, other->has_partitions_);
    std::swap(prog_name_, other->prog_name_);
    std::swap(prog_crc_, other->prog_crc_);
    std::swap(stat_id_count_, other->stat_id_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReportMessage_Registration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReportMessage_Registration_descriptor_;
  metadata.reflection = WorkerReportMessage_Registration_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorkerReportMessage_NodeSetUpdate::kPathSetFieldNumber;
#endif  // !_MSC_VER

WorkerReportMessage_NodeSetUpdate::WorkerReportMessage_NodeSetUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReportMessage_NodeSetUpdate::InitAsDefaultInstance() {
  pathset_ = const_cast< ::cloud9::data::ExecutionPathSet*>(&::cloud9::data::ExecutionPathSet::default_instance());
}

WorkerReportMessage_NodeSetUpdate::WorkerReportMessage_NodeSetUpdate(const WorkerReportMessage_NodeSetUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReportMessage_NodeSetUpdate::SharedCtor() {
  _cached_size_ = 0;
  pathset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReportMessage_NodeSetUpdate::~WorkerReportMessage_NodeSetUpdate() {
  SharedDtor();
}

void WorkerReportMessage_NodeSetUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete pathset_;
  }
}

void WorkerReportMessage_NodeSetUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReportMessage_NodeSetUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReportMessage_NodeSetUpdate_descriptor_;
}

const WorkerReportMessage_NodeSetUpdate& WorkerReportMessage_NodeSetUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

WorkerReportMessage_NodeSetUpdate* WorkerReportMessage_NodeSetUpdate::default_instance_ = NULL;

WorkerReportMessage_NodeSetUpdate* WorkerReportMessage_NodeSetUpdate::New() const {
  return new WorkerReportMessage_NodeSetUpdate;
}

void WorkerReportMessage_NodeSetUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pathset()) {
      if (pathset_ != NULL) pathset_->::cloud9::data::ExecutionPathSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReportMessage_NodeSetUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloud9.data.ExecutionPathSet pathSet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReportMessage_NodeSetUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloud9.data.ExecutionPathSet pathSet = 1;
  if (has_pathset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pathset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReportMessage_NodeSetUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloud9.data.ExecutionPathSet pathSet = 1;
  if (has_pathset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pathset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReportMessage_NodeSetUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloud9.data.ExecutionPathSet pathSet = 1;
    if (has_pathset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pathset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReportMessage_NodeSetUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReportMessage_NodeSetUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReportMessage_NodeSetUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReportMessage_NodeSetUpdate::MergeFrom(const WorkerReportMessage_NodeSetUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pathset()) {
      mutable_pathset()->::cloud9::data::ExecutionPathSet::MergeFrom(from.pathset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReportMessage_NodeSetUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReportMessage_NodeSetUpdate::CopyFrom(const WorkerReportMessage_NodeSetUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReportMessage_NodeSetUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pathset()) {
    if (!this->pathset().IsInitialized()) return false;
  }
  return true;
}

void WorkerReportMessage_NodeSetUpdate::Swap(WorkerReportMessage_NodeSetUpdate* other) {
  if (other != this) {
    std::swap(pathset_, other->pathset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReportMessage_NodeSetUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReportMessage_NodeSetUpdate_descriptor_;
  metadata.reflection = WorkerReportMessage_NodeSetUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorkerReportMessage_NodeDataUpdate::kDataFieldNumber;
#endif  // !_MSC_VER

WorkerReportMessage_NodeDataUpdate::WorkerReportMessage_NodeDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReportMessage_NodeDataUpdate::InitAsDefaultInstance() {
}

WorkerReportMessage_NodeDataUpdate::WorkerReportMessage_NodeDataUpdate(const WorkerReportMessage_NodeDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReportMessage_NodeDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReportMessage_NodeDataUpdate::~WorkerReportMessage_NodeDataUpdate() {
  SharedDtor();
}

void WorkerReportMessage_NodeDataUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerReportMessage_NodeDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReportMessage_NodeDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReportMessage_NodeDataUpdate_descriptor_;
}

const WorkerReportMessage_NodeDataUpdate& WorkerReportMessage_NodeDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

WorkerReportMessage_NodeDataUpdate* WorkerReportMessage_NodeDataUpdate::default_instance_ = NULL;

WorkerReportMessage_NodeDataUpdate* WorkerReportMessage_NodeDataUpdate::New() const {
  return new WorkerReportMessage_NodeDataUpdate;
}

void WorkerReportMessage_NodeDataUpdate::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReportMessage_NodeDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReportMessage_NodeDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReportMessage_NodeDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReportMessage_NodeDataUpdate::ByteSize() const {
  int total_size = 0;

  // repeated uint32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReportMessage_NodeDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReportMessage_NodeDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReportMessage_NodeDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReportMessage_NodeDataUpdate::MergeFrom(const WorkerReportMessage_NodeDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReportMessage_NodeDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReportMessage_NodeDataUpdate::CopyFrom(const WorkerReportMessage_NodeDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReportMessage_NodeDataUpdate::IsInitialized() const {

  return true;
}

void WorkerReportMessage_NodeDataUpdate::Swap(WorkerReportMessage_NodeDataUpdate* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReportMessage_NodeDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReportMessage_NodeDataUpdate_descriptor_;
  metadata.reflection = WorkerReportMessage_NodeDataUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorkerReportMessage_TargetUpdate::kTargetNameFieldNumber;
const int WorkerReportMessage_TargetUpdate::kValueFieldNumber;
#endif  // !_MSC_VER

WorkerReportMessage_TargetUpdate::WorkerReportMessage_TargetUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReportMessage_TargetUpdate::InitAsDefaultInstance() {
}

WorkerReportMessage_TargetUpdate::WorkerReportMessage_TargetUpdate(const WorkerReportMessage_TargetUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReportMessage_TargetUpdate::SharedCtor() {
  _cached_size_ = 0;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReportMessage_TargetUpdate::~WorkerReportMessage_TargetUpdate() {
  SharedDtor();
}

void WorkerReportMessage_TargetUpdate::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void WorkerReportMessage_TargetUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReportMessage_TargetUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReportMessage_TargetUpdate_descriptor_;
}

const WorkerReportMessage_TargetUpdate& WorkerReportMessage_TargetUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

WorkerReportMessage_TargetUpdate* WorkerReportMessage_TargetUpdate::default_instance_ = NULL;

WorkerReportMessage_TargetUpdate* WorkerReportMessage_TargetUpdate::New() const {
  return new WorkerReportMessage_TargetUpdate;
}

void WorkerReportMessage_TargetUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReportMessage_TargetUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string targetName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReportMessage_TargetUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string targetName = 1;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->targetname(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReportMessage_TargetUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string targetName = 1;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetname(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReportMessage_TargetUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string targetName = 1;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReportMessage_TargetUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReportMessage_TargetUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReportMessage_TargetUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReportMessage_TargetUpdate::MergeFrom(const WorkerReportMessage_TargetUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReportMessage_TargetUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReportMessage_TargetUpdate::CopyFrom(const WorkerReportMessage_TargetUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReportMessage_TargetUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorkerReportMessage_TargetUpdate::Swap(WorkerReportMessage_TargetUpdate* other) {
  if (other != this) {
    std::swap(targetname_, other->targetname_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReportMessage_TargetUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReportMessage_TargetUpdate_descriptor_;
  metadata.reflection = WorkerReportMessage_TargetUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorkerReportMessage::kIdFieldNumber;
const int WorkerReportMessage::kNodeSetUpdateFieldNumber;
const int WorkerReportMessage::kNodeDataUpdateFieldNumber;
const int WorkerReportMessage::kRegistrationFieldNumber;
const int WorkerReportMessage::kLocalUpdatesFieldNumber;
const int WorkerReportMessage::kTargetUpdatesFieldNumber;
const int WorkerReportMessage::kPartitionUpdatesFieldNumber;
#endif  // !_MSC_VER

WorkerReportMessage::WorkerReportMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReportMessage::InitAsDefaultInstance() {
  nodesetupdate_ = const_cast< ::cloud9::data::WorkerReportMessage_NodeSetUpdate*>(&::cloud9::data::WorkerReportMessage_NodeSetUpdate::default_instance());
  nodedataupdate_ = const_cast< ::cloud9::data::WorkerReportMessage_NodeDataUpdate*>(&::cloud9::data::WorkerReportMessage_NodeDataUpdate::default_instance());
  registration_ = const_cast< ::cloud9::data::WorkerReportMessage_Registration*>(&::cloud9::data::WorkerReportMessage_Registration::default_instance());
}

WorkerReportMessage::WorkerReportMessage(const WorkerReportMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReportMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  nodesetupdate_ = NULL;
  nodedataupdate_ = NULL;
  registration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReportMessage::~WorkerReportMessage() {
  SharedDtor();
}

void WorkerReportMessage::SharedDtor() {
  if (this != default_instance_) {
    delete nodesetupdate_;
    delete nodedataupdate_;
    delete registration_;
  }
}

void WorkerReportMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReportMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReportMessage_descriptor_;
}

const WorkerReportMessage& WorkerReportMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

WorkerReportMessage* WorkerReportMessage::default_instance_ = NULL;

WorkerReportMessage* WorkerReportMessage::New() const {
  return new WorkerReportMessage;
}

void WorkerReportMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_nodesetupdate()) {
      if (nodesetupdate_ != NULL) nodesetupdate_->::cloud9::data::WorkerReportMessage_NodeSetUpdate::Clear();
    }
    if (has_nodedataupdate()) {
      if (nodedataupdate_ != NULL) nodedataupdate_->::cloud9::data::WorkerReportMessage_NodeDataUpdate::Clear();
    }
    if (has_registration()) {
      if (registration_ != NULL) registration_->::cloud9::data::WorkerReportMessage_Registration::Clear();
    }
  }
  localupdates_.Clear();
  targetupdates_.Clear();
  partitionupdates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReportMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeSetUpdate;
        break;
      }

      // optional .cloud9.data.WorkerReportMessage.NodeSetUpdate nodeSetUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeSetUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodesetupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeDataUpdate;
        break;
      }

      // optional .cloud9.data.WorkerReportMessage.NodeDataUpdate nodeDataUpdate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeDataUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodedataupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_registration;
        break;
      }

      // optional .cloud9.data.WorkerReportMessage.Registration registration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_localUpdates;
        break;
      }

      // repeated .cloud9.data.StatisticUpdate localUpdates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localUpdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_localupdates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_localUpdates;
        if (input->ExpectTag(50)) goto parse_targetUpdates;
        break;
      }

      // repeated .cloud9.data.WorkerReportMessage.TargetUpdate targetUpdates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetUpdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetupdates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_targetUpdates;
        if (input->ExpectTag(58)) goto parse_partitionUpdates;
        break;
      }

      // repeated .cloud9.data.PartitionData partitionUpdates = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitionUpdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitionupdates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_partitionUpdates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReportMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .cloud9.data.WorkerReportMessage.NodeSetUpdate nodeSetUpdate = 2;
  if (has_nodesetupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodesetupdate(), output);
  }

  // optional .cloud9.data.WorkerReportMessage.NodeDataUpdate nodeDataUpdate = 3;
  if (has_nodedataupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodedataupdate(), output);
  }

  // optional .cloud9.data.WorkerReportMessage.Registration registration = 4;
  if (has_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->registration(), output);
  }

  // repeated .cloud9.data.StatisticUpdate localUpdates = 5;
  for (int i = 0; i < this->localupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->localupdates(i), output);
  }

  // repeated .cloud9.data.WorkerReportMessage.TargetUpdate targetUpdates = 6;
  for (int i = 0; i < this->targetupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->targetupdates(i), output);
  }

  // repeated .cloud9.data.PartitionData partitionUpdates = 7;
  for (int i = 0; i < this->partitionupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->partitionupdates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReportMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .cloud9.data.WorkerReportMessage.NodeSetUpdate nodeSetUpdate = 2;
  if (has_nodesetupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodesetupdate(), target);
  }

  // optional .cloud9.data.WorkerReportMessage.NodeDataUpdate nodeDataUpdate = 3;
  if (has_nodedataupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodedataupdate(), target);
  }

  // optional .cloud9.data.WorkerReportMessage.Registration registration = 4;
  if (has_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->registration(), target);
  }

  // repeated .cloud9.data.StatisticUpdate localUpdates = 5;
  for (int i = 0; i < this->localupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->localupdates(i), target);
  }

  // repeated .cloud9.data.WorkerReportMessage.TargetUpdate targetUpdates = 6;
  for (int i = 0; i < this->targetupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->targetupdates(i), target);
  }

  // repeated .cloud9.data.PartitionData partitionUpdates = 7;
  for (int i = 0; i < this->partitionupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->partitionupdates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReportMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .cloud9.data.WorkerReportMessage.NodeSetUpdate nodeSetUpdate = 2;
    if (has_nodesetupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodesetupdate());
    }

    // optional .cloud9.data.WorkerReportMessage.NodeDataUpdate nodeDataUpdate = 3;
    if (has_nodedataupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodedataupdate());
    }

    // optional .cloud9.data.WorkerReportMessage.Registration registration = 4;
    if (has_registration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registration());
    }

  }
  // repeated .cloud9.data.StatisticUpdate localUpdates = 5;
  total_size += 1 * this->localupdates_size();
  for (int i = 0; i < this->localupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->localupdates(i));
  }

  // repeated .cloud9.data.WorkerReportMessage.TargetUpdate targetUpdates = 6;
  total_size += 1 * this->targetupdates_size();
  for (int i = 0; i < this->targetupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetupdates(i));
  }

  // repeated .cloud9.data.PartitionData partitionUpdates = 7;
  total_size += 1 * this->partitionupdates_size();
  for (int i = 0; i < this->partitionupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitionupdates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReportMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReportMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReportMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReportMessage::MergeFrom(const WorkerReportMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  localupdates_.MergeFrom(from.localupdates_);
  targetupdates_.MergeFrom(from.targetupdates_);
  partitionupdates_.MergeFrom(from.partitionupdates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nodesetupdate()) {
      mutable_nodesetupdate()->::cloud9::data::WorkerReportMessage_NodeSetUpdate::MergeFrom(from.nodesetupdate());
    }
    if (from.has_nodedataupdate()) {
      mutable_nodedataupdate()->::cloud9::data::WorkerReportMessage_NodeDataUpdate::MergeFrom(from.nodedataupdate());
    }
    if (from.has_registration()) {
      mutable_registration()->::cloud9::data::WorkerReportMessage_Registration::MergeFrom(from.registration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReportMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReportMessage::CopyFrom(const WorkerReportMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReportMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nodesetupdate()) {
    if (!this->nodesetupdate().IsInitialized()) return false;
  }
  if (has_registration()) {
    if (!this->registration().IsInitialized()) return false;
  }
  for (int i = 0; i < localupdates_size(); i++) {
    if (!this->localupdates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < targetupdates_size(); i++) {
    if (!this->targetupdates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < partitionupdates_size(); i++) {
    if (!this->partitionupdates(i).IsInitialized()) return false;
  }
  return true;
}

void WorkerReportMessage::Swap(WorkerReportMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nodesetupdate_, other->nodesetupdate_);
    std::swap(nodedataupdate_, other->nodedataupdate_);
    std::swap(registration_, other->registration_);
    localupdates_.Swap(&other->localupdates_);
    targetupdates_.Swap(&other->targetupdates_);
    partitionupdates_.Swap(&other->partitionupdates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReportMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReportMessage_descriptor_;
  metadata.reflection = WorkerReportMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LBResponseMessage_JobTransfer::kDestAddressFieldNumber;
const int LBResponseMessage_JobTransfer::kDestPortFieldNumber;
const int LBResponseMessage_JobTransfer::kCountFieldNumber;
const int LBResponseMessage_JobTransfer::kPartitionsFieldNumber;
#endif  // !_MSC_VER

LBResponseMessage_JobTransfer::LBResponseMessage_JobTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LBResponseMessage_JobTransfer::InitAsDefaultInstance() {
}

LBResponseMessage_JobTransfer::LBResponseMessage_JobTransfer(const LBResponseMessage_JobTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LBResponseMessage_JobTransfer::SharedCtor() {
  _cached_size_ = 0;
  dest_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_port_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LBResponseMessage_JobTransfer::~LBResponseMessage_JobTransfer() {
  SharedDtor();
}

void LBResponseMessage_JobTransfer::SharedDtor() {
  if (dest_address_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_address_;
  }
  if (this != default_instance_) {
  }
}

void LBResponseMessage_JobTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LBResponseMessage_JobTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LBResponseMessage_JobTransfer_descriptor_;
}

const LBResponseMessage_JobTransfer& LBResponseMessage_JobTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

LBResponseMessage_JobTransfer* LBResponseMessage_JobTransfer::default_instance_ = NULL;

LBResponseMessage_JobTransfer* LBResponseMessage_JobTransfer::New() const {
  return new LBResponseMessage_JobTransfer;
}

void LBResponseMessage_JobTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dest_address()) {
      if (dest_address_ != &::google::protobuf::internal::kEmptyString) {
        dest_address_->clear();
      }
    }
    dest_port_ = 0u;
    count_ = 0u;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LBResponseMessage_JobTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dest_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_address().data(), this->dest_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_port;
        break;
      }

      // required uint32 dest_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_port_)));
          set_has_dest_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_partitions;
        break;
      }

      // repeated .cloud9.data.PartitionData partitions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_partitions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LBResponseMessage_JobTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dest_address = 2;
  if (has_dest_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_address().data(), this->dest_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest_address(), output);
  }

  // required uint32 dest_port = 3;
  if (has_dest_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_port(), output);
  }

  // required uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // repeated .cloud9.data.PartitionData partitions = 6;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LBResponseMessage_JobTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dest_address = 2;
  if (has_dest_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_address().data(), this->dest_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_address(), target);
  }

  // required uint32 dest_port = 3;
  if (has_dest_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dest_port(), target);
  }

  // required uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // repeated .cloud9.data.PartitionData partitions = 6;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LBResponseMessage_JobTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dest_address = 2;
    if (has_dest_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_address());
    }

    // required uint32 dest_port = 3;
    if (has_dest_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_port());
    }

    // required uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated .cloud9.data.PartitionData partitions = 6;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LBResponseMessage_JobTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LBResponseMessage_JobTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LBResponseMessage_JobTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LBResponseMessage_JobTransfer::MergeFrom(const LBResponseMessage_JobTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_address()) {
      set_dest_address(from.dest_address());
    }
    if (from.has_dest_port()) {
      set_dest_port(from.dest_port());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LBResponseMessage_JobTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LBResponseMessage_JobTransfer::CopyFrom(const LBResponseMessage_JobTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBResponseMessage_JobTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < partitions_size(); i++) {
    if (!this->partitions(i).IsInitialized()) return false;
  }
  return true;
}

void LBResponseMessage_JobTransfer::Swap(LBResponseMessage_JobTransfer* other) {
  if (other != this) {
    std::swap(dest_address_, other->dest_address_);
    std::swap(dest_port_, other->dest_port_);
    std::swap(count_, other->count_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LBResponseMessage_JobTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LBResponseMessage_JobTransfer_descriptor_;
  metadata.reflection = LBResponseMessage_JobTransfer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LBResponseMessage_JobSeed::kPathSetFieldNumber;
#endif  // !_MSC_VER

LBResponseMessage_JobSeed::LBResponseMessage_JobSeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LBResponseMessage_JobSeed::InitAsDefaultInstance() {
  path_set_ = const_cast< ::cloud9::data::ExecutionPathSet*>(&::cloud9::data::ExecutionPathSet::default_instance());
}

LBResponseMessage_JobSeed::LBResponseMessage_JobSeed(const LBResponseMessage_JobSeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LBResponseMessage_JobSeed::SharedCtor() {
  _cached_size_ = 0;
  path_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LBResponseMessage_JobSeed::~LBResponseMessage_JobSeed() {
  SharedDtor();
}

void LBResponseMessage_JobSeed::SharedDtor() {
  if (this != default_instance_) {
    delete path_set_;
  }
}

void LBResponseMessage_JobSeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LBResponseMessage_JobSeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LBResponseMessage_JobSeed_descriptor_;
}

const LBResponseMessage_JobSeed& LBResponseMessage_JobSeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

LBResponseMessage_JobSeed* LBResponseMessage_JobSeed::default_instance_ = NULL;

LBResponseMessage_JobSeed* LBResponseMessage_JobSeed::New() const {
  return new LBResponseMessage_JobSeed;
}

void LBResponseMessage_JobSeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path_set()) {
      if (path_set_ != NULL) path_set_->::cloud9::data::ExecutionPathSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LBResponseMessage_JobSeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloud9.data.ExecutionPathSet path_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LBResponseMessage_JobSeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloud9.data.ExecutionPathSet path_set = 1;
  if (has_path_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LBResponseMessage_JobSeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloud9.data.ExecutionPathSet path_set = 1;
  if (has_path_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LBResponseMessage_JobSeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloud9.data.ExecutionPathSet path_set = 1;
    if (has_path_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LBResponseMessage_JobSeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LBResponseMessage_JobSeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LBResponseMessage_JobSeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LBResponseMessage_JobSeed::MergeFrom(const LBResponseMessage_JobSeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_set()) {
      mutable_path_set()->::cloud9::data::ExecutionPathSet::MergeFrom(from.path_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LBResponseMessage_JobSeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LBResponseMessage_JobSeed::CopyFrom(const LBResponseMessage_JobSeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBResponseMessage_JobSeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_path_set()) {
    if (!this->path_set().IsInitialized()) return false;
  }
  return true;
}

void LBResponseMessage_JobSeed::Swap(LBResponseMessage_JobSeed* other) {
  if (other != this) {
    std::swap(path_set_, other->path_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LBResponseMessage_JobSeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LBResponseMessage_JobSeed_descriptor_;
  metadata.reflection = LBResponseMessage_JobSeed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LBResponseMessage::kIdFieldNumber;
const int LBResponseMessage::kJobTransferFieldNumber;
const int LBResponseMessage::kJobSeedFieldNumber;
const int LBResponseMessage::kMoreDetailsFieldNumber;
const int LBResponseMessage::kTerminateFieldNumber;
const int LBResponseMessage::kGlobalUpdatesFieldNumber;
const int LBResponseMessage::kTargetsFieldNumber;
#endif  // !_MSC_VER

LBResponseMessage::LBResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LBResponseMessage::InitAsDefaultInstance() {
  jobseed_ = const_cast< ::cloud9::data::LBResponseMessage_JobSeed*>(&::cloud9::data::LBResponseMessage_JobSeed::default_instance());
}

LBResponseMessage::LBResponseMessage(const LBResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LBResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  jobseed_ = NULL;
  more_details_ = false;
  terminate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LBResponseMessage::~LBResponseMessage() {
  SharedDtor();
}

void LBResponseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete jobseed_;
  }
}

void LBResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LBResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LBResponseMessage_descriptor_;
}

const LBResponseMessage& LBResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

LBResponseMessage* LBResponseMessage::default_instance_ = NULL;

LBResponseMessage* LBResponseMessage::New() const {
  return new LBResponseMessage;
}

void LBResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_jobseed()) {
      if (jobseed_ != NULL) jobseed_->::cloud9::data::LBResponseMessage_JobSeed::Clear();
    }
    more_details_ = false;
    terminate_ = false;
  }
  jobtransfer_.Clear();
  globalupdates_.Clear();
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LBResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_jobTransfer;
        break;
      }

      // repeated .cloud9.data.LBResponseMessage.JobTransfer jobTransfer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jobTransfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobtransfer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_jobTransfer;
        if (input->ExpectTag(26)) goto parse_jobSeed;
        break;
      }

      // optional .cloud9.data.LBResponseMessage.JobSeed jobSeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jobSeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jobseed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_more_details;
        break;
      }

      // required bool more_details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_more_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_details_)));
          set_has_more_details();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalUpdates;
        break;
      }

      // repeated .cloud9.data.StatisticUpdate globalUpdates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalUpdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_globalupdates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalUpdates;
        if (input->ExpectTag(50)) goto parse_targets;
        break;
      }

      // repeated string targets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_targets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targets(this->targets_size() - 1).data(),
            this->targets(this->targets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_targets;
        if (input->ExpectTag(56)) goto parse_terminate;
        break;
      }

      // required bool terminate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminate_)));
          set_has_terminate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LBResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .cloud9.data.LBResponseMessage.JobTransfer jobTransfer = 2;
  for (int i = 0; i < this->jobtransfer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jobtransfer(i), output);
  }

  // optional .cloud9.data.LBResponseMessage.JobSeed jobSeed = 3;
  if (has_jobseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jobseed(), output);
  }

  // required bool more_details = 4;
  if (has_more_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->more_details(), output);
  }

  // repeated .cloud9.data.StatisticUpdate globalUpdates = 5;
  for (int i = 0; i < this->globalupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->globalupdates(i), output);
  }

  // repeated string targets = 6;
  for (int i = 0; i < this->targets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->targets(i).data(), this->targets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->targets(i), output);
  }

  // required bool terminate = 7;
  if (has_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->terminate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LBResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .cloud9.data.LBResponseMessage.JobTransfer jobTransfer = 2;
  for (int i = 0; i < this->jobtransfer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jobtransfer(i), target);
  }

  // optional .cloud9.data.LBResponseMessage.JobSeed jobSeed = 3;
  if (has_jobseed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jobseed(), target);
  }

  // required bool more_details = 4;
  if (has_more_details()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->more_details(), target);
  }

  // repeated .cloud9.data.StatisticUpdate globalUpdates = 5;
  for (int i = 0; i < this->globalupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->globalupdates(i), target);
  }

  // repeated string targets = 6;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targets(i).data(), this->targets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->targets(i), target);
  }

  // required bool terminate = 7;
  if (has_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->terminate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LBResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .cloud9.data.LBResponseMessage.JobSeed jobSeed = 3;
    if (has_jobseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jobseed());
    }

    // required bool more_details = 4;
    if (has_more_details()) {
      total_size += 1 + 1;
    }

    // required bool terminate = 7;
    if (has_terminate()) {
      total_size += 1 + 1;
    }

  }
  // repeated .cloud9.data.LBResponseMessage.JobTransfer jobTransfer = 2;
  total_size += 1 * this->jobtransfer_size();
  for (int i = 0; i < this->jobtransfer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobtransfer(i));
  }

  // repeated .cloud9.data.StatisticUpdate globalUpdates = 5;
  total_size += 1 * this->globalupdates_size();
  for (int i = 0; i < this->globalupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->globalupdates(i));
  }

  // repeated string targets = 6;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LBResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LBResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LBResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LBResponseMessage::MergeFrom(const LBResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobtransfer_.MergeFrom(from.jobtransfer_);
  globalupdates_.MergeFrom(from.globalupdates_);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jobseed()) {
      mutable_jobseed()->::cloud9::data::LBResponseMessage_JobSeed::MergeFrom(from.jobseed());
    }
    if (from.has_more_details()) {
      set_more_details(from.more_details());
    }
    if (from.has_terminate()) {
      set_terminate(from.terminate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LBResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LBResponseMessage::CopyFrom(const LBResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  for (int i = 0; i < jobtransfer_size(); i++) {
    if (!this->jobtransfer(i).IsInitialized()) return false;
  }
  if (has_jobseed()) {
    if (!this->jobseed().IsInitialized()) return false;
  }
  for (int i = 0; i < globalupdates_size(); i++) {
    if (!this->globalupdates(i).IsInitialized()) return false;
  }
  return true;
}

void LBResponseMessage::Swap(LBResponseMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    jobtransfer_.Swap(&other->jobtransfer_);
    std::swap(jobseed_, other->jobseed_);
    std::swap(more_details_, other->more_details_);
    std::swap(terminate_, other->terminate_);
    globalupdates_.Swap(&other->globalupdates_);
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LBResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LBResponseMessage_descriptor_;
  metadata.reflection = LBResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerTransferMessage::kPathSetFieldNumber;
const int PeerTransferMessage::kInstrSinceForkFieldNumber;
#endif  // !_MSC_VER

PeerTransferMessage::PeerTransferMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerTransferMessage::InitAsDefaultInstance() {
  path_set_ = const_cast< ::cloud9::data::ExecutionPathSet*>(&::cloud9::data::ExecutionPathSet::default_instance());
}

PeerTransferMessage::PeerTransferMessage(const PeerTransferMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerTransferMessage::SharedCtor() {
  _cached_size_ = 0;
  path_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerTransferMessage::~PeerTransferMessage() {
  SharedDtor();
}

void PeerTransferMessage::SharedDtor() {
  if (this != default_instance_) {
    delete path_set_;
  }
}

void PeerTransferMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerTransferMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerTransferMessage_descriptor_;
}

const PeerTransferMessage& PeerTransferMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cloud9Data_2eproto();
  return *default_instance_;
}

PeerTransferMessage* PeerTransferMessage::default_instance_ = NULL;

PeerTransferMessage* PeerTransferMessage::New() const {
  return new PeerTransferMessage;
}

void PeerTransferMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path_set()) {
      if (path_set_ != NULL) path_set_->::cloud9::data::ExecutionPathSet::Clear();
    }
  }
  instr_since_fork_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerTransferMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloud9.data.ExecutionPathSet path_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instr_since_fork;
        break;
      }

      // repeated uint64 instr_since_fork = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instr_since_fork:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_instr_since_fork())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_instr_since_fork())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instr_since_fork;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerTransferMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloud9.data.ExecutionPathSet path_set = 1;
  if (has_path_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_set(), output);
  }

  // repeated uint64 instr_since_fork = 2;
  for (int i = 0; i < this->instr_since_fork_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->instr_since_fork(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerTransferMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloud9.data.ExecutionPathSet path_set = 1;
  if (has_path_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_set(), target);
  }

  // repeated uint64 instr_since_fork = 2;
  for (int i = 0; i < this->instr_since_fork_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->instr_since_fork(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerTransferMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloud9.data.ExecutionPathSet path_set = 1;
    if (has_path_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_set());
    }

  }
  // repeated uint64 instr_since_fork = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->instr_since_fork_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->instr_since_fork(i));
    }
    total_size += 1 * this->instr_since_fork_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerTransferMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerTransferMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerTransferMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerTransferMessage::MergeFrom(const PeerTransferMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  instr_since_fork_.MergeFrom(from.instr_since_fork_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_set()) {
      mutable_path_set()->::cloud9::data::ExecutionPathSet::MergeFrom(from.path_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerTransferMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerTransferMessage::CopyFrom(const PeerTransferMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerTransferMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_path_set()) {
    if (!this->path_set().IsInitialized()) return false;
  }
  return true;
}

void PeerTransferMessage::Swap(PeerTransferMessage* other) {
  if (other != this) {
    std::swap(path_set_, other->path_set_);
    instr_since_fork_.Swap(&other->instr_since_fork_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerTransferMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerTransferMessage_descriptor_;
  metadata.reflection = PeerTransferMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace cloud9

// @@protoc_insertion_point(global_scope)
