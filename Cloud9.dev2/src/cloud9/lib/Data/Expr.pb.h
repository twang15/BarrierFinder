// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Expr.proto

#ifndef PROTOBUF_Expr_2eproto__INCLUDED
#define PROTOBUF_Expr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Expr_2eproto();
void protobuf_AssignDesc_Expr_2eproto();
void protobuf_ShutdownFile_Expr_2eproto();

class Array;
class UpdateList;
class ExprNode;
class ExpressionData;
class PathConstraint;
class ExpressionSet;

enum ExprKind {
  CONSTANT = 0,
  NOT_OPTIMIZED = 1,
  READ = 3,
  SELECT = 4,
  CONCAT = 5,
  EXTRACT = 6,
  CAST_KIND_FIRST = 7,
  ZEXT = 7,
  SEXT = 8,
  CAST_KIND_LAST = 8,
  BINARY_KIND_FIRST = 9,
  ADD = 9,
  SUB = 10,
  MUL = 11,
  UDIV = 12,
  SDIV = 13,
  UREM = 14,
  SREM = 15,
  NOT = 16,
  AND = 17,
  OR = 18,
  XOR = 19,
  SHL = 20,
  LSHR = 21,
  ASHR = 22,
  CMP_KIND_FIRST = 23,
  EQ = 23,
  NE = 24,
  ULT = 25,
  ULE = 26,
  UGT = 27,
  UGE = 28,
  SLT = 29,
  SLE = 30,
  SGT = 31,
  SGE = 32,
  CMP_KIND_LAST = 32,
  BINARY_KIND_LAST = 32
};
bool ExprKind_IsValid(int value);
const ExprKind ExprKind_MIN = CONSTANT;
const ExprKind ExprKind_MAX = SGE;
const int ExprKind_ARRAYSIZE = ExprKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExprKind_descriptor();
inline const ::std::string& ExprKind_Name(ExprKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExprKind_descriptor(), value);
}
inline bool ExprKind_Parse(
    const ::std::string& name, ExprKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExprKind>(
    ExprKind_descriptor(), name, value);
}
// ===================================================================

class Array : public ::google::protobuf::Message {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Array& default_instance();

  void Swap(Array* other);

  // implements Message ----------------------------------------------

  Array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional bytes contents = 4;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 4;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:klee.data.Array)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 size_;
  ::std::string* contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static Array* default_instance_;
};
// -------------------------------------------------------------------

class UpdateList : public ::google::protobuf::Message {
 public:
  UpdateList();
  virtual ~UpdateList();

  UpdateList(const UpdateList& from);

  inline UpdateList& operator=(const UpdateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateList& default_instance();

  void Swap(UpdateList* other);

  // implements Message ----------------------------------------------

  UpdateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateList& from);
  void MergeFrom(const UpdateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated uint64 index_expr_id = 2;
  inline int index_expr_id_size() const;
  inline void clear_index_expr_id();
  static const int kIndexExprIdFieldNumber = 2;
  inline ::google::protobuf::uint64 index_expr_id(int index) const;
  inline void set_index_expr_id(int index, ::google::protobuf::uint64 value);
  inline void add_index_expr_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      index_expr_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_index_expr_id();

  // repeated uint64 value_expr_id = 3;
  inline int value_expr_id_size() const;
  inline void clear_value_expr_id();
  static const int kValueExprIdFieldNumber = 3;
  inline ::google::protobuf::uint64 value_expr_id(int index) const;
  inline void set_value_expr_id(int index, ::google::protobuf::uint64 value);
  inline void add_value_expr_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      value_expr_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_value_expr_id();

  // optional uint64 next_update_id = 4;
  inline bool has_next_update_id() const;
  inline void clear_next_update_id();
  static const int kNextUpdateIdFieldNumber = 4;
  inline ::google::protobuf::uint64 next_update_id() const;
  inline void set_next_update_id(::google::protobuf::uint64 value);

  // optional uint32 next_update_offset = 5;
  inline bool has_next_update_offset() const;
  inline void clear_next_update_offset();
  static const int kNextUpdateOffsetFieldNumber = 5;
  inline ::google::protobuf::uint32 next_update_offset() const;
  inline void set_next_update_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:klee.data.UpdateList)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_next_update_id();
  inline void clear_has_next_update_id();
  inline void set_has_next_update_offset();
  inline void clear_has_next_update_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > index_expr_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > value_expr_id_;
  ::google::protobuf::uint64 next_update_id_;
  ::google::protobuf::uint32 next_update_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static UpdateList* default_instance_;
};
// -------------------------------------------------------------------

class ExprNode : public ::google::protobuf::Message {
 public:
  ExprNode();
  virtual ~ExprNode();

  ExprNode(const ExprNode& from);

  inline ExprNode& operator=(const ExprNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExprNode& default_instance();

  void Swap(ExprNode* other);

  // implements Message ----------------------------------------------

  ExprNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExprNode& from);
  void MergeFrom(const ExprNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required .klee.data.ExprKind kind = 2;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 2;
  inline ::klee::data::ExprKind kind() const;
  inline void set_kind(::klee::data::ExprKind value);

  // optional uint64 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // repeated uint64 child_expr_id = 5;
  inline int child_expr_id_size() const;
  inline void clear_child_expr_id();
  static const int kChildExprIdFieldNumber = 5;
  inline ::google::protobuf::uint64 child_expr_id(int index) const;
  inline void set_child_expr_id(int index, ::google::protobuf::uint64 value);
  inline void add_child_expr_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      child_expr_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_child_expr_id();

  // optional uint64 update_list_id = 9;
  inline bool has_update_list_id() const;
  inline void clear_update_list_id();
  static const int kUpdateListIdFieldNumber = 9;
  inline ::google::protobuf::uint64 update_list_id() const;
  inline void set_update_list_id(::google::protobuf::uint64 value);

  // optional uint32 update_list_offset = 11;
  inline bool has_update_list_offset() const;
  inline void clear_update_list_offset();
  static const int kUpdateListOffsetFieldNumber = 11;
  inline ::google::protobuf::uint32 update_list_offset() const;
  inline void set_update_list_offset(::google::protobuf::uint32 value);

  // optional uint64 array_id = 10;
  inline bool has_array_id() const;
  inline void clear_array_id();
  static const int kArrayIdFieldNumber = 10;
  inline ::google::protobuf::uint64 array_id() const;
  inline void set_array_id(::google::protobuf::uint64 value);

  // optional uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 offset = 7;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 7;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:klee.data.ExprNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_update_list_id();
  inline void clear_has_update_list_id();
  inline void set_has_update_list_offset();
  inline void clear_has_update_list_offset();
  inline void set_has_array_id();
  inline void clear_has_array_id();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > child_expr_id_;
  int kind_;
  ::google::protobuf::uint32 update_list_offset_;
  ::google::protobuf::uint64 update_list_id_;
  ::google::protobuf::uint64 array_id_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static ExprNode* default_instance_;
};
// -------------------------------------------------------------------

class ExpressionData : public ::google::protobuf::Message {
 public:
  ExpressionData();
  virtual ~ExpressionData();

  ExpressionData(const ExpressionData& from);

  inline ExpressionData& operator=(const ExpressionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpressionData& default_instance();

  void Swap(ExpressionData* other);

  // implements Message ----------------------------------------------

  ExpressionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpressionData& from);
  void MergeFrom(const ExpressionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .klee.data.Array array = 1;
  inline int array_size() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 1;
  inline const ::klee::data::Array& array(int index) const;
  inline ::klee::data::Array* mutable_array(int index);
  inline ::klee::data::Array* add_array();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::Array >&
      array() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::Array >*
      mutable_array();

  // repeated .klee.data.UpdateList update = 2;
  inline int update_size() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline const ::klee::data::UpdateList& update(int index) const;
  inline ::klee::data::UpdateList* mutable_update(int index);
  inline ::klee::data::UpdateList* add_update();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::UpdateList >&
      update() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::UpdateList >*
      mutable_update();

  // repeated .klee.data.ExprNode expr = 3;
  inline int expr_size() const;
  inline void clear_expr();
  static const int kExprFieldNumber = 3;
  inline const ::klee::data::ExprNode& expr(int index) const;
  inline ::klee::data::ExprNode* mutable_expr(int index);
  inline ::klee::data::ExprNode* add_expr();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::ExprNode >&
      expr() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::ExprNode >*
      mutable_expr();

  // @@protoc_insertion_point(class_scope:klee.data.ExpressionData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::klee::data::Array > array_;
  ::google::protobuf::RepeatedPtrField< ::klee::data::UpdateList > update_;
  ::google::protobuf::RepeatedPtrField< ::klee::data::ExprNode > expr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static ExpressionData* default_instance_;
};
// -------------------------------------------------------------------

class PathConstraint : public ::google::protobuf::Message {
 public:
  PathConstraint();
  virtual ~PathConstraint();

  PathConstraint(const PathConstraint& from);

  inline PathConstraint& operator=(const PathConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathConstraint& default_instance();

  void Swap(PathConstraint* other);

  // implements Message ----------------------------------------------

  PathConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathConstraint& from);
  void MergeFrom(const PathConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 constraint_expr_id = 1;
  inline int constraint_expr_id_size() const;
  inline void clear_constraint_expr_id();
  static const int kConstraintExprIdFieldNumber = 1;
  inline ::google::protobuf::uint64 constraint_expr_id(int index) const;
  inline void set_constraint_expr_id(int index, ::google::protobuf::uint64 value);
  inline void add_constraint_expr_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      constraint_expr_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_constraint_expr_id();

  // @@protoc_insertion_point(class_scope:klee.data.PathConstraint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > constraint_expr_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static PathConstraint* default_instance_;
};
// -------------------------------------------------------------------

class ExpressionSet : public ::google::protobuf::Message {
 public:
  ExpressionSet();
  virtual ~ExpressionSet();

  ExpressionSet(const ExpressionSet& from);

  inline ExpressionSet& operator=(const ExpressionSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpressionSet& default_instance();

  void Swap(ExpressionSet* other);

  // implements Message ----------------------------------------------

  ExpressionSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpressionSet& from);
  void MergeFrom(const ExpressionSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .klee.data.ExpressionData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::klee::data::ExpressionData& data() const;
  inline ::klee::data::ExpressionData* mutable_data();
  inline ::klee::data::ExpressionData* release_data();
  inline void set_allocated_data(::klee::data::ExpressionData* data);

  // repeated uint64 expr_id = 2;
  inline int expr_id_size() const;
  inline void clear_expr_id();
  static const int kExprIdFieldNumber = 2;
  inline ::google::protobuf::uint64 expr_id(int index) const;
  inline void set_expr_id(int index, ::google::protobuf::uint64 value);
  inline void add_expr_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      expr_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_expr_id();

  // optional bool flush_previous_data = 3;
  inline bool has_flush_previous_data() const;
  inline void clear_flush_previous_data();
  static const int kFlushPreviousDataFieldNumber = 3;
  inline bool flush_previous_data() const;
  inline void set_flush_previous_data(bool value);

  // @@protoc_insertion_point(class_scope:klee.data.ExpressionSet)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_flush_previous_data();
  inline void clear_has_flush_previous_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::klee::data::ExpressionData* data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > expr_id_;
  bool flush_previous_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Expr_2eproto();
  friend void protobuf_AssignDesc_Expr_2eproto();
  friend void protobuf_ShutdownFile_Expr_2eproto();

  void InitAsDefaultInstance();
  static ExpressionSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Array

// required uint64 id = 2;
inline bool Array::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Array::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Array::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Array::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Array::id() const {
  return id_;
}
inline void Array::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 1;
inline bool Array::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Array::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Array::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Array::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Array::name() const {
  return *name_;
}
inline void Array::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Array::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Array::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Array::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Array::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Array::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 size = 3;
inline bool Array::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Array::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Array::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Array::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Array::size() const {
  return size_;
}
inline void Array::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional bytes contents = 4;
inline bool Array::has_contents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Array::set_has_contents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Array::clear_has_contents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Array::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& Array::contents() const {
  return *contents_;
}
inline void Array::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void Array::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void Array::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Array::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* Array::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Array::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateList

// required uint64 id = 1;
inline bool UpdateList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateList::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UpdateList::id() const {
  return id_;
}
inline void UpdateList::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated uint64 index_expr_id = 2;
inline int UpdateList::index_expr_id_size() const {
  return index_expr_id_.size();
}
inline void UpdateList::clear_index_expr_id() {
  index_expr_id_.Clear();
}
inline ::google::protobuf::uint64 UpdateList::index_expr_id(int index) const {
  return index_expr_id_.Get(index);
}
inline void UpdateList::set_index_expr_id(int index, ::google::protobuf::uint64 value) {
  index_expr_id_.Set(index, value);
}
inline void UpdateList::add_index_expr_id(::google::protobuf::uint64 value) {
  index_expr_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UpdateList::index_expr_id() const {
  return index_expr_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UpdateList::mutable_index_expr_id() {
  return &index_expr_id_;
}

// repeated uint64 value_expr_id = 3;
inline int UpdateList::value_expr_id_size() const {
  return value_expr_id_.size();
}
inline void UpdateList::clear_value_expr_id() {
  value_expr_id_.Clear();
}
inline ::google::protobuf::uint64 UpdateList::value_expr_id(int index) const {
  return value_expr_id_.Get(index);
}
inline void UpdateList::set_value_expr_id(int index, ::google::protobuf::uint64 value) {
  value_expr_id_.Set(index, value);
}
inline void UpdateList::add_value_expr_id(::google::protobuf::uint64 value) {
  value_expr_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UpdateList::value_expr_id() const {
  return value_expr_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UpdateList::mutable_value_expr_id() {
  return &value_expr_id_;
}

// optional uint64 next_update_id = 4;
inline bool UpdateList::has_next_update_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateList::set_has_next_update_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateList::clear_has_next_update_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateList::clear_next_update_id() {
  next_update_id_ = GOOGLE_ULONGLONG(0);
  clear_has_next_update_id();
}
inline ::google::protobuf::uint64 UpdateList::next_update_id() const {
  return next_update_id_;
}
inline void UpdateList::set_next_update_id(::google::protobuf::uint64 value) {
  set_has_next_update_id();
  next_update_id_ = value;
}

// optional uint32 next_update_offset = 5;
inline bool UpdateList::has_next_update_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateList::set_has_next_update_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateList::clear_has_next_update_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateList::clear_next_update_offset() {
  next_update_offset_ = 0u;
  clear_has_next_update_offset();
}
inline ::google::protobuf::uint32 UpdateList::next_update_offset() const {
  return next_update_offset_;
}
inline void UpdateList::set_next_update_offset(::google::protobuf::uint32 value) {
  set_has_next_update_offset();
  next_update_offset_ = value;
}

// -------------------------------------------------------------------

// ExprNode

// required uint64 id = 3;
inline bool ExprNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExprNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExprNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExprNode::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ExprNode::id() const {
  return id_;
}
inline void ExprNode::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required .klee.data.ExprKind kind = 2;
inline bool ExprNode::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExprNode::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExprNode::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExprNode::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::klee::data::ExprKind ExprNode::kind() const {
  return static_cast< ::klee::data::ExprKind >(kind_);
}
inline void ExprNode::set_kind(::klee::data::ExprKind value) {
  assert(::klee::data::ExprKind_IsValid(value));
  set_has_kind();
  kind_ = value;
}

// optional uint64 value = 4;
inline bool ExprNode::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExprNode::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExprNode::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExprNode::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 ExprNode::value() const {
  return value_;
}
inline void ExprNode::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// repeated uint64 child_expr_id = 5;
inline int ExprNode::child_expr_id_size() const {
  return child_expr_id_.size();
}
inline void ExprNode::clear_child_expr_id() {
  child_expr_id_.Clear();
}
inline ::google::protobuf::uint64 ExprNode::child_expr_id(int index) const {
  return child_expr_id_.Get(index);
}
inline void ExprNode::set_child_expr_id(int index, ::google::protobuf::uint64 value) {
  child_expr_id_.Set(index, value);
}
inline void ExprNode::add_child_expr_id(::google::protobuf::uint64 value) {
  child_expr_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ExprNode::child_expr_id() const {
  return child_expr_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ExprNode::mutable_child_expr_id() {
  return &child_expr_id_;
}

// optional uint64 update_list_id = 9;
inline bool ExprNode::has_update_list_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExprNode::set_has_update_list_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExprNode::clear_has_update_list_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExprNode::clear_update_list_id() {
  update_list_id_ = GOOGLE_ULONGLONG(0);
  clear_has_update_list_id();
}
inline ::google::protobuf::uint64 ExprNode::update_list_id() const {
  return update_list_id_;
}
inline void ExprNode::set_update_list_id(::google::protobuf::uint64 value) {
  set_has_update_list_id();
  update_list_id_ = value;
}

// optional uint32 update_list_offset = 11;
inline bool ExprNode::has_update_list_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExprNode::set_has_update_list_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExprNode::clear_has_update_list_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExprNode::clear_update_list_offset() {
  update_list_offset_ = 0u;
  clear_has_update_list_offset();
}
inline ::google::protobuf::uint32 ExprNode::update_list_offset() const {
  return update_list_offset_;
}
inline void ExprNode::set_update_list_offset(::google::protobuf::uint32 value) {
  set_has_update_list_offset();
  update_list_offset_ = value;
}

// optional uint64 array_id = 10;
inline bool ExprNode::has_array_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExprNode::set_has_array_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExprNode::clear_has_array_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExprNode::clear_array_id() {
  array_id_ = GOOGLE_ULONGLONG(0);
  clear_has_array_id();
}
inline ::google::protobuf::uint64 ExprNode::array_id() const {
  return array_id_;
}
inline void ExprNode::set_array_id(::google::protobuf::uint64 value) {
  set_has_array_id();
  array_id_ = value;
}

// optional uint32 width = 1;
inline bool ExprNode::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExprNode::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExprNode::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExprNode::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ExprNode::width() const {
  return width_;
}
inline void ExprNode::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 offset = 7;
inline bool ExprNode::has_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExprNode::set_has_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExprNode::clear_has_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExprNode::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 ExprNode::offset() const {
  return offset_;
}
inline void ExprNode::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// ExpressionData

// repeated .klee.data.Array array = 1;
inline int ExpressionData::array_size() const {
  return array_.size();
}
inline void ExpressionData::clear_array() {
  array_.Clear();
}
inline const ::klee::data::Array& ExpressionData::array(int index) const {
  return array_.Get(index);
}
inline ::klee::data::Array* ExpressionData::mutable_array(int index) {
  return array_.Mutable(index);
}
inline ::klee::data::Array* ExpressionData::add_array() {
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::Array >&
ExpressionData::array() const {
  return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::Array >*
ExpressionData::mutable_array() {
  return &array_;
}

// repeated .klee.data.UpdateList update = 2;
inline int ExpressionData::update_size() const {
  return update_.size();
}
inline void ExpressionData::clear_update() {
  update_.Clear();
}
inline const ::klee::data::UpdateList& ExpressionData::update(int index) const {
  return update_.Get(index);
}
inline ::klee::data::UpdateList* ExpressionData::mutable_update(int index) {
  return update_.Mutable(index);
}
inline ::klee::data::UpdateList* ExpressionData::add_update() {
  return update_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::UpdateList >&
ExpressionData::update() const {
  return update_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::UpdateList >*
ExpressionData::mutable_update() {
  return &update_;
}

// repeated .klee.data.ExprNode expr = 3;
inline int ExpressionData::expr_size() const {
  return expr_.size();
}
inline void ExpressionData::clear_expr() {
  expr_.Clear();
}
inline const ::klee::data::ExprNode& ExpressionData::expr(int index) const {
  return expr_.Get(index);
}
inline ::klee::data::ExprNode* ExpressionData::mutable_expr(int index) {
  return expr_.Mutable(index);
}
inline ::klee::data::ExprNode* ExpressionData::add_expr() {
  return expr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::ExprNode >&
ExpressionData::expr() const {
  return expr_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::ExprNode >*
ExpressionData::mutable_expr() {
  return &expr_;
}

// -------------------------------------------------------------------

// PathConstraint

// repeated uint64 constraint_expr_id = 1;
inline int PathConstraint::constraint_expr_id_size() const {
  return constraint_expr_id_.size();
}
inline void PathConstraint::clear_constraint_expr_id() {
  constraint_expr_id_.Clear();
}
inline ::google::protobuf::uint64 PathConstraint::constraint_expr_id(int index) const {
  return constraint_expr_id_.Get(index);
}
inline void PathConstraint::set_constraint_expr_id(int index, ::google::protobuf::uint64 value) {
  constraint_expr_id_.Set(index, value);
}
inline void PathConstraint::add_constraint_expr_id(::google::protobuf::uint64 value) {
  constraint_expr_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PathConstraint::constraint_expr_id() const {
  return constraint_expr_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PathConstraint::mutable_constraint_expr_id() {
  return &constraint_expr_id_;
}

// -------------------------------------------------------------------

// ExpressionSet

// optional .klee.data.ExpressionData data = 1;
inline bool ExpressionSet::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpressionSet::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpressionSet::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpressionSet::clear_data() {
  if (data_ != NULL) data_->::klee::data::ExpressionData::Clear();
  clear_has_data();
}
inline const ::klee::data::ExpressionData& ExpressionSet::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::klee::data::ExpressionData* ExpressionSet::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::klee::data::ExpressionData;
  return data_;
}
inline ::klee::data::ExpressionData* ExpressionSet::release_data() {
  clear_has_data();
  ::klee::data::ExpressionData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ExpressionSet::set_allocated_data(::klee::data::ExpressionData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// repeated uint64 expr_id = 2;
inline int ExpressionSet::expr_id_size() const {
  return expr_id_.size();
}
inline void ExpressionSet::clear_expr_id() {
  expr_id_.Clear();
}
inline ::google::protobuf::uint64 ExpressionSet::expr_id(int index) const {
  return expr_id_.Get(index);
}
inline void ExpressionSet::set_expr_id(int index, ::google::protobuf::uint64 value) {
  expr_id_.Set(index, value);
}
inline void ExpressionSet::add_expr_id(::google::protobuf::uint64 value) {
  expr_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ExpressionSet::expr_id() const {
  return expr_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ExpressionSet::mutable_expr_id() {
  return &expr_id_;
}

// optional bool flush_previous_data = 3;
inline bool ExpressionSet::has_flush_previous_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpressionSet::set_has_flush_previous_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpressionSet::clear_has_flush_previous_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpressionSet::clear_flush_previous_data() {
  flush_previous_data_ = false;
  clear_has_flush_previous_data();
}
inline bool ExpressionSet::flush_previous_data() const {
  return flush_previous_data_;
}
inline void ExpressionSet::set_flush_previous_data(bool value) {
  set_has_flush_previous_data();
  flush_previous_data_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::klee::data::ExprKind>() {
  return ::klee::data::ExprKind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Expr_2eproto__INCLUDED
