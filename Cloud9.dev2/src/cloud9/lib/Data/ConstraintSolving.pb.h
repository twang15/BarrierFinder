// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConstraintSolving.proto

#ifndef PROTOBUF_ConstraintSolving_2eproto__INCLUDED
#define PROTOBUF_ConstraintSolving_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DebugInfo.pb.h"
#include "States.pb.h"
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConstraintSolving_2eproto();
void protobuf_AssignDesc_ConstraintSolving_2eproto();
void protobuf_ShutdownFile_ConstraintSolving_2eproto();

class SolverQuery;
class SolverQuerySet;

enum QueryReason {
  OTHER = 0,
  BRANCH_FEASIBILITY = 1,
  SWITCH_FEASIBILITY = 6,
  EXPRESSION_CONCRETIZATION = 4,
  BRANCH_CONDITION_CONCRETIZATION = 2,
  EXTERNAL_CALL_CONCRETIZATION = 8,
  CHECK_UNIQUENESS = 3,
  CHECK_ASSUMPTION = 12,
  USER_GET_VALUE = 5,
  SINGLE_ADDRESS_RESOLUTION = 7,
  MULTI_ADDRESS_RESOLUTION = 13,
  FUNCTION_RESOLUTION = 10,
  ALLOC_RANGE_CHECK = 9,
  TEST_CASE_GENERATION = 11
};
bool QueryReason_IsValid(int value);
const QueryReason QueryReason_MIN = OTHER;
const QueryReason QueryReason_MAX = MULTI_ADDRESS_RESOLUTION;
const int QueryReason_ARRAYSIZE = QueryReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryReason_descriptor();
inline const ::std::string& QueryReason_Name(QueryReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryReason_descriptor(), value);
}
inline bool QueryReason_Parse(
    const ::std::string& name, QueryReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryReason>(
    QueryReason_descriptor(), name, value);
}
enum QueryOperation {
  EVALUATE = 1,
  MUST_BE_TRUE = 2,
  MUST_BE_FALSE = 3,
  MAY_BE_TRUE = 4,
  MAY_BE_FALSE = 5,
  GET_VALUE = 6,
  GET_INITIAL_VALUES = 7,
  GET_RANGE = 8
};
bool QueryOperation_IsValid(int value);
const QueryOperation QueryOperation_MIN = EVALUATE;
const QueryOperation QueryOperation_MAX = GET_RANGE;
const int QueryOperation_ARRAYSIZE = QueryOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryOperation_descriptor();
inline const ::std::string& QueryOperation_Name(QueryOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryOperation_descriptor(), value);
}
inline bool QueryOperation_Parse(
    const ::std::string& name, QueryOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryOperation>(
    QueryOperation_descriptor(), name, value);
}
// ===================================================================

class SolverQuery : public ::google::protobuf::Message {
 public:
  SolverQuery();
  virtual ~SolverQuery();

  SolverQuery(const SolverQuery& from);

  inline SolverQuery& operator=(const SolverQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverQuery& default_instance();

  void Swap(SolverQuery* other);

  // implements Message ----------------------------------------------

  SolverQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverQuery& from);
  void MergeFrom(const SolverQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // required .klee.data.QueryReason reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline ::klee::data::QueryReason reason() const;
  inline void set_reason(::klee::data::QueryReason value);

  // required .klee.data.QueryOperation operation = 8;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 8;
  inline ::klee::data::QueryOperation operation() const;
  inline void set_operation(::klee::data::QueryOperation value);

  // required uint64 solving_time = 6;
  inline bool has_solving_time() const;
  inline void clear_solving_time();
  static const int kSolvingTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 solving_time() const;
  inline void set_solving_time(::google::protobuf::uint64 value);

  // optional .klee.data.DebugInfo debug_info = 10;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 10;
  inline const ::klee::data::DebugInfo& debug_info() const;
  inline ::klee::data::DebugInfo* mutable_debug_info();
  inline ::klee::data::DebugInfo* release_debug_info();
  inline void set_allocated_debug_info(::klee::data::DebugInfo* debug_info);

  // optional bool shadow = 9;
  inline bool has_shadow() const;
  inline void clear_shadow();
  static const int kShadowFieldNumber = 9;
  inline bool shadow() const;
  inline void set_shadow(bool value);

  // optional bool incremental = 11;
  inline bool has_incremental() const;
  inline void clear_incremental();
  static const int kIncrementalFieldNumber = 11;
  inline bool incremental() const;
  inline void set_incremental(bool value);

  // optional .klee.data.ExecutionState execution_state = 12;
  inline bool has_execution_state() const;
  inline void clear_execution_state();
  static const int kExecutionStateFieldNumber = 12;
  inline const ::klee::data::ExecutionState& execution_state() const;
  inline ::klee::data::ExecutionState* mutable_execution_state();
  inline ::klee::data::ExecutionState* release_execution_state();
  inline void set_allocated_execution_state(::klee::data::ExecutionState* execution_state);

  // @@protoc_insertion_point(class_scope:klee.data.SolverQuery)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_solving_time();
  inline void clear_has_solving_time();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_shadow();
  inline void clear_has_shadow();
  inline void set_has_incremental();
  inline void clear_has_incremental();
  inline void set_has_execution_state();
  inline void clear_has_execution_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_stamp_;
  int reason_;
  int operation_;
  ::google::protobuf::uint64 solving_time_;
  ::klee::data::DebugInfo* debug_info_;
  ::klee::data::ExecutionState* execution_state_;
  bool shadow_;
  bool incremental_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ConstraintSolving_2eproto();
  friend void protobuf_AssignDesc_ConstraintSolving_2eproto();
  friend void protobuf_ShutdownFile_ConstraintSolving_2eproto();

  void InitAsDefaultInstance();
  static SolverQuery* default_instance_;
};
// -------------------------------------------------------------------

class SolverQuerySet : public ::google::protobuf::Message {
 public:
  SolverQuerySet();
  virtual ~SolverQuerySet();

  SolverQuerySet(const SolverQuerySet& from);

  inline SolverQuerySet& operator=(const SolverQuerySet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverQuerySet& default_instance();

  void Swap(SolverQuerySet* other);

  // implements Message ----------------------------------------------

  SolverQuerySet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverQuerySet& from);
  void MergeFrom(const SolverQuerySet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .klee.data.SolverQuery solver_query = 1;
  inline int solver_query_size() const;
  inline void clear_solver_query();
  static const int kSolverQueryFieldNumber = 1;
  inline const ::klee::data::SolverQuery& solver_query(int index) const;
  inline ::klee::data::SolverQuery* mutable_solver_query(int index);
  inline ::klee::data::SolverQuery* add_solver_query();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::SolverQuery >&
      solver_query() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::SolverQuery >*
      mutable_solver_query();

  // @@protoc_insertion_point(class_scope:klee.data.SolverQuerySet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::klee::data::SolverQuery > solver_query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ConstraintSolving_2eproto();
  friend void protobuf_AssignDesc_ConstraintSolving_2eproto();
  friend void protobuf_ShutdownFile_ConstraintSolving_2eproto();

  void InitAsDefaultInstance();
  static SolverQuerySet* default_instance_;
};
// ===================================================================


// ===================================================================

// SolverQuery

// required uint64 time_stamp = 1;
inline bool SolverQuery::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverQuery::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverQuery::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverQuery::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 SolverQuery::time_stamp() const {
  return time_stamp_;
}
inline void SolverQuery::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// required .klee.data.QueryReason reason = 7;
inline bool SolverQuery::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverQuery::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverQuery::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverQuery::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::klee::data::QueryReason SolverQuery::reason() const {
  return static_cast< ::klee::data::QueryReason >(reason_);
}
inline void SolverQuery::set_reason(::klee::data::QueryReason value) {
  assert(::klee::data::QueryReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// required .klee.data.QueryOperation operation = 8;
inline bool SolverQuery::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverQuery::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverQuery::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverQuery::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::klee::data::QueryOperation SolverQuery::operation() const {
  return static_cast< ::klee::data::QueryOperation >(operation_);
}
inline void SolverQuery::set_operation(::klee::data::QueryOperation value) {
  assert(::klee::data::QueryOperation_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// required uint64 solving_time = 6;
inline bool SolverQuery::has_solving_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverQuery::set_has_solving_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverQuery::clear_has_solving_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverQuery::clear_solving_time() {
  solving_time_ = GOOGLE_ULONGLONG(0);
  clear_has_solving_time();
}
inline ::google::protobuf::uint64 SolverQuery::solving_time() const {
  return solving_time_;
}
inline void SolverQuery::set_solving_time(::google::protobuf::uint64 value) {
  set_has_solving_time();
  solving_time_ = value;
}

// optional .klee.data.DebugInfo debug_info = 10;
inline bool SolverQuery::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverQuery::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverQuery::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverQuery::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::klee::data::DebugInfo::Clear();
  clear_has_debug_info();
}
inline const ::klee::data::DebugInfo& SolverQuery::debug_info() const {
  return debug_info_ != NULL ? *debug_info_ : *default_instance_->debug_info_;
}
inline ::klee::data::DebugInfo* SolverQuery::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) debug_info_ = new ::klee::data::DebugInfo;
  return debug_info_;
}
inline ::klee::data::DebugInfo* SolverQuery::release_debug_info() {
  clear_has_debug_info();
  ::klee::data::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline void SolverQuery::set_allocated_debug_info(::klee::data::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
}

// optional bool shadow = 9;
inline bool SolverQuery::has_shadow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverQuery::set_has_shadow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverQuery::clear_has_shadow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverQuery::clear_shadow() {
  shadow_ = false;
  clear_has_shadow();
}
inline bool SolverQuery::shadow() const {
  return shadow_;
}
inline void SolverQuery::set_shadow(bool value) {
  set_has_shadow();
  shadow_ = value;
}

// optional bool incremental = 11;
inline bool SolverQuery::has_incremental() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverQuery::set_has_incremental() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverQuery::clear_has_incremental() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverQuery::clear_incremental() {
  incremental_ = false;
  clear_has_incremental();
}
inline bool SolverQuery::incremental() const {
  return incremental_;
}
inline void SolverQuery::set_incremental(bool value) {
  set_has_incremental();
  incremental_ = value;
}

// optional .klee.data.ExecutionState execution_state = 12;
inline bool SolverQuery::has_execution_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverQuery::set_has_execution_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverQuery::clear_has_execution_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverQuery::clear_execution_state() {
  if (execution_state_ != NULL) execution_state_->::klee::data::ExecutionState::Clear();
  clear_has_execution_state();
}
inline const ::klee::data::ExecutionState& SolverQuery::execution_state() const {
  return execution_state_ != NULL ? *execution_state_ : *default_instance_->execution_state_;
}
inline ::klee::data::ExecutionState* SolverQuery::mutable_execution_state() {
  set_has_execution_state();
  if (execution_state_ == NULL) execution_state_ = new ::klee::data::ExecutionState;
  return execution_state_;
}
inline ::klee::data::ExecutionState* SolverQuery::release_execution_state() {
  clear_has_execution_state();
  ::klee::data::ExecutionState* temp = execution_state_;
  execution_state_ = NULL;
  return temp;
}
inline void SolverQuery::set_allocated_execution_state(::klee::data::ExecutionState* execution_state) {
  delete execution_state_;
  execution_state_ = execution_state;
  if (execution_state) {
    set_has_execution_state();
  } else {
    clear_has_execution_state();
  }
}

// -------------------------------------------------------------------

// SolverQuerySet

// repeated .klee.data.SolverQuery solver_query = 1;
inline int SolverQuerySet::solver_query_size() const {
  return solver_query_.size();
}
inline void SolverQuerySet::clear_solver_query() {
  solver_query_.Clear();
}
inline const ::klee::data::SolverQuery& SolverQuerySet::solver_query(int index) const {
  return solver_query_.Get(index);
}
inline ::klee::data::SolverQuery* SolverQuerySet::mutable_solver_query(int index) {
  return solver_query_.Mutable(index);
}
inline ::klee::data::SolverQuery* SolverQuerySet::add_solver_query() {
  return solver_query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::SolverQuery >&
SolverQuerySet::solver_query() const {
  return solver_query_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::SolverQuery >*
SolverQuerySet::mutable_solver_query() {
  return &solver_query_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::klee::data::QueryReason>() {
  return ::klee::data::QueryReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::klee::data::QueryOperation>() {
  return ::klee::data::QueryOperation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConstraintSolving_2eproto__INCLUDED
