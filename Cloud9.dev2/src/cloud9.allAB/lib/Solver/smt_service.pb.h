// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smt_service.proto

#ifndef PROTOBUF_smt_5fservice_2eproto__INCLUDED
#define PROTOBUF_smt_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cloud9 {
namespace smt_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_smt_5fservice_2eproto();
void protobuf_AssignDesc_smt_5fservice_2eproto();
void protobuf_ShutdownFile_smt_5fservice_2eproto();

class SmtRequest;
class SmtResponse;
class SmtResponse_Assignment;

enum SmtResponse_Status {
  SmtResponse_Status_OK = 0,
  SmtResponse_Status_PARSE_FAILURE = 1,
  SmtResponse_Status_OTHER_FAILURE = 2,
  SmtResponse_Status_NOT_IMPLEMENTED = 3
};
bool SmtResponse_Status_IsValid(int value);
const SmtResponse_Status SmtResponse_Status_Status_MIN = SmtResponse_Status_OK;
const SmtResponse_Status SmtResponse_Status_Status_MAX = SmtResponse_Status_NOT_IMPLEMENTED;
const int SmtResponse_Status_Status_ARRAYSIZE = SmtResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmtResponse_Status_descriptor();
inline const ::std::string& SmtResponse_Status_Name(SmtResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmtResponse_Status_descriptor(), value);
}
inline bool SmtResponse_Status_Parse(
    const ::std::string& name, SmtResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmtResponse_Status>(
    SmtResponse_Status_descriptor(), name, value);
}
enum SmtResponse_Verdict {
  SmtResponse_Verdict_VALID = 0,
  SmtResponse_Verdict_INVALID = 1
};
bool SmtResponse_Verdict_IsValid(int value);
const SmtResponse_Verdict SmtResponse_Verdict_Verdict_MIN = SmtResponse_Verdict_VALID;
const SmtResponse_Verdict SmtResponse_Verdict_Verdict_MAX = SmtResponse_Verdict_INVALID;
const int SmtResponse_Verdict_Verdict_ARRAYSIZE = SmtResponse_Verdict_Verdict_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmtResponse_Verdict_descriptor();
inline const ::std::string& SmtResponse_Verdict_Name(SmtResponse_Verdict value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmtResponse_Verdict_descriptor(), value);
}
inline bool SmtResponse_Verdict_Parse(
    const ::std::string& name, SmtResponse_Verdict* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmtResponse_Verdict>(
    SmtResponse_Verdict_descriptor(), name, value);
}
// ===================================================================

class SmtRequest : public ::google::protobuf::Message {
 public:
  SmtRequest();
  virtual ~SmtRequest();

  SmtRequest(const SmtRequest& from);

  inline SmtRequest& operator=(const SmtRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmtRequest& default_instance();

  void Swap(SmtRequest* other);

  // implements Message ----------------------------------------------

  SmtRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmtRequest& from);
  void MergeFrom(const SmtRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:cloud9.smt_server.SmtRequest)
 private:
  inline void set_has_query();
  inline void clear_has_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_smt_5fservice_2eproto();
  friend void protobuf_AssignDesc_smt_5fservice_2eproto();
  friend void protobuf_ShutdownFile_smt_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SmtRequest* default_instance_;
};
// -------------------------------------------------------------------

class SmtResponse_Assignment : public ::google::protobuf::Message {
 public:
  SmtResponse_Assignment();
  virtual ~SmtResponse_Assignment();

  SmtResponse_Assignment(const SmtResponse_Assignment& from);

  inline SmtResponse_Assignment& operator=(const SmtResponse_Assignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmtResponse_Assignment& default_instance();

  void Swap(SmtResponse_Assignment* other);

  // implements Message ----------------------------------------------

  SmtResponse_Assignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmtResponse_Assignment& from);
  void MergeFrom(const SmtResponse_Assignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // repeated bool value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:cloud9.smt_server.SmtResponse.Assignment)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_smt_5fservice_2eproto();
  friend void protobuf_AssignDesc_smt_5fservice_2eproto();
  friend void protobuf_ShutdownFile_smt_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SmtResponse_Assignment* default_instance_;
};
// -------------------------------------------------------------------

class SmtResponse : public ::google::protobuf::Message {
 public:
  SmtResponse();
  virtual ~SmtResponse();

  SmtResponse(const SmtResponse& from);

  inline SmtResponse& operator=(const SmtResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmtResponse& default_instance();

  void Swap(SmtResponse* other);

  // implements Message ----------------------------------------------

  SmtResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmtResponse& from);
  void MergeFrom(const SmtResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SmtResponse_Assignment Assignment;

  typedef SmtResponse_Status Status;
  static const Status OK = SmtResponse_Status_OK;
  static const Status PARSE_FAILURE = SmtResponse_Status_PARSE_FAILURE;
  static const Status OTHER_FAILURE = SmtResponse_Status_OTHER_FAILURE;
  static const Status NOT_IMPLEMENTED = SmtResponse_Status_NOT_IMPLEMENTED;
  static inline bool Status_IsValid(int value) {
    return SmtResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    SmtResponse_Status_Status_MIN;
  static const Status Status_MAX =
    SmtResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    SmtResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return SmtResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return SmtResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return SmtResponse_Status_Parse(name, value);
  }

  typedef SmtResponse_Verdict Verdict;
  static const Verdict VALID = SmtResponse_Verdict_VALID;
  static const Verdict INVALID = SmtResponse_Verdict_INVALID;
  static inline bool Verdict_IsValid(int value) {
    return SmtResponse_Verdict_IsValid(value);
  }
  static const Verdict Verdict_MIN =
    SmtResponse_Verdict_Verdict_MIN;
  static const Verdict Verdict_MAX =
    SmtResponse_Verdict_Verdict_MAX;
  static const int Verdict_ARRAYSIZE =
    SmtResponse_Verdict_Verdict_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Verdict_descriptor() {
    return SmtResponse_Verdict_descriptor();
  }
  static inline const ::std::string& Verdict_Name(Verdict value) {
    return SmtResponse_Verdict_Name(value);
  }
  static inline bool Verdict_Parse(const ::std::string& name,
      Verdict* value) {
    return SmtResponse_Verdict_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cloud9.smt_server.SmtResponse.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::cloud9::smt_server::SmtResponse_Status status() const;
  inline void set_status(::cloud9::smt_server::SmtResponse_Status value);

  // optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
  inline bool has_verdict() const;
  inline void clear_verdict();
  static const int kVerdictFieldNumber = 2;
  inline ::cloud9::smt_server::SmtResponse_Verdict verdict() const;
  inline void set_verdict(::cloud9::smt_server::SmtResponse_Verdict value);

  // repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
  inline int assignment_size() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 3;
  inline const ::cloud9::smt_server::SmtResponse_Assignment& assignment(int index) const;
  inline ::cloud9::smt_server::SmtResponse_Assignment* mutable_assignment(int index);
  inline ::cloud9::smt_server::SmtResponse_Assignment* add_assignment();
  inline const ::google::protobuf::RepeatedPtrField< ::cloud9::smt_server::SmtResponse_Assignment >&
      assignment() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloud9::smt_server::SmtResponse_Assignment >*
      mutable_assignment();

  // @@protoc_insertion_point(class_scope:cloud9.smt_server.SmtResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_verdict();
  inline void clear_has_verdict();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;
  int verdict_;
  ::google::protobuf::RepeatedPtrField< ::cloud9::smt_server::SmtResponse_Assignment > assignment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_smt_5fservice_2eproto();
  friend void protobuf_AssignDesc_smt_5fservice_2eproto();
  friend void protobuf_ShutdownFile_smt_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SmtResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SmtRequest

// required string query = 1;
inline bool SmtRequest::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmtRequest::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmtRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmtRequest::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& SmtRequest::query() const {
  return *query_;
}
inline void SmtRequest::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void SmtRequest::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void SmtRequest::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmtRequest::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* SmtRequest::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SmtRequest::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SmtResponse_Assignment

// required uint32 index = 1;
inline bool SmtResponse_Assignment::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmtResponse_Assignment::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmtResponse_Assignment::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmtResponse_Assignment::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 SmtResponse_Assignment::index() const {
  return index_;
}
inline void SmtResponse_Assignment::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated bool value = 2;
inline int SmtResponse_Assignment::value_size() const {
  return value_.size();
}
inline void SmtResponse_Assignment::clear_value() {
  value_.Clear();
}
inline bool SmtResponse_Assignment::value(int index) const {
  return value_.Get(index);
}
inline void SmtResponse_Assignment::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void SmtResponse_Assignment::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
SmtResponse_Assignment::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
SmtResponse_Assignment::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// SmtResponse

// required .cloud9.smt_server.SmtResponse.Status status = 1;
inline bool SmtResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmtResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmtResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmtResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::cloud9::smt_server::SmtResponse_Status SmtResponse::status() const {
  return static_cast< ::cloud9::smt_server::SmtResponse_Status >(status_);
}
inline void SmtResponse::set_status(::cloud9::smt_server::SmtResponse_Status value) {
  assert(::cloud9::smt_server::SmtResponse_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
inline bool SmtResponse::has_verdict() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmtResponse::set_has_verdict() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmtResponse::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmtResponse::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
inline ::cloud9::smt_server::SmtResponse_Verdict SmtResponse::verdict() const {
  return static_cast< ::cloud9::smt_server::SmtResponse_Verdict >(verdict_);
}
inline void SmtResponse::set_verdict(::cloud9::smt_server::SmtResponse_Verdict value) {
  assert(::cloud9::smt_server::SmtResponse_Verdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
}

// repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
inline int SmtResponse::assignment_size() const {
  return assignment_.size();
}
inline void SmtResponse::clear_assignment() {
  assignment_.Clear();
}
inline const ::cloud9::smt_server::SmtResponse_Assignment& SmtResponse::assignment(int index) const {
  return assignment_.Get(index);
}
inline ::cloud9::smt_server::SmtResponse_Assignment* SmtResponse::mutable_assignment(int index) {
  return assignment_.Mutable(index);
}
inline ::cloud9::smt_server::SmtResponse_Assignment* SmtResponse::add_assignment() {
  return assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloud9::smt_server::SmtResponse_Assignment >&
SmtResponse::assignment() const {
  return assignment_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloud9::smt_server::SmtResponse_Assignment >*
SmtResponse::mutable_assignment() {
  return &assignment_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace smt_server
}  // namespace cloud9

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloud9::smt_server::SmtResponse_Status>() {
  return ::cloud9::smt_server::SmtResponse_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloud9::smt_server::SmtResponse_Verdict>() {
  return ::cloud9::smt_server::SmtResponse_Verdict_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_smt_5fservice_2eproto__INCLUDED
