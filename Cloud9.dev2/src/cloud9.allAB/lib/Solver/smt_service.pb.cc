// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smt_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "smt_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloud9 {
namespace smt_server {

namespace {

const ::google::protobuf::Descriptor* SmtRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmtRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmtResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmtResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmtResponse_Assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmtResponse_Assignment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SmtResponse_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SmtResponse_Verdict_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_smt_5fservice_2eproto() {
  protobuf_AddDesc_smt_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "smt_service.proto");
  GOOGLE_CHECK(file != NULL);
  SmtRequest_descriptor_ = file->message_type(0);
  static const int SmtRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtRequest, query_),
  };
  SmtRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmtRequest_descriptor_,
      SmtRequest::default_instance_,
      SmtRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmtRequest));
  SmtResponse_descriptor_ = file->message_type(1);
  static const int SmtResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse, verdict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse, assignment_),
  };
  SmtResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmtResponse_descriptor_,
      SmtResponse::default_instance_,
      SmtResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmtResponse));
  SmtResponse_Assignment_descriptor_ = SmtResponse_descriptor_->nested_type(0);
  static const int SmtResponse_Assignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse_Assignment, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse_Assignment, value_),
  };
  SmtResponse_Assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmtResponse_Assignment_descriptor_,
      SmtResponse_Assignment::default_instance_,
      SmtResponse_Assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse_Assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmtResponse_Assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmtResponse_Assignment));
  SmtResponse_Status_descriptor_ = SmtResponse_descriptor_->enum_type(0);
  SmtResponse_Verdict_descriptor_ = SmtResponse_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_smt_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmtRequest_descriptor_, &SmtRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmtResponse_descriptor_, &SmtResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmtResponse_Assignment_descriptor_, &SmtResponse_Assignment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_smt_5fservice_2eproto() {
  delete SmtRequest::default_instance_;
  delete SmtRequest_reflection_;
  delete SmtResponse::default_instance_;
  delete SmtResponse_reflection_;
  delete SmtResponse_Assignment::default_instance_;
  delete SmtResponse_Assignment_reflection_;
}

void protobuf_AddDesc_smt_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021smt_service.proto\022\021cloud9.smt_server\"\033"
    "\n\nSmtRequest\022\r\n\005query\030\001 \002(\t\"\330\002\n\013SmtRespo"
    "nse\0225\n\006status\030\001 \002(\0162%.cloud9.smt_server."
    "SmtResponse.Status\0227\n\007verdict\030\002 \001(\0162&.cl"
    "oud9.smt_server.SmtResponse.Verdict\022=\n\na"
    "ssignment\030\003 \003(\0132).cloud9.smt_server.SmtR"
    "esponse.Assignment\032*\n\nAssignment\022\r\n\005inde"
    "x\030\001 \002(\r\022\r\n\005value\030\002 \003(\010\"K\n\006Status\022\006\n\002OK\020\000"
    "\022\021\n\rPARSE_FAILURE\020\001\022\021\n\rOTHER_FAILURE\020\002\022\023"
    "\n\017NOT_IMPLEMENTED\020\003\"!\n\007Verdict\022\t\n\005VALID\020"
    "\000\022\013\n\007INVALID\020\001", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "smt_service.proto", &protobuf_RegisterTypes);
  SmtRequest::default_instance_ = new SmtRequest();
  SmtResponse::default_instance_ = new SmtResponse();
  SmtResponse_Assignment::default_instance_ = new SmtResponse_Assignment();
  SmtRequest::default_instance_->InitAsDefaultInstance();
  SmtResponse::default_instance_->InitAsDefaultInstance();
  SmtResponse_Assignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_smt_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_smt_5fservice_2eproto {
  StaticDescriptorInitializer_smt_5fservice_2eproto() {
    protobuf_AddDesc_smt_5fservice_2eproto();
  }
} static_descriptor_initializer_smt_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SmtRequest::kQueryFieldNumber;
#endif  // !_MSC_VER

SmtRequest::SmtRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmtRequest::InitAsDefaultInstance() {
}

SmtRequest::SmtRequest(const SmtRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmtRequest::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmtRequest::~SmtRequest() {
  SharedDtor();
}

void SmtRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void SmtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmtRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmtRequest_descriptor_;
}

const SmtRequest& SmtRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smt_5fservice_2eproto();
  return *default_instance_;
}

SmtRequest* SmtRequest::default_instance_ = NULL;

SmtRequest* SmtRequest::New() const {
  return new SmtRequest;
}

void SmtRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmtRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmtRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmtRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmtRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmtRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmtRequest::MergeFrom(const SmtRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmtRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmtRequest::CopyFrom(const SmtRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmtRequest::Swap(SmtRequest* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmtRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmtRequest_descriptor_;
  metadata.reflection = SmtRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SmtResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmtResponse_Status_descriptor_;
}
bool SmtResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SmtResponse_Status SmtResponse::OK;
const SmtResponse_Status SmtResponse::PARSE_FAILURE;
const SmtResponse_Status SmtResponse::OTHER_FAILURE;
const SmtResponse_Status SmtResponse::NOT_IMPLEMENTED;
const SmtResponse_Status SmtResponse::Status_MIN;
const SmtResponse_Status SmtResponse::Status_MAX;
const int SmtResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SmtResponse_Verdict_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmtResponse_Verdict_descriptor_;
}
bool SmtResponse_Verdict_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SmtResponse_Verdict SmtResponse::VALID;
const SmtResponse_Verdict SmtResponse::INVALID;
const SmtResponse_Verdict SmtResponse::Verdict_MIN;
const SmtResponse_Verdict SmtResponse::Verdict_MAX;
const int SmtResponse::Verdict_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SmtResponse_Assignment::kIndexFieldNumber;
const int SmtResponse_Assignment::kValueFieldNumber;
#endif  // !_MSC_VER

SmtResponse_Assignment::SmtResponse_Assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmtResponse_Assignment::InitAsDefaultInstance() {
}

SmtResponse_Assignment::SmtResponse_Assignment(const SmtResponse_Assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmtResponse_Assignment::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmtResponse_Assignment::~SmtResponse_Assignment() {
  SharedDtor();
}

void SmtResponse_Assignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmtResponse_Assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmtResponse_Assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmtResponse_Assignment_descriptor_;
}

const SmtResponse_Assignment& SmtResponse_Assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smt_5fservice_2eproto();
  return *default_instance_;
}

SmtResponse_Assignment* SmtResponse_Assignment::default_instance_ = NULL;

SmtResponse_Assignment* SmtResponse_Assignment::New() const {
  return new SmtResponse_Assignment;
}

void SmtResponse_Assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmtResponse_Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmtResponse_Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // repeated bool value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmtResponse_Assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // repeated bool value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmtResponse_Assignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated bool value = 2;
  {
    int data_size = 0;
    data_size = 1 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmtResponse_Assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmtResponse_Assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmtResponse_Assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmtResponse_Assignment::MergeFrom(const SmtResponse_Assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmtResponse_Assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmtResponse_Assignment::CopyFrom(const SmtResponse_Assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtResponse_Assignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmtResponse_Assignment::Swap(SmtResponse_Assignment* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmtResponse_Assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmtResponse_Assignment_descriptor_;
  metadata.reflection = SmtResponse_Assignment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SmtResponse::kStatusFieldNumber;
const int SmtResponse::kVerdictFieldNumber;
const int SmtResponse::kAssignmentFieldNumber;
#endif  // !_MSC_VER

SmtResponse::SmtResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmtResponse::InitAsDefaultInstance() {
}

SmtResponse::SmtResponse(const SmtResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmtResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  verdict_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmtResponse::~SmtResponse() {
  SharedDtor();
}

void SmtResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmtResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmtResponse_descriptor_;
}

const SmtResponse& SmtResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smt_5fservice_2eproto();
  return *default_instance_;
}

SmtResponse* SmtResponse::default_instance_ = NULL;

SmtResponse* SmtResponse::New() const {
  return new SmtResponse;
}

void SmtResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    verdict_ = 0;
  }
  assignment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloud9.smt_server.SmtResponse.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloud9::smt_server::SmtResponse_Status_IsValid(value)) {
            set_status(static_cast< ::cloud9::smt_server::SmtResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_verdict;
        break;
      }

      // optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verdict:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloud9::smt_server::SmtResponse_Verdict_IsValid(value)) {
            set_verdict(static_cast< ::cloud9::smt_server::SmtResponse_Verdict >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assignment;
        break;
      }

      // repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assignment;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloud9.smt_server.SmtResponse.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
  if (has_verdict()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->verdict(), output);
  }

  // repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
  for (int i = 0; i < this->assignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->assignment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmtResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloud9.smt_server.SmtResponse.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
  if (has_verdict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->verdict(), target);
  }

  // repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
  for (int i = 0; i < this->assignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->assignment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmtResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloud9.smt_server.SmtResponse.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .cloud9.smt_server.SmtResponse.Verdict verdict = 2;
    if (has_verdict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verdict());
    }

  }
  // repeated .cloud9.smt_server.SmtResponse.Assignment assignment = 3;
  total_size += 1 * this->assignment_size();
  for (int i = 0; i < this->assignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assignment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmtResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmtResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmtResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmtResponse::MergeFrom(const SmtResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  assignment_.MergeFrom(from.assignment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_verdict()) {
      set_verdict(from.verdict());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmtResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmtResponse::CopyFrom(const SmtResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < assignment_size(); i++) {
    if (!this->assignment(i).IsInitialized()) return false;
  }
  return true;
}

void SmtResponse::Swap(SmtResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(verdict_, other->verdict_);
    assignment_.Swap(&other->assignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmtResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmtResponse_descriptor_;
  metadata.reflection = SmtResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace smt_server
}  // namespace cloud9

// @@protoc_insertion_point(global_scope)
