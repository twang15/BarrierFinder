// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoverageLogs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CoverageLogs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* SourceFileCoverageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceFileCoverageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionCoverageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCoverageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoverageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoverageInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CoverageLogs_2eproto() {
  protobuf_AddDesc_CoverageLogs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CoverageLogs.proto");
  GOOGLE_CHECK(file != NULL);
  SourceFileCoverageInfo_descriptor_ = file->message_type(0);
  static const int SourceFileCoverageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFileCoverageInfo, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFileCoverageInfo, covered_line_),
  };
  SourceFileCoverageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SourceFileCoverageInfo_descriptor_,
      SourceFileCoverageInfo::default_instance_,
      SourceFileCoverageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFileCoverageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFileCoverageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SourceFileCoverageInfo));
  FunctionCoverageInfo_descriptor_ = file->message_type(1);
  static const int FunctionCoverageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCoverageInfo, function_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCoverageInfo, covered_asm_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCoverageInfo, source_coverage_),
  };
  FunctionCoverageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionCoverageInfo_descriptor_,
      FunctionCoverageInfo::default_instance_,
      FunctionCoverageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCoverageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCoverageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionCoverageInfo));
  CoverageInfo_descriptor_ = file->message_type(2);
  static const int CoverageInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, function_coverage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, total_source_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, total_asm_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, covered_source_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, covered_asm_lines_),
  };
  CoverageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoverageInfo_descriptor_,
      CoverageInfo::default_instance_,
      CoverageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoverageInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CoverageLogs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SourceFileCoverageInfo_descriptor_, &SourceFileCoverageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionCoverageInfo_descriptor_, &FunctionCoverageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoverageInfo_descriptor_, &CoverageInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CoverageLogs_2eproto() {
  delete SourceFileCoverageInfo::default_instance_;
  delete SourceFileCoverageInfo_reflection_;
  delete FunctionCoverageInfo::default_instance_;
  delete FunctionCoverageInfo_reflection_;
  delete CoverageInfo::default_instance_;
  delete CoverageInfo_reflection_;
}

void protobuf_AddDesc_CoverageLogs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CoverageLogs.proto\022\tklee.data\"\?\n\026Sourc"
    "eFileCoverageInfo\022\017\n\007file_id\030\001 \002(\005\022\024\n\014co"
    "vered_line\030\002 \003(\005\"\201\001\n\024FunctionCoverageInf"
    "o\022\023\n\013function_id\030\001 \002(\005\022\030\n\020covered_asm_li"
    "ne\030\002 \003(\005\022:\n\017source_coverage\030\003 \003(\0132!.klee"
    ".data.SourceFileCoverageInfo\"\314\001\n\014Coverag"
    "eInfo\022\022\n\ntime_stamp\030\002 \002(\004\022:\n\021function_co"
    "verage\030\001 \003(\0132\037.klee.data.FunctionCoverag"
    "eInfo\022\032\n\022total_source_lines\030\003 \001(\004\022\027\n\017tot"
    "al_asm_lines\030\004 \001(\004\022\034\n\024covered_source_lin"
    "es\030\005 \001(\004\022\031\n\021covered_asm_lines\030\006 \001(\004", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CoverageLogs.proto", &protobuf_RegisterTypes);
  SourceFileCoverageInfo::default_instance_ = new SourceFileCoverageInfo();
  FunctionCoverageInfo::default_instance_ = new FunctionCoverageInfo();
  CoverageInfo::default_instance_ = new CoverageInfo();
  SourceFileCoverageInfo::default_instance_->InitAsDefaultInstance();
  FunctionCoverageInfo::default_instance_->InitAsDefaultInstance();
  CoverageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CoverageLogs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CoverageLogs_2eproto {
  StaticDescriptorInitializer_CoverageLogs_2eproto() {
    protobuf_AddDesc_CoverageLogs_2eproto();
  }
} static_descriptor_initializer_CoverageLogs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SourceFileCoverageInfo::kFileIdFieldNumber;
const int SourceFileCoverageInfo::kCoveredLineFieldNumber;
#endif  // !_MSC_VER

SourceFileCoverageInfo::SourceFileCoverageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SourceFileCoverageInfo::InitAsDefaultInstance() {
}

SourceFileCoverageInfo::SourceFileCoverageInfo(const SourceFileCoverageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SourceFileCoverageInfo::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceFileCoverageInfo::~SourceFileCoverageInfo() {
  SharedDtor();
}

void SourceFileCoverageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SourceFileCoverageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceFileCoverageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceFileCoverageInfo_descriptor_;
}

const SourceFileCoverageInfo& SourceFileCoverageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoverageLogs_2eproto();
  return *default_instance_;
}

SourceFileCoverageInfo* SourceFileCoverageInfo::default_instance_ = NULL;

SourceFileCoverageInfo* SourceFileCoverageInfo::New() const {
  return new SourceFileCoverageInfo;
}

void SourceFileCoverageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_id_ = 0;
  }
  covered_line_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SourceFileCoverageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_id_)));
          set_has_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_covered_line;
        break;
      }

      // repeated int32 covered_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_covered_line())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_covered_line())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_covered_line;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SourceFileCoverageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->file_id(), output);
  }

  // repeated int32 covered_line = 2;
  for (int i = 0; i < this->covered_line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->covered_line(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SourceFileCoverageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 file_id = 1;
  if (has_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->file_id(), target);
  }

  // repeated int32 covered_line = 2;
  for (int i = 0; i < this->covered_line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->covered_line(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SourceFileCoverageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_id());
    }

  }
  // repeated int32 covered_line = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->covered_line_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->covered_line(i));
    }
    total_size += 1 * this->covered_line_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceFileCoverageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SourceFileCoverageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SourceFileCoverageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SourceFileCoverageInfo::MergeFrom(const SourceFileCoverageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  covered_line_.MergeFrom(from.covered_line_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SourceFileCoverageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceFileCoverageInfo::CopyFrom(const SourceFileCoverageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceFileCoverageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SourceFileCoverageInfo::Swap(SourceFileCoverageInfo* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    covered_line_.Swap(&other->covered_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SourceFileCoverageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceFileCoverageInfo_descriptor_;
  metadata.reflection = SourceFileCoverageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCoverageInfo::kFunctionIdFieldNumber;
const int FunctionCoverageInfo::kCoveredAsmLineFieldNumber;
const int FunctionCoverageInfo::kSourceCoverageFieldNumber;
#endif  // !_MSC_VER

FunctionCoverageInfo::FunctionCoverageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionCoverageInfo::InitAsDefaultInstance() {
}

FunctionCoverageInfo::FunctionCoverageInfo(const FunctionCoverageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionCoverageInfo::SharedCtor() {
  _cached_size_ = 0;
  function_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCoverageInfo::~FunctionCoverageInfo() {
  SharedDtor();
}

void FunctionCoverageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionCoverageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCoverageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCoverageInfo_descriptor_;
}

const FunctionCoverageInfo& FunctionCoverageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoverageLogs_2eproto();
  return *default_instance_;
}

FunctionCoverageInfo* FunctionCoverageInfo::default_instance_ = NULL;

FunctionCoverageInfo* FunctionCoverageInfo::New() const {
  return new FunctionCoverageInfo;
}

void FunctionCoverageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    function_id_ = 0;
  }
  covered_asm_line_.Clear();
  source_coverage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionCoverageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 function_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &function_id_)));
          set_has_function_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_covered_asm_line;
        break;
      }

      // repeated int32 covered_asm_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_asm_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_covered_asm_line())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_covered_asm_line())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_covered_asm_line;
        if (input->ExpectTag(26)) goto parse_source_coverage;
        break;
      }

      // repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_coverage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_coverage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_source_coverage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionCoverageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 function_id = 1;
  if (has_function_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->function_id(), output);
  }

  // repeated int32 covered_asm_line = 2;
  for (int i = 0; i < this->covered_asm_line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->covered_asm_line(i), output);
  }

  // repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
  for (int i = 0; i < this->source_coverage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->source_coverage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionCoverageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 function_id = 1;
  if (has_function_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->function_id(), target);
  }

  // repeated int32 covered_asm_line = 2;
  for (int i = 0; i < this->covered_asm_line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->covered_asm_line(i), target);
  }

  // repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
  for (int i = 0; i < this->source_coverage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->source_coverage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionCoverageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 function_id = 1;
    if (has_function_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->function_id());
    }

  }
  // repeated int32 covered_asm_line = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->covered_asm_line_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->covered_asm_line(i));
    }
    total_size += 1 * this->covered_asm_line_size() + data_size;
  }

  // repeated .klee.data.SourceFileCoverageInfo source_coverage = 3;
  total_size += 1 * this->source_coverage_size();
  for (int i = 0; i < this->source_coverage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source_coverage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCoverageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionCoverageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCoverageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCoverageInfo::MergeFrom(const FunctionCoverageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  covered_asm_line_.MergeFrom(from.covered_asm_line_);
  source_coverage_.MergeFrom(from.source_coverage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_function_id()) {
      set_function_id(from.function_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionCoverageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCoverageInfo::CopyFrom(const FunctionCoverageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCoverageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < source_coverage_size(); i++) {
    if (!this->source_coverage(i).IsInitialized()) return false;
  }
  return true;
}

void FunctionCoverageInfo::Swap(FunctionCoverageInfo* other) {
  if (other != this) {
    std::swap(function_id_, other->function_id_);
    covered_asm_line_.Swap(&other->covered_asm_line_);
    source_coverage_.Swap(&other->source_coverage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionCoverageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCoverageInfo_descriptor_;
  metadata.reflection = FunctionCoverageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoverageInfo::kTimeStampFieldNumber;
const int CoverageInfo::kFunctionCoverageFieldNumber;
const int CoverageInfo::kTotalSourceLinesFieldNumber;
const int CoverageInfo::kTotalAsmLinesFieldNumber;
const int CoverageInfo::kCoveredSourceLinesFieldNumber;
const int CoverageInfo::kCoveredAsmLinesFieldNumber;
#endif  // !_MSC_VER

CoverageInfo::CoverageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoverageInfo::InitAsDefaultInstance() {
}

CoverageInfo::CoverageInfo(const CoverageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoverageInfo::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  total_source_lines_ = GOOGLE_ULONGLONG(0);
  total_asm_lines_ = GOOGLE_ULONGLONG(0);
  covered_source_lines_ = GOOGLE_ULONGLONG(0);
  covered_asm_lines_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoverageInfo::~CoverageInfo() {
  SharedDtor();
}

void CoverageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoverageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoverageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoverageInfo_descriptor_;
}

const CoverageInfo& CoverageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoverageLogs_2eproto();
  return *default_instance_;
}

CoverageInfo* CoverageInfo::default_instance_ = NULL;

CoverageInfo* CoverageInfo::New() const {
  return new CoverageInfo;
}

void CoverageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    total_source_lines_ = GOOGLE_ULONGLONG(0);
    total_asm_lines_ = GOOGLE_ULONGLONG(0);
    covered_source_lines_ = GOOGLE_ULONGLONG(0);
    covered_asm_lines_ = GOOGLE_ULONGLONG(0);
  }
  function_coverage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoverageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function_coverage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_function_coverage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_function_coverage;
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_source_lines;
        break;
      }

      // optional uint64 total_source_lines = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_source_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_source_lines_)));
          set_has_total_source_lines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_asm_lines;
        break;
      }

      // optional uint64 total_asm_lines = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_asm_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_asm_lines_)));
          set_has_total_asm_lines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_covered_source_lines;
        break;
      }

      // optional uint64 covered_source_lines = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_source_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &covered_source_lines_)));
          set_has_covered_source_lines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_covered_asm_lines;
        break;
      }

      // optional uint64 covered_asm_lines = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_covered_asm_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &covered_asm_lines_)));
          set_has_covered_asm_lines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoverageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
  for (int i = 0; i < this->function_coverage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->function_coverage(i), output);
  }

  // required uint64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_stamp(), output);
  }

  // optional uint64 total_source_lines = 3;
  if (has_total_source_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_source_lines(), output);
  }

  // optional uint64 total_asm_lines = 4;
  if (has_total_asm_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_asm_lines(), output);
  }

  // optional uint64 covered_source_lines = 5;
  if (has_covered_source_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->covered_source_lines(), output);
  }

  // optional uint64 covered_asm_lines = 6;
  if (has_covered_asm_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->covered_asm_lines(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoverageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
  for (int i = 0; i < this->function_coverage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->function_coverage(i), target);
  }

  // required uint64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_stamp(), target);
  }

  // optional uint64 total_source_lines = 3;
  if (has_total_source_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_source_lines(), target);
  }

  // optional uint64 total_asm_lines = 4;
  if (has_total_asm_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_asm_lines(), target);
  }

  // optional uint64 covered_source_lines = 5;
  if (has_covered_source_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->covered_source_lines(), target);
  }

  // optional uint64 covered_asm_lines = 6;
  if (has_covered_asm_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->covered_asm_lines(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoverageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint64 total_source_lines = 3;
    if (has_total_source_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_source_lines());
    }

    // optional uint64 total_asm_lines = 4;
    if (has_total_asm_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_asm_lines());
    }

    // optional uint64 covered_source_lines = 5;
    if (has_covered_source_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->covered_source_lines());
    }

    // optional uint64 covered_asm_lines = 6;
    if (has_covered_asm_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->covered_asm_lines());
    }

  }
  // repeated .klee.data.FunctionCoverageInfo function_coverage = 1;
  total_size += 1 * this->function_coverage_size();
  for (int i = 0; i < this->function_coverage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function_coverage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoverageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoverageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoverageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoverageInfo::MergeFrom(const CoverageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_coverage_.MergeFrom(from.function_coverage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_total_source_lines()) {
      set_total_source_lines(from.total_source_lines());
    }
    if (from.has_total_asm_lines()) {
      set_total_asm_lines(from.total_asm_lines());
    }
    if (from.has_covered_source_lines()) {
      set_covered_source_lines(from.covered_source_lines());
    }
    if (from.has_covered_asm_lines()) {
      set_covered_asm_lines(from.covered_asm_lines());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoverageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoverageInfo::CopyFrom(const CoverageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < function_coverage_size(); i++) {
    if (!this->function_coverage(i).IsInitialized()) return false;
  }
  return true;
}

void CoverageInfo::Swap(CoverageInfo* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    function_coverage_.Swap(&other->function_coverage_);
    std::swap(total_source_lines_, other->total_source_lines_);
    std::swap(total_asm_lines_, other->total_asm_lines_);
    std::swap(covered_source_lines_, other->covered_source_lines_);
    std::swap(covered_asm_lines_, other->covered_asm_lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoverageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoverageInfo_descriptor_;
  metadata.reflection = CoverageInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
