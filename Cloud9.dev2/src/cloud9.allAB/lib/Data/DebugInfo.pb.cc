// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DebugInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* StringTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringTable_StringTableEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringTable_StringTableEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DebugInfo_2eproto() {
  protobuf_AddDesc_DebugInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DebugInfo.proto");
  GOOGLE_CHECK(file != NULL);
  StringTable_descriptor_ = file->message_type(0);
  static const int StringTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, entry_),
  };
  StringTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringTable_descriptor_,
      StringTable::default_instance_,
      StringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringTable));
  StringTable_StringTableEntry_descriptor_ = StringTable_descriptor_->nested_type(0);
  static const int StringTable_StringTableEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable_StringTableEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable_StringTableEntry, id_),
  };
  StringTable_StringTableEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringTable_StringTableEntry_descriptor_,
      StringTable_StringTableEntry::default_instance_,
      StringTable_StringTableEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable_StringTableEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable_StringTableEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringTable_StringTableEntry));
  DebugTable_descriptor_ = file->message_type(1);
  static const int DebugTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTable, file_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTable, function_table_),
  };
  DebugTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugTable_descriptor_,
      DebugTable::default_instance_,
      DebugTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugTable));
  DebugInfo_descriptor_ = file->message_type(2);
  static const int DebugInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, function_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, assembly_number_),
  };
  DebugInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugInfo_descriptor_,
      DebugInfo::default_instance_,
      DebugInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DebugInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringTable_descriptor_, &StringTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringTable_StringTableEntry_descriptor_, &StringTable_StringTableEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugTable_descriptor_, &DebugTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugInfo_descriptor_, &DebugInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DebugInfo_2eproto() {
  delete StringTable::default_instance_;
  delete StringTable_reflection_;
  delete StringTable_StringTableEntry::default_instance_;
  delete StringTable_StringTableEntry_reflection_;
  delete DebugTable::default_instance_;
  delete DebugTable_reflection_;
  delete DebugInfo::default_instance_;
  delete DebugInfo_reflection_;
}

void protobuf_AddDesc_DebugInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017DebugInfo.proto\022\tklee.data\"t\n\013StringTa"
    "ble\0226\n\005entry\030\001 \003(\0132\'.klee.data.StringTab"
    "le.StringTableEntry\032-\n\020StringTableEntry\022"
    "\r\n\005value\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\"h\n\nDebugTable"
    "\022*\n\nfile_table\030\001 \002(\0132\026.klee.data.StringT"
    "able\022.\n\016function_table\030\002 \002(\0132\026.klee.data"
    ".StringTable\"_\n\tDebugInfo\022\017\n\007file_id\030\001 \001"
    "(\005\022\023\n\013function_id\030\002 \001(\005\022\023\n\013line_number\030\003"
    " \001(\005\022\027\n\017assembly_number\030\004 \001(\005", 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DebugInfo.proto", &protobuf_RegisterTypes);
  StringTable::default_instance_ = new StringTable();
  StringTable_StringTableEntry::default_instance_ = new StringTable_StringTableEntry();
  DebugTable::default_instance_ = new DebugTable();
  DebugInfo::default_instance_ = new DebugInfo();
  StringTable::default_instance_->InitAsDefaultInstance();
  StringTable_StringTableEntry::default_instance_->InitAsDefaultInstance();
  DebugTable::default_instance_->InitAsDefaultInstance();
  DebugInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DebugInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DebugInfo_2eproto {
  StaticDescriptorInitializer_DebugInfo_2eproto() {
    protobuf_AddDesc_DebugInfo_2eproto();
  }
} static_descriptor_initializer_DebugInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StringTable_StringTableEntry::kValueFieldNumber;
const int StringTable_StringTableEntry::kIdFieldNumber;
#endif  // !_MSC_VER

StringTable_StringTableEntry::StringTable_StringTableEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringTable_StringTableEntry::InitAsDefaultInstance() {
}

StringTable_StringTableEntry::StringTable_StringTableEntry(const StringTable_StringTableEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringTable_StringTableEntry::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringTable_StringTableEntry::~StringTable_StringTableEntry() {
  SharedDtor();
}

void StringTable_StringTableEntry::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringTable_StringTableEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringTable_StringTableEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringTable_StringTableEntry_descriptor_;
}

const StringTable_StringTableEntry& StringTable_StringTableEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugInfo_2eproto();
  return *default_instance_;
}

StringTable_StringTableEntry* StringTable_StringTableEntry::default_instance_ = NULL;

StringTable_StringTableEntry* StringTable_StringTableEntry::New() const {
  return new StringTable_StringTableEntry;
}

void StringTable_StringTableEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringTable_StringTableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringTable_StringTableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringTable_StringTableEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringTable_StringTableEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable_StringTableEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringTable_StringTableEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringTable_StringTableEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringTable_StringTableEntry::MergeFrom(const StringTable_StringTableEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringTable_StringTableEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTable_StringTableEntry::CopyFrom(const StringTable_StringTableEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable_StringTableEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringTable_StringTableEntry::Swap(StringTable_StringTableEntry* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringTable_StringTableEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringTable_StringTableEntry_descriptor_;
  metadata.reflection = StringTable_StringTableEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StringTable::kEntryFieldNumber;
#endif  // !_MSC_VER

StringTable::StringTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringTable::InitAsDefaultInstance() {
}

StringTable::StringTable(const StringTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringTable::~StringTable() {
  SharedDtor();
}

void StringTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringTable_descriptor_;
}

const StringTable& StringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugInfo_2eproto();
  return *default_instance_;
}

StringTable* StringTable::default_instance_ = NULL;

StringTable* StringTable::New() const {
  return new StringTable;
}

void StringTable::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.StringTable.StringTableEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.StringTable.StringTableEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.StringTable.StringTableEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringTable::ByteSize() const {
  int total_size = 0;

  // repeated .klee.data.StringTable.StringTableEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringTable::MergeFrom(const StringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTable::CopyFrom(const StringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {

  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringTable_descriptor_;
  metadata.reflection = StringTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugTable::kFileTableFieldNumber;
const int DebugTable::kFunctionTableFieldNumber;
#endif  // !_MSC_VER

DebugTable::DebugTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugTable::InitAsDefaultInstance() {
  file_table_ = const_cast< ::klee::data::StringTable*>(&::klee::data::StringTable::default_instance());
  function_table_ = const_cast< ::klee::data::StringTable*>(&::klee::data::StringTable::default_instance());
}

DebugTable::DebugTable(const DebugTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugTable::SharedCtor() {
  _cached_size_ = 0;
  file_table_ = NULL;
  function_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugTable::~DebugTable() {
  SharedDtor();
}

void DebugTable::SharedDtor() {
  if (this != default_instance_) {
    delete file_table_;
    delete function_table_;
  }
}

void DebugTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugTable_descriptor_;
}

const DebugTable& DebugTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugInfo_2eproto();
  return *default_instance_;
}

DebugTable* DebugTable::default_instance_ = NULL;

DebugTable* DebugTable::New() const {
  return new DebugTable;
}

void DebugTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_table()) {
      if (file_table_ != NULL) file_table_->::klee::data::StringTable::Clear();
    }
    if (has_function_table()) {
      if (function_table_ != NULL) function_table_->::klee::data::StringTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .klee.data.StringTable file_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_function_table;
        break;
      }

      // required .klee.data.StringTable function_table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_function_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .klee.data.StringTable file_table = 1;
  if (has_file_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_table(), output);
  }

  // required .klee.data.StringTable function_table = 2;
  if (has_function_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->function_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .klee.data.StringTable file_table = 1;
  if (has_file_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_table(), target);
  }

  // required .klee.data.StringTable function_table = 2;
  if (has_function_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->function_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .klee.data.StringTable file_table = 1;
    if (has_file_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_table());
    }

    // required .klee.data.StringTable function_table = 2;
    if (has_function_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->function_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugTable::MergeFrom(const DebugTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_table()) {
      mutable_file_table()->::klee::data::StringTable::MergeFrom(from.file_table());
    }
    if (from.has_function_table()) {
      mutable_function_table()->::klee::data::StringTable::MergeFrom(from.function_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTable::CopyFrom(const DebugTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_file_table()) {
    if (!this->file_table().IsInitialized()) return false;
  }
  if (has_function_table()) {
    if (!this->function_table().IsInitialized()) return false;
  }
  return true;
}

void DebugTable::Swap(DebugTable* other) {
  if (other != this) {
    std::swap(file_table_, other->file_table_);
    std::swap(function_table_, other->function_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugTable_descriptor_;
  metadata.reflection = DebugTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugInfo::kFileIdFieldNumber;
const int DebugInfo::kFunctionIdFieldNumber;
const int DebugInfo::kLineNumberFieldNumber;
const int DebugInfo::kAssemblyNumberFieldNumber;
#endif  // !_MSC_VER

DebugInfo::DebugInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugInfo::InitAsDefaultInstance() {
}

DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugInfo::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = 0;
  function_id_ = 0;
  line_number_ = 0;
  assembly_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugInfo::~DebugInfo() {
  SharedDtor();
}

void DebugInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugInfo_descriptor_;
}

const DebugInfo& DebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugInfo_2eproto();
  return *default_instance_;
}

DebugInfo* DebugInfo::default_instance_ = NULL;

DebugInfo* DebugInfo::New() const {
  return new DebugInfo;
}

void DebugInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_id_ = 0;
    function_id_ = 0;
    line_number_ = 0;
    assembly_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_id_)));
          set_has_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_function_id;
        break;
      }

      // optional int32 function_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &function_id_)));
          set_has_function_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_line_number;
        break;
      }

      // optional int32 line_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          set_has_line_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_assembly_number;
        break;
      }

      // optional int32 assembly_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assembly_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assembly_number_)));
          set_has_assembly_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->file_id(), output);
  }

  // optional int32 function_id = 2;
  if (has_function_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->function_id(), output);
  }

  // optional int32 line_number = 3;
  if (has_line_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_number(), output);
  }

  // optional int32 assembly_number = 4;
  if (has_assembly_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assembly_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 file_id = 1;
  if (has_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->file_id(), target);
  }

  // optional int32 function_id = 2;
  if (has_function_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->function_id(), target);
  }

  // optional int32 line_number = 3;
  if (has_line_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_number(), target);
  }

  // optional int32 assembly_number = 4;
  if (has_assembly_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assembly_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_id());
    }

    // optional int32 function_id = 2;
    if (has_function_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->function_id());
    }

    // optional int32 line_number = 3;
    if (has_line_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }

    // optional int32 assembly_number = 4;
    if (has_assembly_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assembly_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_function_id()) {
      set_function_id(from.function_id());
    }
    if (from.has_line_number()) {
      set_line_number(from.line_number());
    }
    if (from.has_assembly_number()) {
      set_assembly_number(from.assembly_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {

  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(function_id_, other->function_id_);
    std::swap(line_number_, other->line_number_);
    std::swap(assembly_number_, other->assembly_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugInfo_descriptor_;
  metadata.reflection = DebugInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
