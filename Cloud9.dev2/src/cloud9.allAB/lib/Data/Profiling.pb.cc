// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Profiling.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Profiling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* CallSiteProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallSiteProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalProfile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Profiling_2eproto() {
  protobuf_AddDesc_Profiling_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Profiling.proto");
  GOOGLE_CHECK(file != NULL);
  CallSiteProfile_descriptor_ = file->message_type(0);
  static const int CallSiteProfile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSiteProfile, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSiteProfile, call_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSiteProfile, cost_value_),
  };
  CallSiteProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallSiteProfile_descriptor_,
      CallSiteProfile::default_instance_,
      CallSiteProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSiteProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSiteProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallSiteProfile));
  LineProfile_descriptor_ = file->message_type(1);
  static const int LineProfile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineProfile, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineProfile, cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineProfile, call_site_profile_),
  };
  LineProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineProfile_descriptor_,
      LineProfile::default_instance_,
      LineProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineProfile));
  FunctionProfile_descriptor_ = file->message_type(2);
  static const int FunctionProfile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionProfile, function_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionProfile, line_profile_),
  };
  FunctionProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionProfile_descriptor_,
      FunctionProfile::default_instance_,
      FunctionProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionProfile));
  GlobalProfile_descriptor_ = file->message_type(3);
  static const int GlobalProfile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalProfile, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalProfile, cost_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalProfile, function_profile_),
  };
  GlobalProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalProfile_descriptor_,
      GlobalProfile::default_instance_,
      GlobalProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalProfile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Profiling_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallSiteProfile_descriptor_, &CallSiteProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineProfile_descriptor_, &LineProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionProfile_descriptor_, &FunctionProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalProfile_descriptor_, &GlobalProfile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Profiling_2eproto() {
  delete CallSiteProfile::default_instance_;
  delete CallSiteProfile_reflection_;
  delete LineProfile::default_instance_;
  delete LineProfile_reflection_;
  delete FunctionProfile::default_instance_;
  delete FunctionProfile_reflection_;
  delete GlobalProfile::default_instance_;
  delete GlobalProfile_reflection_;
}

void protobuf_AddDesc_Profiling_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::klee::data::protobuf_AddDesc_DebugInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Profiling.proto\022\tklee.data\032\017DebugInfo."
    "proto\"c\n\017CallSiteProfile\022(\n\ndebug_info\030\006"
    " \002(\0132\024.klee.data.DebugInfo\022\022\n\ncall_count"
    "\030\002 \002(\003\022\022\n\ncost_value\030\005 \003(\003\"\202\001\n\013LineProfi"
    "le\022(\n\ndebug_info\030\006 \002(\0132\024.klee.data.Debug"
    "Info\022\022\n\ncost_value\030\003 \003(\003\0225\n\021call_site_pr"
    "ofile\030\005 \003(\0132\032.klee.data.CallSiteProfile\""
    "T\n\017FunctionProfile\022\023\n\013function_id\030\003 \002(\005\022"
    ",\n\014line_profile\030\002 \003(\0132\026.klee.data.LinePr"
    "ofile\"m\n\rGlobalProfile\022\022\n\ntime_stamp\030\003 \002"
    "(\004\022\022\n\ncost_label\030\002 \003(\t\0224\n\020function_profi"
    "le\030\001 \003(\0132\032.klee.data.FunctionProfile", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Profiling.proto", &protobuf_RegisterTypes);
  CallSiteProfile::default_instance_ = new CallSiteProfile();
  LineProfile::default_instance_ = new LineProfile();
  FunctionProfile::default_instance_ = new FunctionProfile();
  GlobalProfile::default_instance_ = new GlobalProfile();
  CallSiteProfile::default_instance_->InitAsDefaultInstance();
  LineProfile::default_instance_->InitAsDefaultInstance();
  FunctionProfile::default_instance_->InitAsDefaultInstance();
  GlobalProfile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Profiling_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Profiling_2eproto {
  StaticDescriptorInitializer_Profiling_2eproto() {
    protobuf_AddDesc_Profiling_2eproto();
  }
} static_descriptor_initializer_Profiling_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CallSiteProfile::kDebugInfoFieldNumber;
const int CallSiteProfile::kCallCountFieldNumber;
const int CallSiteProfile::kCostValueFieldNumber;
#endif  // !_MSC_VER

CallSiteProfile::CallSiteProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallSiteProfile::InitAsDefaultInstance() {
  debug_info_ = const_cast< ::klee::data::DebugInfo*>(&::klee::data::DebugInfo::default_instance());
}

CallSiteProfile::CallSiteProfile(const CallSiteProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallSiteProfile::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = NULL;
  call_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallSiteProfile::~CallSiteProfile() {
  SharedDtor();
}

void CallSiteProfile::SharedDtor() {
  if (this != default_instance_) {
    delete debug_info_;
  }
}

void CallSiteProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSiteProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSiteProfile_descriptor_;
}

const CallSiteProfile& CallSiteProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Profiling_2eproto();
  return *default_instance_;
}

CallSiteProfile* CallSiteProfile::default_instance_ = NULL;

CallSiteProfile* CallSiteProfile::New() const {
  return new CallSiteProfile;
}

void CallSiteProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != NULL) debug_info_->::klee::data::DebugInfo::Clear();
    }
    call_count_ = GOOGLE_LONGLONG(0);
  }
  cost_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallSiteProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 call_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &call_count_)));
          set_has_call_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_value;
        break;
      }

      // repeated int64 cost_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_cost_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cost_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_value;
        if (input->ExpectTag(50)) goto parse_debug_info;
        break;
      }

      // required .klee.data.DebugInfo debug_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallSiteProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 call_count = 2;
  if (has_call_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->call_count(), output);
  }

  // repeated int64 cost_value = 5;
  for (int i = 0; i < this->cost_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->cost_value(i), output);
  }

  // required .klee.data.DebugInfo debug_info = 6;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallSiteProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 call_count = 2;
  if (has_call_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->call_count(), target);
  }

  // repeated int64 cost_value = 5;
  for (int i = 0; i < this->cost_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->cost_value(i), target);
  }

  // required .klee.data.DebugInfo debug_info = 6;
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallSiteProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .klee.data.DebugInfo debug_info = 6;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_info());
    }

    // required int64 call_count = 2;
    if (has_call_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->call_count());
    }

  }
  // repeated int64 cost_value = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cost_value(i));
    }
    total_size += 1 * this->cost_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSiteProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallSiteProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallSiteProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallSiteProfile::MergeFrom(const CallSiteProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_value_.MergeFrom(from.cost_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      mutable_debug_info()->::klee::data::DebugInfo::MergeFrom(from.debug_info());
    }
    if (from.has_call_count()) {
      set_call_count(from.call_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallSiteProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSiteProfile::CopyFrom(const CallSiteProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallSiteProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CallSiteProfile::Swap(CallSiteProfile* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    std::swap(call_count_, other->call_count_);
    cost_value_.Swap(&other->cost_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallSiteProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallSiteProfile_descriptor_;
  metadata.reflection = CallSiteProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineProfile::kDebugInfoFieldNumber;
const int LineProfile::kCostValueFieldNumber;
const int LineProfile::kCallSiteProfileFieldNumber;
#endif  // !_MSC_VER

LineProfile::LineProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineProfile::InitAsDefaultInstance() {
  debug_info_ = const_cast< ::klee::data::DebugInfo*>(&::klee::data::DebugInfo::default_instance());
}

LineProfile::LineProfile(const LineProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineProfile::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineProfile::~LineProfile() {
  SharedDtor();
}

void LineProfile::SharedDtor() {
  if (this != default_instance_) {
    delete debug_info_;
  }
}

void LineProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineProfile_descriptor_;
}

const LineProfile& LineProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Profiling_2eproto();
  return *default_instance_;
}

LineProfile* LineProfile::default_instance_ = NULL;

LineProfile* LineProfile::New() const {
  return new LineProfile;
}

void LineProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != NULL) debug_info_->::klee::data::DebugInfo::Clear();
    }
  }
  cost_value_.Clear();
  call_site_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 cost_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_cost_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cost_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_value;
        if (input->ExpectTag(42)) goto parse_call_site_profile;
        break;
      }

      // repeated .klee.data.CallSiteProfile call_site_profile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_site_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_call_site_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_call_site_profile;
        if (input->ExpectTag(50)) goto parse_debug_info;
        break;
      }

      // required .klee.data.DebugInfo debug_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 cost_value = 3;
  for (int i = 0; i < this->cost_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->cost_value(i), output);
  }

  // repeated .klee.data.CallSiteProfile call_site_profile = 5;
  for (int i = 0; i < this->call_site_profile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->call_site_profile(i), output);
  }

  // required .klee.data.DebugInfo debug_info = 6;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 cost_value = 3;
  for (int i = 0; i < this->cost_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->cost_value(i), target);
  }

  // repeated .klee.data.CallSiteProfile call_site_profile = 5;
  for (int i = 0; i < this->call_site_profile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->call_site_profile(i), target);
  }

  // required .klee.data.DebugInfo debug_info = 6;
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .klee.data.DebugInfo debug_info = 6;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_info());
    }

  }
  // repeated int64 cost_value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cost_value(i));
    }
    total_size += 1 * this->cost_value_size() + data_size;
  }

  // repeated .klee.data.CallSiteProfile call_site_profile = 5;
  total_size += 1 * this->call_site_profile_size();
  for (int i = 0; i < this->call_site_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->call_site_profile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineProfile::MergeFrom(const LineProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_value_.MergeFrom(from.cost_value_);
  call_site_profile_.MergeFrom(from.call_site_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      mutable_debug_info()->::klee::data::DebugInfo::MergeFrom(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineProfile::CopyFrom(const LineProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < call_site_profile_size(); i++) {
    if (!this->call_site_profile(i).IsInitialized()) return false;
  }
  return true;
}

void LineProfile::Swap(LineProfile* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    cost_value_.Swap(&other->cost_value_);
    call_site_profile_.Swap(&other->call_site_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineProfile_descriptor_;
  metadata.reflection = LineProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionProfile::kFunctionIdFieldNumber;
const int FunctionProfile::kLineProfileFieldNumber;
#endif  // !_MSC_VER

FunctionProfile::FunctionProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionProfile::InitAsDefaultInstance() {
}

FunctionProfile::FunctionProfile(const FunctionProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionProfile::SharedCtor() {
  _cached_size_ = 0;
  function_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionProfile::~FunctionProfile() {
  SharedDtor();
}

void FunctionProfile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionProfile_descriptor_;
}

const FunctionProfile& FunctionProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Profiling_2eproto();
  return *default_instance_;
}

FunctionProfile* FunctionProfile::default_instance_ = NULL;

FunctionProfile* FunctionProfile::New() const {
  return new FunctionProfile;
}

void FunctionProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    function_id_ = 0;
  }
  line_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.LineProfile line_profile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_line_profile;
        if (input->ExpectTag(24)) goto parse_function_id;
        break;
      }

      // required int32 function_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &function_id_)));
          set_has_function_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.LineProfile line_profile = 2;
  for (int i = 0; i < this->line_profile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->line_profile(i), output);
  }

  // required int32 function_id = 3;
  if (has_function_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->function_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.LineProfile line_profile = 2;
  for (int i = 0; i < this->line_profile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->line_profile(i), target);
  }

  // required int32 function_id = 3;
  if (has_function_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->function_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 function_id = 3;
    if (has_function_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->function_id());
    }

  }
  // repeated .klee.data.LineProfile line_profile = 2;
  total_size += 1 * this->line_profile_size();
  for (int i = 0; i < this->line_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_profile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionProfile::MergeFrom(const FunctionProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  line_profile_.MergeFrom(from.line_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_function_id()) {
      set_function_id(from.function_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionProfile::CopyFrom(const FunctionProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < line_profile_size(); i++) {
    if (!this->line_profile(i).IsInitialized()) return false;
  }
  return true;
}

void FunctionProfile::Swap(FunctionProfile* other) {
  if (other != this) {
    std::swap(function_id_, other->function_id_);
    line_profile_.Swap(&other->line_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionProfile_descriptor_;
  metadata.reflection = FunctionProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalProfile::kTimeStampFieldNumber;
const int GlobalProfile::kCostLabelFieldNumber;
const int GlobalProfile::kFunctionProfileFieldNumber;
#endif  // !_MSC_VER

GlobalProfile::GlobalProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalProfile::InitAsDefaultInstance() {
}

GlobalProfile::GlobalProfile(const GlobalProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalProfile::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalProfile::~GlobalProfile() {
  SharedDtor();
}

void GlobalProfile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalProfile_descriptor_;
}

const GlobalProfile& GlobalProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Profiling_2eproto();
  return *default_instance_;
}

GlobalProfile* GlobalProfile::default_instance_ = NULL;

GlobalProfile* GlobalProfile::New() const {
  return new GlobalProfile;
}

void GlobalProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  cost_label_.Clear();
  function_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.FunctionProfile function_profile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_function_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_function_profile;
        if (input->ExpectTag(18)) goto parse_cost_label;
        break;
      }

      // repeated string cost_label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cost_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cost_label(this->cost_label_size() - 1).data(),
            this->cost_label(this->cost_label_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost_label;
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required uint64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.FunctionProfile function_profile = 1;
  for (int i = 0; i < this->function_profile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->function_profile(i), output);
  }

  // repeated string cost_label = 2;
  for (int i = 0; i < this->cost_label_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cost_label(i).data(), this->cost_label(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cost_label(i), output);
  }

  // required uint64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.FunctionProfile function_profile = 1;
  for (int i = 0; i < this->function_profile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->function_profile(i), target);
  }

  // repeated string cost_label = 2;
  for (int i = 0; i < this->cost_label_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cost_label(i).data(), this->cost_label(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->cost_label(i), target);
  }

  // required uint64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

  }
  // repeated string cost_label = 2;
  total_size += 1 * this->cost_label_size();
  for (int i = 0; i < this->cost_label_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cost_label(i));
  }

  // repeated .klee.data.FunctionProfile function_profile = 1;
  total_size += 1 * this->function_profile_size();
  for (int i = 0; i < this->function_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function_profile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalProfile::MergeFrom(const GlobalProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_label_.MergeFrom(from.cost_label_);
  function_profile_.MergeFrom(from.function_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalProfile::CopyFrom(const GlobalProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < function_profile_size(); i++) {
    if (!this->function_profile(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalProfile::Swap(GlobalProfile* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    cost_label_.Swap(&other->cost_label_);
    function_profile_.Swap(&other->function_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalProfile_descriptor_;
  metadata.reflection = GlobalProfile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
