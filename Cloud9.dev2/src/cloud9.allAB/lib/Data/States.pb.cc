// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: States.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "States.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

namespace {

const ::google::protobuf::Descriptor* ExecutionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionStateSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionStateSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_States_2eproto() {
  protobuf_AddDesc_States_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "States.proto");
  GOOGLE_CHECK(file != NULL);
  ExecutionState_descriptor_ = file->message_type(0);
  static const int ExecutionState_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, terminated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, branches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, forks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, total_time_),
  };
  ExecutionState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionState_descriptor_,
      ExecutionState::default_instance_,
      ExecutionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionState));
  ExecutionStateSet_descriptor_ = file->message_type(1);
  static const int ExecutionStateSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStateSet, execution_state_),
  };
  ExecutionStateSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionStateSet_descriptor_,
      ExecutionStateSet::default_instance_,
      ExecutionStateSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStateSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStateSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionStateSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_States_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionState_descriptor_, &ExecutionState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionStateSet_descriptor_, &ExecutionStateSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_States_2eproto() {
  delete ExecutionState::default_instance_;
  delete ExecutionState_reflection_;
  delete ExecutionStateSet::default_instance_;
  delete ExecutionStateSet_reflection_;
}

void protobuf_AddDesc_States_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014States.proto\022\tklee.data\"\263\001\n\016ExecutionS"
    "tate\022\022\n\ntime_stamp\030\010 \001(\004\022\n\n\002id\030\002 \002(\014\022\022\n\n"
    "terminated\030\001 \002(\010\022\021\n\tparent_id\030\005 \001(\014\022\024\n\014i"
    "nstructions\030\003 \001(\004\022\020\n\010branches\030\004 \001(\004\022\r\n\005f"
    "orks\030\t \001(\004\022\017\n\007queries\030\006 \001(\004\022\022\n\ntotal_tim"
    "e\030\007 \001(\004\"G\n\021ExecutionStateSet\0222\n\017executio"
    "n_state\030\001 \003(\0132\031.klee.data.ExecutionState", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "States.proto", &protobuf_RegisterTypes);
  ExecutionState::default_instance_ = new ExecutionState();
  ExecutionStateSet::default_instance_ = new ExecutionStateSet();
  ExecutionState::default_instance_->InitAsDefaultInstance();
  ExecutionStateSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_States_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_States_2eproto {
  StaticDescriptorInitializer_States_2eproto() {
    protobuf_AddDesc_States_2eproto();
  }
} static_descriptor_initializer_States_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExecutionState::kTimeStampFieldNumber;
const int ExecutionState::kIdFieldNumber;
const int ExecutionState::kTerminatedFieldNumber;
const int ExecutionState::kParentIdFieldNumber;
const int ExecutionState::kInstructionsFieldNumber;
const int ExecutionState::kBranchesFieldNumber;
const int ExecutionState::kForksFieldNumber;
const int ExecutionState::kQueriesFieldNumber;
const int ExecutionState::kTotalTimeFieldNumber;
#endif  // !_MSC_VER

ExecutionState::ExecutionState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionState::InitAsDefaultInstance() {
}

ExecutionState::ExecutionState(const ExecutionState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionState::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  terminated_ = false;
  parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instructions_ = GOOGLE_ULONGLONG(0);
  branches_ = GOOGLE_ULONGLONG(0);
  forks_ = GOOGLE_ULONGLONG(0);
  queries_ = GOOGLE_ULONGLONG(0);
  total_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionState::~ExecutionState() {
  SharedDtor();
}

void ExecutionState::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (parent_id_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_id_;
  }
  if (this != default_instance_) {
  }
}

void ExecutionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionState_descriptor_;
}

const ExecutionState& ExecutionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_States_2eproto();
  return *default_instance_;
}

ExecutionState* ExecutionState::default_instance_ = NULL;

ExecutionState* ExecutionState::New() const {
  return new ExecutionState;
}

void ExecutionState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    terminated_ = false;
    if (has_parent_id()) {
      if (parent_id_ != &::google::protobuf::internal::kEmptyString) {
        parent_id_->clear();
      }
    }
    instructions_ = GOOGLE_ULONGLONG(0);
    branches_ = GOOGLE_ULONGLONG(0);
    forks_ = GOOGLE_ULONGLONG(0);
    queries_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool terminated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminated_)));
          set_has_terminated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instructions;
        break;
      }

      // optional uint64 instructions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instructions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instructions_)));
          set_has_instructions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_branches;
        break;
      }

      // optional uint64 branches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branches_)));
          set_has_branches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parent_id;
        break;
      }

      // optional bytes parent_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_queries;
        break;
      }

      // optional uint64 queries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &queries_)));
          set_has_queries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_time;
        break;
      }

      // optional uint64 total_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_forks;
        break;
      }

      // optional uint64 forks = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forks_)));
          set_has_forks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool terminated = 1;
  if (has_terminated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->terminated(), output);
  }

  // required bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }

  // optional uint64 instructions = 3;
  if (has_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instructions(), output);
  }

  // optional uint64 branches = 4;
  if (has_branches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->branches(), output);
  }

  // optional bytes parent_id = 5;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->parent_id(), output);
  }

  // optional uint64 queries = 6;
  if (has_queries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->queries(), output);
  }

  // optional uint64 total_time = 7;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_time(), output);
  }

  // optional uint64 time_stamp = 8;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time_stamp(), output);
  }

  // optional uint64 forks = 9;
  if (has_forks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->forks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool terminated = 1;
  if (has_terminated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->terminated(), target);
  }

  // required bytes id = 2;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // optional uint64 instructions = 3;
  if (has_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instructions(), target);
  }

  // optional uint64 branches = 4;
  if (has_branches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->branches(), target);
  }

  // optional bytes parent_id = 5;
  if (has_parent_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->parent_id(), target);
  }

  // optional uint64 queries = 6;
  if (has_queries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->queries(), target);
  }

  // optional uint64 total_time = 7;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_time(), target);
  }

  // optional uint64 time_stamp = 8;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time_stamp(), target);
  }

  // optional uint64 forks = 9;
  if (has_forks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->forks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time_stamp = 8;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // required bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required bool terminated = 1;
    if (has_terminated()) {
      total_size += 1 + 1;
    }

    // optional bytes parent_id = 5;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parent_id());
    }

    // optional uint64 instructions = 3;
    if (has_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instructions());
    }

    // optional uint64 branches = 4;
    if (has_branches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branches());
    }

    // optional uint64 forks = 9;
    if (has_forks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->forks());
    }

    // optional uint64 queries = 6;
    if (has_queries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->queries());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 total_time = 7;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionState::MergeFrom(const ExecutionState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_terminated()) {
      set_terminated(from.terminated());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_instructions()) {
      set_instructions(from.instructions());
    }
    if (from.has_branches()) {
      set_branches(from.branches());
    }
    if (from.has_forks()) {
      set_forks(from.forks());
    }
    if (from.has_queries()) {
      set_queries(from.queries());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionState::CopyFrom(const ExecutionState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void ExecutionState::Swap(ExecutionState* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(id_, other->id_);
    std::swap(terminated_, other->terminated_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(instructions_, other->instructions_);
    std::swap(branches_, other->branches_);
    std::swap(forks_, other->forks_);
    std::swap(queries_, other->queries_);
    std::swap(total_time_, other->total_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionState_descriptor_;
  metadata.reflection = ExecutionState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionStateSet::kExecutionStateFieldNumber;
#endif  // !_MSC_VER

ExecutionStateSet::ExecutionStateSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionStateSet::InitAsDefaultInstance() {
}

ExecutionStateSet::ExecutionStateSet(const ExecutionStateSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionStateSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionStateSet::~ExecutionStateSet() {
  SharedDtor();
}

void ExecutionStateSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExecutionStateSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionStateSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionStateSet_descriptor_;
}

const ExecutionStateSet& ExecutionStateSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_States_2eproto();
  return *default_instance_;
}

ExecutionStateSet* ExecutionStateSet::default_instance_ = NULL;

ExecutionStateSet* ExecutionStateSet::New() const {
  return new ExecutionStateSet;
}

void ExecutionStateSet::Clear() {
  execution_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionStateSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .klee.data.ExecutionState execution_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execution_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_execution_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionStateSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .klee.data.ExecutionState execution_state = 1;
  for (int i = 0; i < this->execution_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->execution_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionStateSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .klee.data.ExecutionState execution_state = 1;
  for (int i = 0; i < this->execution_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->execution_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionStateSet::ByteSize() const {
  int total_size = 0;

  // repeated .klee.data.ExecutionState execution_state = 1;
  total_size += 1 * this->execution_state_size();
  for (int i = 0; i < this->execution_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->execution_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionStateSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionStateSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionStateSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionStateSet::MergeFrom(const ExecutionStateSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  execution_state_.MergeFrom(from.execution_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionStateSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionStateSet::CopyFrom(const ExecutionStateSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStateSet::IsInitialized() const {

  for (int i = 0; i < execution_state_size(); i++) {
    if (!this->execution_state(i).IsInitialized()) return false;
  }
  return true;
}

void ExecutionStateSet::Swap(ExecutionStateSet* other) {
  if (other != this) {
    execution_state_.Swap(&other->execution_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionStateSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionStateSet_descriptor_;
  metadata.reflection = ExecutionStateSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

// @@protoc_insertion_point(global_scope)
