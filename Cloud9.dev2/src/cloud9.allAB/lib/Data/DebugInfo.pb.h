// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugInfo.proto

#ifndef PROTOBUF_DebugInfo_2eproto__INCLUDED
#define PROTOBUF_DebugInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace klee {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DebugInfo_2eproto();
void protobuf_AssignDesc_DebugInfo_2eproto();
void protobuf_ShutdownFile_DebugInfo_2eproto();

class StringTable;
class StringTable_StringTableEntry;
class DebugTable;
class DebugInfo;

// ===================================================================

class StringTable_StringTableEntry : public ::google::protobuf::Message {
 public:
  StringTable_StringTableEntry();
  virtual ~StringTable_StringTableEntry();

  StringTable_StringTableEntry(const StringTable_StringTableEntry& from);

  inline StringTable_StringTableEntry& operator=(const StringTable_StringTableEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringTable_StringTableEntry& default_instance();

  void Swap(StringTable_StringTableEntry* other);

  // implements Message ----------------------------------------------

  StringTable_StringTableEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringTable_StringTableEntry& from);
  void MergeFrom(const StringTable_StringTableEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:klee.data.StringTable.StringTableEntry)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DebugInfo_2eproto();
  friend void protobuf_AssignDesc_DebugInfo_2eproto();
  friend void protobuf_ShutdownFile_DebugInfo_2eproto();

  void InitAsDefaultInstance();
  static StringTable_StringTableEntry* default_instance_;
};
// -------------------------------------------------------------------

class StringTable : public ::google::protobuf::Message {
 public:
  StringTable();
  virtual ~StringTable();

  StringTable(const StringTable& from);

  inline StringTable& operator=(const StringTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringTable& default_instance();

  void Swap(StringTable* other);

  // implements Message ----------------------------------------------

  StringTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringTable& from);
  void MergeFrom(const StringTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StringTable_StringTableEntry StringTableEntry;

  // accessors -------------------------------------------------------

  // repeated .klee.data.StringTable.StringTableEntry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::klee::data::StringTable_StringTableEntry& entry(int index) const;
  inline ::klee::data::StringTable_StringTableEntry* mutable_entry(int index);
  inline ::klee::data::StringTable_StringTableEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::klee::data::StringTable_StringTableEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::klee::data::StringTable_StringTableEntry >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:klee.data.StringTable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::klee::data::StringTable_StringTableEntry > entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DebugInfo_2eproto();
  friend void protobuf_AssignDesc_DebugInfo_2eproto();
  friend void protobuf_ShutdownFile_DebugInfo_2eproto();

  void InitAsDefaultInstance();
  static StringTable* default_instance_;
};
// -------------------------------------------------------------------

class DebugTable : public ::google::protobuf::Message {
 public:
  DebugTable();
  virtual ~DebugTable();

  DebugTable(const DebugTable& from);

  inline DebugTable& operator=(const DebugTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugTable& default_instance();

  void Swap(DebugTable* other);

  // implements Message ----------------------------------------------

  DebugTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugTable& from);
  void MergeFrom(const DebugTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .klee.data.StringTable file_table = 1;
  inline bool has_file_table() const;
  inline void clear_file_table();
  static const int kFileTableFieldNumber = 1;
  inline const ::klee::data::StringTable& file_table() const;
  inline ::klee::data::StringTable* mutable_file_table();
  inline ::klee::data::StringTable* release_file_table();
  inline void set_allocated_file_table(::klee::data::StringTable* file_table);

  // required .klee.data.StringTable function_table = 2;
  inline bool has_function_table() const;
  inline void clear_function_table();
  static const int kFunctionTableFieldNumber = 2;
  inline const ::klee::data::StringTable& function_table() const;
  inline ::klee::data::StringTable* mutable_function_table();
  inline ::klee::data::StringTable* release_function_table();
  inline void set_allocated_function_table(::klee::data::StringTable* function_table);

  // @@protoc_insertion_point(class_scope:klee.data.DebugTable)
 private:
  inline void set_has_file_table();
  inline void clear_has_file_table();
  inline void set_has_function_table();
  inline void clear_has_function_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::klee::data::StringTable* file_table_;
  ::klee::data::StringTable* function_table_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DebugInfo_2eproto();
  friend void protobuf_AssignDesc_DebugInfo_2eproto();
  friend void protobuf_ShutdownFile_DebugInfo_2eproto();

  void InitAsDefaultInstance();
  static DebugTable* default_instance_;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  void Swap(DebugInfo* other);

  // implements Message ----------------------------------------------

  DebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 file_id = 1;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  inline ::google::protobuf::int32 file_id() const;
  inline void set_file_id(::google::protobuf::int32 value);

  // optional int32 function_id = 2;
  inline bool has_function_id() const;
  inline void clear_function_id();
  static const int kFunctionIdFieldNumber = 2;
  inline ::google::protobuf::int32 function_id() const;
  inline void set_function_id(::google::protobuf::int32 value);

  // optional int32 line_number = 3;
  inline bool has_line_number() const;
  inline void clear_line_number();
  static const int kLineNumberFieldNumber = 3;
  inline ::google::protobuf::int32 line_number() const;
  inline void set_line_number(::google::protobuf::int32 value);

  // optional int32 assembly_number = 4;
  inline bool has_assembly_number() const;
  inline void clear_assembly_number();
  static const int kAssemblyNumberFieldNumber = 4;
  inline ::google::protobuf::int32 assembly_number() const;
  inline void set_assembly_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:klee.data.DebugInfo)
 private:
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_function_id();
  inline void clear_has_function_id();
  inline void set_has_line_number();
  inline void clear_has_line_number();
  inline void set_has_assembly_number();
  inline void clear_has_assembly_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 function_id_;
  ::google::protobuf::int32 line_number_;
  ::google::protobuf::int32 assembly_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DebugInfo_2eproto();
  friend void protobuf_AssignDesc_DebugInfo_2eproto();
  friend void protobuf_ShutdownFile_DebugInfo_2eproto();

  void InitAsDefaultInstance();
  static DebugInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// StringTable_StringTableEntry

// required string value = 1;
inline bool StringTable_StringTableEntry::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringTable_StringTableEntry::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringTable_StringTableEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringTable_StringTableEntry::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& StringTable_StringTableEntry::value() const {
  return *value_;
}
inline void StringTable_StringTableEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void StringTable_StringTableEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void StringTable_StringTableEntry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringTable_StringTableEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* StringTable_StringTableEntry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StringTable_StringTableEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool StringTable_StringTableEntry::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringTable_StringTableEntry::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringTable_StringTableEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringTable_StringTableEntry::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StringTable_StringTableEntry::id() const {
  return id_;
}
inline void StringTable_StringTableEntry::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// StringTable

// repeated .klee.data.StringTable.StringTableEntry entry = 1;
inline int StringTable::entry_size() const {
  return entry_.size();
}
inline void StringTable::clear_entry() {
  entry_.Clear();
}
inline const ::klee::data::StringTable_StringTableEntry& StringTable::entry(int index) const {
  return entry_.Get(index);
}
inline ::klee::data::StringTable_StringTableEntry* StringTable::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::klee::data::StringTable_StringTableEntry* StringTable::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::klee::data::StringTable_StringTableEntry >&
StringTable::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::klee::data::StringTable_StringTableEntry >*
StringTable::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// DebugTable

// required .klee.data.StringTable file_table = 1;
inline bool DebugTable::has_file_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugTable::set_has_file_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugTable::clear_has_file_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugTable::clear_file_table() {
  if (file_table_ != NULL) file_table_->::klee::data::StringTable::Clear();
  clear_has_file_table();
}
inline const ::klee::data::StringTable& DebugTable::file_table() const {
  return file_table_ != NULL ? *file_table_ : *default_instance_->file_table_;
}
inline ::klee::data::StringTable* DebugTable::mutable_file_table() {
  set_has_file_table();
  if (file_table_ == NULL) file_table_ = new ::klee::data::StringTable;
  return file_table_;
}
inline ::klee::data::StringTable* DebugTable::release_file_table() {
  clear_has_file_table();
  ::klee::data::StringTable* temp = file_table_;
  file_table_ = NULL;
  return temp;
}
inline void DebugTable::set_allocated_file_table(::klee::data::StringTable* file_table) {
  delete file_table_;
  file_table_ = file_table;
  if (file_table) {
    set_has_file_table();
  } else {
    clear_has_file_table();
  }
}

// required .klee.data.StringTable function_table = 2;
inline bool DebugTable::has_function_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugTable::set_has_function_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugTable::clear_has_function_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugTable::clear_function_table() {
  if (function_table_ != NULL) function_table_->::klee::data::StringTable::Clear();
  clear_has_function_table();
}
inline const ::klee::data::StringTable& DebugTable::function_table() const {
  return function_table_ != NULL ? *function_table_ : *default_instance_->function_table_;
}
inline ::klee::data::StringTable* DebugTable::mutable_function_table() {
  set_has_function_table();
  if (function_table_ == NULL) function_table_ = new ::klee::data::StringTable;
  return function_table_;
}
inline ::klee::data::StringTable* DebugTable::release_function_table() {
  clear_has_function_table();
  ::klee::data::StringTable* temp = function_table_;
  function_table_ = NULL;
  return temp;
}
inline void DebugTable::set_allocated_function_table(::klee::data::StringTable* function_table) {
  delete function_table_;
  function_table_ = function_table;
  if (function_table) {
    set_has_function_table();
  } else {
    clear_has_function_table();
  }
}

// -------------------------------------------------------------------

// DebugInfo

// optional int32 file_id = 1;
inline bool DebugInfo::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugInfo::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugInfo::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugInfo::clear_file_id() {
  file_id_ = 0;
  clear_has_file_id();
}
inline ::google::protobuf::int32 DebugInfo::file_id() const {
  return file_id_;
}
inline void DebugInfo::set_file_id(::google::protobuf::int32 value) {
  set_has_file_id();
  file_id_ = value;
}

// optional int32 function_id = 2;
inline bool DebugInfo::has_function_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugInfo::set_has_function_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugInfo::clear_has_function_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugInfo::clear_function_id() {
  function_id_ = 0;
  clear_has_function_id();
}
inline ::google::protobuf::int32 DebugInfo::function_id() const {
  return function_id_;
}
inline void DebugInfo::set_function_id(::google::protobuf::int32 value) {
  set_has_function_id();
  function_id_ = value;
}

// optional int32 line_number = 3;
inline bool DebugInfo::has_line_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugInfo::set_has_line_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugInfo::clear_has_line_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugInfo::clear_line_number() {
  line_number_ = 0;
  clear_has_line_number();
}
inline ::google::protobuf::int32 DebugInfo::line_number() const {
  return line_number_;
}
inline void DebugInfo::set_line_number(::google::protobuf::int32 value) {
  set_has_line_number();
  line_number_ = value;
}

// optional int32 assembly_number = 4;
inline bool DebugInfo::has_assembly_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DebugInfo::set_has_assembly_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DebugInfo::clear_has_assembly_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DebugInfo::clear_assembly_number() {
  assembly_number_ = 0;
  clear_has_assembly_number();
}
inline ::google::protobuf::int32 DebugInfo::assembly_number() const {
  return assembly_number_;
}
inline void DebugInfo::set_assembly_number(::google::protobuf::int32 value) {
  set_has_assembly_number();
  assembly_number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace klee

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DebugInfo_2eproto__INCLUDED
